{"content":"    \r\n    <h1 id=\"System_Diagnostics_ProcessStartInfo\">\r\n      <span class=\"lang-csharp\">ProcessStartInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Specifies a set of values that are used when you start a process.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]\npublic sealed class ProcessStartInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ProcessStartInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>ProcessStartInfo is used together with the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component. When you start a process using the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> class, you have access to process information in addition to that available when attaching to a running process.  </p>\n<p> You can use the ProcessStartInfo class for better control over the process you start. You must at least set the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property, either manually or using the constructor. The file name is any application or document. Here a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the <strong>Folder Options</strong> dialog box, which is available through the operating system. The <strong>Advanced</strong> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  </p>\n<p> In addition, you can set other properties that define actions to take with that file. You can specify a value specific to the type of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property for the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verb_\" data-linktype=\"relative-path\">Verb</a> property. For example, you can specify &quot;print&quot; for a document type. Additionally, you can specify <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property values to be command-line arguments to pass to the file&#39;s open procedure. For example, if you specify a text editor application in the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property, you can use the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property to specify a text file to be opened by the editor.  </p>\n<p> Standard input is usually the keyboard, and standard output and standard error are usually the monitor screen. However, you can use the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_RedirectStandardInput_\" data-linktype=\"relative-path\">RedirectStandardInput</a>, <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_RedirectStandardOutput_\" data-linktype=\"relative-path\">RedirectStandardOutput</a>, and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_RedirectStandardError_\" data-linktype=\"relative-path\">RedirectStandardError</a> properties to cause the process to get input from or return output to a file or other device. If you use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardInput_\" data-linktype=\"relative-path\">StandardInput</a>, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a>, or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> properties on the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component, you must first set the corresponding value on the ProcessStartInfo property. Otherwise, the system throws an exception when you read or write to the stream.  </p>\n<p> Set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to specify whether to start the process by using the operating system shell.  </p>\n<p> You can change the value of any ProcessStartInfo property up to the time that the process starts. After you start the process, changing these values has no effect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This class contains a link demand at the class level that applies to all members. A <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when the immediate caller does not have full-trust permission. For details about security demands, see <a href=\"../Topic/Link%20Demands.md\" data-linktype=\"relative-path\">Link Demands</a>.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo__ctor\" data-linktype=\"self-bookmark\">ProcessStartInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> class without specifying a file name with which to start the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo__ctor_System_String_\" data-linktype=\"self-bookmark\">ProcessStartInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> class and specifies a file name such as an application or document with which to start the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo__ctor_System_String_System_String_\" data-linktype=\"self-bookmark\">ProcessStartInfo(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_Arguments\" data-linktype=\"self-bookmark\">Arguments</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the set of command-line arguments to use when starting the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_CreateNoWindow\" data-linktype=\"self-bookmark\">CreateNoWindow</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to start the process in a new window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_Domain\" data-linktype=\"self-bookmark\">Domain</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that identifies the domain to use when starting the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_Environment\" data-linktype=\"self-bookmark\">Environment</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the environment variables that apply to this process and its child processes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_EnvironmentVariables\" data-linktype=\"self-bookmark\">EnvironmentVariables</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets search paths for files, directories for temporary files, application-specific options, and other similar information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_ErrorDialog\" data-linktype=\"self-bookmark\">ErrorDialog</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_ErrorDialogParentHandle\" data-linktype=\"self-bookmark\">ErrorDialogParentHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_FileName\" data-linktype=\"self-bookmark\">FileName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the application or document to start.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_LoadUserProfile\" data-linktype=\"self-bookmark\">LoadUserProfile</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_Password\" data-linktype=\"self-bookmark\">Password</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a secure string that contains the user password to use when starting the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_PasswordInClearText\" data-linktype=\"self-bookmark\">PasswordInClearText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the user password in clear text to use when starting the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_RedirectStandardError\" data-linktype=\"self-bookmark\">RedirectStandardError</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the error output of an application is written to the <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_RedirectStandardInput\" data-linktype=\"self-bookmark\">RedirectStandardInput</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the input for an application is read from the <span class=\"xref\">stem.Diagnostics.Process.StandardInput*</span> stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_RedirectStandardOutput\" data-linktype=\"self-bookmark\">RedirectStandardOutput</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the textual output of an application is written to the <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_StandardErrorEncoding\" data-linktype=\"self-bookmark\">StandardErrorEncoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the preferred encoding for error output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_StandardOutputEncoding\" data-linktype=\"self-bookmark\">StandardOutputEncoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the preferred encoding for standard output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_UserName\" data-linktype=\"self-bookmark\">UserName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the user name to be used when starting the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_UseShellExecute\" data-linktype=\"self-bookmark\">UseShellExecute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to use the operating system shell to start the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_Verb\" data-linktype=\"self-bookmark\">Verb</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the verb to use when opening the application or document specified by the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.FileName*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_Verbs\" data-linktype=\"self-bookmark\">Verbs</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the set of verbs associated with the type of file specified by the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.FileName*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_WindowStyle\" data-linktype=\"self-bookmark\">WindowStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the window state to use when the process is started.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_ProcessStartInfo_WorkingDirectory\" data-linktype=\"self-bookmark\">WorkingDirectory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property is <code>false</code>, gets or sets the working directory for the process to be started. When <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> is <code>true</code>, gets or sets the directory that contains the process to be started.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo__ctor\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessStartInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> class without specifying a file name with which to start the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ProcessStartInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must set at least the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property before you start the process. The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the <strong>Folder Options</strong> dialog box, which is available through the operating system. The <strong>Advanced</strong> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  </p>\n<p> Optionally, you can also set other properties before you start the process. The <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verb_\" data-linktype=\"relative-path\">Verb</a> property supplies actions to take, such as &quot;print&quot;, with the file indicated in the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property. The <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property supplies a way to pass command-line arguments to the file when the system opens it.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessStartInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> class and specifies a file name such as an application or document with which to start the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ProcessStartInfo (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An application or document with which to start a process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the <strong>Folder Options</strong> dialog box, which is available through the operating system. The <strong>Advanced</strong> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  </p>\n<p> You can change the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property after you call this constructor, up to the time that the process starts. After you start the process, changing these values has no effect.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo__ctor_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessStartInfo(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ProcessStartInfo (string fileName, string arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An application with which to start a process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Command-line arguments to pass to the application when the process starts.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the <strong>Folder Options</strong> dialog box, which is available through the operating system. The <strong>Advanced</strong> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  </p>\n<p> You can change the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> or <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Arguments_\" data-linktype=\"relative-path\">Arguments</a> properties after you call this constructor, up to the time that the process starts. After you start the process, changing these values has no effect.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_Arguments\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_Arguments_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Arguments</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the set of command-line arguments to use when starting the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Arguments { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A single string containing the arguments to pass to the target application specified in the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.FileName*</span> property. The default is an empty string (&quot;&quot;). On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080. On Windows 7 and later versions, the length must be less than 32699.  </p>\n<p> Arguments are parsed and interpreted by the target application, so must align with the expectations of that application. For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments. A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application. In include quotation marks in the final parsed argument, triple-escape each mark.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The first example below creates a small application (argsecho.exe) that echos its arguments to the console. The second example creates an application that invokes argsecho.exe to demonstrate different variations for the Arguments property.  </p>\n<pre><code class=\"lang-vb\" name=\"Process.Start_static#3\">&#39; Place this code into a console project called ArgsEcho to build the argsecho.exe target\n\nModule Module1\n    Sub Main()\n        Dim i As Integer = 0\n\n        For Each s As String In My.Application.CommandLineArgs\n            Console.WriteLine(&quot;[&quot; + i.ToString() + &quot;] = &quot; + s)\n            i = i + 1\n        Next\n\n        Console.WriteLine(Environment.NewLine + &quot;Press any key to exit&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_static#3\">// Place this code into a console project called ArgsEcho to build the argsecho.exe target\n\nusing System;\n\nnamespace StartArgs\n{\n    class ArgsEcho\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(&quot;Received the following arguments:<br>&quot;);\n\n            for (var i = 0; i &lt; args.Length; i++)\n            {\n                Console.WriteLine(&quot;[&quot; + i + &quot;] = &quot; + args[i]);\n            }\n            \n            Console.WriteLine(&quot;<br>Press any key to exit&quot;);\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process.Start_static#3\">// Place this code into a console project called ArgsEcho to build the argsecho.exe target\n\nusing namespace System;\n\nint main(array&lt;System::String ^&gt; ^args)\n{\n    Console::WriteLine(&quot;Received the following arguments:<br>&quot;);\n\n    for (int i = 0; i &lt; args-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;[&quot; + i + &quot;] = &quot; + args[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Press any key to exit&quot;);\n    Console::ReadLine();\n    return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.Start_static#2\">&#39; Place this code into a console project called StartArgsEcho. It depends on the\n&#39; console application named argsecho.exe.\n\nModule Module1\n    Sub Main()\n        Dim startInfo As ProcessStartInfo = New ProcessStartInfo(&quot;argsecho.exe&quot;)\n        startInfo.WindowStyle = ProcessWindowStyle.Normal\n\n        &#39; Start with one argument.\n        &#39; Output of ArgsEcho:\n        &#39;  [0]=/a            \n        startInfo.Arguments = &quot;/a&quot;\n        Process.Start(startInfo)\n\n        &#39; Start with multiple arguments separated by spaces.\n        &#39; Output of ArgsEcho:\n        &#39;  [0] = /a\n        &#39;  [1] = /b\n        &#39;  [2] = c:&nbsp;&nbsp;&nbsp;&nbsp;emp\n        startInfo.Arguments = &quot;/a /b c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;\n        Process.Start(startInfo)\n\n        &#39; An argument with spaces inside quotes is interpreted as multiple arguments.\n        &#39; Output of ArgsEcho:\n        &#39;  [0] = /a\n        &#39;  [1] = literal string arg\n        startInfo.Arguments = &quot;/a &quot;&quot;literal string arg&quot;&quot; &quot;\n        Process.Start(startInfo)\n\n        &#39; An argument inside double quotes is interpreted as if the quote weren&#39;t there,\n        &#39; that is, as separate arguments.\n        &#39; Output of ArgsEcho:\n        &#39;  [0] = /a\n        &#39;  [1] = /b:string\n        &#39;  [2] = in\n        &#39;  [3] = double\n        &#39;  [4] = quotes\n        startInfo.Arguments = &quot;/a /b:&quot;&quot;&quot;&quot;string in double quotes&quot;&quot;&quot;&quot; &quot;\n        Process.Start(startInfo)\n\n        &#39; Triple-escape quotation marks to include the character in the final argument received\n        &#39; by the target process. \n        &#39;  [0] = /a\n        &#39;  [1] = /b:&quot;quoted string&quot;\n        startInfo.Arguments = &quot;/a /b:&quot;&quot;&quot;&quot;&quot;&quot;quoted string&quot;&quot;&quot;&quot;&quot;&quot; &quot;\n        Process.Start(startInfo)\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_static#2\">// Place this code into a console project called StartArgsEcho. It depends on the\n// console application named argsecho.exe.\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Diagnostics;\n\nnamespace StartArgsEcho\n{\n    class Program\n    {\n        static void Main()\n        {\n            ProcessStartInfo startInfo = new ProcessStartInfo(&quot;argsecho.exe&quot;);\n            startInfo.WindowStyle = ProcessWindowStyle.Normal;\n\n            // Start with one argument.\n            // Output of ArgsEcho:\n            //  [0]=/a            \n            startInfo.Arguments = &quot;/a&quot;;\n            Process.Start(startInfo);\n\n            // Start with multiple arguments separated by spaces.\n            // Output of ArgsEcho:\n            //  [0] = /a\n            //  [1] = /b\n            //  [2] = c:&nbsp;&nbsp;&nbsp;&nbsp;emp\n            startInfo.Arguments = &quot;/a /b c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;;\n            Process.Start(startInfo);\n\n            // An argument with spaces inside quotes is interpreted as multiple arguments.\n            // Output of ArgsEcho:\n            //  [0] = /a\n            //  [1] = literal string arg\n            startInfo.Arguments = &quot;/a \\&quot;literal string arg\\&quot;&quot;;\n            Process.Start(startInfo);\n\n            // An argument inside double quotes is interpreted as if the quote weren&#39;t there,\n            // that is, as separate arguments. Equivalent verbatim string is @&quot;/a /b:&quot;&quot;string with quotes&quot;&quot;&quot;\n            // Output of ArgsEcho:\n            //  [0] = /a\n            //  [1] = /b:string\n            //  [2] = in\n            //  [3] = double\n            //  [4] = quotes\n            startInfo.Arguments = &quot;/a /b:\\&quot;\\&quot;string in double quotes\\&quot;\\&quot;&quot;;\n            Process.Start(startInfo);\n\n            // Triple-escape quotation marks to include the character in the final argument received\n            // by the target process. Equivalent verbatim string: @&quot;/a /b:&quot;&quot;&quot;&quot;&quot;&quot;quoted string&quot;&quot;&quot;&quot;&quot;&quot;&quot;;\n            //  [0] = /a\n            //  [1] = /b:&quot;quoted string&quot;\n            startInfo.Arguments = &quot;/a /b:\\&quot;\\&quot;\\&quot;quoted string\\&quot;\\&quot;\\&quot;&quot;;\n            Process.Start(startInfo);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process.Start_static#2\">// Place the following code into a console project called StartArgsEcho. It depends on the\n// console application named argsecho.exe.\n\nusing namespace System;\nusing namespace System::Diagnostics;\n\nint main()\n{\n    ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(&quot;argsecho.exe&quot;);\n    startInfo-&gt;WindowStyle = ProcessWindowStyle::Normal;\n\n    // Start with one argument.\n    // Output of ArgsEcho:\n    //  [0]=/a            \n    startInfo-&gt;Arguments = &quot;/a&quot;;\n    Process::Start(startInfo);\n\n    // Start with multiple arguments separated by spaces.\n    // Output of ArgsEcho:\n    //  [0] = /a\n    //  [1] = /b\n    //  [2] = c:&nbsp;&nbsp;&nbsp;&nbsp;emp\n    startInfo-&gt;Arguments = &quot;/a /b c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;;\n    Process::Start(startInfo);\n\n    // An argument with spaces inside quotes is interpreted as multiple arguments.\n    // Output of ArgsEcho:\n    //  [0] = /a\n    //  [1] = literal string arg\n    startInfo-&gt;Arguments = &quot;/a \\&quot;literal string arg\\&quot;&quot;;\n    Process::Start(startInfo);\n\n    // An argument inside double quotes is interpreted as if the quote weren&#39;t there,\n    // that is, as separate arguments. \n    // Output of ArgsEcho:\n    //  [0] = /a\n    //  [1] = /b:string\n    //  [2] = in\n    //  [3] = double\n    //  [4] = quotes\n    startInfo-&gt;Arguments = &quot;/a /b:\\&quot;\\&quot;string in double quotes\\&quot;\\&quot;&quot;;\n    Process::Start(startInfo);\n\n    // Triple-escape quotation marks to include the character in the final argument received\n    // by the target process.\n    //  [0] = /a\n    //  [1] = /b:&quot;quoted string&quot;\n    startInfo-&gt;Arguments = &quot;/a /b:\\&quot;\\&quot;\\&quot;quoted string\\&quot;\\&quot;\\&quot;&quot;;\n    Process::Start(startInfo);\n\n    return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_CreateNoWindow\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_CreateNoWindow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateNoWindow</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to start the process in a new window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CreateNoWindow { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the process should be started without creating a new window to contain it; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> property is <code>true</code> or the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a> and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Password_\" data-linktype=\"relative-path\">Password</a> properties are not <code>null</code>, the CreateNoWindow property value is ignored and a new window is created.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"Process.Start_instance#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\n\nint main()\n{\n    Process^ myProcess = gcnew Process;\n\n    try\n    {\n        myProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n        // You can start any process, HelloWorld is a do-nothing example.\n        myProcess-&gt;StartInfo-&gt;FileName = &quot;C:\\\\HelloWorld.exe&quot;;\n        myProcess-&gt;StartInfo-&gt;CreateNoWindow = true;\n        myProcess-&gt;Start();\n        // This code assumes the process you are starting will terminate itself. \n        // Given that is is started without a window so you cannot terminate it \n        // on the desktop, it must terminate itself or you can do it programmatically\n        // from this application using the Kill method.\n    }\n    catch ( Exception^ e ) \n    {\n        Console::WriteLine( e-&gt;Message );\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.Start_instance#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Public Shared Sub Main()\n            Dim myProcess As New Process()\n\n            Try\n                myProcess.StartInfo.UseShellExecute = False\n                &#39; You can start any process, HelloWorld is a do-nothing example.\n                myProcess.StartInfo.FileName = &quot;C:\\\\HelloWorld.exe&quot;\n                myProcess.StartInfo.CreateNoWindow = True\n                myProcess.Start()\n                &#39; This code assumes the process you are starting will terminate itself. \n                &#39; Given that is is started without a window so you cannot terminate it \n                &#39; on the desktop, it must terminate itself or you can do it programmatically\n                &#39; from this application using the Kill method.\n            Catch e As Exception\n                Console.WriteLine((e.Message))\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_instance#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        public static void Main()\n        {\n            Process myProcess = new Process();\n\n            try\n            {\n                myProcess.StartInfo.UseShellExecute = false;\n                // You can start any process, HelloWorld is a do-nothing example.\n                myProcess.StartInfo.FileName = &quot;C:\\\\HelloWorld.exe&quot;;\n                myProcess.StartInfo.CreateNoWindow = true;\n                myProcess.Start();\n                // This code assumes the process you are starting will terminate itself. \n                // Given that is is started without a window so you cannot terminate it \n                // on the desktop, it must terminate itself or you can do it programmatically\n                // from this application using the Kill method.\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_Domain\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_Domain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Domain</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that identifies the domain to use when starting the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Domain { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The Active Directory domain to use when starting the process. The domain property is primarily of interest to users within enterprise environments that use Active Directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_Environment\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_Environment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Environment</div>        \r\n          </div>\r\n    \r\n            <p>Gets the environment variables that apply to this process and its child processes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IDictionary&lt;string,string&gt; Environment { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>A generic dictionary containing the environment variables that apply to this process and its child processes. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The environment variables contain search paths for files, directories for temporary files, application-specific options, and other similar information. Although you cannot directly set the Environment property, you can modify the generic dictionary returned by the property. For example, the following code adds a TempPath environment variable: <code>myProcess.StartInfo.Environment.Add(&quot;TempPath&quot;, &quot;C:\\\\Temp&quot;)</code>.  You must set the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> property to <code>false</code> to start the process after changing the Environment property. If <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code>, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown when the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method is called.  </p>\n<p> On .NET Framework applications, using the Environment property is the same as using the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_EnvironmentVariables_\" data-linktype=\"relative-path\">EnvironmentVariables</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_EnvironmentVariables\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_EnvironmentVariables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnvironmentVariables</div>        \r\n          </div>\r\n    \r\n            <p>Gets search paths for files, directories for temporary files, application-specific options, and other similar information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Specialized.StringDictionary EnvironmentVariables { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a></div>\r\n                  </div>\r\n                  <p>A string dictionary that provides environment variables that apply to this process and child processes. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although you cannot set the EnvironmentVariables property, you can modify the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> returned by the property. For example, the following code adds a TempPath environment variable: <code>myProcess.StartInfo.EnvironmentVariables.Add(&quot;TempPath&quot;, &quot;C:\\\\Temp&quot;)</code>.  You must set the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> property to <code>false</code> to start the process after changing the EnvironmentVariables property. If <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code>, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown when the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method is called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_ErrorDialog\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_ErrorDialog_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ErrorDialog</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ErrorDialog { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if an error dialog box should be displayed on the screen if the process cannot be started; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> must be <code>true</code> if you want to set ErrorDialog to <code>true</code>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_ErrorDialogParentHandle\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_ErrorDialogParentHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ErrorDialogParentHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr ErrorDialogParentHandle { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A pointer to the handle of the error dialog box that results from a process start failure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_ErrorDialog_\" data-linktype=\"relative-path\">ErrorDialog</a> is <code>true</code>, the ErrorDialogParentHandle property specifies the parent window for the dialog box that is shown. It is useful to specify a parent to keep the dialog box in front of the application.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_FileName\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_FileName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FileName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the application or document to start.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string FileName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must set at least the FileName property before you start the process. The file name is any application or document. A document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the <strong>Folder Options</strong> dialog box, which is available through the operating system. The <strong>Advanced</strong> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  </p>\n<p> The set of file types available to you depends in part on the value of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> property. If <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code>, you can start any document and perform operations on the file, such as printing, with the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component. When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>false</code>, you can start only executables with the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.  </p>\n<p> You can start a ClickOnce application by setting the FileName property to the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard disk.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"Process.Start_instance#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\n\nint main()\n{\n    Process^ myProcess = gcnew Process;\n\n    try\n    {\n        myProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n        // You can start any process, HelloWorld is a do-nothing example.\n        myProcess-&gt;StartInfo-&gt;FileName = &quot;C:\\\\HelloWorld.exe&quot;;\n        myProcess-&gt;StartInfo-&gt;CreateNoWindow = true;\n        myProcess-&gt;Start();\n        // This code assumes the process you are starting will terminate itself. \n        // Given that is is started without a window so you cannot terminate it \n        // on the desktop, it must terminate itself or you can do it programmatically\n        // from this application using the Kill method.\n    }\n    catch ( Exception^ e ) \n    {\n        Console::WriteLine( e-&gt;Message );\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.Start_instance#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Public Shared Sub Main()\n            Dim myProcess As New Process()\n\n            Try\n                myProcess.StartInfo.UseShellExecute = False\n                &#39; You can start any process, HelloWorld is a do-nothing example.\n                myProcess.StartInfo.FileName = &quot;C:\\\\HelloWorld.exe&quot;\n                myProcess.StartInfo.CreateNoWindow = True\n                myProcess.Start()\n                &#39; This code assumes the process you are starting will terminate itself. \n                &#39; Given that is is started without a window so you cannot terminate it \n                &#39; on the desktop, it must terminate itself or you can do it programmatically\n                &#39; from this application using the Kill method.\n            Catch e As Exception\n                Console.WriteLine((e.Message))\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_instance#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        public static void Main()\n        {\n            Process myProcess = new Process();\n\n            try\n            {\n                myProcess.StartInfo.UseShellExecute = false;\n                // You can start any process, HelloWorld is a do-nothing example.\n                myProcess.StartInfo.FileName = &quot;C:\\\\HelloWorld.exe&quot;;\n                myProcess.StartInfo.CreateNoWindow = true;\n                myProcess.Start();\n                // This code assumes the process you are starting will terminate itself. \n                // Given that is is started without a window so you cannot terminate it \n                // on the desktop, it must terminate itself or you can do it programmatically\n                // from this application using the Kill method.\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_LoadUserProfile\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_LoadUserProfile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadUserProfile</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool LoadUserProfile { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the Windows user profile should be loaded; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is referenced if the process is being started by using the user name, password, and domain.  </p>\n<p> If the value is <code>true</code>, the user&#39;s profile in the <code>HKEY_USERS</code> registry key is loaded. Loading the profile can be time-consuming. Therefore, it is best to use this value only if you must access the information in the <code>HKEY_CURRENT_USER</code> registry key.  </p>\n<p> In Windows Server 2003 and Windows 2000, the profile is unloaded after the new process has been terminated, regardless of whether the process has created child processes.  </p>\n<p> In Windows XP, the profile is unloaded after the new process and all child processes it has created have been terminated.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_Password\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_Password_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Password</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a secure string that contains the user password to use when starting the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.SecureString Password { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </div>\r\n                  <p>The user password to use when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_WorkingDirectory_\" data-linktype=\"relative-path\">WorkingDirectory</a> property must be set if <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a> and Password are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Setting the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Domain_\" data-linktype=\"relative-path\">Domain</a>, <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a>, and the Password properties in a <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> object is the recommended practice for starting a process with user credentials.  </p>\n</div>\n<p> A <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object is like a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object in that it has a text value. However, the value of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object is automatically encrypted, it can be modified until your application marks it as read-only, and it can be deleted from computer memory by either your application or the .NET Framework garbage collector.  </p>\n<p> For more information about secure strings and an example of how to obtain a password to set this property, see the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you provide a value for the Password property, the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> property must be <code>false</code>, or an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown when the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_System_Diagnostics_ProcessStartInfo_\" data-linktype=\"relative-path\">System.Diagnostics.Process.Start(ProcessStartInfo)</a> method is called.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_PasswordInClearText\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_PasswordInClearText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordInClearText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the user password in clear text to use when starting the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PasswordInClearText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The user password in clear text.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_RedirectStandardError\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_RedirectStandardError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RedirectStandardError</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the error output of an application is written to the <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RedirectStandardError { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if error output should be written to <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span>; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes text to its standard error stream, that text is typically displayed on the console. By redirecting the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream, you can manipulate or suppress the error output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to <code>false</code> if you want to set RedirectStandardError to <code>true</code>. Otherwise, reading from the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream throws an exception.  </p>\n</div>\n<p> The redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream can be read synchronously or asynchronously. Methods such as <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> and <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadToEnd_\" data-linktype=\"relative-path\">ReadToEnd</a> perform synchronous read operations on the error output stream of the process. These synchronous read operations do not complete until the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes to its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream, or closes the stream.  </p>\n<p> In contrast, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginErrorReadLine_\" data-linktype=\"relative-path\">BeginErrorReadLine</a> starts asynchronous read operations on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream. This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The application that is processing the asynchronous output should call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_\" data-linktype=\"relative-path\">WaitForExit</a> method to ensure that the output buffer has been flushed.  </p>\n</div>\n<p> Synchronous read operations introduce a dependency between the caller reading from the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream and the child process writing to that stream. These dependencies can cause deadlock conditions. When the caller reads from the redirected stream of a child process, it is dependent on the child. The caller waits for the read operation until the child writes to the stream or closes the stream. When the child process writes enough data to fill its redirected stream, it is dependent on the parent. The child process waits for the next write operation until the parent reads from the full stream or closes the stream. The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue. You can avoid deadlocks by evaluating dependencies between the caller and child process.  </p>\n<p> For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.  </p>\n<pre><code>// Start the child process.  \n Process p = new Process();  \n // Redirect the error stream of the child process.  \n p.StartInfo.UseShellExecute = false;  \n p.StartInfo.RedirectStandardError = true;  \n p.StartInfo.FileName = &quot;Write500Lines.exe&quot;;  \n p.Start();  \n // Do not wait for the child process to exit before  \n // reading to the end of its redirected error stream.  \n // p.WaitForExit();  \n // Read the error stream first and then wait.  \n string error = p.StandardError.ReadToEnd();  \n p.WaitForExit();  \n</code></pre><p> The code example avoids a deadlock condition by calling <code>p.StandardError.ReadToEnd</code> before <code>p.WaitForExit</code>. A deadlock condition can result if the parent process calls <code>p.WaitForExit</code> before <code>p.StandardError.ReadToEnd</code> and the child process writes enough text to fill the redirected stream. The parent process would wait indefinitely for the child process to exit. The child process would wait indefinitely for the parent to read from the full <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream.  </p>\n<p> There is a similar issue when you read all text from both the standard output and standard error streams. For example, the following C# code performs a read operation on both streams.  </p>\n<pre><code>// Do not perform a synchronous read to the end of both  \n// redirected streams.  \n// string output = p.StandardOutput.ReadToEnd();  \n// string error = p.StandardError.ReadToEnd();  \n// p.WaitForExit();  \n// Use asynchronous read operations on at least one of the streams.  \np.BeginOutputReadLine();  \nstring error = p.StandardError.ReadToEnd();  \np.WaitForExit();  \n</code></pre><p> The code example avoids the deadlock condition by performing asynchronous read operations on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. A deadlock condition results if the parent process calls <code>p.StandardOutput.ReadToEnd</code> followed by <code>p.StandardError.ReadToEnd</code> and the child process writes enough text to fill its error stream. The parent process would wait indefinitely for the child process to close its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. The child process would wait indefinitely for the parent to read from the full <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream.  </p>\n<p> You can use asynchronous read operations to avoid these dependencies and their deadlock potential. Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>net use</code> command together with a user-supplied argument to map a network resource. It then reads the standard error stream of the net command and writes it to console.  </p>\n<pre><code class=\"lang-cs\" name=\"Process_StandardError#1\">            Process myProcess = new Process();\n            ProcessStartInfo myProcessStartInfo = new ProcessStartInfo(&quot;net &quot;,&quot;use &quot;+ args[0]);\n\n            myProcessStartInfo.UseShellExecute = false;\n            myProcessStartInfo.RedirectStandardError = true;\n            myProcess.StartInfo = myProcessStartInfo;\n            myProcess.Start();\n\n            StreamReader myStreamReader = myProcess.StandardError;\n            // Read the standard error of net.exe and write it on to console.\n            Console.WriteLine( myStreamReader.ReadLine());\n            myProcess.Close();\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process_StandardError#1\">      Process^ myProcess = gcnew Process;\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;net &quot;,String::Concat( &quot;use &quot;, args[ 0 ] ) );\n\n      myProcessStartInfo-&gt;UseShellExecute = false;\n      myProcessStartInfo-&gt;RedirectStandardError = true;\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n      myProcess-&gt;Start();\n\n      StreamReader^ myStreamReader = myProcess-&gt;StandardError;\n      // Read the standard error of net.exe and write it on to console.\n      Console::WriteLine( myStreamReader-&gt;ReadLine() );\n      myProcess-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_StandardError#1\">            Dim myProcess As New Process()\n            Dim myProcessStartInfo As New ProcessStartInfo(&quot;net &quot;, &quot;use &quot; + args(1))\n\n            myProcessStartInfo.UseShellExecute = False\n            myProcessStartInfo.RedirectStandardError = True\n            myProcess.StartInfo = myProcessStartInfo\n            myProcess.Start()\n\n            Dim myStreamReader As StreamReader = myProcess.StandardError\n            &#39; Read the standard error of net.exe and write it on to console.\n            Console.WriteLine(myStreamReader.ReadLine())\n            myProcess.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_RedirectStandardInput\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_RedirectStandardInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RedirectStandardInput</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the input for an application is read from the <span class=\"xref\">stem.Diagnostics.Process.StandardInput*</span> stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RedirectStandardInput { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if input should be read from <span class=\"xref\">stem.Diagnostics.Process.StandardInput*</span>; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> can read input text from its standard input stream, typically the keyboard. By redirecting the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardInput_\" data-linktype=\"relative-path\">StandardInput</a> stream, you can programmatically specify the input of a process. For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to <code>false</code> if you want to set RedirectStandardInput to <code>true</code>. Otherwise, writing to the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardInput_\" data-linktype=\"relative-path\">StandardInput</a> stream throws an exception.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates how to redirect the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardInput_\" data-linktype=\"relative-path\">StandardInput</a> stream of a process. The <code>sort</code> command is a console application that reads and sorts text input.  </p>\n<p> The example starts the <code>sort</code> command with redirected input. It then prompts the user for text, and passes the text to the <code>sort</code> process through the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardInput_\" data-linktype=\"relative-path\">StandardInput</a> stream. The <code>sort</code> results are displayed to the user on the console.  </p>\n<pre><code class=\"lang-cs\" name=\"Process_StandardInput#1\">\nusing System;\nusing System.IO;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace Process_StandardInput_Sample\n{\n   class StandardInputTest\n   {\n      static void Main()\n      {\n         Console.WriteLine(&quot;Ready to sort one or more text lines...&quot;);\n\n         // Start the Sort.exe process with redirected input.\n         // Use the sort command to sort the input text.\n         Process myProcess = new Process();\n         \n         myProcess.StartInfo.FileName = &quot;Sort.exe&quot;;\n         myProcess.StartInfo.UseShellExecute = false;\n         myProcess.StartInfo.RedirectStandardInput = true;\n\n         myProcess.Start();\n\n         StreamWriter myStreamWriter = myProcess.StandardInput;\n\n         // Prompt the user for input text lines to sort. \n         // Write each line to the StandardInput stream of\n         // the sort command.\n         String inputText;\n         int numLines = 0;\n         do \n         {\n            Console.WriteLine(&quot;Enter a line of text (or press the Enter key to stop):&quot;);\n            \n            inputText = Console.ReadLine();\n            if (inputText.Length &gt; 0)\n            {\n               numLines ++;\n               myStreamWriter.WriteLine(inputText);\n            }\n         } while (inputText.Length != 0);\n\n\n         // Write a report header to the console.\n         if (numLines &gt; 0)\n         {\n            Console.WriteLine(&quot; {0} sorted text line(s) &quot;, numLines);\n            Console.WriteLine(&quot;------------------------&quot;);\n         }\n         else \n         {\n            Console.WriteLine(&quot; No input was sorted&quot;);\n         }\n\n         // End the input stream to the sort command.\n         // When the stream closes, the sort command\n         // writes the sorted text lines to the \n         // console.\n         myStreamWriter.Close();\n\n\n         // Wait for the sort process to write the sorted text lines.\n         myProcess.WaitForExit();\n         myProcess.Close();\n       \n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process_StandardInput#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{\n   Console::WriteLine(  &quot;Ready to sort one or more text lines...&quot; );\n   \n   // Start the Sort.exe process with redirected input.\n   // Use the sort command to sort the input text.\n   Process^ myProcess = gcnew Process;\n   if ( myProcess )\n   {\n      myProcess-&gt;StartInfo-&gt;FileName =  &quot;Sort.exe&quot;;\n      myProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      myProcess-&gt;StartInfo-&gt;RedirectStandardInput = true;\n      myProcess-&gt;Start();\n      StreamWriter^ myStreamWriter = myProcess-&gt;StandardInput;\n      if ( myStreamWriter )\n      {\n         \n         // Prompt the user for input text lines to sort. \n         // Write each line to the StandardInput stream of\n         // the sort command.\n         String^ inputText;\n         int numLines = 0;\n         do\n         {\n            Console::WriteLine(  &quot;Enter a line of text (or press the Enter key to stop):&quot; );\n            inputText = Console::ReadLine();\n            if ( inputText &amp;&amp; inputText-&gt;Length &gt; 0 )\n            {\n               numLines++;\n               myStreamWriter-&gt;WriteLine( inputText );\n            }\n         }\n         while ( inputText &amp;&amp; inputText-&gt;Length != 0 );\n         \n         // Write a report header to the console.\n         if ( numLines &gt; 0 )\n         {\n            Console::WriteLine(  &quot; {0} sorted text line(s) &quot;, numLines.ToString() );\n            Console::WriteLine(  &quot;------------------------&quot; );\n         }\n         else\n         {\n            Console::WriteLine(  &quot; No input was sorted&quot; );\n         }\n         \n         // End the input stream to the sort command.\n         // When the stream closes, the sort command\n         // writes the sorted text lines to the \n         // console.\n         myStreamWriter-&gt;Close();\n      }\n      \n      // Wait for the sort process to write the sorted text lines.\n      myProcess-&gt;WaitForExit();\n      myProcess-&gt;Close();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_StandardInput#1\">\nImports System\nImports System.IO\nImports System.Diagnostics\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\nNamespace Process_StandardInput_Sample\n\n   Class StandardInputTest\n      \n      Shared Sub Main()\n          \n         Console.WriteLine(&quot;Ready to sort one or more text lines...&quot;)\n            \n         &#39; Start the Sort.exe process with redirected input.\n         &#39; Use the sort command to sort the input text.\n         Dim myProcess As New Process()\n            \n         myProcess.StartInfo.FileName = &quot;Sort.exe&quot;\n         myProcess.StartInfo.UseShellExecute = False\n         myProcess.StartInfo.RedirectStandardInput = True\n            \n         myProcess.Start()\n            \n         Dim myStreamWriter As StreamWriter = myProcess.StandardInput\n            \n         &#39; Prompt the user for input text lines to sort. \n         &#39; Write each line to the StandardInput stream of\n         &#39; the sort command.\n         Dim inputText As String\n         Dim numLines As Integer = 0\n         Do\n            Console.WriteLine(&quot;Enter a line of text (or press the Enter key to stop):&quot;)\n               \n            inputText = Console.ReadLine()\n            If inputText.Length &gt; 0 Then\n               numLines += 1\n               myStreamWriter.WriteLine(inputText)\n            End If\n         Loop While inputText.Length &lt;&gt; 0\n            \n            \n         &#39; Write a report header to the console.\n         If numLines &gt; 0 Then\n            Console.WriteLine(&quot; {0} sorted text line(s) &quot;, numLines)\n            Console.WriteLine(&quot;------------------------&quot;)\n         Else\n            Console.WriteLine(&quot; No input was sorted&quot;)\n         End If\n            \n         &#39; End the input stream to the sort command.\n         &#39; When the stream closes, the sort command\n         &#39; writes the sorted text lines to the \n         &#39; console.\n         myStreamWriter.Close()\n            \n            \n         &#39; Wait for the sort process to write the sorted text lines.\n         myProcess.WaitForExit()\n         myProcess.Close()\n         \n      End Sub &#39;Main\n   End Class  &#39;StandardInputTest\nEnd Namespace &#39;Process_StandardInput_Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_RedirectStandardOutput\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_RedirectStandardOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RedirectStandardOutput</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the textual output of an application is written to the <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RedirectStandardOutput { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if output should be written to <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span>; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes text to its standard stream, that text is typically displayed on the console. By setting RedirectStandardOutput to <code>true</code> to redirect the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, you can manipulate or suppress the output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to <code>false</code> if you want to set RedirectStandardOutput to <code>true</code>. Otherwise, reading from the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream throws an exception.  </p>\n</div>\n<p> The redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream can be read synchronously or asynchronously. Methods such as <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a>, and <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadToEnd_\" data-linktype=\"relative-path\">ReadToEnd</a> perform synchronous read operations on the output stream of the process. These synchronous read operations do not complete until the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes to its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, or closes the stream.  </p>\n<p> In contrast, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a> starts asynchronous read operations on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. This method enables a designated event handler (see <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a>) for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The application that is processing the asynchronous output should call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_\" data-linktype=\"relative-path\">WaitForExit</a> method to ensure that the output buffer has been flushed.  </p>\n</div>\n<p> Synchronous read operations introduce a dependency between the caller reading from the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream and the child process writing to that stream. These dependencies can cause deadlock conditions. When the caller reads from the redirected stream of a child process, it is dependent on the child. The caller waits for the read operation until the child writes to the stream or closes the stream. When the child process writes enough data to fill its redirected stream, it is dependent on the parent. The child process waits for the next write operation until the parent reads from the full stream or closes the stream. The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue. You can avoid deadlocks by evaluating dependencies between the caller and child process.  </p>\n<p> For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.  </p>\n<pre><code>Process p = new Process();  \np.StartInfo.UseShellExecute = false;  \np.StartInfo.RedirectStandardOutput = true;  \np.StartInfo.FileName = &quot;Write500Lines.exe&quot;;  \np.Start();  \n\n// To avoid deadlocks, always read the output stream first and then wait.  \nstring output = p.StandardOutput.ReadToEnd();  \np.WaitForExit();  \n</code></pre><p> The code example avoids a deadlock condition by calling <code>p.StandardOutput.ReadToEnd</code> before <code>p.WaitForExit</code>. A deadlock condition can result if the parent process calls <code>p.WaitForExit</code> before <code>p.StandardOutput.ReadToEnd</code> and the child process writes enough text to fill the redirected stream. The parent process would wait indefinitely for the child process to exit. The child process would wait indefinitely for the parent to read from the full <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream.  </p>\n<p> There is a similar issue when you read all text from both the standard output and standard error streams. For example, the following C# code performs a read operation on both streams.  </p>\n<pre><code>// To avoid deadlocks, use asynchronous read operations on at least one of the streams.  \n// Do not perform a synchronous read to the end of both redirected streams.  \np.BeginOutputReadLine();  \nstring error = p.StandardError.ReadToEnd();  \np.WaitForExit();  \n</code></pre><p> The code example avoids the deadlock condition by performing asynchronous read operations on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. A deadlock condition results if the parent process calls <code>p.StandardOutput.ReadToEnd</code> followed by <code>p.StandardError.ReadToEnd</code> and the child process writes enough text to fill its error stream. The parent process would wait indefinitely for the child process to close its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. The child process would wait indefinitely for the parent to read from the full <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream.  </p>\n<p> You can use asynchronous read operations to avoid these dependencies and their deadlock potential. Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"ProcessOneStream#1\">   // Run &quot;cl.exe /cld stdstr.cpp /link /out:sample.exe&quot;. UseShellExecute is false because we&#39;re specifying\n   // an executable directly and in this case depending on it being in a PATH folder. By setting\n   // RedirectStandardOutput to true, the output of cl.exe is directed to the Process.StandardOutput stream\n   // which is then displayed in this console window directly.    \n   Process^ compiler = gcnew Process;\n   compiler-&gt;StartInfo-&gt;FileName = &quot;cl.exe&quot;;\n   compiler-&gt;StartInfo-&gt;Arguments = &quot;/clr stdstr.cpp /link /out:sample.exe&quot;;\n   compiler-&gt;StartInfo-&gt;UseShellExecute = false;\n   compiler-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n   compiler-&gt;Start();\n\n   Console::WriteLine( compiler-&gt;StandardOutput-&gt;ReadToEnd() );\n\n   compiler-&gt;WaitForExit();\n</code></pre><pre><code class=\"lang-cs\" name=\"ProcessOneStream#1\">        // Run &quot;csc.exe /r:System.dll /out:sample.exe stdstr.cs&quot;. UseShellExecute is false because we&#39;re specifying\n        // an executable directly and in this case depending on it being in a PATH folder. By setting\n        // RedirectStandardOutput to true, the output of csc.exe is directed to the Process.StandardOutput stream\n        // which is then displayed in this console window directly.    \n        Process compiler = new Process();\n        compiler.StartInfo.FileName = &quot;csc.exe&quot;;\n        compiler.StartInfo.Arguments = &quot;/r:System.dll /out:sample.exe stdstr.cs&quot;;\n        compiler.StartInfo.UseShellExecute = false;\n        compiler.StartInfo.RedirectStandardOutput = true;\n        compiler.Start();    \n        \n        Console.WriteLine(compiler.StandardOutput.ReadToEnd());\n\n        compiler.WaitForExit();\n</code></pre><pre><code class=\"lang-vb\" name=\"ProcessOneStream#1\">        &#39; Run &quot;vbc.exe /reference:Microsoft.VisualBasic.dll /out:sample.exe stdstr.vb&quot;. UseShellExecute is False \n        &#39; because we&#39;re specifying an executable directly and in this case depending on it being in a PATH folder. \n        &#39; By setting RedirectStandardOutput to True, the output of csc.exe is directed to the Process.StandardOutput \n        &#39; stream which is then displayed in this console window directly.    \n        Dim compiler As New Process()\n        compiler.StartInfo.FileName = &quot;vbc.exe&quot;\n        compiler.StartInfo.Arguments = &quot;/reference:Microsoft.VisualBasic.dll /out:sample.exe stdstr.vb&quot;\n        compiler.StartInfo.UseShellExecute = False\n        compiler.StartInfo.RedirectStandardOutput = True\n        compiler.Start()\n        \n        Console.WriteLine(compiler.StandardOutput.ReadToEnd())\n        \n        compiler.WaitForExit()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_StandardErrorEncoding\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_StandardErrorEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StandardErrorEncoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the preferred encoding for error output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.Encoding StandardErrorEncoding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An object that represents the preferred encoding for error output. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of the StandardErrorEncoding property is <code>null</code>, the process uses the default standard error encoding for error output. The StandardErrorEncoding property must be set before the process is started. Setting this property does not guarantee that the process will use the specified encoding; the process will use only those encodings that it supports. The application should be tested to determine which encodings are supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_StandardOutputEncoding\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_StandardOutputEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StandardOutputEncoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the preferred encoding for standard output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.Encoding StandardOutputEncoding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An object that represents the preferred encoding for standard output. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of the StandardOutputEncoding property is <code>null</code>, the process uses the default standard output encoding for the standard output. The StandardOutputEncoding property must be set before the process is started. Setting this property does not guarantee that the process will use the specified encoding. The application should be tested to determine which encodings the process supports.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_UserName\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_UserName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the user name to be used when starting the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string UserName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The user name to use when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_WorkingDirectory_\" data-linktype=\"relative-path\">WorkingDirectory</a> property must be set if UserName and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Password_\" data-linktype=\"relative-path\">Password</a> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  </p>\n</div>\n<p> If the UserName property is not <code>null</code> or an empty string, the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> property must be <code>false</code>, or an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown when the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_System_Diagnostics_ProcessStartInfo_\" data-linktype=\"relative-path\">System.Diagnostics.Process.Start(ProcessStartInfo)</a> method is called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_UseShellExecute\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_UseShellExecute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseShellExecute</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to use the operating system shell to start the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseShellExecute { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the shell should be used when starting the process; <code>false</code> if the process should be created directly from the executable file. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property to <code>false</code> enables you to redirect input, output, and error streams.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> UseShellExecute must be <code>false</code> if the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a> property is not <code>null</code> or an empty string, or an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown when the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_System_Diagnostics_ProcessStartInfo_\" data-linktype=\"relative-path\">System.Diagnostics.Process.Start(ProcessStartInfo)</a> method is called.  </p>\n</div>\n<p> When you use the operating system shell to start processes, you can start any document (which is any registered file type associated with an executable that has a default open action) and perform operations on the file, such as printing, by using the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object. When UseShellExecute is <code>false</code>, you can start only executables by using the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> UseShellExecute must be <code>true</code> if you set the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_ErrorDialog_\" data-linktype=\"relative-path\">ErrorDialog</a> property to <code>true</code>.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_WorkingDirectory_\" data-linktype=\"relative-path\">WorkingDirectory</a> property behaves differently depending on the value of the UseShellExecute property. When UseShellExecute is <code>true</code>, the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_WorkingDirectory_\" data-linktype=\"relative-path\">WorkingDirectory</a> property specifies the location of the executable. If <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_WorkingDirectory_\" data-linktype=\"relative-path\">WorkingDirectory</a> is an empty string, it is assumed that the current directory contains the executable.  </p>\n<p> When UseShellExecute is <code>false</code>, the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_WorkingDirectory_\" data-linktype=\"relative-path\">WorkingDirectory</a> property is not used to find the executable. Instead, it is used only by the process that is started and has meaning only within the context of the new process. When UseShellExecute is <code>false</code>, the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property can be either a fully qualified path to the executable, or a simple executable name that the system will attempt to find within folders specified by the PATH environment variable.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"ProcessOneStream#1\">   // Run &quot;cl.exe /cld stdstr.cpp /link /out:sample.exe&quot;. UseShellExecute is false because we&#39;re specifying\n   // an executable directly and in this case depending on it being in a PATH folder. By setting\n   // RedirectStandardOutput to true, the output of cl.exe is directed to the Process.StandardOutput stream\n   // which is then displayed in this console window directly.    \n   Process^ compiler = gcnew Process;\n   compiler-&gt;StartInfo-&gt;FileName = &quot;cl.exe&quot;;\n   compiler-&gt;StartInfo-&gt;Arguments = &quot;/clr stdstr.cpp /link /out:sample.exe&quot;;\n   compiler-&gt;StartInfo-&gt;UseShellExecute = false;\n   compiler-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n   compiler-&gt;Start();\n\n   Console::WriteLine( compiler-&gt;StandardOutput-&gt;ReadToEnd() );\n\n   compiler-&gt;WaitForExit();\n</code></pre><pre><code class=\"lang-cs\" name=\"ProcessOneStream#1\">        // Run &quot;csc.exe /r:System.dll /out:sample.exe stdstr.cs&quot;. UseShellExecute is false because we&#39;re specifying\n        // an executable directly and in this case depending on it being in a PATH folder. By setting\n        // RedirectStandardOutput to true, the output of csc.exe is directed to the Process.StandardOutput stream\n        // which is then displayed in this console window directly.    \n        Process compiler = new Process();\n        compiler.StartInfo.FileName = &quot;csc.exe&quot;;\n        compiler.StartInfo.Arguments = &quot;/r:System.dll /out:sample.exe stdstr.cs&quot;;\n        compiler.StartInfo.UseShellExecute = false;\n        compiler.StartInfo.RedirectStandardOutput = true;\n        compiler.Start();    \n        \n        Console.WriteLine(compiler.StandardOutput.ReadToEnd());\n\n        compiler.WaitForExit();\n</code></pre><pre><code class=\"lang-vb\" name=\"ProcessOneStream#1\">        &#39; Run &quot;vbc.exe /reference:Microsoft.VisualBasic.dll /out:sample.exe stdstr.vb&quot;. UseShellExecute is False \n        &#39; because we&#39;re specifying an executable directly and in this case depending on it being in a PATH folder. \n        &#39; By setting RedirectStandardOutput to True, the output of csc.exe is directed to the Process.StandardOutput \n        &#39; stream which is then displayed in this console window directly.    \n        Dim compiler As New Process()\n        compiler.StartInfo.FileName = &quot;vbc.exe&quot;\n        compiler.StartInfo.Arguments = &quot;/reference:Microsoft.VisualBasic.dll /out:sample.exe stdstr.vb&quot;\n        compiler.StartInfo.UseShellExecute = False\n        compiler.StartInfo.RedirectStandardOutput = True\n        compiler.Start()\n        \n        Console.WriteLine(compiler.StandardOutput.ReadToEnd())\n        \n        compiler.WaitForExit()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_Verb\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_Verb_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Verb</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the verb to use when opening the application or document specified by the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.FileName*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Verb { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The action to take with the file that the process opens. The default is an empty string (&quot;&quot;), which signifies no action.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each file name extension has its own set of verbs, which can be obtained by using the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verbs_\" data-linktype=\"relative-path\">Verbs</a> property. For example, the &quot;<code>print</code>&quot; verb will print a document specified by using <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a>. The default verb can be specified by using an empty string (&quot;&quot;). Examples of verbs are &quot;Edit&quot;, &quot;Open&quot;, &quot;OpenAsReadOnly&quot;, &quot;Print&quot;, and &quot;Printto&quot;. You should use only verbs that appear in the set of verbs returned by the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verbs_\" data-linktype=\"relative-path\">Verbs</a> property.  </p>\n<p> When you use the Verb property, you must include the file name extension when you set the value of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property. The file name does not need to have an extension if you manually enter a value for the Verb property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts a new process by using the specified verb and file name. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verbs_\" data-linktype=\"relative-path\">Verbs</a> property.  </p>\n<pre><code class=\"lang-vb\" name=\"ProcessVerbs_Diagnostics#4\">                startInfo = New ProcessStartInfo(fileName)\n\n                If File.Exists(fileName) Then\n                    i = 0\n                    Dim verb As String\n                    For Each verb In startInfo.Verbs\n                        &#39; Display the possible verbs.\n                        Console.WriteLine(&quot;  {0}. {1}&quot;, i.ToString(), verb)\n                        i += 1\n                    Next verb\n                End If\n            Else\n                &#39; Return if no file is selected.\n                Return\n            End If\n\n            Console.WriteLine(&quot;Select the index of the verb.&quot;)\n            Dim index As String = Console.ReadLine()\n            If Convert.ToInt32(index) &lt; i Then\n                verbToUse = startInfo.Verbs(Convert.ToInt32(index))\n            Else\n                Return\n            End If\n\n            startInfo.Verb = verbToUse\n            If verbToUse.ToLower().IndexOf(&quot;printto&quot;) &gt;= 0 Then\n                &#39; printto implies a specific printer.  Ask for the network address.\n                &#39; The address must be in the form \\\\server\\printer.\n                Console.WriteLine(&quot;Enter the network address of the target printer:&quot;)\n                arguments = Console.ReadLine()\n                startInfo.Arguments = arguments\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"ProcessVerbs_Diagnostics#4\">                startInfo = new ProcessStartInfo(fileName);\n\n                if (File.Exists(fileName))\n                {\n                    i = 0;\n                    foreach (String verb in startInfo.Verbs)\n                    {\n                        // Display the possible verbs.\n                        Console.WriteLine(&quot;  {0}. {1}&quot;, i.ToString(), verb);\n                        i++;\n                    }\n                }\n            }\n\n            Console.WriteLine(&quot;Select the index of the verb.&quot;);\n            string index = Console.ReadLine();\n            if (Convert.ToInt32(index) &lt; i)\n                verbToUse = startInfo.Verbs[Convert.ToInt32(index)];\n            else\n                return;\n            startInfo.Verb = verbToUse;\n            if (verbToUse.ToLower().IndexOf(&quot;printto&quot;) &gt;= 0)\n            {\n                // printto implies a specific printer.  Ask for the network address.\n                // The address must be in the form \\\\server\\printer.\n                // The printer address is passed as the Arguments property.\n                Console.WriteLine(&quot;Enter the network address of the target printer:&quot;);\n                arguments = Console.ReadLine();\n                startInfo.Arguments = arguments;\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_Verbs\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_Verbs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Verbs</div>        \r\n          </div>\r\n    \r\n            <p>Gets the set of verbs associated with the type of file specified by the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.FileName*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] Verbs { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>The actions that the system can apply to the file indicated by the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.FileName*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Verbs property enables you to determine the verbs that can be used with the file specified by the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property. You can set the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verb_\" data-linktype=\"relative-path\">Verb</a> property to the value of any verb in the set. Examples of verbs are &quot;Edit&quot;, &quot;Open&quot;, &quot;OpenAsReadOnly&quot;, &quot;Print&quot;, and &quot;Printto&quot;.  </p>\n<p> When you use the Verbs property, you must include the file name extension when you set the value of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property. The file name extension determines the set of possible verbs.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the defined verbs for the chosen file name. If the user selects one of the defined verbs, the example starts a new process using the selected verb and the input file name.  </p>\n<pre><code class=\"lang-vb\" name=\"ProcessVerbs_Diagnostics#3\">Imports System\nImports System.IO\nImports System.Diagnostics\nImports System.Text\nImports System.Windows.Forms\n\n\n\nClass ProcessInformation\n    \n    &lt;STAThread()&gt;  _\n    Shared Sub Main(ByVal args() As String) \n        Dim fileName As String = &quot;&quot;\n        Dim arguments As String = &quot;&quot;\n        Dim verbToUse As String = &quot;&quot;\n        Dim i As Integer = 0\n        Dim startInfo As New ProcessStartInfo()\n        Dim openFileDialog1 As New OpenFileDialog()\n        \n        openFileDialog1.InitialDirectory = &quot;c:\\&quot;\n        openFileDialog1.Filter = &quot;txt files (*.txt)|*.txt|All files (*.*)|*.*&quot;\n        openFileDialog1.FilterIndex = 2\n        openFileDialog1.RestoreDirectory = True\n        \n        If openFileDialog1.ShowDialog() = DialogResult.OK Then\n            fileName = openFileDialog1.FileName\n            If Not (fileName Is Nothing) Then\n                startInfo = New ProcessStartInfo(fileName)\n\n                If File.Exists(fileName) Then\n                    i = 0\n                    Dim verb As String\n                    For Each verb In startInfo.Verbs\n                        &#39; Display the possible verbs.\n                        Console.WriteLine(&quot;  {0}. {1}&quot;, i.ToString(), verb)\n                        i += 1\n                    Next verb\n                End If\n            Else\n                &#39; Return if no file is selected.\n                Return\n            End If\n\n            Console.WriteLine(&quot;Select the index of the verb.&quot;)\n            Dim index As String = Console.ReadLine()\n            If Convert.ToInt32(index) &lt; i Then\n                verbToUse = startInfo.Verbs(Convert.ToInt32(index))\n            Else\n                Return\n            End If\n\n            startInfo.Verb = verbToUse\n            If verbToUse.ToLower().IndexOf(&quot;printto&quot;) &gt;= 0 Then\n                &#39; printto implies a specific printer.  Ask for the network address.\n                &#39; The address must be in the form \\\\server\\printer.\n                Console.WriteLine(&quot;Enter the network address of the target printer:&quot;)\n                arguments = Console.ReadLine()\n                startInfo.Arguments = arguments\n            End If\n            Dim newProcess As New Process\n            newProcess.StartInfo = startInfo\n\n            Try\n                newProcess.Start()\n\n                Console.WriteLine(&quot;{0} for file {1} started successfully with verb &quot;&quot;{2}&quot;&quot;!&quot;, newProcess.ProcessName, fileName, startInfo.Verb)\n            Catch e As System.ComponentModel.Win32Exception\n                Console.WriteLine(&quot;  Win32Exception caught!&quot;)\n                Console.WriteLine(&quot;  Win32 error = {0}&quot;, e.Message)\n            Catch\n                &#39; Catch this exception if the process exits quickly, \n                &#39; and the properties are not accessible.\n                Console.WriteLine(&quot;File {0} started with verb {1}&quot;, fileName, verbToUse)\n            End Try\n        End If\n    \n    End Sub &#39;Main\nEnd Class &#39;ProcessInformation\n</code></pre><pre><code class=\"lang-cs\" name=\"ProcessVerbs_Diagnostics#3\">\nusing System;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Text;\nusing System.Windows.Forms;\n\nclass ProcessInformation\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        string fileName = &quot;&quot;;\n        string arguments = &quot;&quot;;\n        string verbToUse = &quot;&quot;;\n        int i = 0;\n        ProcessStartInfo startInfo = new ProcessStartInfo();\n        OpenFileDialog openFileDialog1 = new OpenFileDialog();\n\n        openFileDialog1.InitialDirectory = &quot;c:\\\\&quot;;\n        openFileDialog1.Filter = &quot;txt files (*.txt)|*.txt|All files (*.*)|*.*&quot;;\n        openFileDialog1.FilterIndex = 2;\n        openFileDialog1.RestoreDirectory = true;\n\n        if (openFileDialog1.ShowDialog() == DialogResult.OK)\n        {\n            if ((fileName = openFileDialog1.FileName) != null)\n            {\n                startInfo = new ProcessStartInfo(fileName);\n\n                if (File.Exists(fileName))\n                {\n                    i = 0;\n                    foreach (String verb in startInfo.Verbs)\n                    {\n                        // Display the possible verbs.\n                        Console.WriteLine(&quot;  {0}. {1}&quot;, i.ToString(), verb);\n                        i++;\n                    }\n                }\n            }\n\n            Console.WriteLine(&quot;Select the index of the verb.&quot;);\n            string index = Console.ReadLine();\n            if (Convert.ToInt32(index) &lt; i)\n                verbToUse = startInfo.Verbs[Convert.ToInt32(index)];\n            else\n                return;\n            startInfo.Verb = verbToUse;\n            if (verbToUse.ToLower().IndexOf(&quot;printto&quot;) &gt;= 0)\n            {\n                // printto implies a specific printer.  Ask for the network address.\n                // The address must be in the form \\\\server\\printer.\n                // The printer address is passed as the Arguments property.\n                Console.WriteLine(&quot;Enter the network address of the target printer:&quot;);\n                arguments = Console.ReadLine();\n                startInfo.Arguments = arguments;\n            }\n\n            Process newProcess = new Process();\n            newProcess.StartInfo = startInfo;\n\n            try\n            {\n                newProcess.Start();\n\n                Console.WriteLine(\n                    &quot;{0} for file {1} started successfully with verb \\&quot;{2}\\&quot;!&quot;,\n                    newProcess.ProcessName, fileName, startInfo.Verb);\n            }\n            catch (System.ComponentModel.Win32Exception e)\n            {\n                Console.WriteLine(&quot;  Win32Exception caught!&quot;);\n                Console.WriteLine(&quot;  Win32 error = {0}&quot;,\n                    e.Message);\n            }\n            catch (System.InvalidOperationException)\n            {\n                // Catch this exception if the process exits quickly, \n                // and the properties are not accessible.\n                Console.WriteLine(&quot;File {0} started with verb {1}&quot;,\n                    fileName, verbToUse);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_WindowStyle\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_WindowStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the window state to use when the process is started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.ProcessWindowStyle WindowStyle { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.processwindowstyle\" data-linktype=\"relative-path\">ProcessWindowStyle</a></div>\r\n                  </div>\r\n                  <p>One of the enumeration values that indicates whether the process is started in a window that is maximized, minimized, normal (neither maximized nor minimized), or not visible. The default is <code>Normal</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The window style is not one of the <a class=\"xref\" href=\"system.diagnostics.processwindowstyle\" data-linktype=\"relative-path\">ProcessWindowStyle</a> enumeration members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"Process.Start_static#1\">Imports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        &#39; Opens the Internet Explorer application.\n        Public Sub OpenApplication(myFavoritesPath As String)\n            &#39; Start Internet Explorer. Defaults to the home page.\n            Process.Start(&quot;IExplore.exe&quot;)\n\n            &#39; Display the contents of the favorites folder in the browser.\n            Process.Start(myFavoritesPath)\n        End Sub &#39;OpenApplication\n\n        &#39; Opens urls and .html documents using Internet Explorer.\n        Sub OpenWithArguments()\n            &#39; url&#39;s are not considered documents. They can only be opened\n            &#39; by passing them as arguments.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;)\n\n            &#39; Start a Web page using a browser associated with .html and .asp files.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\myPath\\myFile.htm&quot;)\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\myPath\\myFile.asp&quot;)\n        End Sub &#39;OpenWithArguments\n\n        &#39; Uses the ProcessStartInfo class to start new processes,\n        &#39; both in a minimized mode.\n        Sub OpenWithStartInfo()\n            Dim startInfo As New ProcessStartInfo(&quot;IExplore.exe&quot;)\n            startInfo.WindowStyle = ProcessWindowStyle.Minimized\n\n            Process.Start(startInfo)\n\n            startInfo.Arguments = &quot;www.northwindtraders.com&quot;\n\n            Process.Start(startInfo)\n        End Sub &#39;OpenWithStartInfo\n\n        Shared Sub Main()\n            &#39; Get the path that stores favorite links.\n            Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites)\n\n            Dim myProcess As New MyProcess()\n\n            myProcess.OpenApplication(myFavoritesPath)\n            myProcess.OpenWithArguments()\n            myProcess.OpenWithStartInfo()\n        End Sub &#39;Main\n    End Class &#39;MyProcess\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_static#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        // Opens the Internet Explorer application.\n        void OpenApplication(string myFavoritesPath)\n        {\n            // Start Internet Explorer. Defaults to the home page.\n            Process.Start(&quot;IExplore.exe&quot;);\n\n            // Display the contents of the favorites folder in the browser.\n            Process.Start(myFavoritesPath);\n        }\n        \n        // Opens urls and .html documents using Internet Explorer.\n        void OpenWithArguments()\n        {\n            // url&#39;s are not considered documents. They can only be opened\n            // by passing them as arguments.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;);\n\n            // Start a Web page using a browser associated with .html and .asp files.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.htm&quot;);\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.asp&quot;);\n        }\n\n        // Uses the ProcessStartInfo class to start new processes,\n        // both in a minimized mode.\n        void OpenWithStartInfo()\n        {\n            ProcessStartInfo startInfo = new ProcessStartInfo(&quot;IExplore.exe&quot;);\n            startInfo.WindowStyle = ProcessWindowStyle.Minimized;\n\n            Process.Start(startInfo);\n\n            startInfo.Arguments = &quot;www.northwindtraders.com&quot;;\n\n            Process.Start(startInfo);\n        }\n\n        static void Main()\n        {\n            // Get the path that stores favorite links.\n            string myFavoritesPath =\n                Environment.GetFolderPath(Environment.SpecialFolder.Favorites);\n\n            MyProcess myProcess = new MyProcess();\n\n            myProcess.OpenApplication(myFavoritesPath);\n            myProcess.OpenWithArguments();\n            myProcess.OpenWithStartInfo();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process.Start_static#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\n\n// Opens the Internet Explorer application.\nvoid OpenApplication(String^ myFavoritesPath)\n{\n    // Start Internet Explorer. Defaults to the home page.\n    Process::Start(&quot;IExplore.exe&quot;);\n\n    // Display the contents of the favorites folder in the browser.\n    Process::Start(myFavoritesPath);\n}\n\n// Opens urls and .html documents using Internet Explorer.\nvoid OpenWithArguments()\n{\n    // url&#39;s are not considered documents. They can only be opened\n    // by passing them as arguments.\n    Process::Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;);\n\n    // Start a Web page using a browser associated with .html and .asp files.\n    Process::Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.htm&quot;);\n    Process::Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.asp&quot;);\n}\n\n// Uses the ProcessStartInfo class to start new processes,\n// both in a minimized mode.\nvoid OpenWithStartInfo()\n{\n    ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(&quot;IExplore.exe&quot;);\n    startInfo-&gt;WindowStyle = ProcessWindowStyle::Minimized;\n    Process::Start(startInfo);\n    startInfo-&gt;Arguments = &quot;www.northwindtraders.com&quot;;\n    Process::Start(startInfo);\n}\n\nint main()\n{\n    // Get the path that stores favorite links.\n    String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites);\n    OpenApplication(myFavoritesPath);\n    OpenWithArguments();\n    OpenWithStartInfo();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_ProcessStartInfo_WorkingDirectory\">\r\n    \r\n            <a id=\"System_Diagnostics_ProcessStartInfo_WorkingDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkingDirectory</div>        \r\n          </div>\r\n    \r\n            <p>When the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property is <code>false</code>, gets or sets the working directory for the process to be started. When <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> is <code>true</code>, gets or sets the directory that contains the process to be started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string WorkingDirectory { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>When <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> is <code>true</code>, the fully qualified name of the directory that contains the process to be started. When the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property is <code>false</code>, the working directory for the process to be started. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> The WorkingDirectory property must be set if <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a> and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Password_\" data-linktype=\"relative-path\">Password</a> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  </p>\n</div>\n<p> If the directory is already part of the system path variable, you do not have to repeat the directory&#39;s location in this property.  </p>\n<p> The WorkingDirectory property behaves differently when <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code> than when <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>false</code>. When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code>, the WorkingDirectory property specifies the location of the executable. If WorkingDirectory is an empty string, the current directory is understood to contain the executable.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code>, the working directory of the application that starts the executable is also the working directory of the executable.  </p>\n</div>\n<p> When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>false</code>, the WorkingDirectory property is not used to find the executable. Instead, its value applies to the process that is started and only has meaning within the context of the new process.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.ProcessStartInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.ProcessStartInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.Arguments\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.CreateNoWindow\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.Domain\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.Environment\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.EnvironmentVariables\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.ErrorDialog\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.FileName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.LoadUserProfile\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.Password\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.PasswordInClearText\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.RedirectStandardError\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.RedirectStandardInput\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.UserName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.Verb\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.Verbs\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.WindowStyle\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.ProcessStartInfo.WorkingDirectory\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"140c23e6-fb15-531d-e7e2-7a5acbf7b82a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies a set of values that are used when you start a process.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.ProcessStartInfo\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.ProcessStartInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.ProcessStartInfo.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.ProcessStartInfo","System.Diagnostics.ProcessStartInfo..ctor","System.Diagnostics.ProcessStartInfo.Arguments","System.Diagnostics.ProcessStartInfo.CreateNoWindow","System.Diagnostics.ProcessStartInfo.Domain","System.Diagnostics.ProcessStartInfo.Environment","System.Diagnostics.ProcessStartInfo.EnvironmentVariables","System.Diagnostics.ProcessStartInfo.ErrorDialog","System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle","System.Diagnostics.ProcessStartInfo.FileName","System.Diagnostics.ProcessStartInfo.LoadUserProfile","System.Diagnostics.ProcessStartInfo.Password","System.Diagnostics.ProcessStartInfo.PasswordInClearText","System.Diagnostics.ProcessStartInfo.RedirectStandardError","System.Diagnostics.ProcessStartInfo.RedirectStandardInput","System.Diagnostics.ProcessStartInfo.RedirectStandardOutput","System.Diagnostics.ProcessStartInfo.StandardErrorEncoding","System.Diagnostics.ProcessStartInfo.StandardOutputEncoding","System.Diagnostics.ProcessStartInfo.UserName","System.Diagnostics.ProcessStartInfo.UseShellExecute","System.Diagnostics.ProcessStartInfo.Verb","System.Diagnostics.ProcessStartInfo.Verbs","System.Diagnostics.ProcessStartInfo.WindowStyle","System.Diagnostics.ProcessStartInfo.WorkingDirectory"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.ProcessStartInfo","System::Diagnostics::ProcessStartInfo","System.Diagnostics.ProcessStartInfo.#ctor","System::Diagnostics::ProcessStartInfo::#ctor","System.Diagnostics.ProcessStartInfo.Arguments","System::Diagnostics::ProcessStartInfo::Arguments","System.Diagnostics.ProcessStartInfo.CreateNoWindow","System::Diagnostics::ProcessStartInfo::CreateNoWindow","System.Diagnostics.ProcessStartInfo.Domain","System::Diagnostics::ProcessStartInfo::Domain","System.Diagnostics.ProcessStartInfo.Environment","System::Diagnostics::ProcessStartInfo::Environment","System.Diagnostics.ProcessStartInfo.EnvironmentVariables","System::Diagnostics::ProcessStartInfo::EnvironmentVariables","System.Diagnostics.ProcessStartInfo.ErrorDialog","System::Diagnostics::ProcessStartInfo::ErrorDialog","System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle","System::Diagnostics::ProcessStartInfo::ErrorDialogParentHandle","System.Diagnostics.ProcessStartInfo.FileName","System::Diagnostics::ProcessStartInfo::FileName","System.Diagnostics.ProcessStartInfo.LoadUserProfile","System::Diagnostics::ProcessStartInfo::LoadUserProfile","System.Diagnostics.ProcessStartInfo.Password","System::Diagnostics::ProcessStartInfo::Password","System.Diagnostics.ProcessStartInfo.PasswordInClearText","System::Diagnostics::ProcessStartInfo::PasswordInClearText","System.Diagnostics.ProcessStartInfo.RedirectStandardError","System::Diagnostics::ProcessStartInfo::RedirectStandardError","System.Diagnostics.ProcessStartInfo.RedirectStandardInput","System::Diagnostics::ProcessStartInfo::RedirectStandardInput","System.Diagnostics.ProcessStartInfo.RedirectStandardOutput","System::Diagnostics::ProcessStartInfo::RedirectStandardOutput","System.Diagnostics.ProcessStartInfo.StandardErrorEncoding","System::Diagnostics::ProcessStartInfo::StandardErrorEncoding","System.Diagnostics.ProcessStartInfo.StandardOutputEncoding","System::Diagnostics::ProcessStartInfo::StandardOutputEncoding","System.Diagnostics.ProcessStartInfo.UserName","System::Diagnostics::ProcessStartInfo::UserName","System.Diagnostics.ProcessStartInfo.UseShellExecute","System::Diagnostics::ProcessStartInfo::UseShellExecute","System.Diagnostics.ProcessStartInfo.Verb","System::Diagnostics::ProcessStartInfo::Verb","System.Diagnostics.ProcessStartInfo.Verbs","System::Diagnostics::ProcessStartInfo::Verbs","System.Diagnostics.ProcessStartInfo.WindowStyle","System::Diagnostics::ProcessStartInfo::WindowStyle","System.Diagnostics.ProcessStartInfo.WorkingDirectory","System::Diagnostics::ProcessStartInfo::WorkingDirectory"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"140c23e6-fb15-531d-e7e2-7a5acbf7b82a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/ProcessStartInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ProcessStartInfo class | Microsoft Docs","_op_ogTitle":"ProcessStartInfo class","description":"Specifies a set of values that are used when you start a process.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.ProcessStartInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.processstartinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.processstartinfo","fileRelativePath":"System.Diagnostics.ProcessStartInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}