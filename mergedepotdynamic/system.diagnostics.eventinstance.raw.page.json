{"content":"    \r\n    <h1 id=\"System_Diagnostics_EventInstance\">\r\n      <span class=\"lang-csharp\">EventInstance</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents language-neutral information for an event log entry.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class EventInstance</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EventInstance</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use EventInstance to write an event log entry with a resource identifier rather than a string value. To write an event log entry, initialize the <a class=\"xref\" href=\"system.diagnostics.eventinstance#System_Diagnostics_EventInstance_InstanceId_\" data-linktype=\"relative-path\">InstanceId</a> property and pass the instance to the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method. The Event Viewer uses the instance identifier to find and display the corresponding string from the localized resource file based on current language settings. You must register the event source with the corresponding resource file before you write events using resource identifiers.  </p>\n<p> When writing events, you can set the <a class=\"xref\" href=\"system.diagnostics.eventinstance#System_Diagnostics_EventInstance_EntryType_\" data-linktype=\"relative-path\">EntryType</a> property to specify the icon that the Event Viewer displays for the entry. You can also specify a <a class=\"xref\" href=\"system.diagnostics.eventinstance#System_Diagnostics_EventInstance_CategoryId_\" data-linktype=\"relative-path\">CategoryId</a> property to specify the category that the Event Viewer displays for the entry.  </p>\n<p> The Event Viewer uses the category to filter events written by an event source. The Event Viewer can display the category as a numeric value, or it can use the category as a resource identifier to display a localized category string.  </p>\n<p> To display localized category strings in the Event Viewer, you must use an event source configured with a category resource file, and set the <a class=\"xref\" href=\"system.diagnostics.eventinstance#System_Diagnostics_EventInstance_CategoryId_\" data-linktype=\"relative-path\">CategoryId</a> to a resource identifier in the category resource file. If the event source does not have a configured category resource file, or the specified <a class=\"xref\" href=\"system.diagnostics.eventinstance#System_Diagnostics_EventInstance_CategoryId_\" data-linktype=\"relative-path\">CategoryId</a> does not index a string in the category resource file, and then the Event Viewer displays the numeric category value for that entry. Configure the category resource file, along with the number of category strings in the resource file, using the <a class=\"xref\" href=\"system.diagnostics.eventloginstaller\" data-linktype=\"relative-path\">EventLogInstaller</a> or the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a> class.  </p>\n<p> You must register a source for an event log before using EventInstance to write an event with the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method. The source must be configured for writing localized entries to the log and the source must define at least a message resource file.  </p>\n<p> Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <a class=\"xref\" href=\"system.diagnostics.eventloginstaller\" data-linktype=\"relative-path\">EventLogInstaller</a>, or using the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_CreateEventSource_\" data-linktype=\"relative-path\">CreateEventSource</a> method. You must have administrative rights on the computer to create a new event source.  </p>\n<p> For details about defining event messages and building event log resource files, see the &quot;Message Compiler&quot; topic in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com\" data-linktype=\"external\">http://msdn.microsoft.com</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventInstance__ctor_System_Int64_System_Int32_\" data-linktype=\"self-bookmark\">EventInstance(Int64,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> class using the specified resource identifiers for the localized message and category text of the event entry.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventInstance__ctor_System_Int64_System_Int32_System_Diagnostics_EventLogEntryType_\" data-linktype=\"self-bookmark\">EventInstance(Int64,Int32,EventLogEntryType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> class using the specified resource identifiers for the localized message and category text of the event entry and the specified event log entry type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventInstance_CategoryId\" data-linktype=\"self-bookmark\">CategoryId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the resource identifier that specifies the application-defined category of the event entry.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventInstance_EntryType\" data-linktype=\"self-bookmark\">EntryType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the event type of the event log entry.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_EventInstance_InstanceId\" data-linktype=\"self-bookmark\">InstanceId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the resource identifier that designates the message text of the event entry.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventInstance__ctor_System_Int64_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_EventInstance__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EventInstance(Int64,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> class using the specified resource identifiers for the localized message and category text of the event entry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public EventInstance (long instanceId, int categoryId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instanceId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A resource identifier that corresponds to a string defined in the message resource file of the event source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>categoryId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A resource identifier that corresponds to a string defined in the category resource file of the event source, or zero to specify no category for the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>instanceId</code> parameter is a negative value or a value larger than <a class=\"xref\" href=\"system.uint32#System_UInt32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> -or-  </p>\n<p> The <code>categoryId</code> parameter is a negative value or a value larger than <a class=\"xref\" href=\"system.uint16#System_UInt16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To write an informational entry to an event log, initialize an <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> and pass it to the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method. Set the <code>instanceId</code> to the resource identifier of the event message in the corresponding <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MessageResourceFile_\" data-linktype=\"relative-path\">MessageResourceFile</a> property for the source. Set the <code>categoryId</code> to a numeric category value, or the resource identifier of the event category in the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryResourceFile_\" data-linktype=\"relative-path\">CategoryResourceFile</a> property for the source; set the <code>categoryId</code> to zero for no event category. The <a class=\"xref\" href=\"system.diagnostics.eventinstance#System_Diagnostics_EventInstance_EntryType_\" data-linktype=\"relative-path\">EntryType</a> property for the new instance is set to <a class=\"xref\" href=\"system.diagnostics.eventlogentrytype\" data-linktype=\"relative-path\">EventLogEntryType</a> by default.  </p>\n<p> The Event Viewer uses the resource identifiers to display the corresponding strings from the localized resource files for the source. You must register the source with the corresponding resource files before you can write events using resource identifiers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example writes an informational event entry, and then reuses the <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#9\">   // Ensure that the source has already been registered using\n   // EventLogInstaller or EventLog.CreateEventSource.\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   if ( EventLog::SourceExists( sourceName ) )\n   {\n      // Define an informational event with no category.\n      // The message identifier corresponds to the message text in the\n      // message resource file defined for the source.\n      EventInstance ^ myEvent = gcnew EventInstance( UpdateCycleCompleteMsgId,0 );\n\n      // Write the event to the event log using the registered source.\n      EventLog::WriteEvent( sourceName, myEvent, 0 );\n\n      // Reuse the event data instance for another event entry.\n      // Set the entry category and message identifiers for\n      // the appropriate resource identifiers in the resource files\n      // for the registered source.  Set the event type to Warning.\n      myEvent-&gt;CategoryId = RefreshCategoryMsgId;\n      myEvent-&gt;EntryType = EventLogEntryType::Warning;\n      myEvent-&gt;InstanceId = ServerConnectionDownMsgId;\n\n      // Write the event to the event log using the registered source.\n      // Insert the machine name into the event message text.\n      array&lt;String^&gt;^ss = {Environment::MachineName};\n      EventLog::WriteEvent( sourceName, myEvent, ss );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Warning - event source {0} not registered&quot;, sourceName );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#9\">            &#39; Ensure that the source has already been registered using\n            &#39; EventLogInstaller or EventLog.CreateEventSource.\n            Dim sourceName as String = &quot;SampleApplicationSource&quot;\n            If EventLog.SourceExists(sourceName)\n                \n                &#39; Define an informational event with no category.\n                &#39; The message identifier corresponds to the message text in the\n                &#39; message resource file defined for the source.\n                Dim myEvent As EventInstance = New EventInstance(UpdateCycleCompleteMsgId, 0)\n                &#39; Write the event to the event log using the registered source.\n                EventLog.WriteEvent(sourceName, myEvent)\n\n                &#39; Reuse the event data instance for another event entry.\n                &#39; Set the entry category and message identifiers for\n                &#39; the appropriate resource identifiers in the resource files\n                &#39; for the registered source.  Set the event type to Warning.\n\n                myEvent.CategoryId = RefreshCategoryMsgId\n                myEvent.EntryType = EventLogEntryType.Warning\n                myEvent.InstanceId = ServerConnectionDownMsgId\n\n                &#39; Write the event to the event log using the registered source.\n                &#39; Insert the machine name into the event message text.\n                EventLog.WriteEvent(sourceName, myEvent, Environment.MachineName)\n\n            Else \n                Console.WriteLine(&quot;Warning - event source {0} not registered&quot;, _\n                    sourceName)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#9\">\n            // Ensure that the source has already been registered using\n            // EventLogInstaller or EventLog.CreateEventSource.\n\n            string sourceName = &quot;SampleApplicationSource&quot;;\n            if(EventLog.SourceExists(sourceName))\n            {\n                // Define an informational event with no category.\n                // The message identifier corresponds to the message text in the\n                // message resource file defined for the source.\n                EventInstance myEvent = new EventInstance(UpdateCycleCompleteMsgId, 0);\n                \n                // Write the event to the event log using the registered source.\n                EventLog.WriteEvent(sourceName, myEvent);\n\n                // Reuse the event data instance for another event entry.\n                // Set the entry category and message identifiers for\n                // the appropriate resource identifiers in the resource files\n                // for the registered source.  Set the event type to Warning.\n\n                myEvent.CategoryId = RefreshCategoryMsgId;\n                myEvent.EntryType = EventLogEntryType.Warning;\n                myEvent.InstanceId = ServerConnectionDownMsgId;\n\n                // Write the event to the event log using the registered source.\n                // Insert the machine name into the event message text.\n                EventLog.WriteEvent(sourceName, myEvent, Environment.MachineName);\n            }\n            else \n            {\n                Console.WriteLine(&quot;Warning - event source {0} not registered&quot;, \n                    sourceName);\n            }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventInstance__ctor_System_Int64_System_Int32_System_Diagnostics_EventLogEntryType_\">\r\n    \r\n            <a id=\"System_Diagnostics_EventInstance__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EventInstance(Int64,Int32,EventLogEntryType)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> class using the specified resource identifiers for the localized message and category text of the event entry and the specified event log entry type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instanceId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A resource identifier that corresponds to a string defined in the message resource file of the event source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>categoryId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A resource identifier that corresponds to a string defined in the category resource file of the event source, or zero to specify no category for the event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>entryType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.eventlogentrytype\" data-linktype=\"relative-path\">EventLogEntryType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.diagnostics.eventlogentrytype\" data-linktype=\"relative-path\">EventLogEntryType</a> value that indicates the event type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>entryType</code> is not a valid <a class=\"xref\" href=\"system.diagnostics.eventlogentrytype\" data-linktype=\"relative-path\">EventLogEntryType</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>instanceId</code> is a negative value or a value larger than <a class=\"xref\" href=\"system.uint32#System_UInt32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> -or-  </p>\n<p> <code>categoryId</code> is a negative value or a value larger than <a class=\"xref\" href=\"system.uint16#System_UInt16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To write an entry to an event log, initialize an <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> and pass it to the <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_WriteEvent_\" data-linktype=\"relative-path\">WriteEvent</a> method. Set the <code>instanceId</code> to the resource identifier of the event message in the corresponding <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_MessageResourceFile_\" data-linktype=\"relative-path\">MessageResourceFile</a> property for the source. Set the <code>categoryId</code> to a numeric category value, or the resource identifier of the event category in the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryResourceFile_\" data-linktype=\"relative-path\">CategoryResourceFile</a> property for the source; set the <code>categoryId</code> to zero for no event category.  </p>\n<p> The Event Viewer uses the resource identifiers to display the corresponding strings from the localized resource files for the source. You must register the source with the corresponding resource files before you can write events using resource identifiers.  </p>\n<p> Set the <code>entryType</code> to one of the pre-defined entry types. The Event Viewer uses the event type to determine which icon to display in the list view of the event log.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example writes two audit event entries to the event log <code>myNewLog</code>. The code example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#7\">   // Create the event source if it does not exist.\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   if (  !EventLog::SourceExists( sourceName ) )\n   {\n      \n      // Call a local method to register the event log source\n      // for the event log &quot;myNewLog.&quot;  Use the resource file\n      // EventLogMsgs.dll in the current directory for message text.\n      String^ messageFile = String::Format( &quot;{0}\\\\{1}&quot;, System::Environment::CurrentDirectory, &quot;EventLogMsgs.dll&quot; );\n      CreateEventSourceSample1( messageFile );\n   }\n\n   // Get the event log corresponding to the existing source.\n   String^ myLogName = EventLog::LogNameFromSourceName( sourceName, &quot;.&quot; );\n   EventLog^ myEventLog = gcnew EventLog( myLogName,&quot;.&quot;,sourceName );\n   \n   // Define two audit events.\n   // The message identifiers correspond to the message text in the\n   // message resource file defined for the source.\n   EventInstance ^ myAuditSuccessEvent = gcnew EventInstance( AuditSuccessMsgId,0,EventLogEntryType::SuccessAudit );\n   EventInstance ^ myAuditFailEvent = gcnew EventInstance( AuditFailedMsgId,0,EventLogEntryType::FailureAudit );\n   \n   // Insert the method name into the event log message.\n   array&lt;String^&gt;^insertStrings = {&quot;EventLogSamples.WriteEventSample1&quot;};\n   \n   // Write the events to the event log.\n   myEventLog-&gt;WriteEvent( myAuditSuccessEvent, insertStrings );\n   \n   // Append binary data to the audit failure event entry.\n   array&lt;Byte&gt;^binaryData = {3,4,5,6};\n   myEventLog-&gt;WriteEvent( myAuditFailEvent, binaryData, insertStrings );\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#7\">\n            Dim sourceName As String = &quot;SampleApplicationSource&quot;\n\n            &#39; Create the event source if it does not exist.\n            If Not EventLog.SourceExists(sourceName)\n   \n                &#39; Call a local method to register the event log source\n                &#39; for the event log &quot;myNewLog.&quot;  Use the resource file\n                &#39; EventLogMsgs.dll in the current directory for message text.\n\n                Dim messageFile As String =  String.Format(&quot;{0}\\\\{1}&quot;, _\n                    System.Environment.CurrentDirectory, _\n                    &quot;EventLogMsgs.dll&quot;)\n\n                CreateEventSourceSample1(messageFile)\n            End If \n\n            &#39; Get the event log corresponding to the existing source.\n            Dim myLogName As String = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;)\n        \n            Dim myEventLog As EventLog = new EventLog(myLogName, &quot;.&quot;, sourceName)\n\n            &#39; Define two audit events.\n            Dim myAuditSuccessEvent As EventInstance = new EventInstance(AuditSuccessMsgId, 0, EventLogEntryType.SuccessAudit)\n            Dim myAuditFailEvent As EventInstance = new EventInstance(AuditFailedMsgId, 0, EventLogEntryType.FailureAudit)\n\n            &#39; Insert the method name into the event log message.\n            Dim insertStrings() As String = {&quot;EventLogSamples.WriteEventSample1&quot;}\n            \n            &#39; Write the events to the event log.\n\n            myEventLog.WriteEvent(myAuditSuccessEvent, insertStrings)\n\n            &#39; Append binary data to the audit failure event entry.\n            Dim binaryData() As Byte = { 7, 8, 9, 10 }\n            myEventLog.WriteEvent(myAuditFailEvent, binaryData, insertStrings)\n \n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#7\">\n            // Create the event source if it does not exist.\n            string sourceName = &quot;SampleApplicationSource&quot;;\n            if(!EventLog.SourceExists(sourceName))\n            {\n                // Call a local method to register the event log source\n                // for the event log &quot;myNewLog.&quot;  Use the resource file\n                // EventLogMsgs.dll in the current directory for message text.\n\n                string messageFile =  String.Format(&quot;{0}\\\\{1}&quot;, \n                    System.Environment.CurrentDirectory, \n                    &quot;EventLogMsgs.dll&quot;);\n\n                CreateEventSourceSample1(messageFile);\n            }\n\n            // Get the event log corresponding to the existing source.\n            string myLogName = EventLog.LogNameFromSourceName(sourceName,&quot;.&quot;);\n       \n            EventLog myEventLog = new EventLog(myLogName, &quot;.&quot;, sourceName);\n\n            // Define two audit events.\n\n            // The message identifiers correspond to the message text in the\n            // message resource file defined for the source.\n            EventInstance myAuditSuccessEvent = new EventInstance(AuditSuccessMsgId, 0, EventLogEntryType.SuccessAudit);\n            EventInstance myAuditFailEvent = new EventInstance(AuditFailedMsgId, 0, EventLogEntryType.FailureAudit);\n\n            // Insert the method name into the event log message.\n            string [] insertStrings = {&quot;EventLogSamples.WriteEventSample1&quot;};\n            \n            // Write the events to the event log.\n\n            myEventLog.WriteEvent(myAuditSuccessEvent, insertStrings); \n\n            // Append binary data to the audit failure event entry.\n            byte [] binaryData = { 3, 4, 5, 6 };\n            myEventLog.WriteEvent(myAuditFailEvent, binaryData, insertStrings); \n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventInstance_CategoryId\">\r\n    \r\n            <a id=\"System_Diagnostics_EventInstance_CategoryId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CategoryId</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the resource identifier that specifies the application-defined category of the event entry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CategoryId { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A numeric category value or resource identifier that corresponds to a string defined in the category resource file of the event source. The default is zero, which signifies that no category will be displayed for the event entry.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property is set to a negative value or to a value larger than <a class=\"xref\" href=\"system.uint16#System_UInt16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Event log categories are application-defined values that help filter events, or provide further information about the event. For example, your application can define separate categories for different components or different operations.  </p>\n<p> Set the CategoryId property to specify the category that the Event Viewer displays for the entry. The Event Viewer can display the category as a numeric value, or it can use the CategoryId as a resource identifier to display a localized category string based on the current language settings.  </p>\n<p> To display localized category strings in the Event Viewer, you must use an event source configured with a category resource file, and set the CategoryId to a resource identifier in the category resource file. If the event source does not have a configured category resource file, or the specified CategoryId does not index a string in the category resource file, and then the Event Viewer displays the numeric category value for that entry.  </p>\n<p> You must register the source with the corresponding resource file before you write event categories using resource identifiers. Configure the category resource file, along with the number of category strings in the resource file, using the <a class=\"xref\" href=\"system.diagnostics.eventloginstaller\" data-linktype=\"relative-path\">EventLogInstaller</a> or the <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata\" data-linktype=\"relative-path\">EventSourceCreationData</a> class. When defining category strings in a resource file, the category resource identifiers must be numbered consecutively starting at 1, up to the configured <a class=\"xref\" href=\"system.diagnostics.eventsourcecreationdata#System_Diagnostics_EventSourceCreationData_CategoryCount_\" data-linktype=\"relative-path\">CategoryCount</a> property value.  </p>\n<p> Event categories are optional. If your application does not use categories, do not set the CategoryId for the event log entry.  </p>\n<p> For details about defining event messages and building event resource files, see the &quot;Message Compiler&quot; topic in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com/\" data-linktype=\"external\">http://msdn.microsoft.com</a>. For details about defining event categories in resource files, see the &quot;Event Categories&quot; topic in the Platform SDK</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example writes an informational event entry, and then reuses the <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#9\">   // Ensure that the source has already been registered using\n   // EventLogInstaller or EventLog.CreateEventSource.\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   if ( EventLog::SourceExists( sourceName ) )\n   {\n      // Define an informational event with no category.\n      // The message identifier corresponds to the message text in the\n      // message resource file defined for the source.\n      EventInstance ^ myEvent = gcnew EventInstance( UpdateCycleCompleteMsgId,0 );\n\n      // Write the event to the event log using the registered source.\n      EventLog::WriteEvent( sourceName, myEvent, 0 );\n\n      // Reuse the event data instance for another event entry.\n      // Set the entry category and message identifiers for\n      // the appropriate resource identifiers in the resource files\n      // for the registered source.  Set the event type to Warning.\n      myEvent-&gt;CategoryId = RefreshCategoryMsgId;\n      myEvent-&gt;EntryType = EventLogEntryType::Warning;\n      myEvent-&gt;InstanceId = ServerConnectionDownMsgId;\n\n      // Write the event to the event log using the registered source.\n      // Insert the machine name into the event message text.\n      array&lt;String^&gt;^ss = {Environment::MachineName};\n      EventLog::WriteEvent( sourceName, myEvent, ss );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Warning - event source {0} not registered&quot;, sourceName );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#9\">            &#39; Ensure that the source has already been registered using\n            &#39; EventLogInstaller or EventLog.CreateEventSource.\n            Dim sourceName as String = &quot;SampleApplicationSource&quot;\n            If EventLog.SourceExists(sourceName)\n                \n                &#39; Define an informational event with no category.\n                &#39; The message identifier corresponds to the message text in the\n                &#39; message resource file defined for the source.\n                Dim myEvent As EventInstance = New EventInstance(UpdateCycleCompleteMsgId, 0)\n                &#39; Write the event to the event log using the registered source.\n                EventLog.WriteEvent(sourceName, myEvent)\n\n                &#39; Reuse the event data instance for another event entry.\n                &#39; Set the entry category and message identifiers for\n                &#39; the appropriate resource identifiers in the resource files\n                &#39; for the registered source.  Set the event type to Warning.\n\n                myEvent.CategoryId = RefreshCategoryMsgId\n                myEvent.EntryType = EventLogEntryType.Warning\n                myEvent.InstanceId = ServerConnectionDownMsgId\n\n                &#39; Write the event to the event log using the registered source.\n                &#39; Insert the machine name into the event message text.\n                EventLog.WriteEvent(sourceName, myEvent, Environment.MachineName)\n\n            Else \n                Console.WriteLine(&quot;Warning - event source {0} not registered&quot;, _\n                    sourceName)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#9\">\n            // Ensure that the source has already been registered using\n            // EventLogInstaller or EventLog.CreateEventSource.\n\n            string sourceName = &quot;SampleApplicationSource&quot;;\n            if(EventLog.SourceExists(sourceName))\n            {\n                // Define an informational event with no category.\n                // The message identifier corresponds to the message text in the\n                // message resource file defined for the source.\n                EventInstance myEvent = new EventInstance(UpdateCycleCompleteMsgId, 0);\n                \n                // Write the event to the event log using the registered source.\n                EventLog.WriteEvent(sourceName, myEvent);\n\n                // Reuse the event data instance for another event entry.\n                // Set the entry category and message identifiers for\n                // the appropriate resource identifiers in the resource files\n                // for the registered source.  Set the event type to Warning.\n\n                myEvent.CategoryId = RefreshCategoryMsgId;\n                myEvent.EntryType = EventLogEntryType.Warning;\n                myEvent.InstanceId = ServerConnectionDownMsgId;\n\n                // Write the event to the event log using the registered source.\n                // Insert the machine name into the event message text.\n                EventLog.WriteEvent(sourceName, myEvent, Environment.MachineName);\n            }\n            else \n            {\n                Console.WriteLine(&quot;Warning - event source {0} not registered&quot;, \n                    sourceName);\n            }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventInstance_EntryType\">\r\n    \r\n            <a id=\"System_Diagnostics_EventInstance_EntryType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EntryType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the event type of the event log entry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.EventLogEntryType EntryType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.eventlogentrytype\" data-linktype=\"relative-path\">EventLogEntryType</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.diagnostics.eventlogentrytype\" data-linktype=\"relative-path\">EventLogEntryType</a> value that indicates the event entry type. The default value is <a class=\"xref\" href=\"system.diagnostics.eventlogentrytype\" data-linktype=\"relative-path\">EventLogEntryType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is not set to a valid <a class=\"xref\" href=\"system.diagnostics.eventlogentrytype\" data-linktype=\"relative-path\">EventLogEntryType</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each event is of a single type, which the application indicates when it reports the event. The Event Viewer uses the event type to determine which icon to display in the list view of the event log.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example writes an informational event entry, and then reuses the <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#9\">   // Ensure that the source has already been registered using\n   // EventLogInstaller or EventLog.CreateEventSource.\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   if ( EventLog::SourceExists( sourceName ) )\n   {\n      // Define an informational event with no category.\n      // The message identifier corresponds to the message text in the\n      // message resource file defined for the source.\n      EventInstance ^ myEvent = gcnew EventInstance( UpdateCycleCompleteMsgId,0 );\n\n      // Write the event to the event log using the registered source.\n      EventLog::WriteEvent( sourceName, myEvent, 0 );\n\n      // Reuse the event data instance for another event entry.\n      // Set the entry category and message identifiers for\n      // the appropriate resource identifiers in the resource files\n      // for the registered source.  Set the event type to Warning.\n      myEvent-&gt;CategoryId = RefreshCategoryMsgId;\n      myEvent-&gt;EntryType = EventLogEntryType::Warning;\n      myEvent-&gt;InstanceId = ServerConnectionDownMsgId;\n\n      // Write the event to the event log using the registered source.\n      // Insert the machine name into the event message text.\n      array&lt;String^&gt;^ss = {Environment::MachineName};\n      EventLog::WriteEvent( sourceName, myEvent, ss );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Warning - event source {0} not registered&quot;, sourceName );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#9\">            &#39; Ensure that the source has already been registered using\n            &#39; EventLogInstaller or EventLog.CreateEventSource.\n            Dim sourceName as String = &quot;SampleApplicationSource&quot;\n            If EventLog.SourceExists(sourceName)\n                \n                &#39; Define an informational event with no category.\n                &#39; The message identifier corresponds to the message text in the\n                &#39; message resource file defined for the source.\n                Dim myEvent As EventInstance = New EventInstance(UpdateCycleCompleteMsgId, 0)\n                &#39; Write the event to the event log using the registered source.\n                EventLog.WriteEvent(sourceName, myEvent)\n\n                &#39; Reuse the event data instance for another event entry.\n                &#39; Set the entry category and message identifiers for\n                &#39; the appropriate resource identifiers in the resource files\n                &#39; for the registered source.  Set the event type to Warning.\n\n                myEvent.CategoryId = RefreshCategoryMsgId\n                myEvent.EntryType = EventLogEntryType.Warning\n                myEvent.InstanceId = ServerConnectionDownMsgId\n\n                &#39; Write the event to the event log using the registered source.\n                &#39; Insert the machine name into the event message text.\n                EventLog.WriteEvent(sourceName, myEvent, Environment.MachineName)\n\n            Else \n                Console.WriteLine(&quot;Warning - event source {0} not registered&quot;, _\n                    sourceName)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#9\">\n            // Ensure that the source has already been registered using\n            // EventLogInstaller or EventLog.CreateEventSource.\n\n            string sourceName = &quot;SampleApplicationSource&quot;;\n            if(EventLog.SourceExists(sourceName))\n            {\n                // Define an informational event with no category.\n                // The message identifier corresponds to the message text in the\n                // message resource file defined for the source.\n                EventInstance myEvent = new EventInstance(UpdateCycleCompleteMsgId, 0);\n                \n                // Write the event to the event log using the registered source.\n                EventLog.WriteEvent(sourceName, myEvent);\n\n                // Reuse the event data instance for another event entry.\n                // Set the entry category and message identifiers for\n                // the appropriate resource identifiers in the resource files\n                // for the registered source.  Set the event type to Warning.\n\n                myEvent.CategoryId = RefreshCategoryMsgId;\n                myEvent.EntryType = EventLogEntryType.Warning;\n                myEvent.InstanceId = ServerConnectionDownMsgId;\n\n                // Write the event to the event log using the registered source.\n                // Insert the machine name into the event message text.\n                EventLog.WriteEvent(sourceName, myEvent, Environment.MachineName);\n            }\n            else \n            {\n                Console.WriteLine(&quot;Warning - event source {0} not registered&quot;, \n                    sourceName);\n            }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_EventInstance_InstanceId\">\r\n    \r\n            <a id=\"System_Diagnostics_EventInstance_InstanceId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InstanceId</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the resource identifier that designates the message text of the event entry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long InstanceId { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A resource identifier that corresponds to a string defined in the message resource file of the event source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property is set to a negative value or to a value larger than <a class=\"xref\" href=\"system.uint32#System_UInt32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The InstanceId property uniquely identifies an event entry for a configured event source. For events defined in message resource files, the InstanceId corresponds to the resource identifier compiled from the message definition fields in the message text file. Your application can write localized event log entries by setting the InstanceId to a resource identifier. The Event Viewer uses the InstanceId resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You must register the source with the corresponding resource file before you write events using resource identifiers.  </p>\n<p> For details about defining event messages and building event log resource files, see the &quot;Message Compiler&quot; topic in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com/\" data-linktype=\"external\">http://msdn.microsoft.com</a>. For details about event log identifiers, see the &quot;Event Identifiers&quot; topic in the Platform SDK.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example writes an informational event entry, and then reuses the <a class=\"xref\" href=\"system.diagnostics.eventinstance\" data-linktype=\"relative-path\">EventInstance</a> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  </p>\n<pre><code class=\"lang-cpp\" name=\"EventLog_WriteEvent#9\">   // Ensure that the source has already been registered using\n   // EventLogInstaller or EventLog.CreateEventSource.\n   String^ sourceName = &quot;SampleApplicationSource&quot;;\n   if ( EventLog::SourceExists( sourceName ) )\n   {\n      // Define an informational event with no category.\n      // The message identifier corresponds to the message text in the\n      // message resource file defined for the source.\n      EventInstance ^ myEvent = gcnew EventInstance( UpdateCycleCompleteMsgId,0 );\n\n      // Write the event to the event log using the registered source.\n      EventLog::WriteEvent( sourceName, myEvent, 0 );\n\n      // Reuse the event data instance for another event entry.\n      // Set the entry category and message identifiers for\n      // the appropriate resource identifiers in the resource files\n      // for the registered source.  Set the event type to Warning.\n      myEvent-&gt;CategoryId = RefreshCategoryMsgId;\n      myEvent-&gt;EntryType = EventLogEntryType::Warning;\n      myEvent-&gt;InstanceId = ServerConnectionDownMsgId;\n\n      // Write the event to the event log using the registered source.\n      // Insert the machine name into the event message text.\n      array&lt;String^&gt;^ss = {Environment::MachineName};\n      EventLog::WriteEvent( sourceName, myEvent, ss );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Warning - event source {0} not registered&quot;, sourceName );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLog_WriteEvent#9\">            &#39; Ensure that the source has already been registered using\n            &#39; EventLogInstaller or EventLog.CreateEventSource.\n            Dim sourceName as String = &quot;SampleApplicationSource&quot;\n            If EventLog.SourceExists(sourceName)\n                \n                &#39; Define an informational event with no category.\n                &#39; The message identifier corresponds to the message text in the\n                &#39; message resource file defined for the source.\n                Dim myEvent As EventInstance = New EventInstance(UpdateCycleCompleteMsgId, 0)\n                &#39; Write the event to the event log using the registered source.\n                EventLog.WriteEvent(sourceName, myEvent)\n\n                &#39; Reuse the event data instance for another event entry.\n                &#39; Set the entry category and message identifiers for\n                &#39; the appropriate resource identifiers in the resource files\n                &#39; for the registered source.  Set the event type to Warning.\n\n                myEvent.CategoryId = RefreshCategoryMsgId\n                myEvent.EntryType = EventLogEntryType.Warning\n                myEvent.InstanceId = ServerConnectionDownMsgId\n\n                &#39; Write the event to the event log using the registered source.\n                &#39; Insert the machine name into the event message text.\n                EventLog.WriteEvent(sourceName, myEvent, Environment.MachineName)\n\n            Else \n                Console.WriteLine(&quot;Warning - event source {0} not registered&quot;, _\n                    sourceName)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"EventLog_WriteEvent#9\">\n            // Ensure that the source has already been registered using\n            // EventLogInstaller or EventLog.CreateEventSource.\n\n            string sourceName = &quot;SampleApplicationSource&quot;;\n            if(EventLog.SourceExists(sourceName))\n            {\n                // Define an informational event with no category.\n                // The message identifier corresponds to the message text in the\n                // message resource file defined for the source.\n                EventInstance myEvent = new EventInstance(UpdateCycleCompleteMsgId, 0);\n                \n                // Write the event to the event log using the registered source.\n                EventLog.WriteEvent(sourceName, myEvent);\n\n                // Reuse the event data instance for another event entry.\n                // Set the entry category and message identifiers for\n                // the appropriate resource identifiers in the resource files\n                // for the registered source.  Set the event type to Warning.\n\n                myEvent.CategoryId = RefreshCategoryMsgId;\n                myEvent.EntryType = EventLogEntryType.Warning;\n                myEvent.InstanceId = ServerConnectionDownMsgId;\n\n                // Write the event to the event log using the registered source.\n                // Insert the machine name into the event message text.\n                EventLog.WriteEvent(sourceName, myEvent, Environment.MachineName);\n            }\n            else \n            {\n                Console.WriteLine(&quot;Warning - event source {0} not registered&quot;, \n                    sourceName);\n            }\n</code></pre><p> The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  </p>\n<pre><code>; // EventLogMsgs.mc  \n; // ********************************************************  \n\n; // Use the following commands to build this file:  \n\n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n\n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n\nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n\nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n\nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n\n; // - Event messages -  \n; // *********************************  \n\nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n\nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n\nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n\nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n\nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n\nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n\n; // - Event log display name -  \n; // ********************************************************  \n\nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n\n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n\nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.EventInstance.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.EventInstance.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventInstance\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventInstance..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventInstance.CategoryId\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventInstance.EntryType\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventInstance.InstanceId\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d764d196-ede4-a3d4-f8ef-7f28df0a8464\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Diagnostics\\EventInstance.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents language-neutral information for an event log entry.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.EventInstance\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.EventInstance.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.EventInstance.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.EventInstance","System.Diagnostics.EventInstance..ctor","System.Diagnostics.EventInstance.CategoryId","System.Diagnostics.EventInstance.EntryType","System.Diagnostics.EventInstance.InstanceId"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.EventInstance","System::Diagnostics::EventInstance","System.Diagnostics.EventInstance.#ctor","System::Diagnostics::EventInstance::#ctor","System.Diagnostics.EventInstance.CategoryId","System::Diagnostics::EventInstance::CategoryId","System.Diagnostics.EventInstance.EntryType","System::Diagnostics::EventInstance::EntryType","System.Diagnostics.EventInstance.InstanceId","System::Diagnostics::EventInstance::InstanceId"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d764d196-ede4-a3d4-f8ef-7f28df0a8464","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Diagnostics\\EventInstance.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/EventInstance.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EventInstance class | Microsoft Docs","_op_ogTitle":"EventInstance class","description":"Represents language-neutral information for an event log entry.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.EventInstance","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.eventinstance","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.eventinstance","fileRelativePath":"System.Diagnostics.EventInstance.html"},"themesRelativePathToOutputRoot":"_themes/"}