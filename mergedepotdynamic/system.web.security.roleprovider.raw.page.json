{"content":"    \r\n    <h1 id=\"System_Web_Security_RoleProvider\">\r\n      <span class=\"lang-csharp\">RoleProvider</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines the contract that ASP.NET implements to provide role-management services using custom role providers.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\npublic abstract class RoleProvider : System.Configuration.Provider.ProviderBase</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.provider.providerbase\" data-linktype=\"relative-path\">System.Configuration.Provider.ProviderBase</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RoleProvider</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Description\" data-linktype=\"relative-path\">Description</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Initialize_System_String_System_Collections_Specialized_NameValueCollection_\" data-linktype=\"relative-path\">Initialize(String,NameValueCollection)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Name\" data-linktype=\"relative-path\">Name</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>ASP.NET role management is designed to enable you to easily use a number of different role providers for your ASP.NET applications. You can use the supplied role providers that are included with the .NET Framework, or you can implement your own provider.  </p>\n<p> When implementing a custom role provider, you are required to inherit the RoleProvider abstract class.  </p>\n<p> There are two primary reasons for creating a custom role provider.  </p>\n<ul>\n<li><p>You need to store role information in a data source that is not supported by the role providers included with the .NET Framework, such as a FoxPro database, an Oracle database, or other data sources.  </p>\n</li>\n<li><p>You need to manage role information using a database schema that is different from the database schema used by the providers that ship with the .NET Framework. A common example of this would be role data that already exists in a SQL Server database for a company or Web site.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider__ctor\" data-linktype=\"self-bookmark\">RoleProvider()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.security.roleprovider\" data-linktype=\"relative-path\">RoleProvider</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_ApplicationName\" data-linktype=\"self-bookmark\">ApplicationName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the application to store and retrieve role information for.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_AddUsersToRoles_System_String___System_String___\" data-linktype=\"self-bookmark\">AddUsersToRoles(String[],String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified user names to the specified roles for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_CreateRole_System_String_\" data-linktype=\"self-bookmark\">CreateRole(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a new role to the data source for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_DeleteRole_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">DeleteRole(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes a role from the data source for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_FindUsersInRole_System_String_System_String_\" data-linktype=\"self-bookmark\">FindUsersInRole(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of user names in a role where the user name contains the specified user name to match.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_GetAllRoles\" data-linktype=\"self-bookmark\">GetAllRoles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list of all the roles for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_GetRolesForUser_System_String_\" data-linktype=\"self-bookmark\">GetRolesForUser(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list of the roles that a specified user is in for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_GetUsersInRole_System_String_\" data-linktype=\"self-bookmark\">GetUsersInRole(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list of users in the specified role for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_IsUserInRole_System_String_System_String_\" data-linktype=\"self-bookmark\">IsUserInRole(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the specified user is in the specified role for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_RemoveUsersFromRoles_System_String___System_String___\" data-linktype=\"self-bookmark\">RemoveUsersFromRoles(String[],String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the specified user names from the specified roles for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_Security_RoleProvider_RoleExists_System_String_\" data-linktype=\"self-bookmark\">RoleExists(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the specified role name already exists in the role data source for the configured <code>applicationName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider__ctor\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RoleProvider()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.security.roleprovider\" data-linktype=\"relative-path\">RoleProvider</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected RoleProvider ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You are not required to implement a constructor for a class that inherits the <a class=\"xref\" href=\"system.web.security.roleprovider\" data-linktype=\"relative-path\">RoleProvider</a> abstract class. Initialization values for a <a class=\"xref\" href=\"system.web.security.roleprovider\" data-linktype=\"relative-path\">RoleProvider</a> implementation are passed to the <a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Initialize_\" data-linktype=\"relative-path\">Initialize</a> method implementation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_ApplicationName\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_ApplicationName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplicationName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the application to store and retrieve role information for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string ApplicationName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the application to store and retrieve role information for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ApplicationName is used by the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to associate users and roles with different applications. This enables multiple applications to use the same database to store user and role information without running into conflicts between duplicate user names or role names. Multiple ASP.NET applications can use the same database by specifying the same value in the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property. The <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property can be set programmatically, or it can be set declaratively in the configuration file for the Web application using the <code>applicationName</code> attribute.  </p>\n<p> If no ApplicationName property is specified, we recommend that the <a class=\"xref\" href=\"system.web.hosting.hostingenvironment#System_Web_Hosting_HostingEnvironment_ApplicationVirtualPath_\" data-linktype=\"relative-path\">ApplicationVirtualPath</a> property value be used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the ApplicationName property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#1\">private string pApplicationName;\n\npublic override string ApplicationName\n{\n  get { return pApplicationName; }\n  set { pApplicationName = value; }\n} \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#1\">Private pApplicationName As String\n\nPublic Overrides Property ApplicationName As String \n  Get\n    Return pApplicationName\n  End Get\n  Set\n    pApplicationName = value\n  End Set\nEnd Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_AddUsersToRoles_System_String___System_String___\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_AddUsersToRoles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddUsersToRoles(String[],String[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified user names to the specified roles for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void AddUsersToRoles (string[] usernames, string[] roleNames);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>usernames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string array of user names to be added to the specified roles.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>roleNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string array of the role names to add the specified user names to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>AddUsersToRoles is called by the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to associate the specified users with the specified roles at the data source. Roles are added to the configured <a class=\"xref\" href=\"system.web.security.roleprovider#System_Web_Security_RoleProvider_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a>.  </p>\n<p> If any of the specified role names are not found for the configured <code>applicationName</code>, we recommend that your provider throw a <a class=\"xref\" href=\"system.configuration.provider.providerexception\" data-linktype=\"relative-path\">ProviderException</a>.  </p>\n<p> If any of the specified user names are not associated with any of the specified role names for the configured <code>applicationName</code>, we recommend that your provider throw a <a class=\"xref\" href=\"system.configuration.provider.providerexception\" data-linktype=\"relative-path\">ProviderException</a>.  </p>\n<p> If any of the specified user names is <code>null</code> or is an empty string, we recommend that your provider throw an exception.  </p>\n<p> If any of the specified role names is <code>null</code> or is an empty string, we recommend that your provider throw an exception.  </p>\n<p> If your data source supports transactions, we recommend that you include each add operation in a transaction and that you roll back the transaction and throw an exception if any add operation fails.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the AddUsersToRoles method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#2\">public override void AddUsersToRoles(string[]  usernames, string[] rolenames)\n{\n  foreach (string rolename in rolenames)\n  {\n    if (rolename == null || rolename == &quot;&quot;)\n      throw new ProviderException(&quot;Role name cannot be empty or null.&quot;);\n    if (!RoleExists(rolename))\n      throw new ProviderException(&quot;Role name not found.&quot;);\n  }\n\n  foreach (string username in usernames)\n  {\n    if (username == null || username == &quot;&quot;)\n      throw new ProviderException(&quot;User name cannot be empty or null.&quot;);\n    if (username.Contains(&quot;,&quot;))\n      throw new ArgumentException(&quot;User names cannot contain commas.&quot;);\n\n    foreach (string rolename in rolenames)\n    {\n      if (IsUserInRole(username, rolename))\n        throw new ProviderException(&quot;User is already in role.&quot;);\n    }\n  }\n\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;INSERT INTO UsersInRoles &quot;  +\n                                    &quot; (Username, Rolename, ApplicationName) &quot; +\n                                    &quot; Values(?, ?, ?)&quot;, conn);\n\n  OdbcParameter userParm = cmd.Parameters.Add(&quot;@Username&quot;, OdbcType.VarChar, 255);\n  OdbcParameter roleParm = cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255);\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  try\n  {\n    conn.Open();\n\n    foreach (string username in usernames)\n    {\n      foreach (string rolename in rolenames)\n      {\n        userParm.Value = username;\n        roleParm.Value = rolename;\n        cmd.ExecuteNonQuery();\n      }\n    }\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n  }\n  finally\n  {\n    conn.Close();      \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#2\">Public Overrides Sub AddUsersToRoles(usernames As String(), rolenames As String()) \n\n  For Each rolename As String In rolenames\n    If rolename Is Nothing OrElse rolename = &quot;&quot; Then _\n      Throw New ProviderException(&quot;Role name cannot be empty or null.&quot;)\n    If Not RoleExists(rolename) Then _\n      Throw New ProviderException(&quot;Role name not found.&quot;)\n  Next\n\n  For Each username As String in usernames\n    If username Is Nothing OrElse username = &quot;&quot; Then _\n      Throw New ProviderException(&quot;User name cannot be empty or null.&quot;)\n    If username.Contains(&quot;,&quot;) Then _\n      Throw New ArgumentException(&quot;User names cannot contain commas.&quot;)\n\n    For Each rolename As String In rolenames\n      If IsUserInRole(username, rolename) Then\n        Throw New ProviderException(&quot;User is already in role.&quot;)\n      End If\n    Next\n  Next\n\n\n  Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;INSERT INTO UsersInRoles &quot; &amp; _\n                                           &quot; (Username, Rolename, ApplicationName) &quot; &amp; _\n                                           &quot; Values(?, ?, ?)&quot;, conn)\n\n  Dim userParm As OdbcParameter = cmd.Parameters.Add(&quot;@Username&quot;, OdbcType.VarChar, 255)\n  Dim roleParm As OdbcParameter = cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255)\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n  Try\n    conn.Open()\n\n    For Each username As String In usernames\n      For Each rolename As String In rolenames\n        userParm.Value = username\n        roleParm.Value = rolename\n        cmd.ExecuteNonQuery()\n      Next\n    Next\n  Catch e As OdbcException\n    &#39; Handle exception.\n  Finally\n    conn.Close()      \n  End Try\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_CreateRole_System_String_\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_CreateRole_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateRole(String)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a new role to the data source for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void CreateRole (string roleName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>roleName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the role to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CreateRole is called by the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_CreateRole_\" data-linktype=\"relative-path\">CreateRole</a> method of the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to add the specified role to the data source for the configured <a class=\"xref\" href=\"system.web.security.roleprovider#System_Web_Security_RoleProvider_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a>.  </p>\n<p> If the specified role name already exists for the configured <code>applicationName</code>, is <code>null</code>, or is an empty string, we recommend that your provider throw an exception.  </p>\n<p> If the specified role name contains a comma, we recommend that your provider throw an exception.  </p>\n<p> If your data source restricts the length of the role name, for example, through a fixed-length column of a table in a database, we recommend that you throw an exception if the role name exceeds the maximum length allowed by the data source.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the CreateRole method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#3\">public override void CreateRole(string rolename)\n{ \n  if (rolename == null || rolename == &quot;&quot;)\n    throw new ProviderException(&quot;Role name cannot be empty or null.&quot;);\n  if (rolename.Contains(&quot;,&quot;))\n    throw new ArgumentException(&quot;Role names cannot contain commas.&quot;);\n  if (RoleExists(rolename))\n    throw new ProviderException(&quot;Role name already exists.&quot;);\n  if (rolename.Length &gt; 255)\n    throw new ProviderException(&quot;Role name cannot exceed 255 characters.&quot;);\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;INSERT INTO Roles &quot;  +\n                                    &quot; (Rolename, ApplicationName) &quot; +\n                                    &quot; Values(?, ?)&quot;, conn);\n\n  cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename;\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  try\n  {\n    conn.Open();\n\n    cmd.ExecuteNonQuery();\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n  }\n  finally\n  {\n    conn.Close();      \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#3\">Public Overrides Sub CreateRole(rolename As String) \n  If rolename Is Nothing OrElse rolename = &quot;&quot; Then _\n    Throw New ProviderException(&quot;Role name cannot be empty or null.&quot;)\n  If rolename.Contains(&quot;,&quot;) Then _\n    Throw New ArgumentException(&quot;Role names cannot contain commas.&quot;)\n  If RoleExists(rolename) Then _\n    Throw New ProviderException(&quot;Role name already exists.&quot;)\n  If rolename.Length &gt; 255 Then _\n    Throw New ProviderException(&quot;Role name cannot exceed 255 characters.&quot;)\n\n  Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;INSERT INTO Roles &quot; &amp; _\n                                                     &quot; (Rolename, ApplicationName) &quot; &amp; _\n                                                     &quot; Values(?, ?)&quot;, conn)\n\n            cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Try\n                conn.Open()\n\n                cmd.ExecuteNonQuery()\n            Catch e As OdbcException\n                &#39; Handle exception.\n            Finally\n                conn.Close()\n            End Try\n        End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_DeleteRole_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_DeleteRole_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteRole(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Removes a role from the data source for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool DeleteRole (string roleName, bool throwOnPopulatedRole);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>roleName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the role to delete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnPopulatedRole</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, throw an exception if <code>roleName</code> has one or more members and do not delete <code>roleName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the role was successfully deleted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>DeleteRole is called by the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_DeleteRole_\" data-linktype=\"relative-path\">DeleteRole</a> and the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_DeleteRole_\" data-linktype=\"relative-path\">DeleteRole</a> methods of the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to delete the specified role from the data source for the configured <a class=\"xref\" href=\"system.web.security.roleprovider#System_Web_Security_RoleProvider_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a>.  </p>\n<p> When you delete a role from the data source, ensure that you also delete any associations between a user name and the deleted role for the configured <code>applicationName</code>.  </p>\n<p> If <code>throwOnPopulatedRole</code> is <code>true</code>, and the role identified by the <code>roleName</code> parameter has one or more members, throw a <a class=\"xref\" href=\"system.configuration.provider.providerexception\" data-linktype=\"relative-path\">ProviderException</a> and do not delete the role. If <code>throwOnPopulatedRole</code> is <code>false</code>, then delete the role whether it is empty or not.  </p>\n<p> If the specified role name does not exist, is <code>null</code>, or is an empty string, we recommend that your provider throw an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the DeleteRole method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#4\">public override bool DeleteRole(string rolename, bool throwOnPopulatedRole)\n{\n  if (!RoleExists(rolename))\n  {\n    throw new ProviderException(&quot;Role does not exist.&quot;);\n  }\n\n  if (throwOnPopulatedRole &amp;&amp; GetUsersInRole(rolename).Length &gt; 0)\n  {\n    throw new ProviderException(&quot;Cannot delete a populated role.&quot;);\n  }\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;DELETE FROM Roles &quot;  +\n                                    &quot; WHERE Rolename = ? AND ApplicationName = ?&quot;, conn);\n\n  cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename;\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  OdbcCommand cmd2 = new OdbcCommand(&quot;DELETE FROM UsersInRoles &quot;  +\n                                     &quot; WHERE Rolename = ? AND ApplicationName = ?&quot;, conn);\n\n  cmd2.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename;\n  cmd2.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  try\n  {\n    conn.Open();\n\n    cmd2.ExecuteNonQuery();\n    cmd.ExecuteNonQuery();\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n\n    return false;\n  }\n  finally\n  {\n    conn.Close();      \n  }\n\n  return true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#4\">        Public Overrides Function DeleteRole(ByVal rolename As String, ByVal throwOnPopulatedRole As Boolean) As Boolean\n            If Not RoleExists(rolename) Then\n                Throw New ProviderException(&quot;Role does not exist.&quot;)\n            End If\n\n            If throwOnPopulatedRole AndAlso GetUsersInRole(rolename).Length &gt; 0 Then\n                Throw New ProviderException(&quot;Cannot delete a populated role.&quot;)\n            End If\n\n            Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;DELETE FROM Roles &quot; &amp; _\n                                                     &quot; WHERE Rolename = ? AND ApplicationName = ?&quot;, conn)\n\n            cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Dim cmd2 As OdbcCommand = New OdbcCommand(&quot;DELETE FROM UsersInRoles &quot; &amp; _\n                                                      &quot; WHERE Rolename = ? AND ApplicationName = ?&quot;, conn)\n\n            cmd2.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename\n            cmd2.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Try\n                conn.Open()\n\n                cmd2.ExecuteNonQuery()\n                cmd.ExecuteNonQuery()\n            Catch e As OdbcException\n                &#39; Handle exception.\n\n                Return False\n            Finally\n                conn.Close()\n            End Try\n\n            Return True\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_FindUsersInRole_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_FindUsersInRole_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindUsersInRole(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of user names in a role where the user name contains the specified user name to match.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string[] FindUsersInRole (string roleName, string usernameToMatch);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>roleName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The role to search in.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>usernameToMatch</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user name to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array containing the names of all the users where the user name matches <code>usernameToMatch</code> and the user is a member of the specified role.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FindUsersInRole method is called by the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class and returns a list of users in a role where the user name contains a match of the supplied <code>usernameToMatch</code> for the configured <code>applicationName</code>. Wildcard support is included based on the data source. Users are returned in alphabetical order by user name.  </p>\n<p> We recommend that you throw a <a class=\"xref\" href=\"system.configuration.provider.providerexception\" data-linktype=\"relative-path\">ProviderException</a> if <code>roleName</code> does not exist in the data source.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample FindUsersInRole implementation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#11\">public override string[] FindUsersInRole(string rolename, string usernameToMatch)\n{\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;SELECT Username FROM UsersInRoles  &quot; +\n                                    &quot; WHERE Username LIKE ? AND RoleName = ? AND ApplicationName = ?&quot;, conn);\n  cmd.Parameters.Add(&quot;@UsernameSearch&quot;, OdbcType.VarChar, 255).Value = usernameToMatch;\n  cmd.Parameters.Add(&quot;@RoleName&quot;, OdbcType.VarChar, 255).Value = rolename;\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = pApplicationName;\n\n  string tmpUserNames = &quot;&quot;;\n  OdbcDataReader reader = null;\n\n  try\n  { \n    conn.Open();\n\n    reader = cmd.ExecuteReader();\n\n    while (reader.Read())\n    {\n      tmpUserNames += reader.GetString(0) + &quot;,&quot;;\n    }\n  }\n  catch (OdbcException)\n  {\n    // Handle Exception.\n  }\n  finally\n  {\n    if (reader != null) { reader.Close(); }\n\n    conn.Close();\n  }\n\n  if (tmpUserNames.Length &gt; 0)\n  {\n    // Remove trailing comma.\n    tmpUserNames = tmpUserNames.Substring(0, tmpUserNames.Length - 1);\n    return tmpUserNames.Split(&#39;,&#39;);\n  }\n\n  return null;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#11\">        Public Overrides Function FindUsersInRole(ByVal rolename As String, ByVal userNameToMatch As String) As String()\n            Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;SELECT Username FROM UsersInRoles  &quot; &amp; _\n                                                     &quot; WHERE Username LIKE ? AND RoleName = ? AND ApplicationName = ?&quot;, conn)\n            cmd.Parameters.Add(&quot;@UsernameSearch&quot;, OdbcType.VarChar, 255).Value = usernameToMatch\n            cmd.Parameters.Add(&quot;@RoleName&quot;, OdbcType.VarChar, 255).Value = rolename\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = pApplicationName\n\n            Dim tmpUserNames As String = &quot;&quot;\n            Dim reader As OdbcDataReader = Nothing\n\n            Try\n                conn.Open()\n\n                reader = cmd.ExecuteReader()\n\n                Do While reader.Read()\n                    tmpUserNames &amp;= reader.GetString(0) &amp; &quot;,&quot;\n                Loop\n            Catch e As OdbcException\n                &#39; Handle exception.\n            Finally\n                If Not reader Is Nothing Then reader.Close()\n                conn.Close()\n            End Try\n\n            If tmpUserNames.Length &gt; 0 Then\n                &#39; Remove trailing comma.\n                tmpUserNames = tmpUserNames.Substring(0, tmpUserNames.Length - 1)\n                Return tmpUserNames.Split(CChar(&quot;,&quot;))\n            End If\n\n            Return Nothing\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_GetAllRoles\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_GetAllRoles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAllRoles()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list of all the roles for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string[] GetAllRoles ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array containing the names of all the roles stored in the data source for the configured <code>applicationName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetAllRoles is called by the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_GetAllRoles_\" data-linktype=\"relative-path\">GetAllRoles</a> method of the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to retrieve a list of role names from the data source. Only the roles for the specified <a class=\"xref\" href=\"system.web.security.roleprovider#System_Web_Security_RoleProvider_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> are retrieved.  </p>\n<p> If no roles exist for the configured <code>applicationName</code>, we recommend that your provider return a string array with no elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the GetAllRoles method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#5\">public override string[] GetAllRoles()\n{\n  string tmpRoleNames = &quot;&quot;;\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;SELECT Rolename FROM Roles &quot;  +\n                                    &quot; WHERE ApplicationName = ?&quot;, conn);\n\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  OdbcDataReader reader = null;\n\n  try\n  {\n    conn.Open();\n\n    reader = cmd.ExecuteReader();\n\n    while (reader.Read())\n    {\n      tmpRoleNames += reader.GetString(0) + &quot;,&quot;;\n    }\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n  }\n  finally\n  {\n    if (reader != null) { reader.Close(); }\n    conn.Close();      \n  }\n\n  if (tmpRoleNames.Length &gt; 0)\n  {\n    // Remove trailing comma.\n    tmpRoleNames = tmpRoleNames.Substring(0, tmpRoleNames.Length - 1);\n    return tmpRoleNames.Split(&#39;,&#39;);\n  }\n\n  return new string[0];\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#5\">        Public Overrides Function GetAllRoles() As String()\n            Dim tmpRoleNames As String = &quot;&quot;\n\n            Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;SELECT Rolename FROM Roles &quot; &amp; _\n                                                     &quot; WHERE ApplicationName = ?&quot;, conn)\n\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Dim reader As OdbcDataReader = Nothing\n\n            Try\n                conn.Open()\n\n                reader = cmd.ExecuteReader()\n\n                Do While reader.Read()\n                    tmpRoleNames &amp;= reader.GetString(0) &amp; &quot;,&quot;\n                Loop\n            Catch e As OdbcException\n                &#39; Handle exception.\n            Finally\n                If Not reader Is Nothing Then reader.Close()\n                conn.Close()\n            End Try\n\n            If tmpRoleNames.Length &gt; 0 Then\n                &#39; Remove trailing comma.\n                tmpRoleNames = tmpRoleNames.Substring(0, tmpRoleNames.Length - 1)\n                Return tmpRoleNames.Split(CChar(&quot;,&quot;))\n            End If\n\n            Return New String() {}\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_GetRolesForUser_System_String_\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_GetRolesForUser_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRolesForUser(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list of the roles that a specified user is in for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string[] GetRolesForUser (string username);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>username</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user to return a list of roles for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array containing the names of all the roles that the specified user is in for the configured <code>applicationName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetRolesForUser is called by the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_GetRolesForUser_\" data-linktype=\"relative-path\">GetRolesForUser</a> method of the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to retrieve the role names that the specified user is associated with from the data source. Only the roles for the configured <a class=\"xref\" href=\"system.web.security.roleprovider#System_Web_Security_RoleProvider_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> are retrieved.  </p>\n<p> If no roles exist for the specified user for the configured <code>applicationName</code>, we recommend that your provider return a string array with no elements.  </p>\n<p> If the specified user name is <code>null</code> or is an empty string, we recommend that your provider throw an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the GetRolesForUser method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#6\">public override string[] GetRolesForUser(string username)\n{\n  if (username == null || username == &quot;&quot;)\n    throw new ProviderException(&quot;User name cannot be empty or null.&quot;);\n\n  string tmpRoleNames = &quot;&quot;;\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;SELECT Rolename FROM UsersInRoles &quot;  +\n                                    &quot; WHERE Username = ? AND ApplicationName = ?&quot;, conn);\n\n  cmd.Parameters.Add(&quot;@Username&quot;, OdbcType.VarChar, 255).Value = username;\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  OdbcDataReader reader = null;\n\n  try\n  {\n    conn.Open();\n\n    reader = cmd.ExecuteReader();\n\n    while (reader.Read())\n    {\n      tmpRoleNames += reader.GetString(0) + &quot;,&quot;;\n    }\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n  }\n  finally\n  {\n    if (reader != null) { reader.Close(); }\n    conn.Close();      \n  }\n\n  if (tmpRoleNames.Length &gt; 0)\n  {\n    // Remove trailing comma.\n    tmpRoleNames = tmpRoleNames.Substring(0, tmpRoleNames.Length - 1);\n    return tmpRoleNames.Split(&#39;,&#39;);\n  }\n\n  return new string[0];\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#6\">        Public Overrides Function GetRolesForUser(ByVal username As String) As String()\n            If username Is Nothing OrElse username = &quot;&quot; Then _\n              Throw New ProviderException(&quot;User name cannot be empty or null.&quot;)\n\n            Dim tmpRoleNames As String = &quot;&quot;\n\n            Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;SELECT Rolename FROM UsersInRoles &quot; &amp; _\n                                                     &quot; WHERE Username = ? AND ApplicationName = ?&quot;, conn)\n\n            cmd.Parameters.Add(&quot;@Username&quot;, OdbcType.VarChar, 255).Value = username\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Dim reader As OdbcDataReader = Nothing\n\n            Try\n                conn.Open()\n\n                reader = cmd.ExecuteReader()\n\n                Do While reader.Read()\n                    tmpRoleNames &amp;= reader.GetString(0) &amp; &quot;,&quot;\n                Loop\n            Catch e As OdbcException\n                &#39; Handle exception.\n            Finally\n                If Not reader Is Nothing Then reader.Close()\n                conn.Close()\n            End Try\n\n            If tmpRoleNames.Length &gt; 0 Then\n                &#39; Remove trailing comma.\n                tmpRoleNames = tmpRoleNames.Substring(0, tmpRoleNames.Length - 1)\n                Return tmpRoleNames.Split(CChar(&quot;,&quot;))\n            End If\n\n            Return New String() {}\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_GetUsersInRole_System_String_\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_GetUsersInRole_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUsersInRole(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list of users in the specified role for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string[] GetUsersInRole (string roleName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>roleName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the role to get the list of users for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array containing the names of all the users who are members of the specified role for the configured <code>applicationName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetUsersInRole is called by the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_GetUsersInRole_\" data-linktype=\"relative-path\">GetUsersInRole</a> method of the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to retrieve the user names associated with a role from the data source. Only the roles for the configured <a class=\"xref\" href=\"system.web.security.roleprovider#System_Web_Security_RoleProvider_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> are retrieved.  </p>\n<p> If the specified role name does not exist for the configured <code>applicationName</code> or if it is <code>null</code> or an empty string, we recommend that your provider throw an exception.  </p>\n<p> If no users are associated with the specified role for the configured <code>applicationName</code>, we recommend that your provider return a string array with no elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the GetUsersInRole method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#7\">public override string[] GetUsersInRole(string rolename)\n{\n  if (rolename == null || rolename == &quot;&quot;)\n    throw new ProviderException(&quot;Role name cannot be empty or null.&quot;);\n  if (!RoleExists(rolename))\n    throw new ProviderException(&quot;Role does not exist.&quot;);\n\n  string tmpUserNames = &quot;&quot;;\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;SELECT Username FROM UsersInRoles &quot;  +\n                                    &quot; WHERE Rolename = ? AND ApplicationName = ?&quot;, conn);\n\n  cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename;\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  OdbcDataReader reader = null;\n\n  try\n  {\n    conn.Open();\n\n    reader = cmd.ExecuteReader();\n\n    while (reader.Read())\n    {\n      tmpUserNames += reader.GetString(0) + &quot;,&quot;;\n    }\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n  }\n  finally\n  {\n    if (reader != null) { reader.Close(); }\n    conn.Close();      \n  }\n\n  if (tmpUserNames.Length &gt; 0)\n  {\n    // Remove trailing comma.\n    tmpUserNames = tmpUserNames.Substring(0, tmpUserNames.Length - 1);\n    return tmpUserNames.Split(&#39;,&#39;);\n  }\n\n  return new string[0];\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#7\">        Public Overrides Function GetUsersInRole(ByVal rolename As String) As String()\n            If rolename Is Nothing OrElse rolename = &quot;&quot; Then _\n              Throw New ProviderException(&quot;Role name cannot be empty or null.&quot;)\n            If Not RoleExists(rolename) Then _\n              Throw New ProviderException(&quot;Role does not exist.&quot;)\n\n            Dim tmpUserNames As String = &quot;&quot;\n\n            Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;SELECT Username FROM UsersInRoles &quot; &amp; _\n                                                     &quot; WHERE Rolename = ? AND ApplicationName = ?&quot;, conn)\n\n            cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Dim reader As OdbcDataReader = Nothing\n\n            Try\n                conn.Open()\n\n                reader = cmd.ExecuteReader()\n\n                Do While reader.Read()\n                    tmpUserNames &amp;= reader.GetString(0) + &quot;,&quot;\n                Loop\n            Catch e As OdbcException\n                &#39; Handle exception.\n            Finally\n                If Not reader Is Nothing Then reader.Close()\n                conn.Close()\n            End Try\n\n            If tmpUserNames.Length &gt; 0 Then\n                &#39; Remove trailing comma.\n                tmpUserNames = tmpUserNames.Substring(0, tmpUserNames.Length - 1)\n                Return tmpUserNames.Split(CChar(&quot;,&quot;))\n            End If\n\n            Return New String() {}\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_IsUserInRole_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_IsUserInRole_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUserInRole(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the specified user is in the specified role for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsUserInRole (string username, string roleName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>username</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user name to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>roleName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The role to search in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified user is in the specified role for the configured <code>applicationName</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsUserInRole method is called by the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_IsUserInRole_\" data-linktype=\"relative-path\">IsUserInRole</a> method of the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to determine whether the current logged-on user is associated with a role from the data source for the configured <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a>.  </p>\n<p> If the specified user name is <code>null</code> or is an empty string, we recommend that your provider throw an exception.  </p>\n<p> If the specified role name is <code>null</code> or is an empty string, we recommend that your provider throw an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the IsUserInRole method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#8\">public override bool IsUserInRole(string username, string rolename)\n{\n  if (username == null || username == &quot;&quot;)\n    throw new ProviderException(&quot;User name cannot be empty or null.&quot;);\n  if (rolename == null || rolename == &quot;&quot;)\n    throw new ProviderException(&quot;Role name cannot be empty or null.&quot;);\n\n  bool userIsInRole = false;\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;SELECT COUNT(*) FROM UsersInRoles &quot;  +\n                                    &quot; WHERE Username = ? AND Rolename = ? AND ApplicationName = ?&quot;, conn);\n\n  cmd.Parameters.Add(&quot;@Username&quot;, OdbcType.VarChar, 255).Value = username;\n  cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename;\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  try\n  {\n    conn.Open();\n\n    int numRecs = (int)cmd.ExecuteScalar();\n\n    if (numRecs &gt; 0)\n    {\n      userIsInRole = true;\n    }\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n  }\n  finally\n  {\n    conn.Close();      \n  }\n\n  return userIsInRole;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#8\">        Public Overrides Function IsUserInRole(ByVal username As String, ByVal rolename As String) As Boolean\n            If username Is Nothing OrElse username = &quot;&quot; Then _\n              Throw New ProviderException(&quot;User name cannot be empty or null.&quot;)\n            If rolename Is Nothing OrElse rolename = &quot;&quot; Then _\n              Throw New ProviderException(&quot;Role name cannot be empty or null.&quot;)\n\n            Dim userIsInRole As Boolean = False\n\n            Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;SELECT COUNT(*) FROM UsersInRoles &quot; &amp; _\n                                                     &quot; WHERE Username = ? AND Rolename = ? AND ApplicationName = ?&quot;, conn)\n\n            cmd.Parameters.Add(&quot;@Username&quot;, OdbcType.VarChar, 255).Value = username\n            cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Try\n                conn.Open()\n\n                Dim numRecs As Integer = CType(cmd.ExecuteScalar(), Integer)\n\n                If numRecs &gt; 0 Then\n                    userIsInRole = True\n                End If\n            Catch e As OdbcException\n                &#39; Handle exception.\n            Finally\n                conn.Close()\n            End Try\n\n            Return userIsInRole\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_RemoveUsersFromRoles_System_String___System_String___\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_RemoveUsersFromRoles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveUsersFromRoles(String[],String[])</div>        \r\n          </div>\r\n    \r\n            <p>Removes the specified user names from the specified roles for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void RemoveUsersFromRoles (string[] usernames, string[] roleNames);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>usernames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string array of user names to be removed from the specified roles.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>roleNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string array of role names to remove the specified user names from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>RemoveUsersFromRoles is called by <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_RemoveUserFromRole_\" data-linktype=\"relative-path\">RemoveUserFromRole</a> , <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_RemoveUsersFromRole_\" data-linktype=\"relative-path\">RemoveUsersFromRole</a> , <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_RemoveUserFromRoles_\" data-linktype=\"relative-path\">RemoveUserFromRoles</a> , and <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_RemoveUsersFromRoles_\" data-linktype=\"relative-path\">RemoveUsersFromRoles</a> methods of the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to remove the specified users from the specified roles at the data source. Only roles for the configured <a class=\"xref\" href=\"system.web.security.roleprovider#System_Web_Security_RoleProvider_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> are modified.  </p>\n<p> If any of the specified role names are not found for the configured <code>applicationName</code>, we recommend that your provider throw a <a class=\"xref\" href=\"system.configuration.provider.providerexception\" data-linktype=\"relative-path\">ProviderException</a>.  </p>\n<p> If any of the specified user names are not associated with any of the specified role names for the configured <code>applicationName</code>, we recommend that your provider throw a <a class=\"xref\" href=\"system.configuration.provider.providerexception\" data-linktype=\"relative-path\">ProviderException</a>.  </p>\n<p> If any of the specified user names is <code>null</code> or is an empty string, we recommend that your provider throw an exception.  </p>\n<p> If any of the specified role names is <code>null</code> or is an empty string, we recommend that your provider throw an exception.  </p>\n<p> If your data source supports transactions, we recommend that you include each remove operation in a transaction and that you roll back the transaction and throw an exception if any remove operation fails.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the RemoveUsersFromRoles method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#9\">public override void RemoveUsersFromRoles(string[] usernames, string[] rolenames)\n{\n  foreach (string rolename in rolenames)\n  {\n    if (rolename == null || rolename == &quot;&quot;)\n      throw new ProviderException(&quot;Role name cannot be empty or null.&quot;);\n    if (!RoleExists(rolename))\n      throw new ProviderException(&quot;Role name not found.&quot;);\n  }\n\n  foreach (string username in usernames)\n  {\n    if (username == null || username == &quot;&quot;)\n      throw new ProviderException(&quot;User name cannot be empty or null.&quot;);\n\n    foreach (string rolename in rolenames)\n    {\n      if (!IsUserInRole(username, rolename))\n        throw new ProviderException(&quot;User is not in role.&quot;);\n    }\n  }\n\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;DELETE FROM UsersInRoles &quot;  +\n                                    &quot; WHERE Username = ? AND Rolename = ? AND ApplicationName = ?&quot;, conn);\n\n  OdbcParameter userParm = cmd.Parameters.Add(&quot;@Username&quot;, OdbcType.VarChar, 255);\n  OdbcParameter roleParm = cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255);\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  try\n  {\n    conn.Open();\n\n    foreach (string username in usernames)\n    {\n      foreach (string rolename in rolenames)\n      {\n        userParm.Value = username;\n        roleParm.Value = rolename;\n        cmd.ExecuteNonQuery();\n      }\n    }\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n  }\n  finally\n  {\n    conn.Close();      \n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#9\">        Public Overrides Sub RemoveUsersFromRoles(ByVal usernames As String(), ByVal rolenames As String())\n\n            For Each rolename As String In rolenames\n                If rolename Is Nothing OrElse rolename = &quot;&quot; Then _\n                  Throw New ProviderException(&quot;Role name cannot be empty or null.&quot;)\n                If Not RoleExists(rolename) Then _\n                  Throw New ProviderException(&quot;Role name not found.&quot;)\n            Next\n\n            For Each username As String In usernames\n                If username Is Nothing OrElse username = &quot;&quot; Then _\n                  Throw New ProviderException(&quot;User name cannot be empty or null.&quot;)\n\n                For Each rolename As String In rolenames\n                    If Not IsUserInRole(username, rolename) Then\n                        Throw New ProviderException(&quot;User is not in role.&quot;)\n                    End If\n                Next\n            Next\n\n            Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;DELETE FROM UsersInRoles &quot; &amp; _\n                                                     &quot; WHERE Username = ? AND Rolename = ? AND ApplicationName = ?&quot;, conn)\n\n            Dim userParm As OdbcParameter = cmd.Parameters.Add(&quot;@Username&quot;, OdbcType.VarChar, 255)\n            Dim roleParm As OdbcParameter = cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255)\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Try\n                conn.Open()\n\n                For Each username As String In usernames\n                    For Each rolename As String In rolenames\n                        userParm.Value = username\n                        roleParm.Value = rolename\n                        cmd.ExecuteNonQuery()\n                    Next\n                Next\n            Catch e As OdbcException\n                &#39; Handle exception.\n            Finally\n                conn.Close()\n            End Try\n        End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_Security_RoleProvider_RoleExists_System_String_\">\r\n    \r\n            <a id=\"System_Web_Security_RoleProvider_RoleExists_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RoleExists(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the specified role name already exists in the role data source for the configured <code>applicationName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool RoleExists (string roleName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>roleName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the role to search for in the data source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the role name already exists in the data source for the configured <code>applicationName</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>RoleExists is called by the <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_RoleExists_\" data-linktype=\"relative-path\">RoleExists</a> method of the <a class=\"xref\" href=\"system.web.security.roles\" data-linktype=\"relative-path\">Roles</a> class to determine whether a role name exists in the data source for the configured <a class=\"xref\" href=\"system.web.security.roles#System_Web_Security_Roles_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a>.  </p>\n<p> If the specified role name is <code>null</code> or is an empty string, we recommend that your provider throw an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a sample implementation of the RoleExists method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Security.IRoleProvider#10\">public override bool RoleExists(string rolename)\n{\n  if (rolename == null || rolename == &quot;&quot;)\n    throw new ProviderException(&quot;Role name cannot be empty or null.&quot;);\n\n  bool exists = false;\n\n  OdbcConnection conn = new OdbcConnection(connectionString);\n  OdbcCommand cmd = new OdbcCommand(&quot;SELECT COUNT(*) FROM Roles &quot;  +\n                                    &quot; WHERE Rolename = ? AND ApplicationName = ?&quot;, conn);\n\n  cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename;\n  cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName;\n\n  try\n  {\n    conn.Open();\n\n    int numRecs = (int)cmd.ExecuteScalar();\n\n    if (numRecs &gt; 0)\n    {\n      exists = true;\n    }\n  }\n  catch (OdbcException)\n  {\n    // Handle exception.\n  }\n  finally\n  {\n    conn.Close();      \n  }\n\n  return exists;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Security.IRoleProvider#10\">        Public Overrides Function RoleExists(ByVal rolename As String) As Boolean\n\n            If rolename Is Nothing OrElse rolename = &quot;&quot; Then _\n              Throw New ProviderException(&quot;Role name cannot be empty or null.&quot;)\n\n            Dim exists As Boolean = False\n\n            Dim conn As OdbcConnection = New OdbcConnection(connectionString)\n            Dim cmd As OdbcCommand = New OdbcCommand(&quot;SELECT COUNT(*) FROM Roles &quot; &amp; _\n                                                     &quot; WHERE Rolename = ? AND ApplicationName = ?&quot;, conn)\n\n            cmd.Parameters.Add(&quot;@Rolename&quot;, OdbcType.VarChar, 255).Value = rolename\n            cmd.Parameters.Add(&quot;@ApplicationName&quot;, OdbcType.VarChar, 255).Value = ApplicationName\n\n            Try\n                conn.Open()\n\n                Dim numRecs As Integer = CType(cmd.ExecuteScalar(), Integer)\n\n                If numRecs &gt; 0 Then\n                    exists = True\n                End If\n            Catch e As OdbcException\n                &#39; Handle exception.\n            Finally\n                conn.Close()\n            End Try\n\n            Return exists\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.Security.RoleProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.AddUsersToRoles\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.ApplicationName\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.CreateRole\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.DeleteRole\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.FindUsersInRole\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.GetAllRoles\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.GetRolesForUser\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.GetUsersInRole\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.IsUserInRole\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.RemoveUsersFromRoles\">\r\n<meta name=\"APIName\" content=\"System.Web.Security.RoleProvider.RoleExists\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"APILocation\" content=\"System.Web.ApplicationServices.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-10 02:17 AM\">\r\n<meta name=\"document_id\" content=\"0dbf6e54-0ca4-eff8-be94-79578a3155f0\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Web.Security\\RoleProvider.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the contract that ASP.NET implements to provide role-management services using custom role providers.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.Security/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.Security.RoleProvider\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.Security.RoleProvider.yml","open_to_public_contributors":true,"api_name":["System.Web.Security.RoleProvider","System.Web.Security.RoleProvider..ctor","System.Web.Security.RoleProvider.AddUsersToRoles","System.Web.Security.RoleProvider.ApplicationName","System.Web.Security.RoleProvider.CreateRole","System.Web.Security.RoleProvider.DeleteRole","System.Web.Security.RoleProvider.FindUsersInRole","System.Web.Security.RoleProvider.GetAllRoles","System.Web.Security.RoleProvider.GetRolesForUser","System.Web.Security.RoleProvider.GetUsersInRole","System.Web.Security.RoleProvider.IsUserInRole","System.Web.Security.RoleProvider.RemoveUsersFromRoles","System.Web.Security.RoleProvider.RoleExists"],"api_location":["System.Web.dll","System.Web.ApplicationServices.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.Security.RoleProvider","System::Web::Security::RoleProvider","System.Web.Security.RoleProvider.#ctor","System::Web::Security::RoleProvider::#ctor","System.Web.Security.RoleProvider.AddUsersToRoles","System::Web::Security::RoleProvider::AddUsersToRoles","System.Web.Security.RoleProvider.ApplicationName","System::Web::Security::RoleProvider::ApplicationName","System.Web.Security.RoleProvider.CreateRole","System::Web::Security::RoleProvider::CreateRole","System.Web.Security.RoleProvider.DeleteRole","System::Web::Security::RoleProvider::DeleteRole","System.Web.Security.RoleProvider.FindUsersInRole","System::Web::Security::RoleProvider::FindUsersInRole","System.Web.Security.RoleProvider.GetAllRoles","System::Web::Security::RoleProvider::GetAllRoles","System.Web.Security.RoleProvider.GetRolesForUser","System::Web::Security::RoleProvider::GetRolesForUser","System.Web.Security.RoleProvider.GetUsersInRole","System::Web::Security::RoleProvider::GetUsersInRole","System.Web.Security.RoleProvider.IsUserInRole","System::Web::Security::RoleProvider::IsUserInRole","System.Web.Security.RoleProvider.RemoveUsersFromRoles","System::Web::Security::RoleProvider::RemoveUsersFromRoles","System.Web.Security.RoleProvider.RoleExists","System::Web::Security::RoleProvider::RoleExists"],"dev_langs":["csharp"],"updated_at":"2017-03-10 02:17 AM","document_id":"0dbf6e54-0ca4-eff8-be94-79578a3155f0","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Web.Security\\RoleProvider.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.Security/RoleProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RoleProvider class | Microsoft Docs","_op_ogTitle":"RoleProvider class","description":"Defines the contract that ASP.NET implements to provide role-management services using custom role providers.\n","toc_asset_id":"_splitted/System.Web.Security/toc.json","toc_rel":"_splitted/System.Web.Security/toc.json","source_url":"","ms.assetid":"System.Web.Security.RoleProvider","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.security.roleprovider","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.security.roleprovider","fileRelativePath":"System.Web.Security.RoleProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}