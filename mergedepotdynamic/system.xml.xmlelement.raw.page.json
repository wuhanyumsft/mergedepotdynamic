{"content":"    \r\n    <h1 id=\"System_Xml_XmlElement\">\r\n      <span class=\"lang-csharp\">XmlElement</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an element.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlElement : System.Xml.XmlLinkedNode</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmllinkednode\" data-linktype=\"relative-path\">System.Xml.XmlLinkedNode</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlElement</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmllinkednode#System_Xml_XmlLinkedNode_PreviousSibling\" data-linktype=\"relative-path\">PreviousSibling</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_AppendChild_System_Xml_XmlNode_\" data-linktype=\"relative-path\">AppendChild(XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_BaseURI\" data-linktype=\"relative-path\">BaseURI</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_ChildNodes\" data-linktype=\"relative-path\">ChildNodes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Clone\" data-linktype=\"relative-path\">Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_CreateNavigator\" data-linktype=\"relative-path\">CreateNavigator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_FirstChild\" data-linktype=\"relative-path\">FirstChild</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_GetEnumerator\" data-linktype=\"relative-path\">GetEnumerator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_GetNamespaceOfPrefix_System_String_\" data-linktype=\"relative-path\">GetNamespaceOfPrefix(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_GetPrefixOfNamespace_System_String_\" data-linktype=\"relative-path\">GetPrefixOfNamespace(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_HasChildNodes\" data-linktype=\"relative-path\">HasChildNodes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_InsertAfter_System_Xml_XmlNode_System_Xml_XmlNode_\" data-linktype=\"relative-path\">InsertAfter(XmlNode,XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_InsertBefore_System_Xml_XmlNode_System_Xml_XmlNode_\" data-linktype=\"relative-path\">InsertBefore(XmlNode,XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_IsReadOnly\" data-linktype=\"relative-path\">IsReadOnly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Item_System_String_\" data-linktype=\"relative-path\">Item(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Item_System_String_System_String_\" data-linktype=\"relative-path\">Item(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_LastChild\" data-linktype=\"relative-path\">LastChild</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Normalize\" data-linktype=\"relative-path\">Normalize()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_OuterXml\" data-linktype=\"relative-path\">OuterXml</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_PrependChild_System_Xml_XmlNode_\" data-linktype=\"relative-path\">PrependChild(XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_PreviousText\" data-linktype=\"relative-path\">PreviousText</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_RemoveChild_System_Xml_XmlNode_\" data-linktype=\"relative-path\">RemoveChild(XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_ReplaceChild_System_Xml_XmlNode_System_Xml_XmlNode_\" data-linktype=\"relative-path\">ReplaceChild(XmlNode,XmlNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_System_String_\" data-linktype=\"relative-path\">SelectNodes(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_System_String_System_Xml_XmlNamespaceManager_\" data-linktype=\"relative-path\">SelectNodes(String,XmlNamespaceManager)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectSingleNode_System_String_\" data-linktype=\"relative-path\">SelectSingleNode(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectSingleNode_System_String_System_Xml_XmlNamespaceManager_\" data-linktype=\"relative-path\">SelectSingleNode(String,XmlNamespaceManager)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Supports_System_String_System_String_\" data-linktype=\"relative-path\">Supports(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"relative-path\">IEnumerable.GetEnumerator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_System_ICloneable_Clone\" data-linktype=\"relative-path\">ICloneable.Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_Value\" data-linktype=\"relative-path\">Value</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Elements are one of the most common nodes in the W3C Document Object Model (DOM). Elements can have attributes associated with them. The <code>XmlElement</code> class has many methods for accessing attributes (<a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_GetAttribute_\" data-linktype=\"relative-path\">GetAttribute</a>, <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_SetAttribute_\" data-linktype=\"relative-path\">SetAttribute</a>, <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_RemoveAttribute_\" data-linktype=\"relative-path\">RemoveAttribute</a>, <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_GetAttributeNode_\" data-linktype=\"relative-path\">GetAttributeNode</a>, and so on). You can also use the <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_Attributes_\" data-linktype=\"relative-path\">Attributes</a> property which returns an <a class=\"xref\" href=\"system.xml.xmlattributecollection\" data-linktype=\"relative-path\">XmlAttributeCollection</a> enabling you to access attributes by name or index from the collection.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement__ctor_System_String_System_String_System_String_System_Xml_XmlDocument_\" data-linktype=\"self-bookmark\">XmlElement(String,String,String,XmlDocument)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.xmlattributecollection\" data-linktype=\"relative-path\">XmlAttributeCollection</a> containing the list of attributes for this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_HasAttributes\" data-linktype=\"self-bookmark\">HasAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <code>boolean</code> value indicating whether the current node has any attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_InnerText\" data-linktype=\"self-bookmark\">InnerText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the concatenated values of the node and all its children.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_InnerXml\" data-linktype=\"self-bookmark\">InnerXml</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the markup representing just the children of this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_IsEmpty\" data-linktype=\"self-bookmark\">IsEmpty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the tag format of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_LocalName\" data-linktype=\"self-bookmark\">LocalName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the local name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the qualified name of the node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_NamespaceURI\" data-linktype=\"self-bookmark\">NamespaceURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace URI of this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_NextSibling\" data-linktype=\"self-bookmark\">NextSibling</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> immediately following this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_OwnerDocument\" data-linktype=\"self-bookmark\">OwnerDocument</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> to which this node belongs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_ParentNode\" data-linktype=\"self-bookmark\">ParentNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parent of this node (for nodes that can have parents).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_Prefix\" data-linktype=\"self-bookmark\">Prefix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the namespace prefix of this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_SchemaInfo\" data-linktype=\"self-bookmark\">SchemaInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_CloneNode_System_Boolean_\" data-linktype=\"self-bookmark\">CloneNode(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a duplicate of this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_GetAttribute_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the value for the attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_GetAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the value for the attribute with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_GetAttributeNode_System_String_\" data-linktype=\"self-bookmark\">GetAttributeNode(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <code>XmlAttribute</code> with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_GetAttributeNode_System_String_System_String_\" data-linktype=\"self-bookmark\">GetAttributeNode(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_GetElementsByTagName_System_String_\" data-linktype=\"self-bookmark\">GetElementsByTagName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all descendant elements that match the specified <span class=\"xref\">stem.Xml.XmlElement.Name*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_GetElementsByTagName_System_String_System_String_\" data-linktype=\"self-bookmark\">GetElementsByTagName(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all descendant elements that match the specified <span class=\"xref\">stem.Xml.XmlElement.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlElement.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_HasAttribute_System_String_\" data-linktype=\"self-bookmark\">HasAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current node has an attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_HasAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">HasAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current node has an attribute with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_RemoveAll\" data-linktype=\"self-bookmark\">RemoveAll()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all specified attributes and children of the current node. Default attributes are not removed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_RemoveAllAttributes\" data-linktype=\"self-bookmark\">RemoveAllAttributes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all specified attributes from the element. Default attributes are not removed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_RemoveAttribute_System_String_\" data-linktype=\"self-bookmark\">RemoveAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes an attribute by name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_RemoveAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">RemoveAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_RemoveAttributeAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAttributeAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_RemoveAttributeNode_System_Xml_XmlAttribute_\" data-linktype=\"self-bookmark\">RemoveAttributeNode(XmlAttribute)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the specified <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_RemoveAttributeNode_System_String_System_String_\" data-linktype=\"self-bookmark\">RemoveAttributeNode(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_SetAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">SetAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of the attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_SetAttribute_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">SetAttribute(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of the attribute with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_SetAttributeNode_System_Xml_XmlAttribute_\" data-linktype=\"self-bookmark\">SetAttributeNode(XmlAttribute)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_SetAttributeNode_System_String_System_String_\" data-linktype=\"self-bookmark\">SetAttributeNode(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_WriteContentTo_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteContentTo(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves all the children of the node to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlElement_WriteTo_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteTo(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the current node to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement__ctor_System_String_System_String_System_String_System_Xml_XmlDocument_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlElement(String,String,String,XmlDocument)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected XmlElement (string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace prefix; see the <span class=\"xref\">stem.Xml.XmlElement.Prefix*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name; see the <span class=\"xref\">stem.Xml.XmlElement.LocalName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI; see the <span class=\"xref\">stem.Xml.XmlElement.NamespaceURI*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>doc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parent XML document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not instantiate an <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> directly; instead, use methods such as <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_CreateElement_\" data-linktype=\"relative-path\">CreateElement</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_Attributes\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.xmlattributecollection\" data-linktype=\"relative-path\">XmlAttributeCollection</a> containing the list of attributes for this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlAttributeCollection Attributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattributecollection\" data-linktype=\"relative-path\">XmlAttributeCollection</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.xml.xmlattributecollection\" data-linktype=\"relative-path\">XmlAttributeCollection</a> containing the list of attributes for this node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses changes the value of the first attribute.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.Attributes Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\n\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Change the value of the first attribute.\n   root-&gt;Attributes[ 0 ]-&gt;Value = &quot;fiction&quot;;\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.Attributes Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Change the value of the first attribute.\n    root.Attributes[0].Value=&quot;fiction&quot;;\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.Attributes Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Change the value of the first attribute.\n    root.Attributes.Item(0).Value=&quot;fiction&quot;\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_HasAttributes\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_HasAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <code>boolean</code> value indicating whether the current node has any attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool HasAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node has attributes; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes all attributes from the root element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.HasAttributes Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Remove all attributes from the root element.\n   if ( root-&gt;HasAttributes )\n      root-&gt;RemoveAllAttributes();\n\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.HasAttributes Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Remove all attributes.\n    if (root.HasAttributes)\n      root.RemoveAllAttributes()\n    end if\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.HasAttributes Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Remove all attributes from the root element.\n    if (root.HasAttributes)\n      root.RemoveAllAttributes();\n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_InnerText\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_InnerText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the concatenated values of the node and all its children.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string InnerText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenated values of the node and all its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property replaces all the children with the parsed contents of the given string.  </p>\n<p> This property is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares the <code>InnerText</code> and <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_InnerXml_\" data-linktype=\"relative-path\">InnerXml</a> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.InnerXml Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;root&gt;&lt;elem&gt;some text&lt;child/&gt;more text&lt;/elem&gt;&lt;/root&gt;&quot; );\n   XmlElement^ elem = dynamic_cast&lt;XmlElement^&gt;(doc-&gt;DocumentElement-&gt;FirstChild);\n   \n   // Note that InnerText does not include the markup.\n   Console::WriteLine( &quot;Display the InnerText of the element...&quot; );\n   Console::WriteLine( elem-&gt;InnerText );\n   \n   // InnerXml includes the markup of the element.\n   Console::WriteLine( &quot;Display the InnerXml of the element...&quot; );\n   Console::WriteLine( elem-&gt;InnerXml );\n   \n   // Set InnerText to a string that includes markup.  \n   // The markup is escaped.\n   elem-&gt;InnerText = &quot;Text containing &lt;markup/&gt; will have char(&lt;) and char(&gt;) escaped.&quot;;\n   Console::WriteLine( elem-&gt;OuterXml );\n   \n   // Set InnerXml to a string that includes markup.  \n   // The markup is not escaped.\n   elem-&gt;InnerXml = &quot;Text containing &lt;markup/&gt;.&quot;;\n   Console::WriteLine( elem-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.InnerXml Example#1\">using System;\nusing System.Xml;\npublic class Test {\n\n  public static void Main() {\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;root&gt;&quot;+\n                &quot;&lt;elem&gt;some text&lt;child/&gt;more text&lt;/elem&gt;&quot; +\n                &quot;&lt;/root&gt;&quot;);\n\n    XmlElement elem = (XmlElement)doc.DocumentElement.FirstChild;\n\n    // Note that InnerText does not include the markup.\n    Console.WriteLine(&quot;Display the InnerText of the element...&quot;);\n    Console.WriteLine( elem.InnerText );\n\n    // InnerXml includes the markup of the element.\n    Console.WriteLine(&quot;Display the InnerXml of the element...&quot;);\n    Console.WriteLine(elem.InnerXml);\n\n    // Set InnerText to a string that includes markup.  \n    // The markup is escaped.\n    elem.InnerText = &quot;Text containing &lt;markup/&gt; will have char(&lt;) and char(&gt;) escaped.&quot;;\n    Console.WriteLine( elem.OuterXml );\n\n    // Set InnerXml to a string that includes markup.  \n    // The markup is not escaped.\n    elem.InnerXml = &quot;Text containing &lt;markup/&gt;.&quot;;\n    Console.WriteLine( elem.OuterXml );\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.InnerXml Example#1\">Imports System\nImports System.Xml\n\npublic class Test\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;root&gt;&quot;&amp; _\n                &quot;&lt;elem&gt;some text&lt;child/&gt;more text&lt;/elem&gt;&quot; &amp; _\n                &quot;&lt;/root&gt;&quot;)\n\n    Dim elem as XmlElement\n    elem = CType (doc.DocumentElement.ChildNodes.Item(0), XmlElement)\n\n    &#39; Note that InnerText does not include the markup.\n    Console.WriteLine(&quot;Display the InnerText of the element...&quot;)\n    Console.WriteLine( elem.InnerText )\n\n    &#39; InnerXml includes the markup of the element.\n    Console.WriteLine(&quot;Display the InnerXml of the element...&quot;)\n    Console.WriteLine(elem.InnerXml)\n\n    &#39; Set InnerText to a string that includes markup.  \n    &#39; The markup is escaped.\n    elem.InnerText = &quot;Text containing &lt;markup/&gt; will have char(&lt;) and char(&gt;) escaped.&quot;\n    Console.WriteLine( elem.OuterXml )\n\n    &#39; Set InnerXml to a string that includes markup.  \n    &#39;The markup is not escaped.\n    elem.InnerXml = &quot;Text containing &lt;markup/&gt;.&quot;\n    Console.WriteLine( elem.OuterXml )\n    \n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_InnerXml\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_InnerXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerXml</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the markup representing just the children of this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string InnerXml { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The markup of the children of this node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The XML specified when setting this property is not well-formed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property replaces the children of the node with the parsed contents of the given string. The parsing is done in the current namespace context.  </p>\n<p> This property is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares the <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_InnerText_\" data-linktype=\"relative-path\">InnerText</a> and <code>InnerXml</code> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.InnerXml Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;root&gt;&lt;elem&gt;some text&lt;child/&gt;more text&lt;/elem&gt;&lt;/root&gt;&quot; );\n   XmlElement^ elem = dynamic_cast&lt;XmlElement^&gt;(doc-&gt;DocumentElement-&gt;FirstChild);\n   \n   // Note that InnerText does not include the markup.\n   Console::WriteLine( &quot;Display the InnerText of the element...&quot; );\n   Console::WriteLine( elem-&gt;InnerText );\n   \n   // InnerXml includes the markup of the element.\n   Console::WriteLine( &quot;Display the InnerXml of the element...&quot; );\n   Console::WriteLine( elem-&gt;InnerXml );\n   \n   // Set InnerText to a string that includes markup.  \n   // The markup is escaped.\n   elem-&gt;InnerText = &quot;Text containing &lt;markup/&gt; will have char(&lt;) and char(&gt;) escaped.&quot;;\n   Console::WriteLine( elem-&gt;OuterXml );\n   \n   // Set InnerXml to a string that includes markup.  \n   // The markup is not escaped.\n   elem-&gt;InnerXml = &quot;Text containing &lt;markup/&gt;.&quot;;\n   Console::WriteLine( elem-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.InnerXml Example#1\">using System;\nusing System.Xml;\npublic class Test {\n\n  public static void Main() {\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;root&gt;&quot;+\n                &quot;&lt;elem&gt;some text&lt;child/&gt;more text&lt;/elem&gt;&quot; +\n                &quot;&lt;/root&gt;&quot;);\n\n    XmlElement elem = (XmlElement)doc.DocumentElement.FirstChild;\n\n    // Note that InnerText does not include the markup.\n    Console.WriteLine(&quot;Display the InnerText of the element...&quot;);\n    Console.WriteLine( elem.InnerText );\n\n    // InnerXml includes the markup of the element.\n    Console.WriteLine(&quot;Display the InnerXml of the element...&quot;);\n    Console.WriteLine(elem.InnerXml);\n\n    // Set InnerText to a string that includes markup.  \n    // The markup is escaped.\n    elem.InnerText = &quot;Text containing &lt;markup/&gt; will have char(&lt;) and char(&gt;) escaped.&quot;;\n    Console.WriteLine( elem.OuterXml );\n\n    // Set InnerXml to a string that includes markup.  \n    // The markup is not escaped.\n    elem.InnerXml = &quot;Text containing &lt;markup/&gt;.&quot;;\n    Console.WriteLine( elem.OuterXml );\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.InnerXml Example#1\">Imports System\nImports System.Xml\n\npublic class Test\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;root&gt;&quot;&amp; _\n                &quot;&lt;elem&gt;some text&lt;child/&gt;more text&lt;/elem&gt;&quot; &amp; _\n                &quot;&lt;/root&gt;&quot;)\n\n    Dim elem as XmlElement\n    elem = CType (doc.DocumentElement.ChildNodes.Item(0), XmlElement)\n\n    &#39; Note that InnerText does not include the markup.\n    Console.WriteLine(&quot;Display the InnerText of the element...&quot;)\n    Console.WriteLine( elem.InnerText )\n\n    &#39; InnerXml includes the markup of the element.\n    Console.WriteLine(&quot;Display the InnerXml of the element...&quot;)\n    Console.WriteLine(elem.InnerXml)\n\n    &#39; Set InnerText to a string that includes markup.  \n    &#39; The markup is escaped.\n    elem.InnerText = &quot;Text containing &lt;markup/&gt; will have char(&lt;) and char(&gt;) escaped.&quot;\n    Console.WriteLine( elem.OuterXml )\n\n    &#39; Set InnerXml to a string that includes markup.  \n    &#39;The markup is not escaped.\n    elem.InnerXml = &quot;Text containing &lt;markup/&gt;.&quot;\n    Console.WriteLine( elem.OuterXml )\n    \n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_IsEmpty\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_IsEmpty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEmpty</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the tag format of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsEmpty { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns <code>true</code> if the element is to be serialized in the short tag format &quot;<item></item>&quot;; <code>false</code> for the long format &quot;<item></item>&quot;.  </p>\n<p> When setting this property, if set to <code>true</code>, the children of the element are removed and the element is serialized in the short tag format. If set to <code>false</code>, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.  </p>\n<p> This property is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is a Microsoft extension of the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds content to an empty element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.IsEmpty Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book&gt;  &lt;title&gt;Pride And Prejudice&lt;/title&gt;  &lt;price/&gt;&lt;/book&gt;&quot; );\n   XmlElement^ currNode = dynamic_cast&lt;XmlElement^&gt;(doc-&gt;DocumentElement-&gt;LastChild);\n   if ( currNode-&gt;IsEmpty )\n      currNode-&gt;InnerXml = &quot;19.95&quot;;\n\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;OuterXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.IsEmpty Example#1\"> using System;\n using System.Xml;\n \n public class Sample {\n \n   public static void Main() {\n\n       XmlDocument doc = new XmlDocument();\n       doc.LoadXml(&quot;&lt;book&gt;&quot;+ \n                   &quot;  &lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                   &quot;  &lt;price/&gt;&quot; +\n                   &quot;&lt;/book&gt;&quot;);     \n  \n       XmlElement currNode = (XmlElement) doc.DocumentElement.LastChild;\n       if (currNode.IsEmpty)\n         currNode.InnerXml=&quot;19.95&quot;; \n \n       Console.WriteLine(&quot;Display the modified XML...&quot;);\n       Console.WriteLine(doc.OuterXml);\n \n   }\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.IsEmpty Example#1\"> Imports System\n Imports System.Xml\n \n public class Sample\n \n   public shared sub Main()\n   \n       Dim doc as XmlDocument = new XmlDocument()\n       doc.LoadXml(&quot;&lt;book&gt;&quot; &amp; _\n                   &quot;  &lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                   &quot;  &lt;price/&gt;&quot; &amp; _\n                   &quot;&lt;/book&gt;&quot;)   \n \n       Dim currNode as XmlElement \n       currNode = CType (doc.DocumentElement.LastChild, XmlElement)\n       if (currNode.IsEmpty)\n         currNode.InnerXml=&quot;19.95&quot;\n       end if\n \n       Console.WriteLine(&quot;Display the modified XML...&quot;)\n       Console.WriteLine(doc.OuterXml)\n \n   end sub\n end class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_LocalName\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_LocalName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the local name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LocalName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the current node with the prefix removed. For example, <code>LocalName</code> is book for the element <bk:book>.<p>\n</bk:book>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the node does not have a prefix, <code>LocalName</code> is the same as <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_Name_\" data-linktype=\"relative-path\">Name</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays information on the ISBN element.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.LocalName Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot; &amp; _\n                &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    &#39; Display information on the ISBN element.\n    Dim elem as XmlElement \n    elem = CType(doc.DocumentElement.ChildNodes.Item(0),XmlElement) \n    Console.Write(&quot;{0}:{1} = {2}&quot;, elem.Prefix, elem.LocalName, elem.InnerText)\n    Console.WriteLine(&quot;  namespaceURI=&quot; + elem.NamespaceURI)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.LocalName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot; +\n                &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    // Display information on the ISBN element.\n    XmlElement elem = (XmlElement) doc.DocumentElement.FirstChild;\n    Console.Write(&quot;{0}:{1} = {2}&quot;, elem.Prefix, elem.LocalName, elem.InnerText);\n    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; namespaceURI=&quot; + elem.NamespaceURI);\n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.LocalName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot;\n   &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot;\n   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;&lt;/book&gt;&quot; );\n   \n   // Display information on the ISBN element.\n   XmlElement^ elem = dynamic_cast&lt;XmlElement^&gt;(doc-&gt;DocumentElement-&gt;FirstChild);\n   Console::Write( &quot;{0}:{1} = {2}&quot;, elem-&gt;Prefix, elem-&gt;LocalName, elem-&gt;InnerText );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; namespaceURI={0}&quot;, elem-&gt;NamespaceURI );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_Name\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the qualified name of the node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The qualified name of the node. For <code>XmlElement</code> nodes, this is the tag name of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays information on the ISBN element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot;\n   &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot;\n   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;&lt;/book&gt;&quot; );\n   \n   // Display information on the ISBN element.\n   XmlElement^ elem = dynamic_cast&lt;XmlElement^&gt;(doc-&gt;DocumentElement-&gt;FirstChild);\n   Console::Write( &quot;{0} = {1}&quot;, elem-&gt;Name, elem-&gt;InnerText );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; namespaceURI={0}&quot;, elem-&gt;NamespaceURI );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot; +\n                &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    // Display information on the ISBN element.\n    XmlElement elem = (XmlElement) doc.DocumentElement.FirstChild;\n    Console.Write(&quot;{0} = {1}&quot;, elem.Name, elem.InnerText);\n    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; namespaceURI=&quot; + elem.NamespaceURI);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot; &amp; _\n                &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    &#39; Display information on the ISBN element.\n    Dim elem as XmlElement \n    elem = CType(doc.DocumentElement.ChildNodes.Item(0),XmlElement) \n    Console.Write(&quot;{0} = {1}&quot;, elem.Name, elem.InnerText)\n    Console.WriteLine(&quot;  namespaceURI=&quot; + elem.NamespaceURI)\n\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_NamespaceURI\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_NamespaceURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NamespaceURI</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace URI of this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string NamespaceURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the namespace URI specified at creation time. For example, <code>NamespaceURI</code> is urn:samples for the element &lt;bk:book xmlns:bk= &quot;urn:samples&quot;&gt;</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays information on the ISBN element.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.LocalName Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot; &amp; _\n                &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    &#39; Display information on the ISBN element.\n    Dim elem as XmlElement \n    elem = CType(doc.DocumentElement.ChildNodes.Item(0),XmlElement) \n    Console.Write(&quot;{0}:{1} = {2}&quot;, elem.Prefix, elem.LocalName, elem.InnerText)\n    Console.WriteLine(&quot;  namespaceURI=&quot; + elem.NamespaceURI)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.LocalName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot; +\n                &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    // Display information on the ISBN element.\n    XmlElement elem = (XmlElement) doc.DocumentElement.FirstChild;\n    Console.Write(&quot;{0}:{1} = {2}&quot;, elem.Prefix, elem.LocalName, elem.InnerText);\n    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; namespaceURI=&quot; + elem.NamespaceURI);\n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.LocalName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot;\n   &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot;\n   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;&lt;/book&gt;&quot; );\n   \n   // Display information on the ISBN element.\n   XmlElement^ elem = dynamic_cast&lt;XmlElement^&gt;(doc-&gt;DocumentElement-&gt;FirstChild);\n   Console::Write( &quot;{0}:{1} = {2}&quot;, elem-&gt;Prefix, elem-&gt;LocalName, elem-&gt;InnerText );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; namespaceURI={0}&quot;, elem-&gt;NamespaceURI );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_NextSibling\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_NextSibling_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextSibling</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> immediately following this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNode NextSibling { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlNode</code> immediately following this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_NodeType\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNodeType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>The node type. For <code>XmlElement</code> nodes, this value is XmlNodeType.Element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_OwnerDocument\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_OwnerDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OwnerDocument</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> to which this node belongs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlDocument OwnerDocument { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlDocument</code> to which this element belongs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When adding nodes to the current node, use the <code>XmlDocument</code> returned by the <code>OwnerDocument</code> property to create the node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example inserts a new element into an XML document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.OwnerDocument Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Create a new element.\n   XmlElement^ elem = doc-&gt;CreateElement( &quot;price&quot; );\n   elem-&gt;InnerText = &quot;19.95&quot;;\n   \n   // Display the new element&#39;s owner document. Note\n   // that although the element has not been inserted\n   // into the document, it still has an owner document.\n   Console::WriteLine( elem-&gt;OwnerDocument-&gt;OuterXml );\n   \n   // Add the new element into the document.\n   root-&gt;AppendChild( elem );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.OwnerDocument Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Create a new element.\n    Dim elem as XmlElement = doc.CreateElement(&quot;price&quot;)\n    elem.InnerText=&quot;19.95&quot;\n\n    &#39; Display the element&#39;s owner document. Note\n    &#39; that although the element has not been inserted\n    &#39; into the document, it still has an owner document.\n    Console.WriteLine(elem.OwnerDocument.OuterXml)\n    \n    &#39;Add the element into the document.\n    root.AppendChild(elem)\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.OwnerDocument Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Create a new element.\n    XmlElement elem = doc.CreateElement(&quot;price&quot;);\n    elem.InnerText=&quot;19.95&quot;;\n\n    // Display the new element&#39;s owner document. Note\n    // that although the element has not been inserted\n    // into the document, it still has an owner document.\n    Console.WriteLine(elem.OwnerDocument.OuterXml);\n    \n    // Add the new element into the document.\n    root.AppendChild(elem);\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_ParentNode\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_ParentNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParentNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parent of this node (for nodes that can have parents).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNode ParentNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlNode</code> that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is <code>null</code>. For all other nodes, the value returned depends on the <span class=\"xref\">stem.Xml.XmlNode.NodeType*</span> of the node. The following table describes the possible return values for the <code>ParentNode</code> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_Prefix\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_Prefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the namespace prefix of this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Prefix { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>This node is read-only</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The specified prefix contains an invalid character.  </p>\n<p> The specified prefix is malformed.  </p>\n<p> The namespaceURI of this node is <code>null</code>.  </p>\n<p> The specified prefix is &quot;xml&quot; and the namespaceURI of this node is different from <a href=\"http://www.w3.org/XML/1998/namespace\" data-linktype=\"external\">http://www.w3.org/XML/1998/namespace</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property changes the <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_Name_\" data-linktype=\"relative-path\">Name</a> property, which holds the qualified name for an <code>XmlElement</code>. However, changing the prefix does not change the namespace URI of the element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays information on the ISBN element.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.LocalName Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot; &amp; _\n                &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    &#39; Display information on the ISBN element.\n    Dim elem as XmlElement \n    elem = CType(doc.DocumentElement.ChildNodes.Item(0),XmlElement) \n    Console.Write(&quot;{0}:{1} = {2}&quot;, elem.Prefix, elem.LocalName, elem.InnerText)\n    Console.WriteLine(&quot;  namespaceURI=&quot; + elem.NamespaceURI)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.LocalName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot; +\n                &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    // Display information on the ISBN element.\n    XmlElement elem = (XmlElement) doc.DocumentElement.FirstChild;\n    Console.Write(&quot;{0}:{1} = {2}&quot;, elem.Prefix, elem.LocalName, elem.InnerText);\n    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; namespaceURI=&quot; + elem.NamespaceURI);\n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.LocalName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;&quot;\n   &quot;&lt;bk:ISBN&gt;1-861001-57-5&lt;/bk:ISBN&gt;&quot;\n   &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot;\n   &quot;&lt;/book&gt;&quot; );\n   \n   // Display information on the ISBN element.\n   XmlElement^ elem = dynamic_cast&lt;XmlElement^&gt;(doc-&gt;DocumentElement-&gt;FirstChild);\n   Console::Write( &quot;{0}:{1} = {2}&quot;, elem-&gt;Prefix, elem-&gt;LocalName, elem-&gt;InnerText );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; namespaceURI={0}&quot;, elem-&gt;NamespaceURI );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_SchemaInfo\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_SchemaInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> object containing the post schema validation infoset of this node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SchemaInfo property is set when this node is validated.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_CloneNode_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_CloneNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CloneNode(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a duplicate of this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNode CloneNode (bool deep);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>deep</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to recursively clone the subtree under the specified node; <code>false</code> to clone only the node itself (and its attributes if the node is an <code>XmlElement</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></div>\r\n                  </div>\r\n                  <p>The cloned node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method serves as a copy constructor for nodes. The duplicate node has no parent (<a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_ParentNode_\" data-linktype=\"relative-path\">ParentNode</a> returns <code>null</code>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new element, clones it, and then adds both elements into an XML document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.CloneNode Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;Load( &quot;2books.xml&quot; );\n   \n   // Create a new element.\n   XmlElement^ elem = doc-&gt;CreateElement( &quot;misc&quot; );\n   elem-&gt;InnerText = &quot;hardcover&quot;;\n   elem-&gt;SetAttribute( &quot;publisher&quot;, &quot;WorldWide Publishing&quot; );\n   \n   // Clone the element so we can add one to each of the book nodes.\n   XmlNode^ elem2 = elem-&gt;CloneNode( true );\n   \n   // Add the new elements.\n   doc-&gt;DocumentElement-&gt;FirstChild-&gt;AppendChild( elem );\n   doc-&gt;DocumentElement-&gt;LastChild-&gt;AppendChild( elem2 );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   doc-&gt;Save( Console::Out );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.CloneNode Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.Load(&quot;2books.xml&quot;);\n\n    // Create a new element.\n    XmlElement elem = doc.CreateElement(&quot;misc&quot;);\n    elem.InnerText = &quot;hardcover&quot;;\n    elem.SetAttribute(&quot;publisher&quot;, &quot;WorldWide Publishing&quot;);\n\n    // Clone the element so we can add one to each of the book nodes.\n    XmlNode elem2 = elem.CloneNode(true);\n\n    // Add the new elements.\n    doc.DocumentElement.FirstChild.AppendChild(elem);\n    doc.DocumentElement.LastChild.AppendChild(elem2);\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    doc.Save(Console.Out);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.CloneNode Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        \n        Dim doc As New XmlDocument()\n        doc.Load(&quot;2books.xml&quot;)\n        \n        &#39; Create a new element.\n        Dim elem As XmlElement = doc.CreateElement(&quot;misc&quot;)\n        elem.InnerText = &quot;hardcover&quot;\n        elem.SetAttribute(&quot;publisher&quot;, &quot;WorldWide Publishing&quot;)\n        \n        &#39; Clone the element so we can add one to each of the book nodes.\n        Dim elem2 As XmlNode = elem.CloneNode(True)\n        \n        &#39; Add the new elements.\n        doc.DocumentElement.FirstChild.AppendChild(elem)\n        doc.DocumentElement.LastChild.AppendChild(elem2)\n        \n        Console.WriteLine(&quot;Display the modified XML...&quot;)\n        doc.Save(Console.Out)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_GetAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the value for the attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string GetAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute to retrieve. This is a qualified name. It is matched against the <code>Name</code> property of the matching node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks to see if the element has the specified attribute.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.HasAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Check to see if the element has a genre attribute.\n    if (root.HasAttribute(&quot;genre&quot;)){\n      String genre = root.GetAttribute(&quot;genre&quot;);\n      Console.WriteLine(genre);\n   }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.HasAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Check to see if the element has a genre attribute.\n    if (root.HasAttribute(&quot;genre&quot;))\n     Dim genre as String = root.GetAttribute(&quot;genre&quot;)\n     Console.WriteLine(genre)\n    end if\n       \n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.HasAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Check to see if the element has a genre attribute.\n   if ( root-&gt;HasAttribute( &quot;genre&quot; ) )\n   {\n      String^ genre = root-&gt;GetAttribute( &quot;genre&quot; );\n      Console::WriteLine( genre );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_GetAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the value for the attribute with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string GetAttribute (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute to retrieve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_GetAttributeNode_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_GetAttributeNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttributeNode(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <code>XmlAttribute</code> with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlAttribute GetAttributeNode (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute to retrieve. This is a qualified name. It is matched against the <code>Name</code> property of the matching node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The specified <code>XmlAttribute</code> or <code>null</code> if a matching attribute was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks to see if the element has the specified attribute.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.GetAttributeNode Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Check to see if the element has a genre attribute.\n   if ( root-&gt;HasAttribute( &quot;genre&quot; ) )\n   {\n      XmlAttribute^ attr = root-&gt;GetAttributeNode( &quot;genre&quot; );\n      Console::WriteLine( attr-&gt;Value );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.GetAttributeNode Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Check to see if the element has a genre attribute.\n    if (root.HasAttribute(&quot;genre&quot;)){\n      XmlAttribute attr = root.GetAttributeNode(&quot;genre&quot;);\n      Console.WriteLine(attr.Value);\n   }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.GetAttributeNode Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Check to see if the element has a genre attribute.\n    if (root.HasAttribute(&quot;genre&quot;))\n     Dim attr as XmlAttribute = root.GetAttributeNode(&quot;genre&quot;)\n     Console.WriteLine(attr.Value)\n    end if\n       \n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_GetAttributeNode_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_GetAttributeNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttributeNode(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlAttribute GetAttributeNode (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The specified <code>XmlAttribute</code> or <code>null</code> if a matching attribute was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_GetElementsByTagName_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_GetElementsByTagName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementsByTagName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all descendant elements that match the specified <span class=\"xref\">stem.Xml.XmlElement.Name*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name tag to match. This is a qualified name. It is matched against the <code>Name</code> property of the matching node. The asterisk (*) is a special value that matches all tags.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all matching nodes. The list is empty if there are no matching nodes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The nodes are placed in the order in which they would be encountered in a preorder traversal of the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> tree.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> It is recommended that you use the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_\" data-linktype=\"relative-path\">SelectNodes</a> or <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectSingleNode_\" data-linktype=\"relative-path\">SelectSingleNode</a> method instead of the GetElementsByTagName method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets and displays all the book titles.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.GetElementsByTagName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\n\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;Load( &quot;2books.xml&quot; );\n   \n   // Get and display all the book titles.\n   XmlElement^ root = doc-&gt;DocumentElement;\n   XmlNodeList^ elemList = root-&gt;GetElementsByTagName( &quot;title&quot; );\n   for ( int i = 0; i &lt; elemList-&gt;Count; i++ )\n   {\n      Console::WriteLine( elemList[ i ]-&gt;InnerXml );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.GetElementsByTagName Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.Load(&quot;2books.xml&quot;)\n                         \n     &#39; Get and display all the book titles.\n     Dim root as XmlElement = doc.DocumentElement\n     Dim elemList as XmlNodeList = root.GetElementsByTagName(&quot;title&quot;)\n     Dim i as integer\n     for i=0  to elemList.Count-1\n        Console.WriteLine(elemList.ItemOf(i).InnerXml)\n     next\n    \n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.GetElementsByTagName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n     XmlDocument doc = new XmlDocument();\n     doc.Load(&quot;2books.xml&quot;);\n                         \n     // Get and display all the book titles.\n     XmlElement root = doc.DocumentElement;\n     XmlNodeList elemList = root.GetElementsByTagName(&quot;title&quot;);\n     for (int i=0; i &lt; elemList.Count; i++)\n     {   \n        Console.WriteLine(elemList[i].InnerXml);\n     } \n    \n  }\n}\n</code></pre><p> The example uses the file, <code>2books.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlElement.GetElementsByTagName Example#2\">&lt;!--sample XML fragment--&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;10-861003-324&#39;&gt;\n    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n    &lt;price&gt;19.95&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;\n    &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n    &lt;price&gt;24.95&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_GetElementsByTagName_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_GetElementsByTagName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementsByTagName(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all descendant elements that match the specified <span class=\"xref\">stem.Xml.XmlElement.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlElement.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name to match. The asterisk (*) is a special value that matches all tags.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> containing a list of all matching nodes. The list is empty if there are no matching nodes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The nodes are placed in the order in which they would be encountered in a preorder traversal of the <code>XmlElement</code> tree.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> It is recommended that you use the <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectNodes_\" data-linktype=\"relative-path\">SelectNodes</a> or <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_SelectSingleNode_\" data-linktype=\"relative-path\">SelectSingleNode</a> method instead of the GetElementsByTagName method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_HasAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_HasAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current node has an attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool HasAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute to find. This is a qualified name. It is matched against the <code>Name</code> property of the matching node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node has the specified attribute; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks to see if the element has the specified attribute.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.HasAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Check to see if the element has a genre attribute.\n    if (root.HasAttribute(&quot;genre&quot;)){\n      String genre = root.GetAttribute(&quot;genre&quot;);\n      Console.WriteLine(genre);\n   }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.HasAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Check to see if the element has a genre attribute.\n    if (root.HasAttribute(&quot;genre&quot;))\n     Dim genre as String = root.GetAttribute(&quot;genre&quot;)\n     Console.WriteLine(genre)\n    end if\n       \n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.HasAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Check to see if the element has a genre attribute.\n   if ( root-&gt;HasAttribute( &quot;genre&quot; ) )\n   {\n      String^ genre = root-&gt;GetAttribute( &quot;genre&quot; );\n      Console::WriteLine( genre );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_HasAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_HasAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current node has an attribute with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool HasAttribute (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute to find.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute to find.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node has the specified attribute; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_RemoveAll\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_RemoveAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAll()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all specified attributes and children of the current node. Default attributes are not removed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void RemoveAll ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes all attributes and child nodes from the root element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.RemoveAll Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   \n   // Remove all attributes and child nodes from the book element.\n   XmlElement^ root = doc-&gt;DocumentElement;\n   root-&gt;RemoveAll();\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.RemoveAll Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Remove all attributes and child nodes from the book element.\n    root.RemoveAll()\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.RemoveAll Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    // Remove all attributes and child nodes from the book element.\n    XmlElement root = doc.DocumentElement;\n    root.RemoveAll();\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_RemoveAllAttributes\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_RemoveAllAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAllAttributes()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all specified attributes from the element. Default attributes are not removed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void RemoveAllAttributes ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes all attributes from the root element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.RemoveAllAttributes Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Remove all attributes from the root element.\n   root-&gt;RemoveAllAttributes();\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.RemoveAllAttributes Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Remove all attributes from the root element.\n    root.RemoveAllAttributes();\n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.RemoveAllAttributes Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Remove all attributes from the root element.\n    root.RemoveAllAttributes()\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_RemoveAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_RemoveAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Removes an attribute by name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void RemoveAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute to remove.This is a qualified name. It is matched against the <code>Name</code> property of the matching node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The node is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the removed attribute is known to have a default value, an attribute immediately appears containing the default value and, if applicable, the corresponding namespace URI, local name, and prefix.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes an attribute from an element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.RemoveAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Remove the genre attribute.\n   root-&gt;RemoveAttribute( &quot;genre&quot; );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.RemoveAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Remove the genre attribute.\n    root.RemoveAttribute(&quot;genre&quot;);\n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.RemoveAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Remove the genre attribute.\n    root.RemoveAttribute(&quot;genre&quot;)\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_RemoveAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_RemoveAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void RemoveAttribute (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute to remove.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The node is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the removed attribute is known to have a default value, an attribute immediately appears containing the default value and, if applicable, the corresponding namespace URI, local name, and prefix.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes an attribute from an element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.RemoveAttribute1 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Remove the ISBN attribute.\n   root-&gt;RemoveAttribute( &quot;ISBN&quot;, &quot;urn:samples&quot; );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.RemoveAttribute1 Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Remove the ISBN attribute.\n    root.RemoveAttribute(&quot;ISBN&quot;, &quot;urn:samples&quot;)\n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.RemoveAttribute1 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Remove the ISBN attribute.\n    root.RemoveAttribute(&quot;ISBN&quot;, &quot;urn:samples&quot;);\n     \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_RemoveAttributeAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_RemoveAttributeAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAttributeAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNode RemoveAttributeAt (int i);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>i</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the node to remove. The first node has index 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></div>\r\n                  </div>\r\n                  <p>The attribute node removed or <code>null</code> if there is no node at the given index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes an attribute from an element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.RemoveAttributeAt Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Remove the genre attribute.\n   root-&gt;RemoveAttributeAt( 0 );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.RemoveAttributeAt Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)      \n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Remove the genre attribute.\n    root.RemoveAttributeAt(0)\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.RemoveAttributeAt Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Remove the genre attribute.\n    root.RemoveAttributeAt(0);\n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_RemoveAttributeNode_System_Xml_XmlAttribute_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_RemoveAttributeNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAttributeNode(XmlAttribute)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the specified <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlAttribute RemoveAttributeNode (System.Xml.XmlAttribute oldAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlAttribute</code> node to remove. If the removed attribute has a default value, it is immediately replaced.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The removed <code>XmlAttribute</code> or <code>null</code> if <code>oldAttr</code> is not an attribute node of the <code>XmlElement</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>This node is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_RemoveAttributeNode_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_RemoveAttributeNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAttributeNode(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlAttribute RemoveAttributeNode (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The removed <code>XmlAttribute</code> or <code>null</code> if the <code>XmlElement</code> does not have a matching attribute node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>This node is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes an attribute from an element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.RemoveAttributeNode1 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Remove the ISBN attribute.\n   root-&gt;RemoveAttributeNode( &quot;ISBN&quot;, &quot;urn:samples&quot; );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.RemoveAttributeNode1 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Remove the ISBN attribute.\n    root.RemoveAttributeNode(&quot;ISBN&quot;, &quot;urn:samples&quot;);\n     \n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.RemoveAttributeNode1 Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Remove the ISBN attribute.\n    root.RemoveAttributeNode(&quot;ISBN&quot;, &quot;urn:samples&quot;)\n    \n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_SetAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_SetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of the attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void SetAttribute (string name, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to set for the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The specified name contains an invalid character.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The node is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an attribute with the same name is already present in the element, its value is changed to that of <code>value</code>. <code>value</code> is a simple string. It is not parsed as it is being set. Any markup, such as syntax to be recognized as an entity reference, is treated as literal text and needs to be properly escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> node plus any <a class=\"xref\" href=\"system.xml.xmltext\" data-linktype=\"relative-path\">XmlText</a> and <a class=\"xref\" href=\"system.xml.xmlentityreference\" data-linktype=\"relative-path\">XmlEntityReference</a> nodes, build the appropriate subtree and use <a class=\"xref\" href=\"system.xml.xmlelement#System_Xml_XmlElement_SetAttributeNode_\" data-linktype=\"relative-path\">SetAttributeNode</a> to assign it as the value of an attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_SetAttribute_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_SetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAttribute(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of the attribute with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string SetAttribute (string localName, string namespaceURI, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to set for the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The attribute value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_SetAttributeNode_System_Xml_XmlAttribute_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_SetAttributeNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAttributeNode(XmlAttribute)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlAttribute SetAttributeNode (System.Xml.XmlAttribute newAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlAttribute</code> node to add to the attribute collection for this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>If the attribute replaces an existing attribute with the same name, the old <code>XmlAttribute</code> is returned; otherwise, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>newAttr</code> was created from a different document than the one that created this node. Or this node is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>newAttr</code> is already an attribute of another <code>XmlElement</code> object. You must explicitly clone <code>XmlAttribute</code> nodes to re-use them in other <code>XmlElement</code> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an attribute with that name is already present in the element, it is replaced by the new one.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_SetAttributeNode_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_SetAttributeNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAttributeNode(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlAttribute SetAttributeNode (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlAttribute</code> to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>XmlAttribute</code> does not have any children. Use <a class=\"xref\" href=\"system.xml.xmlattribute#System_Xml_XmlAttribute_Value_\" data-linktype=\"relative-path\">Value</a> to assign a text value to the attribute or use <a class=\"xref\" href=\"system.xml.xmlnode#System_Xml_XmlNode_AppendChild_\" data-linktype=\"relative-path\">AppendChild</a> (or a similar method) to add children to the attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds an attribute to an element.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.SetAttributeNode1 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Add a new attribute.\n    XmlAttribute attr = root.SetAttributeNode(&quot;genre&quot;, &quot;urn:samples&quot;);\n    attr.Value=&quot;novel&quot;;\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    Console.WriteLine(doc.InnerXml);\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.SetAttributeNode1 Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Add a new attribute.\n    Dim attr as XmlAttribute = root.SetAttributeNode(&quot;genre&quot;, &quot;urn:samples&quot;)\n    attr.Value=&quot;novel&quot;\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Console.WriteLine(doc.InnerXml)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.SetAttributeNode1 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Add a new attribute.\n   XmlAttribute^ attr = root-&gt;SetAttributeNode( &quot;genre&quot;, &quot;urn:samples&quot; );\n   attr-&gt;Value = &quot;novel&quot;;\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   Console::WriteLine( doc-&gt;InnerXml );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_WriteContentTo_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_WriteContentTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteContentTo(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Saves all the children of the node to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteContentTo (System.Xml.XmlWriter w);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>w</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlWriter</code> to which you want to save.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the element to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.WriteContentTo Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Note that because WriteContentTo saves only the children of the element\n   // to the writer none of the attributes are displayed.\n   Console::WriteLine( &quot;Display the contents of the element...&quot; );\n   XmlTextWriter^ writer = gcnew XmlTextWriter( Console::Out );\n   writer-&gt;Formatting = Formatting::Indented;\n   root-&gt;WriteContentTo( writer );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.WriteContentTo Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                      &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                      &quot;&lt;/book&gt;&quot;)\n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Note that because WriteContentTo saves only the children of the element\n    &#39; to the writer none of the attributes are displayed.\n    Console.WriteLine(&quot;Display the contents of the element...&quot;)\n    Dim writer as XmlTextWriter = new XmlTextWriter(Console.Out)\n    writer.Formatting = Formatting.Indented\n    root.WriteTo(writer)\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.WriteContentTo Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Note that because WriteContentTo saves only the children of the element\n    // to the writer none of the attributes are displayed.\n    Console.WriteLine(&quot;Display the contents of the element...&quot;);\n    XmlTextWriter writer = new XmlTextWriter(Console.Out);\n    writer.Formatting = Formatting.Indented;\n    root.WriteContentTo(writer);\n\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlElement_WriteTo_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_XmlElement_WriteTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteTo(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Saves the current node to the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteTo (System.Xml.XmlWriter w);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>w</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlWriter</code> to which you want to save.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds an attribute to an element and then displays the modified element.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlElement.WriteTo Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n\n    XmlDocument doc = new XmlDocument();\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; +\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                &quot;&lt;/book&gt;&quot;);\n\n    XmlElement root = doc.DocumentElement;\n\n    // Add a new attribute.\n    root.SetAttribute(&quot;genre&quot;, &quot;urn:samples&quot;, &quot;novel&quot;);\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;);\n    XmlTextWriter writer = new XmlTextWriter(Console.Out);\n    writer.Formatting = Formatting.Indented;\n    root.WriteTo(writer);\n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlElement.WriteTo Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( &quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&lt;/book&gt;&quot; );\n   XmlElement^ root = doc-&gt;DocumentElement;\n   \n   // Add a new attribute.\n   root-&gt;SetAttribute( &quot;genre&quot;, &quot;urn:samples&quot;, &quot;novel&quot; );\n   Console::WriteLine( &quot;Display the modified XML...&quot; );\n   XmlTextWriter^ writer = gcnew XmlTextWriter( Console::Out );\n   writer-&gt;Formatting = Formatting::Indented;\n   root-&gt;WriteTo( writer );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlElement.WriteTo Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n    Dim doc as XmlDocument = new XmlDocument()\n    doc.LoadXml(&quot;&lt;book xmlns:bk=&#39;urn:samples&#39; bk:ISBN=&#39;1-861001-57-5&#39;&gt;&quot; &amp; _\n                &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                &quot;&lt;/book&gt;&quot;)\n\n    Dim root as XmlElement = doc.DocumentElement\n\n    &#39; Add a new attribute.\n    root.SetAttribute(&quot;genre&quot;, &quot;urn:samples&quot;, &quot;novel&quot;)\n\n    Console.WriteLine(&quot;Display the modified XML...&quot;)\n    Dim writer as XmlTextWriter = new XmlTextWriter(Console.Out)\n    writer.Formatting = Formatting.Indented\n    root.WriteTo(writer)\n\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlElement.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.CloneNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.GetAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.GetAttributeNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.GetElementsByTagName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.HasAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.HasAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.InnerText\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.InnerXml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.IsEmpty\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.LocalName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.NamespaceURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.NextSibling\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.OwnerDocument\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.ParentNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.Prefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.RemoveAll\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.RemoveAllAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.RemoveAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.RemoveAttributeAt\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.RemoveAttributeNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.SchemaInfo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.SetAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.SetAttributeNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.WriteContentTo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlElement.WriteTo\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4101cb45-9af4-5a8e-b1ec-1af46433da77\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Xml\\XmlElement.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an element.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.XmlElement\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlElement.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlElement.yml","open_to_public_contributors":true,"api_name":["System.Xml.XmlElement","System.Xml.XmlElement..ctor","System.Xml.XmlElement.Attributes","System.Xml.XmlElement.CloneNode","System.Xml.XmlElement.GetAttribute","System.Xml.XmlElement.GetAttributeNode","System.Xml.XmlElement.GetElementsByTagName","System.Xml.XmlElement.HasAttribute","System.Xml.XmlElement.HasAttributes","System.Xml.XmlElement.InnerText","System.Xml.XmlElement.InnerXml","System.Xml.XmlElement.IsEmpty","System.Xml.XmlElement.LocalName","System.Xml.XmlElement.Name","System.Xml.XmlElement.NamespaceURI","System.Xml.XmlElement.NextSibling","System.Xml.XmlElement.NodeType","System.Xml.XmlElement.OwnerDocument","System.Xml.XmlElement.ParentNode","System.Xml.XmlElement.Prefix","System.Xml.XmlElement.RemoveAll","System.Xml.XmlElement.RemoveAllAttributes","System.Xml.XmlElement.RemoveAttribute","System.Xml.XmlElement.RemoveAttributeAt","System.Xml.XmlElement.RemoveAttributeNode","System.Xml.XmlElement.SchemaInfo","System.Xml.XmlElement.SetAttribute","System.Xml.XmlElement.SetAttributeNode","System.Xml.XmlElement.WriteContentTo","System.Xml.XmlElement.WriteTo"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.XmlElement","System::Xml::XmlElement","System.Xml.XmlElement.#ctor","System::Xml::XmlElement::#ctor","System.Xml.XmlElement.Attributes","System::Xml::XmlElement::Attributes","System.Xml.XmlElement.CloneNode","System::Xml::XmlElement::CloneNode","System.Xml.XmlElement.GetAttribute","System::Xml::XmlElement::GetAttribute","System.Xml.XmlElement.GetAttributeNode","System::Xml::XmlElement::GetAttributeNode","System.Xml.XmlElement.GetElementsByTagName","System::Xml::XmlElement::GetElementsByTagName","System.Xml.XmlElement.HasAttribute","System::Xml::XmlElement::HasAttribute","System.Xml.XmlElement.HasAttributes","System::Xml::XmlElement::HasAttributes","System.Xml.XmlElement.InnerText","System::Xml::XmlElement::InnerText","System.Xml.XmlElement.InnerXml","System::Xml::XmlElement::InnerXml","System.Xml.XmlElement.IsEmpty","System::Xml::XmlElement::IsEmpty","System.Xml.XmlElement.LocalName","System::Xml::XmlElement::LocalName","System.Xml.XmlElement.Name","System::Xml::XmlElement::Name","System.Xml.XmlElement.NamespaceURI","System::Xml::XmlElement::NamespaceURI","System.Xml.XmlElement.NextSibling","System::Xml::XmlElement::NextSibling","System.Xml.XmlElement.NodeType","System::Xml::XmlElement::NodeType","System.Xml.XmlElement.OwnerDocument","System::Xml::XmlElement::OwnerDocument","System.Xml.XmlElement.ParentNode","System::Xml::XmlElement::ParentNode","System.Xml.XmlElement.Prefix","System::Xml::XmlElement::Prefix","System.Xml.XmlElement.RemoveAll","System::Xml::XmlElement::RemoveAll","System.Xml.XmlElement.RemoveAllAttributes","System::Xml::XmlElement::RemoveAllAttributes","System.Xml.XmlElement.RemoveAttribute","System::Xml::XmlElement::RemoveAttribute","System.Xml.XmlElement.RemoveAttributeAt","System::Xml::XmlElement::RemoveAttributeAt","System.Xml.XmlElement.RemoveAttributeNode","System::Xml::XmlElement::RemoveAttributeNode","System.Xml.XmlElement.SchemaInfo","System::Xml::XmlElement::SchemaInfo","System.Xml.XmlElement.SetAttribute","System::Xml::XmlElement::SetAttribute","System.Xml.XmlElement.SetAttributeNode","System::Xml::XmlElement::SetAttributeNode","System.Xml.XmlElement.WriteContentTo","System::Xml::XmlElement::WriteContentTo","System.Xml.XmlElement.WriteTo","System::Xml::XmlElement::WriteTo"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4101cb45-9af4-5a8e-b1ec-1af46433da77","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Xml\\XmlElement.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml/XmlElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlElement class | Microsoft Docs","_op_ogTitle":"XmlElement class","description":"Represents an element.\n","toc_asset_id":"_splitted/System.Xml/toc.json","toc_rel":"_splitted/System.Xml/toc.json","source_url":"","ms.assetid":"System.Xml.XmlElement","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmlelement","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmlelement","fileRelativePath":"System.Xml.XmlElement.html"},"themesRelativePathToOutputRoot":"_themes/"}