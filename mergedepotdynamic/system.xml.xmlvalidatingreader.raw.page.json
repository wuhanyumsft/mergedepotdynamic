{"content":"    \r\n    <h1 id=\"System_Xml_XmlValidatingReader\">\r\n      <span class=\"lang-csharp\">XmlValidatingReader</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.  </p>\n<p> This class is obsolete. Starting with the .NET Framework 2.0, we recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <span class=\"xref\">stem.Xml.XmlReader.Create*</span> method to create a validating XML reader.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Obsolete(&quot;Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202&quot;)]\npublic class XmlValidatingReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">System.Xml.XmlReader</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlValidatingReader</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_CanReadValueChunk\" data-linktype=\"relative-path\">CanReadValueChunk</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_\" data-linktype=\"relative-path\">Create(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_String_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(Stream,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_\" data-linktype=\"relative-path\">Create(TextReader)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_String_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(TextReader,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(String,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"relative-path\">Create(String,XmlReaderSettings,XmlParserContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_System_Xml_XmlReader_System_Xml_XmlReaderSettings_\" data-linktype=\"relative-path\">Create(XmlReader,XmlReaderSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_GetValueAsync\" data-linktype=\"relative-path\">GetValueAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_HasAttributes\" data-linktype=\"relative-path\">HasAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsName_System_String_\" data-linktype=\"relative-path\">IsName(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsNameToken_System_String_\" data-linktype=\"relative-path\">IsNameToken(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement\" data-linktype=\"relative-path\">IsStartElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_System_String_\" data-linktype=\"relative-path\">IsStartElement(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_System_String_System_String_\" data-linktype=\"relative-path\">IsStartElement(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_Int32_\" data-linktype=\"relative-path\">Item(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_String_\" data-linktype=\"relative-path\">Item(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_System_String_System_String_\" data-linktype=\"relative-path\">Item(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContent\" data-linktype=\"relative-path\">MoveToContent()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContentAsync\" data-linktype=\"relative-path\">MoveToContentAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadAsync\" data-linktype=\"relative-path\">ReadAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadContentAs(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadContentAsAsync(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadContentAsBase64Async(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadContentAsBinHexAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBoolean\" data-linktype=\"relative-path\">ReadContentAsBoolean()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDateTime\" data-linktype=\"relative-path\">ReadContentAsDateTime()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDateTimeOffset\" data-linktype=\"relative-path\">ReadContentAsDateTimeOffset()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDecimal\" data-linktype=\"relative-path\">ReadContentAsDecimal()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDouble\" data-linktype=\"relative-path\">ReadContentAsDouble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsFloat\" data-linktype=\"relative-path\">ReadContentAsFloat()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsInt\" data-linktype=\"relative-path\">ReadContentAsInt()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsLong\" data-linktype=\"relative-path\">ReadContentAsLong()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObject\" data-linktype=\"relative-path\">ReadContentAsObject()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObjectAsync\" data-linktype=\"relative-path\">ReadContentAsObjectAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsString\" data-linktype=\"relative-path\">ReadContentAsString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsStringAsync\" data-linktype=\"relative-path\">ReadContentAsStringAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadElementContentAs(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAs(Type,IXmlNamespaceResolver,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"relative-path\">ReadElementContentAsAsync(Type,IXmlNamespaceResolver)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadElementContentAsBase64Async(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadElementContentAsBinHexAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBoolean\" data-linktype=\"relative-path\">ReadElementContentAsBoolean()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBoolean_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsBoolean(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDateTime\" data-linktype=\"relative-path\">ReadElementContentAsDateTime()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDateTime_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDateTime(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDecimal\" data-linktype=\"relative-path\">ReadElementContentAsDecimal()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDecimal_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDecimal(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDouble\" data-linktype=\"relative-path\">ReadElementContentAsDouble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDouble_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsDouble(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsFloat\" data-linktype=\"relative-path\">ReadElementContentAsFloat()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsFloat_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsFloat(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsInt\" data-linktype=\"relative-path\">ReadElementContentAsInt()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsInt_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsInt(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsLong\" data-linktype=\"relative-path\">ReadElementContentAsLong()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsLong_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsLong(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObject\" data-linktype=\"relative-path\">ReadElementContentAsObject()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObject_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsObject(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObjectAsync\" data-linktype=\"relative-path\">ReadElementContentAsObjectAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsString(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsStringAsync\" data-linktype=\"relative-path\">ReadElementContentAsStringAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString\" data-linktype=\"relative-path\">ReadElementString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString_System_String_\" data-linktype=\"relative-path\">ReadElementString(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementString(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadEndElement\" data-linktype=\"relative-path\">ReadEndElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml\" data-linktype=\"relative-path\">ReadInnerXml()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXmlAsync\" data-linktype=\"relative-path\">ReadInnerXmlAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXml\" data-linktype=\"relative-path\">ReadOuterXml()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXmlAsync\" data-linktype=\"relative-path\">ReadOuterXmlAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement\" data-linktype=\"relative-path\">ReadStartElement()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement_System_String_\" data-linktype=\"relative-path\">ReadStartElement(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement_System_String_System_String_\" data-linktype=\"relative-path\">ReadStartElement(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadSubtree\" data-linktype=\"relative-path\">ReadSubtree()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToDescendant_System_String_\" data-linktype=\"relative-path\">ReadToDescendant(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToDescendant_System_String_System_String_\" data-linktype=\"relative-path\">ReadToDescendant(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToFollowing_System_String_\" data-linktype=\"relative-path\">ReadToFollowing(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToFollowing_System_String_System_String_\" data-linktype=\"relative-path\">ReadToFollowing(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToNextSibling_System_String_\" data-linktype=\"relative-path\">ReadToNextSibling(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToNextSibling_System_String_System_String_\" data-linktype=\"relative-path\">ReadToNextSibling(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunk_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadValueChunk(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunkAsync_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadValueChunkAsync(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_SchemaInfo\" data-linktype=\"relative-path\">SchemaInfo</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Settings\" data-linktype=\"relative-path\">Settings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Skip\" data-linktype=\"relative-path\">Skip()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_SkipAsync\" data-linktype=\"relative-path\">SkipAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ValueType\" data-linktype=\"relative-path\">ValueType</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p><code>XmlValidatingReader</code> implements the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> class and provides support for data validation. Use the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Schemas_\" data-linktype=\"relative-path\">Schemas</a> property to have the reader validate by using schema files that are cached in an <a class=\"xref\" href=\"system.xml.schema.xmlschemacollection\" data-linktype=\"relative-path\">XmlSchemaCollection</a>. The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ValidationType_\" data-linktype=\"relative-path\">ValidationType</a> property specifies what type of validation the reader should perform. Setting the property to ValidationType.None creates a non-validating reader.  </p>\n<p> XmlValidatingReader throws an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> on XML parse errors. After an exception is thrown the state of the reader is not predictable. For example, the reported node type may be different than the actual node type of the current node. Use the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ReadState_\" data-linktype=\"relative-path\">ReadState</a> property to check whether a reader is in error state.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The XmlValidatingReader class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader__ctor_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">XmlValidatingReader(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>XmlValidatingReader</code> class that validates the content returned from the given <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader__ctor_System_IO_Stream_System_Xml_XmlNodeType_System_Xml_XmlParserContext_\" data-linktype=\"self-bookmark\">XmlValidatingReader(Stream,XmlNodeType,XmlParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>XmlValidatingReader</code> class with the specified values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader__ctor_System_String_System_Xml_XmlNodeType_System_Xml_XmlParserContext_\" data-linktype=\"self-bookmark\">XmlValidatingReader(String,XmlNodeType,XmlParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>XmlValidatingReader</code> class with the specified values.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_AttributeCount\" data-linktype=\"self-bookmark\">AttributeCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of attributes on the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_BaseURI\" data-linktype=\"self-bookmark\">BaseURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the base URI of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_CanReadBinaryContent\" data-linktype=\"self-bookmark\">CanReadBinaryContent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> implements the binary content read methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_CanResolveEntity\" data-linktype=\"self-bookmark\">CanResolveEntity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Depth\" data-linktype=\"self-bookmark\">Depth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the depth of the current node in the XML document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Encoding\" data-linktype=\"self-bookmark\">Encoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the encoding attribute for the document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_EntityHandling\" data-linktype=\"self-bookmark\">EntityHandling</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies how the reader handles entities.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_EOF\" data-linktype=\"self-bookmark\">EOF</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the reader is positioned at the end of the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_HasValue\" data-linktype=\"self-bookmark\">HasValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node can have a <span class=\"xref\">stem.Xml.XmlValidatingReader.Value*</span> other than String.Empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_IsDefault\" data-linktype=\"self-bookmark\">IsDefault</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_IsEmptyElement\" data-linktype=\"self-bookmark\">IsEmptyElement</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node is an empty element (for example, <code><myelement></myelement></code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_LineNumber\" data-linktype=\"self-bookmark\">LineNumber</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current line number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_LinePosition\" data-linktype=\"self-bookmark\">LinePosition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current line position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_LocalName\" data-linktype=\"self-bookmark\">LocalName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the local name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the qualified name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Namespaces\" data-linktype=\"self-bookmark\">Namespaces</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to do namespace support.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_NamespaceURI\" data-linktype=\"self-bookmark\">NamespaceURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_NameTable\" data-linktype=\"self-bookmark\">NameTable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Prefix\" data-linktype=\"self-bookmark\">Prefix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace prefix associated with the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_QuoteChar\" data-linktype=\"self-bookmark\">QuoteChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the quotation mark character used to enclose the value of an attribute node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Reader\" data-linktype=\"self-bookmark\">Reader</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> used to construct this <code>XmlValidatingReader</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ReadState\" data-linktype=\"self-bookmark\">ReadState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the state of the reader.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Schemas\" data-linktype=\"self-bookmark\">Schemas</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.xml.schema.xmlschemacollection\" data-linktype=\"relative-path\">XmlSchemaCollection</a> to use for validation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_SchemaType\" data-linktype=\"self-bookmark\">SchemaType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a schema type object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ValidationType\" data-linktype=\"self-bookmark\">ValidationType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating the type of validation to perform.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the text value of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_XmlLang\" data-linktype=\"self-bookmark\">XmlLang</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <code>xml:lang</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_XmlResolver\" data-linktype=\"self-bookmark\">XmlResolver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> used for resolving external document type definition (DTD) and schema location references. The <code>XmlResolver</code> is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_XmlSpace\" data-linktype=\"self-bookmark\">XmlSpace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <code>xml:space</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the <span class=\"xref\">stem.Xml.XmlReader.ReadState*</span> to Closed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_GetAttribute_System_Int32_\" data-linktype=\"self-bookmark\">GetAttribute(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_GetAttribute_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_GetAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_HasLineInfo\" data-linktype=\"self-bookmark\">HasLineInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the class can return line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_LookupNamespace_System_String_\" data-linktype=\"self-bookmark\">LookupNamespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves a namespace prefix in the current element&#39;s scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_MoveToAttribute_System_Int32_\" data-linktype=\"self-bookmark\">MoveToAttribute(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_MoveToAttribute_System_String_\" data-linktype=\"self-bookmark\">MoveToAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_MoveToAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">MoveToAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_MoveToElement\" data-linktype=\"self-bookmark\">MoveToElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the element that contains the current attribute node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_MoveToFirstAttribute\" data-linktype=\"self-bookmark\">MoveToFirstAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the first attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_MoveToNextAttribute\" data-linktype=\"self-bookmark\">MoveToNextAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves to the next attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_Read\" data-linktype=\"self-bookmark\">Read()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the next node from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ReadAttributeValue\" data-linktype=\"self-bookmark\">ReadAttributeValue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Parses the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ReadContentAsBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content and returns the Base64 decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ReadContentAsBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content and returns the BinHex decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ReadElementContentAsBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element and decodes the Base64 content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ReadElementContentAsBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element and decodes the BinHex content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ReadString\" data-linktype=\"self-bookmark\">ReadString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the contents of an element or text node as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ReadTypedValue\" data-linktype=\"self-bookmark\">ReadTypedValue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the common language runtime type for the specified XML Schema definition language (XSD) type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ResolveEntity\" data-linktype=\"self-bookmark\">ResolveEntity()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves the entity reference for <code>EntityReference</code> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_ValidationEventHandler\" data-linktype=\"self-bookmark\">ValidationEventHandler</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_System_Xml_XmlNamespaceScope_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.GetNamespacesInScope*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_System_String_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.LookupNamespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupNamespace*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_System_String_\" data-linktype=\"self-bookmark\">IXmlNamespaceResolver.LookupPrefix(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupPrefix*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader__ctor_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlValidatingReader(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>XmlValidatingReader</code> class that validates the content returned from the given <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlValidatingReader (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">System.Xml.XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>XmlReader</code> to read from while validating. The current implementation supports only <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The reader specified is not an <code>XmlTextReader</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> All nodes returned from the given <code>XmlReader</code> are also returned from this validating reader, so there is no information loss in the process. New nodes not returned from the underlying reader may be added by this reader (for example, default attributes and the children of an entity reference). Any properties set on the given <code>XmlTextReader</code> also apply to this validating reader. For example, if the supplied reader had WhitespaceHandling.None set, this validating reader also ignores white space.  </p>\n<p> When external document type definitions (DTDs) or schemas are needed for validation, the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property sets the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> object to use for resolving external resources.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example validates two documents.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlValidatingReader.Cctor#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Schema;\npublic ref class Sample\n{\nprivate:\n   static Boolean m_success = true;\n\npublic:\n   Sample()\n   {\n      \n      // Validate the document using an external XSD schema.  Validation should fail.\n      Validate( &quot;notValidXSD.xml&quot; );\n      \n      // Validate the document using an inline XSD. Validation should succeed.\n      Validate( &quot;inlineXSD.xml&quot; );\n   }\n\n\nprivate:\n\n   // Display the validation error.\n   void ValidationCallBack( Object^ /*sender*/, ValidationEventArgs^ args )\n   {\n      m_success = false;\n      Console::WriteLine( &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Validation error: {0}&quot;, args-&gt;Message );\n   }\n\n   void Validate( String^ filename )\n   {\n      m_success = true;\n      Console::WriteLine( &quot;\\r<br>******&quot; );\n      Console::WriteLine( &quot;Validating XML file {0}&quot;, filename );\n      XmlTextReader^ txtreader = gcnew XmlTextReader( filename );\n      XmlValidatingReader^ reader = gcnew XmlValidatingReader( txtreader );\n      \n      // Set the validation event handler\n      reader-&gt;ValidationEventHandler += gcnew ValidationEventHandler( this, &amp;Sample::ValidationCallBack );\n      \n      // Read XML data\n      while ( reader-&gt;Read() )\n      {}\n\n      Console::WriteLine( &quot;Validation finished. Validation {0}&quot;, (m_success == true ? (String^)&quot;successful!&quot; : &quot;failed.&quot;) );\n      \n      // Close the reader.\n      reader-&gt;Close();\n   }\n\n};\n\nint main()\n{\n   Sample^ validation = gcnew Sample;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlValidatingReader.Cctor#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Schema\nImports Microsoft.VisualBasic\n\npublic class Sample\n\n  private m_success as Boolean = true\n\n  public sub New ()\n      &#39;Validate the document using an external XSD schema.  Validation should fail.\n      Validate(&quot;notValidXSD.xml&quot;) \n\n      &#39;Validate the document using an inline XSD. Validation should succeed.\n      Validate(&quot;inlineXSD.xml&quot;)\n  end sub\n\n  public shared sub Main ()\n \n      Dim validation as Sample = new Sample()\n  end sub\n\n  private sub Validate(filename as String)\n\n      m_success = true\n      Console.WriteLine()\n      Console.WriteLine(&quot;******&quot;)\n      Console.WriteLine(&quot;Validating XML file &quot; + filename.ToString())\n      Dim txtreader as XmlTextReader = new XmlTextReader (filename)\n      Dim reader as XmlValidatingReader = new XmlValidatingReader (txtreader)\n\n      &#39; Set the validation event handler\n      AddHandler reader.ValidationEventHandler, AddressOf ValidationCallBack\n\n      &#39; Read XML data\n      while (reader.Read())\n      end while\n      Console.WriteLine (&quot;Validation finished. Validation {0}&quot;, IIf(m_success, &quot;successful!&quot;, &quot;failed.&quot;))\n\n      &#39;Close the reader.\n      reader.Close()\n  end sub\n\n  &#39;Display the validation error.\n  Private sub ValidationCallBack (sender as object, args as ValidationEventArgs)\n\n     m_success = false\n     Console.WriteLine()\n     Console.WriteLine(&quot;  Validation error: &quot; + args.Message )\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlValidatingReader.Cctor#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Schema;\n\npublic class Sample\n{\n\n  private Boolean m_success = true;\n\n  public Sample ()\n  {\n      //Validate the document using an external XSD schema.  Validation should fail.\n      Validate(&quot;notValidXSD.xml&quot;); \n\n      //Validate the document using an inline XSD. Validation should succeed.\n      Validate(&quot;inlineXSD.xml&quot;);\n  }    \n\n  public static void Main ()\n  {\n      Sample validation = new Sample();\n  }\n\n  private void Validate(String filename)\n  {    \n      m_success = true;\n      Console.WriteLine(&quot;\\r<br>******&quot;);\n      Console.WriteLine(&quot;Validating XML file &quot; + filename.ToString());\n      XmlTextReader txtreader = new XmlTextReader (filename);\n      XmlValidatingReader reader = new XmlValidatingReader (txtreader);\n\n      // Set the validation event handler\n      reader.ValidationEventHandler += new ValidationEventHandler (ValidationCallBack);\n\n      // Read XML data\n      while (reader.Read()){}\n      Console.WriteLine (&quot;Validation finished. Validation {0}&quot;, (m_success==true ? &quot;successful!&quot; : &quot;failed.&quot;));\n\n      //Close the reader.\n      reader.Close();\n  }\n\n  //Display the validation error.\n  private void ValidationCallBack (object sender, ValidationEventArgs args)\n  {\n     m_success = false;\n     Console.WriteLine(&quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Validation error: &quot; + args.Message );\n  }\n}\n</code></pre><p> The sample uses the following input files:  </p>\n<p> <code>notValidXSD.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.Cctor#2\">&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;bookstore xmlns=&quot;urn:bookstore-schema&quot;\n     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n     xsi:schemaLocation=&quot;urn:bookstore-schema books.xsd&quot;&gt;\n  &lt;book&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n      &lt;last-name&gt;Franklin&lt;/last-name&gt;\n    &lt;/author&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot;&gt;\n    &lt;title&gt;The Confidence Man&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Herman&lt;/first-name&gt;\n      &lt;last-name&gt;Melville&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> <code>books.xsd</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.Cctor#3\">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;\n    xmlns=&quot;urn:bookstore-schema&quot;\n    elementFormDefault=&quot;qualified&quot;\n    targetNamespace=&quot;urn:bookstore-schema&quot;&gt;\n\n &lt;xsd:element name=&quot;bookstore&quot; type=&quot;bookstoreType&quot;/&gt;\n\n &lt;xsd:complexType name=&quot;bookstoreType&quot;&gt;\n  &lt;xsd:sequence maxOccurs=&quot;unbounded&quot;&gt;\n   &lt;xsd:element name=&quot;book&quot;  type=&quot;bookType&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;bookType&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;title&quot; type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;author&quot; type=&quot;authorName&quot;/&gt;\n   &lt;xsd:element name=&quot;price&quot;  type=&quot;xsd:decimal&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n  &lt;xsd:attribute name=&quot;genre&quot; type=&quot;xsd:string&quot;/&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;authorName&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;first-name&quot;  type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;last-name&quot; type=&quot;xsd:string&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n&lt;/xsd:schema&gt;\n</code></pre><p> <code>inlineXSD.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.Cctor#4\">&lt;store-data&gt;\n&lt;!--Inline XSD schema--&gt;\n&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n &lt;xsd:element name=&quot;bookstore&quot; type=&quot;bookstoreType&quot;/&gt;\n &lt;xsd:complexType name=&quot;bookstoreType&quot;&gt;\n  &lt;xsd:sequence maxOccurs=&quot;unbounded&quot;&gt;\n   &lt;xsd:element name=&quot;book&quot;  type=&quot;bookType&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;bookType&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;title&quot; type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;price&quot;  type=&quot;xsd:decimal&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n  &lt;xsd:attribute name=&quot;genre&quot; type=&quot;xsd:string&quot;/&gt;\n &lt;/xsd:complexType&gt;\n&lt;/xsd:schema&gt;\n&lt;!-- end of schema --&gt;\n\n&lt;bookstore&gt;\n  &lt;book genre=&quot;novel&quot;&gt;\n    &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n    &lt;price&gt;19.95&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n&lt;/store-data&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader__ctor_System_IO_Stream_System_Xml_XmlNodeType_System_Xml_XmlParserContext_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlValidatingReader(Stream,XmlNodeType,XmlParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>XmlValidatingReader</code> class with the specified values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlValidatingReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xmlFragment</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML fragment to parse.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fragType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> of the XML fragment. This determines what the fragment can contain (see table below).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a> in which the XML fragment is to be parsed. This includes the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> to use, encoding, namespace scope, current <code>xml:lang</code>, and <code>xml:space</code> scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p><code>fragType</code> is not one of the node types listed in the table below.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.  </p>\n<p> The following table lists valid values for <code>fragType</code> and how the reader parses each of the different node types.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Fragment May Contain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Element</td>\n<td>Any valid element content (for example, any combination of elements, comments, processing instructions, cdata, text, and entity references).</td>\n</tr>\n<tr>\n<td>Attribute</td>\n<td>The value of an attribute (the part inside the quotes).</td>\n</tr>\n<tr>\n<td>Document</td>\n<td>The contents of an entire XML document; this enforces document level rules.</td>\n</tr>\n</tbody>\n</table>\n<p> The reader uses the following steps to determine the encoding of the stream:  </p>\n<ol>\n<li><p>Checks the <a class=\"xref\" href=\"system.xml.xmlparsercontext#System_Xml_XmlParserContext_Encoding_\" data-linktype=\"relative-path\">Encoding</a> property to determine the encoding.  </p>\n</li>\n<li><p>If the <code>Encoding</code> property is <code>null</code>, the reader checks for a byte-order mark at the beginning of the stream.  </p>\n</li>\n<li><p>If the <code>Encoding</code> property is <code>null</code>, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.  </p>\n<p>If this reader will be validating using document type definition (DTD) (that is, <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ValidationType_\" data-linktype=\"relative-path\">ValidationType</a> is set to ValidationType.DTD or ValidationType.Auto), the <code>XmlParserContext</code> specified in the constructor must supply all the necessary DocumentType information.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> It is not possible to validate a fragment by using a DTD. By definition a DTD requires an entire document to be loaded for validation.  </p>\n</div>\n<p> If this reader will be validating by using XML-Data Reduced (XDR) or XML Schema definition language (XSD) schemas, use the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Schemas_\" data-linktype=\"relative-path\">Schemas</a> property to specify the <a class=\"xref\" href=\"system.xml.schema.xmlschemacollection\" data-linktype=\"relative-path\">XmlSchemaCollection</a> that contains the schemas (that is, the <code>XmlParserContext</code> does not need to supply the DocumentType information).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader__ctor_System_String_System_Xml_XmlNodeType_System_Xml_XmlParserContext_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlValidatingReader(String,XmlNodeType,XmlParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>XmlValidatingReader</code> class with the specified values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlValidatingReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xmlFragment</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string containing the XML fragment to parse.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fragType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> of the XML fragment. This also determines what the fragment string can contain (see table below).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a> in which the XML fragment is to be parsed. This includes the <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a> to use, encoding, namespace scope, current xml:lang, and xml:space scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p><code>fragType</code> is not one of the node types listed in the table below.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents. This constructor can handle strings returned from <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml_\" data-linktype=\"relative-path\">ReadInnerXml</a>.  </p>\n<p> The following table lists valid values for <code>fragType</code> and how the reader parses each of the different node types.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Fragment May Contain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Element</td>\n<td>Any valid element content (for example, any combination of elements, comments, processing instructions, cdata, text, and entity references).</td>\n</tr>\n<tr>\n<td>Attribute</td>\n<td>The value of an attribute (the part inside the quotes).</td>\n</tr>\n<tr>\n<td>Document</td>\n<td>The contents of an entire XML document; this enforces document level rules.</td>\n</tr>\n</tbody>\n</table>\n<p> If this reader will be validating by using document type definition (DTD) (that is, <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ValidationType_\" data-linktype=\"relative-path\">ValidationType</a> is set to ValidationType.DTD or ValidationType.Auto), the <code>XmlParserContext</code> specified in the constructor must supply all the necessary DocumentType information.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> It is not possible to validate a fragment by using DTD. By definition DTD requires an entire document to be loaded for validation.  </p>\n</div>\n<p> If this reader will be validating by using XML-Data Reduced (XDR) or XML Schema definition language (XSD) schemas, use the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Schemas_\" data-linktype=\"relative-path\">Schemas</a> property to specify the <a class=\"xref\" href=\"system.xml.schema.xmlschemacollection\" data-linktype=\"relative-path\">XmlSchemaCollection</a> that contains the schemas (the <code>XmlParserContext</code> does not need to supply the DocumentType information).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML fragment. It uses an <code>XmlParserContext</code> and its <a class=\"xref\" href=\"system.xml.xmlnamespacemanager\" data-linktype=\"relative-path\">XmlNamespaceManager</a> to handle namespace matching.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlParserContext.XmlParserContext Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n\n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n\n        Try\n            &#39;Create the XML fragment to be parsed.\n            Dim xmlFrag As String = &quot;&lt;book&gt; &quot; &amp; _\n                                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                                    &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; &amp; _\n                                    &quot;&lt;/book&gt;&quot;\n\n            &#39;Create the XmlNamespaceManager that is used to\n            &#39;look up namespace information.\n            Dim nt As New NameTable()\n            Dim nsmgr As New XmlNamespaceManager(nt)\n            nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;)\n\n            &#39;Create the XmlParserContext.\n            Dim context As New XmlParserContext(Nothing, nsmgr, Nothing, XmlSpace.None)\n\n            &#39;Implement the reader. \n            reader = New XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n\n            &#39;Parse the XML fragment.  If they exist, display the   \n            &#39;prefix and namespace URI of each element.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlParserContext.XmlParserContext Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n    public static void Main()\n    {\n        XmlTextReader reader = null;\n\n        try\n        {\n            //Create the XML fragment to be parsed.\n            string xmlFrag = &quot;&lt;book&gt; &quot; +\n                            &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                            &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; +\n                            &quot;&lt;/book&gt;&quot;;\n\n            //Create the XmlNamespaceManager that is used to\n            //look up namespace information.\n            NameTable nt = new NameTable();\n            XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n            nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;);\n\n            //Create the XmlParserContext.\n            XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n            //Implement the reader. \n            reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n\n            //Parse the XML fragment.  If they exist, display the   \n            //prefix and namespace URI of each element.\n            while (reader.Read())\n            {\n                if (reader.IsStartElement())\n                {\n                    if (reader.Prefix == String.Empty)\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n                    else\n                    {\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n                        Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n                    }\n                }\n            }\n\n\n        }\n\n        finally\n        {\n            if (reader != null)\n                reader.Close();\n        }\n    }\n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_AttributeCount\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_AttributeCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AttributeCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of attributes on the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int AttributeCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of attributes on the current node. This number includes default attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property is relevant to <code>Element</code>, <code>DocumentType</code>, and <code>XmlDeclaration</code> nodes only. (Other node types do not have attributes.)</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads all the elements on the root node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlValidatingReader reader = null;\n\n    try\n    {\n       //Create the string to parse.\n       string xmlFrag=&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;;\n\n       //Create the XmlNamespaceManager.\n       NameTable nt = new NameTable();\n       XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n\n       //Create the XmlParserContext.\n       XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n       //Create the XmlValidatingReader .\n       reader = new XmlValidatingReader(xmlFrag, XmlNodeType.Element, context);\n  \n       //Read the attributes on the root element.\n       reader.MoveToContent();\n       if (reader.HasAttributes){\n         for (int i=0; i&lt;reader.AttributeCount; i++){\n            reader.MoveToAttribute(i);\n            Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);\n         }\n         //Move the reader back to the node that owns the attribute.\n         reader.MoveToElement();\n       }\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlValidatingReader^ reader = nullptr;\n   try\n   {\n      \n      //Create the string to parse.\n      String^ xmlFrag = &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;;\n      \n      //Create the XmlNamespaceManager.\n      NameTable^ nt = gcnew NameTable;\n      XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n      \n      //Create the XmlParserContext.\n      XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n      \n      //Create the XmlValidatingReader .\n      reader = gcnew XmlValidatingReader( xmlFrag,XmlNodeType::Element,context );\n      \n      //Read the attributes on the root element.\n      reader-&gt;MoveToContent();\n      if ( reader-&gt;HasAttributes )\n      {\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::WriteLine( &quot;{0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement();\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlValidatingReader = Nothing\n        \n        Try\n            &#39;Create the string to parse.\n            Dim xmlFrag As String = &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;\n            \n            &#39;Create the XmlNamespaceManager.\n            Dim nt As New NameTable()\n            Dim nsmgr As New XmlNamespaceManager(nt)\n            \n            &#39;Create the XmlParserContext.\n            Dim context As New XmlParserContext(Nothing, nsmgr, Nothing, XmlSpace.None)\n            \n            &#39;Create the XmlValidatingReader .\n            reader = New XmlValidatingReader(xmlFrag, XmlNodeType.Element, context)\n            \n            &#39;Read the attributes on the root element.\n            reader.MoveToContent()\n            If reader.HasAttributes Then\n                Dim i As Integer\n                For i = 0 To reader.AttributeCount - 1\n                    reader.MoveToAttribute(i)\n                    Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)\n                Next i\n                &#39;Move the reader back to the node that owns the attribute.\n                reader.MoveToElement()\n            End If\n        \n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_BaseURI\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_BaseURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseURI</div>        \r\n          </div>\r\n    \r\n            <p>Gets the base URI of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string BaseURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The base URI of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> A networked XML document is comprised of chunks of data aggregated by using various World Wide Web Consortium (W3C) standard inclusion mechanisms and therefore contains nodes that come from different places. document type definition (DTD) entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), String.Empty is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses a file and displays the base URI of each node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.BaseURI Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n    XmlValidatingReader reader = null;\n    XmlTextReader txtreader = null;\n\n    try\n    {           \n        //Create the validating reader.\n        txtreader = new XmlTextReader(&quot;http://localhost/uri.xml&quot;);\n        reader = new XmlValidatingReader(txtreader);\n        reader.ValidationType = ValidationType.None;\n\n        //Parse the file and display the base URI for each node.\n        while (reader.Read())\n        {\n            Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.BaseURI);\n         }           \n     }\n\n     finally\n     {\n       if (reader!=null)\n         reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.BaseURI Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   \n   Public Shared Sub Main()\n      Dim reader As XmlValidatingReader = Nothing\n      Dim txtreader As XmlTextReader = Nothing\n      \n      Try\n         &#39;Create the validating reader.\n         txtreader = New XmlTextReader(&quot;http://localhost/uri.xml&quot;)\n         reader = New XmlValidatingReader(txtreader)\n         reader.ValidationType = ValidationType.None\n         \n         &#39;Parse the file and display the base URI for each node.\n         While reader.Read()\n            Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.BaseURI)\n         End While\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.BaseURI Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlValidatingReader^ reader = nullptr;\n   XmlTextReader^ txtreader = nullptr;\n   try\n   {\n      \n      //Create the validating reader.\n      txtreader = gcnew XmlTextReader( &quot;http://localhost/uri.xml&quot; );\n      reader = gcnew XmlValidatingReader( txtreader );\n      reader-&gt;ValidationType = ValidationType::None;\n      \n      //Parse the file and display the base URI for each node.\n      while ( reader-&gt;Read() )\n      {\n         Console::WriteLine( &quot;({0}) {1}&quot;, reader-&gt;NodeType, reader-&gt;BaseURI );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><p> The example uses the file, <code>uri.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.BaseURI Example#2\">\n&lt;!-- XML fragment --&gt;\n&lt;!DOCTYPE book [&lt;!ENTITY s SYSTEM &quot;tmp/style.xml&quot;&gt;]&gt;\n&lt;book genre=&quot;novel&quot;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;misc&gt;&amp;s;&lt;/misc&gt;\n&lt;/book&gt;\n</code></pre><p> The <code>style.xml</code> file contains the XML text <code>&lt;style&gt;hardcover&lt;/style&gt;</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_CanReadBinaryContent\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_CanReadBinaryContent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanReadBinaryContent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> implements the binary content read methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanReadBinaryContent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the binary content read methods are implemented; otherwise <code>false</code>. The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page..  </p>\n</div>\n<p> The binary content read methods include the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a>, <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a>, <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ReadElementContentAsBase64_\" data-linktype=\"relative-path\">ReadElementContentAsBase64</a>, and <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ReadElementContentAsBinHex_\" data-linktype=\"relative-path\">ReadElementContentAsBinHex</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_CanResolveEntity\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_CanResolveEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanResolveEntity</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanResolveEntity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader can parse and resolve entities; otherwise, <code>false</code>. <code>XmlValidatingReader</code> always returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Depth\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Depth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Depth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the depth of the current node in the XML document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int Depth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The depth of the current node in the XML document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each node including its depth, line number, and line position.  </p>\n<pre><code class=\"lang-cpp\" name=\"IXmlLineInfo#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the XML fragment to be parsed.\n   String^ xmlFrag = &quot;&lt;book&gt;<br>&quot;\n   &quot;&lt;misc&gt;<br>&quot;\n   &quot;&lt;style&gt;paperback&lt;/style&gt;<br>&quot;\n   &quot;&lt;pages&gt;240&lt;/pages&gt;<br>&quot;\n   &quot;&lt;/misc&gt;<br>&quot;\n   &quot;&lt;/book&gt;<br>&quot;;\n   \n   // Create the XmlNamespaceManager.\n   XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( gcnew NameTable );\n   \n   // Create the XmlParserContext.\n   XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n   \n   // Create the reader.\n   XmlValidatingReader^ reader = gcnew XmlValidatingReader( xmlFrag,XmlNodeType::Element,context );\n   IXmlLineInfo^ lineInfo = (dynamic_cast&lt;IXmlLineInfo^&gt;(reader));\n   if ( lineInfo-&gt;HasLineInfo() )\n   {\n      \n      // Parse the XML and display each node.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, lineInfo-&gt;LineNumber, lineInfo-&gt;LinePosition );\n               Console::WriteLine( &quot;&lt; {0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, lineInfo-&gt;LineNumber, lineInfo-&gt;LinePosition );\n               Console::WriteLine( &quot; {0}&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot; {0} {1}, {2}  &quot;, reader-&gt;Depth, lineInfo-&gt;LineNumber, lineInfo-&gt;LinePosition );\n               Console::WriteLine( &quot;&lt;/ {0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IXmlLineInfo#1\">Imports System\nImports System.IO\nImports System.Xml\nImports Microsoft.VisualBasic\n\npublic class Sample\n\n  public shared sub Main()\n\n    &#39; Create the XML fragment to be parsed.\n    Dim xmlFrag as string = &quot;&lt;book&gt;&quot; + Chr(10) &amp; _\n                            &quot;  &lt;misc&gt;&quot;  + Chr(10) &amp; _\n                            &quot;    &lt;style&gt;paperback&lt;/style&gt;&quot;  + Chr(10) &amp; _\n                            &quot;    &lt;pages&gt;240&lt;/pages&gt;&quot; + Chr(10) &amp; _\n                            &quot;  &lt;/misc&gt;&quot; + Chr(10) &amp; _\n                            &quot;&lt;/book&gt;&quot;\n\n    &#39; Create the XmlNamespaceManager.\n    Dim nsmgr as XmlNamespaceManager = new XmlNamespaceManager(new NameTable())\n\n    &#39; Create the XmlParserContext.\n    Dim context as XmlParserContext = new XmlParserContext(nothing, nsmgr, nothing, XmlSpace.None)\n\n    &#39; Create the reader.\n    Dim reader as XmlValidatingReader = new XmlValidatingReader(xmlFrag, XmlNodeType.Element, context)\n\n    Dim lineInfo as IXmlLineInfo = CType(reader, IXmlLineInfo)\n    if (lineInfo.HasLineInfo())\n       \n      &#39; Parse the XML and display each node.\n      while (reader.Read())\n       select case reader.NodeType\n         case XmlNodeType.Element:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, lineInfo.LineNumber, lineInfo.LinePosition)\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.Name)\n         case XmlNodeType.Text:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, lineInfo.LineNumber, lineInfo.LinePosition)\n           Console.WriteLine(&quot;  {0}&quot;, reader.Value)\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, lineInfo.LineNumber, lineInfo.LinePosition)\n           Console.WriteLine(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n       end select       \n      end while           \n    end if\n\n    &#39; Close the reader.\n    reader.Close()     \n  \n  end sub\nend class\n</code></pre><pre><code class=\"lang-cs\" name=\"IXmlLineInfo#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample{\n\n  public static void Main(){\n\n    // Create the XML fragment to be parsed.\n    string xmlFrag  = \n    @&quot;&lt;book&gt;\n           &lt;misc&gt;\n              &lt;style&gt;paperback&lt;/style&gt;\n              &lt;pages&gt;240&lt;/pages&gt;\n           &lt;/misc&gt;\n        &lt;/book&gt;\n    &quot;;\n\n    // Create the XmlNamespaceManager.\n    XmlNamespaceManager nsmgr = new XmlNamespaceManager(new NameTable());\n\n    // Create the XmlParserContext.\n    XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n    // Create the reader.\n    XmlValidatingReader reader = new XmlValidatingReader(xmlFrag, XmlNodeType.Element, context);\n\n    IXmlLineInfo lineInfo = ((IXmlLineInfo)reader);\n    if (lineInfo.HasLineInfo()){\n       \n      // Parse the XML and display each node.\n      while (reader.Read()){\n       switch (reader.NodeType){\n         case XmlNodeType.Element:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, lineInfo.LineNumber, lineInfo.LinePosition);\n           Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.Name);\n           break;\n         case XmlNodeType.Text:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, lineInfo.LineNumber, lineInfo.LinePosition);\n           Console.WriteLine(&quot;  {0}&quot;, reader.Value);\n           break;\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;{0} {1},{2}  &quot;, reader.Depth, lineInfo.LineNumber, lineInfo.LinePosition);\n           Console.WriteLine(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n       }       \n     }           \n    }\n\n    // Close the reader.\n    reader.Close();       \n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Encoding\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Encoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets the encoding attribute for the document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.Encoding Encoding { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The encoding value. If no encoding attribute exists, and there is not byte-order mark, this defaults to UTF-8.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> When any external reference is read (such as expanding an entity in a document type definition (DTD) file or reading a schema file) the encoding property is set to the encoding value of the external reference. If encoding is not specified in the external reference, and there is no byte-order mark, this defaults to UTF-8.  </p>\n<p> All the encoding standards that the underlying operating system supports are supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_EntityHandling\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_EntityHandling_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EntityHandling</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies how the reader handles entities.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.EntityHandling EntityHandling { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.entityhandling\" data-linktype=\"relative-path\">EntityHandling</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.entityhandling\" data-linktype=\"relative-path\">EntityHandling</a> values. If no <code>EntityHandling</code> is specified, it defaults to EntityHandling.ExpandEntities.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Invalid value was specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property can be changed and takes effect after the next <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a> call.  </p>\n<p> When <code>EntityHandling</code> is set to <code>ExpandCharEntities</code>, attribute values are only partially normalized. The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.  </p>\n<p> To illustrate the difference between the entity handling modes consider the following XML:  </p>\n<pre><code>&lt;!DOCTYPE doc [&lt;!ENTITY num &quot;123&quot;&gt;]&gt;  \n &lt;doc&gt; &amp;#65; &amp;num; &lt;/doc&gt;\n</code></pre><p> When <code>EntityHandling</code> is set to <code>ExpandEntities</code> the &quot;doc&quot; element node contains one text node with the expanded entity text:  </p>\n<table>\n<thead>\n<tr>\n<th>Depth</th>\n<th>NodeType</th>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Text</td>\n<td></td>\n<td>A 123</td>\n</tr>\n</tbody>\n</table>\n<p> When <code>EntityHandling</code> is set to <code>ExpandCharEntites</code>, and <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_WhitespaceHandling_\" data-linktype=\"relative-path\">WhitespaceHandling</a> is set to Significant or All, the &quot;doc&quot; element expands the character entity and returns the general entity as a node:  </p>\n<table>\n<thead>\n<tr>\n<th>Depth</th>\n<th>NodeType</th>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Text</td>\n<td></td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>EntityReference</td>\n<td>num</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>SignificantWhitespace</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>ResolveEntity</code> method to expand a general entity.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.ResolveEntity Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlValidatingReader^ reader = nullptr;\n   XmlTextReader^ txtreader = nullptr;\n   try\n   {\n      \n      //Create and load the XmlTextReader with the XML file. \n      txtreader = gcnew XmlTextReader( &quot;book1.xml&quot; );\n      txtreader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      //Create the XmlValidatingReader over the XmlTextReader.\n      //Set the reader to not expand general entities.\n      reader = gcnew XmlValidatingReader( txtreader );\n      reader-&gt;ValidationType = ValidationType::None;\n      reader-&gt;EntityHandling = EntityHandling::ExpandCharEntities;\n      reader-&gt;MoveToContent(); //Move to the root element.\n      reader-&gt;Read(); //Move to title start tag.\n      reader-&gt;Skip(); //Skip the title element.\n      \n      //Read the misc start tag.  The reader is now positioned on\n      //the entity reference node.\n      reader-&gt;ReadStartElement();\n      \n      //Because EntityHandling is set to ExpandCharEntities, you must call \n      //ResolveEntity to expand the entity.  The entity replacement text is \n      //then parsed and returned as a child node.         \n      Console::WriteLine( &quot;Expand the entity...&quot; );\n      reader-&gt;ResolveEntity();\n      Console::WriteLine( &quot;The entity replacement text is returned as a text node.&quot; );\n      reader-&gt;Read();\n      Console::WriteLine( &quot;NodeType: {0} Value: {1}&quot;, reader-&gt;NodeType, reader-&gt;Value );\n      Console::WriteLine( &quot;An EndEntity node closes the entity reference scope.&quot; );\n      reader-&gt;Read();\n      Console::WriteLine( &quot;NodeType: {0} Name: {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.ResolveEntity Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n     XmlValidatingReader reader = null;\n     XmlTextReader txtreader = null;\n\n     try\n     {\n       //Create and load the XmlTextReader with the XML file. \n       txtreader = new XmlTextReader(&quot;book1.xml&quot;);\n       txtreader.WhitespaceHandling = WhitespaceHandling.None;\n\n       //Create the XmlValidatingReader over the XmlTextReader.\n       //Set the reader to not expand general entities.\n       reader = new XmlValidatingReader(txtreader);\n       reader.ValidationType = ValidationType.None;\n       reader.EntityHandling = EntityHandling.ExpandCharEntities;\n\n       reader.MoveToContent();  //Move to the root element.\n       reader.Read();  //Move to title start tag.\n       reader.Skip();  //Skip the title element.\n      \n       //Read the misc start tag.  The reader is now positioned on\n       //the entity reference node.\n       reader.ReadStartElement(); \n\n       //Because EntityHandling is set to ExpandCharEntities, you must call \n       //ResolveEntity to expand the entity.  The entity replacement text is \n       //then parsed and returned as a child node.         \n       Console.WriteLine(&quot;Expand the entity...&quot;);\n       reader.ResolveEntity();  \n\n       Console.WriteLine(&quot;The entity replacement text is returned as a text node.&quot;);\n       reader.Read();  \n       Console.WriteLine(&quot;NodeType: {0} Value: {1}&quot;, reader.NodeType ,reader.Value);\n\n       Console.WriteLine(&quot;An EndEntity node closes the entity reference scope.&quot;);\n       reader.Read();\n       Console.WriteLine(&quot;NodeType: {0} Name: {1}&quot;, reader.NodeType,reader.Name);\n     \n    }\n    finally\n    {\n       if (reader != null)\n         reader.Close();\n    }\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.ResolveEntity Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   \n   Public Shared Sub Main()\n      Dim reader As XmlValidatingReader = Nothing\n      Dim txtreader As XmlTextReader = Nothing\n      \n      Try\n         &#39;Create and load the XmlTextReader with the XML file. \n         txtreader = New XmlTextReader(&quot;book1.xml&quot;)\n         txtreader.WhitespaceHandling = WhitespaceHandling.None\n         \n         &#39;Create the XmlValidatingReader over the XmlTextReader.\n         &#39;Set the reader to not expand general entities.\n         reader = New XmlValidatingReader(txtreader)\n         reader.ValidationType = ValidationType.None\n         reader.EntityHandling = EntityHandling.ExpandCharEntities\n         \n         reader.MoveToContent() &#39;Move to the root element.\n         reader.Read() &#39;Move to title start tag.\n         reader.Skip() &#39;Skip the title element.\n         &#39;Read the misc start tag.  The reader is now positioned on\n         &#39;the entity reference node.\n         reader.ReadStartElement()\n         \n         &#39;Because EntityHandling is set to ExpandCharEntities, you must call \n         &#39;ResolveEntity to expand the entity.  The entity replacement text is \n         &#39;then parsed and returned as a child node.  \n         Console.WriteLine(&quot;Expand the entity...&quot;)\n         reader.ResolveEntity()\n         \n         Console.WriteLine(&quot;The entity replacement text is returned as a text node.&quot;)\n         reader.Read()\n         Console.WriteLine(&quot;NodeType: {0} Value: {1}&quot;, reader.NodeType, reader.Value)\n         \n         Console.WriteLine(&quot;An EndEntity node closes the entity reference scope.&quot;)\n         reader.Read()\n         Console.WriteLine(&quot;NodeType: {0} Name: {1}&quot;, reader.NodeType, reader.Name)\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>book1.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.ResolveEntity Example#2\">\n&lt;?xml version=&#39;1.0&#39; ?&gt;\n&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;\n&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;misc&gt;&amp;h;&lt;/misc&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_EOF\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_EOF_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EOF</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the reader is positioned at the end of the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool EOF { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader is positioned at the end of the stream; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_HasValue\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_HasValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node can have a <span class=\"xref\">stem.Xml.XmlValidatingReader.Value*</span> other than String.Empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool HasValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the node on which the reader is currently positioned can have a <code>Value</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The following table lists node types that have a value to return.  </p>\n<table>\n<thead>\n<tr>\n<th>Node Type</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Attribute</code></td>\n<td>The value of the attribute.</td>\n</tr>\n<tr>\n<td><code>CDATA</code></td>\n<td>The content of the CDATA section.</td>\n</tr>\n<tr>\n<td><code>Comment</code></td>\n<td>The content of the comment.</td>\n</tr>\n<tr>\n<td><code>DocumentType</code></td>\n<td>The internal subset.</td>\n</tr>\n<tr>\n<td><code>ProcessingInstruction</code></td>\n<td>The entire content, excluding the target.</td>\n</tr>\n<tr>\n<td><code>SignificantWhitespace</code></td>\n<td>The white space between markup in a mixed content model.</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>The content of the text node.</td>\n</tr>\n<tr>\n<td><code>Whitespace</code></td>\n<td>The white space between markup.</td>\n</tr>\n<tr>\n<td><code>XmlDeclaration</code></td>\n<td>The content of the declaration.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads in XML with various data types and displays each of the nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.HasValue Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the validating reader.\n   XmlTextReader^ txtreader = gcnew XmlTextReader( &quot;book1.xml&quot; );\n   txtreader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n   XmlValidatingReader^ reader = gcnew XmlValidatingReader( txtreader );\n   reader-&gt;ValidationType = ValidationType::None;\n   \n   //Parse the file and each node and its value.\n   while ( reader-&gt;Read() )\n   {\n      if ( reader-&gt;HasValue )\n            Console::WriteLine( &quot;({0})  {1}={2}&quot;, reader-&gt;NodeType, reader-&gt;Name, reader-&gt;Value );\n      else\n            Console::WriteLine( &quot;({0}) {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n   }\n\n   \n   //Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.HasValue Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n\n  public static void Main()\n  {\n\n    //Create the validating reader.\n    XmlTextReader txtreader = new XmlTextReader(&quot;book1.xml&quot;);\n    txtreader.WhitespaceHandling = WhitespaceHandling.None;\n    XmlValidatingReader reader = new XmlValidatingReader(txtreader);\n    reader.ValidationType = ValidationType.None;\n\n    //Parse the file and each node and its value.\n    while (reader.Read())\n    {\n      if (reader.HasValue)\n        Console.WriteLine(&quot;({0})  {1}={2}&quot;, reader.NodeType, reader.Name, reader.Value);\n      else\n        Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.Name);\n                 \n    }\n\n    //Close the reader.\n    reader.Close();\n    \n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.HasValue Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub  Main()\n  \n    &#39;Create the validating reader.\n    Dim txtreader as XmlTextReader = new XmlTextReader(&quot;book1.xml&quot;)\n    txtreader.WhitespaceHandling = WhitespaceHandling.None\n    Dim reader as XmlValidatingReader = new XmlValidatingReader(txtreader)\n    reader.ValidationType = ValidationType.None\n\n    &#39;Parse the file and each node and its value.\n    while (reader.Read())    \n      if (reader.HasValue) then\n        Console.WriteLine(&quot;({0})  {1}={2}&quot;, reader.NodeType, reader.Name, reader.Value)\n      else\n        Console.WriteLine(&quot;({0}) {1}&quot;, reader.NodeType, reader.Name)\n      end if\n    end while\n\n    &#39;Close the reader.\n    reader.Close()\n    \n  end sub\nend class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_IsDefault\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_IsDefault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefault</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefault { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; <code>false</code> if the attribute value was explicitly set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property applies only to an attribute node.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes nodes on the root element.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlValidatingReader.IsDefault#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the reader.\n   XmlTextReader^ txtreader = gcnew XmlTextReader( &quot;book4.xml&quot; );\n   XmlValidatingReader^ reader = gcnew XmlValidatingReader( txtreader );\n   reader-&gt;MoveToContent();\n   \n   // Display each of the attribute nodes, including default attributes.\n   while ( reader-&gt;MoveToNextAttribute() )\n   {\n      if ( reader-&gt;IsDefault )\n            Console::Write( &quot;(default attribute) &quot; );\n\n      Console::WriteLine( &quot; {0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlValidatingReader.IsDefault#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main(){\n\n    //Create the reader.\n    XmlTextReader txtreader = new XmlTextReader(&quot;book4.xml&quot;);\n    XmlValidatingReader reader = new XmlValidatingReader(txtreader);\n\n    reader.MoveToContent();\n\n    //Display each of the attribute nodes, including default attributes.\n    while (reader.MoveToNextAttribute()){\n        if (reader.IsDefault)\n          Console.Write(&quot;(default attribute) &quot;);\n        Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);  \n    }           \n  \n    //Close the reader.\n    reader.Close();     \n  \n  }\n} // End class\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlValidatingReader.IsDefault#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main()\n\n    &#39;Create the reader.\n    Dim txtreader as XmlTextReader = new XmlTextReader(&quot;book4.xml&quot;)\n    Dim reader as XmlValidatingReader = new XmlValidatingReader(txtreader)\n\n    reader.MoveToContent()\n\n    &#39;Display each of the attribute nodes, including default attributes.\n    while (reader.MoveToNextAttribute())\n        if (reader.IsDefault)\n          Console.Write(&quot;(default attribute) &quot;)\n        end if\n        Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)  \n    end while           \n  \n    &#39;Close the reader.\n    reader.Close()     \n  \n  end sub\nend class\n</code></pre><p> The example uses the following files as input.  </p>\n<p> <code>book4.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.IsDefault#2\">&lt;!DOCTYPE book SYSTEM &#39;book.dtd&#39;&gt;\n&lt;book ISBN = &#39;1-861001-57-5&#39;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n&lt;/book&gt;\n</code></pre><p> <code>book.dtd</code>  </p>\n<!-- Can not find reference ../CodeSnippet/VS_Snippets_Data/XmlValidatingReader.IsDefault -->\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_IsEmptyElement\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_IsEmptyElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEmptyElement</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node is an empty element (for example, <code><myelement></myelement></code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsEmptyElement { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node is an element (<span class=\"xref\">stem.Xml.XmlValidatingReader.NodeType*</span> equals <code>XmlNodeType.Element</code>) that ends with <code>/&gt;</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property enables you to determine the difference between the following:  </p>\n<p> <code>&lt;item num=&quot;123&quot;/&gt;</code> (<code>IsEmptyElement</code> is <code>true</code>).  </p>\n<p> <code>&lt;item num=&quot;123&quot;&gt;</code> (<code>IsEmptyElement</code> is <code>false</code>, although element content is empty).  </p>\n<p> A corresponding <code>EndElement</code> node is not generated for empty elements.  </p>\n<p> If default content has been added to an element due to schema validation, <code>IsEmptyElement</code> still returns <code>true</code>. It has no bearing on whether or not the element has a default value. In other words, <code>IsEmptyElement</code> simply reports whether or not the element in the source document had an end element tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each element.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.IsEmptyElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlTextReader txtreader = null;\n    XmlValidatingReader reader = null;\n\n    try\n    {\n       //Implement the readers.\n       txtreader = new XmlTextReader(&quot;elems.xml&quot;);\n       reader = new XmlValidatingReader(txtreader);\n  \n       //Parse the XML and display the text content of each of the elements.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.IsEmptyElement)\n              Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n           else{\n               Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n               reader.Read(); //Read the start tag.\n               if (reader.IsStartElement())  //Handle nested elements.\n                   Console.Write(&quot;\\r<br>&lt;{0}&gt;&quot;, reader.Name);\n               Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n           }\n         }\n       } \n       \n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.IsEmptyElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ txtreader = nullptr;\n   XmlValidatingReader^ reader = nullptr;\n   try\n   {\n      \n      //Implement the readers.\n      txtreader = gcnew XmlTextReader( &quot;elems.xml&quot; );\n      reader = gcnew XmlValidatingReader( txtreader );\n      \n      //Parse the XML and display the text content of each of the elements.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;IsEmptyElement )\n                        Console::WriteLine( &quot;&lt;{0}/&gt;&quot;, reader-&gt;Name );\n            else\n            {\n               Console::Write( &quot;&lt;{0}&gt; &quot;, reader-&gt;Name );\n               reader-&gt;Read(); //Read the start tag.\n               if ( reader-&gt;IsStartElement() )\n                              \n               //Handle nested elements.\n               Console::Write( &quot;\\r<br>&lt;{0}&gt;&quot;, reader-&gt;Name );\n               Console::WriteLine( reader-&gt;ReadString() ); //Read the text content of the element.\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.IsEmptyElement Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   \n   Public Shared Sub Main()\n      Dim txtreader As XmlTextReader = Nothing\n      Dim reader As XmlValidatingReader = Nothing\n      \n      Try\n         &#39;Implement the readers.\n         txtreader = New XmlTextReader(&quot;elems.xml&quot;)\n         reader = New XmlValidatingReader(txtreader)\n         \n         &#39;Parse the XML and display the text content of each of the elements.\n         While reader.Read()\n            If reader.IsStartElement() Then\n               If reader.IsEmptyElement Then\n                  Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n               Else\n                  Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name)\n                  reader.Read() &#39;Read the start tag.\n                  If (reader.IsStartElement())  &#39;Handle nested elements.\n                    Console.WriteLine()\n                    Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                  End If\n                  Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n               End If\n            End If\n         End While      \n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>elems.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.IsEmptyElement Example#2\">&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n  &lt;misc/&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_LineNumber\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_LineNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LineNumber</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current line number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LineNumber { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current line number. The starting value for this property is 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property is most commonly used for error reporting, but can be called at any time. The starting value for this property is 1. Combined with <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_LinePosition_\" data-linktype=\"relative-path\">LinePosition</a>, a value of 1,1 indicates the start of the document.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_LinePosition\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_LinePosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LinePosition</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current line position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LinePosition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current line position. The starting value for this property is 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property is most commonly used for error reporting, but can be called at any time. The starting value for this property is <code>1</code>.  </p>\n<p> The position indicated is the first character of text in the markup.  </p>\n<pre><code>&lt;root&gt;  \n abc&lt;tag/&gt;  \n&lt;/root&gt;\n</code></pre><p> On the first line of the preceding XML text, a <code>LinePosition</code> of <code>2</code> corresponds to the character <code>r</code>; on the second line, a <code>LinePosition</code> of <code>5</code> corresponds to the character <code>t</code>; and on the third line, a <code>LinePosition</code> of <code>3</code> corresponds to the character <code>r</code>.  </p>\n<p> Combined with <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_LineNumber_\" data-linktype=\"relative-path\">LineNumber</a>, a value of <code>1,1</code> indicates the start of the document.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_LocalName\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_LocalName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the local name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LocalName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the current node with the prefix removed. For example, <code>LocalName</code> is <code>book</code> for the element <code><bk:book></bk:book></code>.  </p>\n<p> For node types that do not have a name (like <code>Text</code>, <code>Comment</code>, and so on), this property returns String.Empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML fragment.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlParserContext.XmlParserContext Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n\n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n\n        Try\n            &#39;Create the XML fragment to be parsed.\n            Dim xmlFrag As String = &quot;&lt;book&gt; &quot; &amp; _\n                                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                                    &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; &amp; _\n                                    &quot;&lt;/book&gt;&quot;\n\n            &#39;Create the XmlNamespaceManager that is used to\n            &#39;look up namespace information.\n            Dim nt As New NameTable()\n            Dim nsmgr As New XmlNamespaceManager(nt)\n            nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;)\n\n            &#39;Create the XmlParserContext.\n            Dim context As New XmlParserContext(Nothing, nsmgr, Nothing, XmlSpace.None)\n\n            &#39;Implement the reader. \n            reader = New XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n\n            &#39;Parse the XML fragment.  If they exist, display the   \n            &#39;prefix and namespace URI of each element.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlParserContext.XmlParserContext Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n    public static void Main()\n    {\n        XmlTextReader reader = null;\n\n        try\n        {\n            //Create the XML fragment to be parsed.\n            string xmlFrag = &quot;&lt;book&gt; &quot; +\n                            &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                            &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; +\n                            &quot;&lt;/book&gt;&quot;;\n\n            //Create the XmlNamespaceManager that is used to\n            //look up namespace information.\n            NameTable nt = new NameTable();\n            XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n            nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;);\n\n            //Create the XmlParserContext.\n            XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n            //Implement the reader. \n            reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n\n            //Parse the XML fragment.  If they exist, display the   \n            //prefix and namespace URI of each element.\n            while (reader.Read())\n            {\n                if (reader.IsStartElement())\n                {\n                    if (reader.Prefix == String.Empty)\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n                    else\n                    {\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n                        Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n                    }\n                }\n            }\n\n\n        }\n\n        finally\n        {\n            if (reader != null)\n                reader.Close();\n        }\n    }\n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Name\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the qualified name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The qualified name of the current node. For example, <code>Name</code> is <code>bk:book</code> for the element <code><bk:book></bk:book></code>.  </p>\n<p> The name returned is dependent on the <span class=\"xref\">stem.Xml.XmlValidatingReader.NodeType*</span> of the node. The following node types return the listed values. All other node types return an empty string.  </p>\n <table><thead><tr><th> Node Type<br>\n </th><th> Name<br>\n </th></tr></thead><tbody><tr><td><code>Attribute</code></td><td> The name of the attribute.<br>\n </td></tr><tr><td><code>DocumentType</code></td><td> The document type name.<br>\n </td></tr><tr><td><code>Element</code></td><td> The tag name.<br>\n </td></tr><tr><td><code>EntityReference</code></td><td> The name of the entity referenced.<br>\n </td></tr><tr><td><code>ProcessingInstruction</code></td><td> The target of the processing instruction.<br>\n </td></tr><tr><td><code>XmlDeclaration</code></td><td> The literal string <code>xml</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextReader txtreader = null;\n     XmlValidatingReader reader = null;\n\n     try\n     {  \n        //Load the reader with the data file and ignore all white space nodes.         \n        txtreader = new XmlTextReader(filename);\n        txtreader.WhitespaceHandling = WhitespaceHandling.None;\n\n        //Implement the validating reader over the text reader. \n        reader = new XmlValidatingReader(txtreader);\n        reader.ValidationType = ValidationType.None;\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally\n     {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ txtreader = nullptr;\n   XmlValidatingReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      //Load the reader with the data file and ignore all white space nodes.         \n      txtreader = gcnew XmlTextReader( filename );\n      txtreader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      //Implement the validating reader over the text reader. \n      reader = gcnew XmlValidatingReader( txtreader );\n      reader-&gt;ValidationType = ValidationType::None;\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   Private Const filename As String = &quot;items.xml&quot;\n   \n   Public Shared Sub Main()\n      Dim txtreader As XmlTextReader = Nothing\n      Dim reader As XmlValidatingReader = Nothing\n      \n      Try\n         &#39;Load the reader with the data file and ignore all white space nodes.         \n         txtreader = New XmlTextReader(filename)\n         txtreader.WhitespaceHandling = WhitespaceHandling.None\n         \n         &#39;Implement the validating reader over the text reader. \n         reader = New XmlValidatingReader(txtreader)\n         reader.ValidationType = ValidationType.None\n         \n         &#39;Parse the file and display each of the nodes.\n         While reader.Read()\n            Select Case reader.NodeType\n               Case XmlNodeType.Element\n                  Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n               Case XmlNodeType.Text\n                  Console.Write(reader.Value)\n               Case XmlNodeType.CDATA\n                  Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n               Case XmlNodeType.ProcessingInstruction\n                  Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n               Case XmlNodeType.Comment\n                  Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n               Case XmlNodeType.XmlDeclaration\n                  Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n               Case XmlNodeType.Document\n               Case XmlNodeType.DocumentType\n                  Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n               Case XmlNodeType.EntityReference\n                  Console.Write(reader.Name)\n               Case XmlNodeType.EndElement\n                  Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n            End Select\n         End While\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Namespaces\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Namespaces_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespaces</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to do namespace support.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Namespaces { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to do namespace support; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_NamespaceURI\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_NamespaceURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NamespaceURI</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string NamespaceURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI of the current node; otherwise an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is relevant to <code>Element</code> and <code>Attribute</code> nodes only.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML fragment.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlParserContext.XmlParserContext Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n\n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n\n        Try\n            &#39;Create the XML fragment to be parsed.\n            Dim xmlFrag As String = &quot;&lt;book&gt; &quot; &amp; _\n                                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                                    &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; &amp; _\n                                    &quot;&lt;/book&gt;&quot;\n\n            &#39;Create the XmlNamespaceManager that is used to\n            &#39;look up namespace information.\n            Dim nt As New NameTable()\n            Dim nsmgr As New XmlNamespaceManager(nt)\n            nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;)\n\n            &#39;Create the XmlParserContext.\n            Dim context As New XmlParserContext(Nothing, nsmgr, Nothing, XmlSpace.None)\n\n            &#39;Implement the reader. \n            reader = New XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n\n            &#39;Parse the XML fragment.  If they exist, display the   \n            &#39;prefix and namespace URI of each element.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlParserContext.XmlParserContext Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n    public static void Main()\n    {\n        XmlTextReader reader = null;\n\n        try\n        {\n            //Create the XML fragment to be parsed.\n            string xmlFrag = &quot;&lt;book&gt; &quot; +\n                            &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                            &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; +\n                            &quot;&lt;/book&gt;&quot;;\n\n            //Create the XmlNamespaceManager that is used to\n            //look up namespace information.\n            NameTable nt = new NameTable();\n            XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n            nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;);\n\n            //Create the XmlParserContext.\n            XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n            //Implement the reader. \n            reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n\n            //Parse the XML fragment.  If they exist, display the   \n            //prefix and namespace URI of each element.\n            while (reader.Read())\n            {\n                if (reader.IsStartElement())\n                {\n                    if (reader.Prefix == String.Empty)\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n                    else\n                    {\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n                        Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n                    }\n                }\n            }\n\n\n        }\n\n        finally\n        {\n            if (reader != null)\n                reader.Close();\n        }\n    }\n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_NameTable\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_NameTable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameTable</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNameTable NameTable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </div>\r\n                  <p><code>XmlNameTable</code> that enables you to get the atomized version of a string within the node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> All node and attribute names returned from <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> are atomized by using the <code>NameTable</code>. When the same name is returned multiple times (for example, <code>Customer</code>), the same <code>String</code> object will be returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_NodeType\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNodeType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> values representing the type of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property never returns the following <code>XmlNodeType</code> types: <code>Document</code>, <code>DocumentFragment</code>, <code>Entity</code>, or <code>Notation</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextReader txtreader = null;\n     XmlValidatingReader reader = null;\n\n     try\n     {  \n        //Load the reader with the data file and ignore all white space nodes.         \n        txtreader = new XmlTextReader(filename);\n        txtreader.WhitespaceHandling = WhitespaceHandling.None;\n\n        //Implement the validating reader over the text reader. \n        reader = new XmlValidatingReader(txtreader);\n        reader.ValidationType = ValidationType.None;\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally\n     {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ txtreader = nullptr;\n   XmlValidatingReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      //Load the reader with the data file and ignore all white space nodes.         \n      txtreader = gcnew XmlTextReader( filename );\n      txtreader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      //Implement the validating reader over the text reader. \n      reader = gcnew XmlValidatingReader( txtreader );\n      reader-&gt;ValidationType = ValidationType::None;\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   Private Const filename As String = &quot;items.xml&quot;\n   \n   Public Shared Sub Main()\n      Dim txtreader As XmlTextReader = Nothing\n      Dim reader As XmlValidatingReader = Nothing\n      \n      Try\n         &#39;Load the reader with the data file and ignore all white space nodes.         \n         txtreader = New XmlTextReader(filename)\n         txtreader.WhitespaceHandling = WhitespaceHandling.None\n         \n         &#39;Implement the validating reader over the text reader. \n         reader = New XmlValidatingReader(txtreader)\n         reader.ValidationType = ValidationType.None\n         \n         &#39;Parse the file and display each of the nodes.\n         While reader.Read()\n            Select Case reader.NodeType\n               Case XmlNodeType.Element\n                  Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n               Case XmlNodeType.Text\n                  Console.Write(reader.Value)\n               Case XmlNodeType.CDATA\n                  Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n               Case XmlNodeType.ProcessingInstruction\n                  Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n               Case XmlNodeType.Comment\n                  Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n               Case XmlNodeType.XmlDeclaration\n                  Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n               Case XmlNodeType.Document\n               Case XmlNodeType.DocumentType\n                  Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n               Case XmlNodeType.EntityReference\n                  Console.Write(reader.Name)\n               Case XmlNodeType.EndElement\n                  Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n            End Select\n         End While\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Prefix\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Prefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace prefix associated with the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Prefix { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace prefix associated with the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML fragment.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlParserContext.XmlParserContext Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n\n    Public Shared Sub Main()\n        Dim reader As XmlTextReader = Nothing\n\n        Try\n            &#39;Create the XML fragment to be parsed.\n            Dim xmlFrag As String = &quot;&lt;book&gt; &quot; &amp; _\n                                    &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; &amp; _\n                                    &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; &amp; _\n                                    &quot;&lt;/book&gt;&quot;\n\n            &#39;Create the XmlNamespaceManager that is used to\n            &#39;look up namespace information.\n            Dim nt As New NameTable()\n            Dim nsmgr As New XmlNamespaceManager(nt)\n            nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;)\n\n            &#39;Create the XmlParserContext.\n            Dim context As New XmlParserContext(Nothing, nsmgr, Nothing, XmlSpace.None)\n\n            &#39;Implement the reader. \n            reader = New XmlTextReader(xmlFrag, XmlNodeType.Element, context)\n\n            &#39;Parse the XML fragment.  If they exist, display the   \n            &#39;prefix and namespace URI of each element.\n            While reader.Read()\n                If reader.IsStartElement() Then\n                    If reader.Prefix = String.Empty Then\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n                    Else\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n                        Console.WriteLine(&quot; The namespace URI is &quot; &amp; reader.NamespaceURI)\n                    End If\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlParserContext.XmlParserContext Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n    public static void Main()\n    {\n        XmlTextReader reader = null;\n\n        try\n        {\n            //Create the XML fragment to be parsed.\n            string xmlFrag = &quot;&lt;book&gt; &quot; +\n                            &quot;&lt;title&gt;Pride And Prejudice&lt;/title&gt;&quot; +\n                            &quot;&lt;bk:genre&gt;novel&lt;/bk:genre&gt;&quot; +\n                            &quot;&lt;/book&gt;&quot;;\n\n            //Create the XmlNamespaceManager that is used to\n            //look up namespace information.\n            NameTable nt = new NameTable();\n            XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n            nsmgr.AddNamespace(&quot;bk&quot;, &quot;urn:sample&quot;);\n\n            //Create the XmlParserContext.\n            XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n            //Implement the reader. \n            reader = new XmlTextReader(xmlFrag, XmlNodeType.Element, context);\n\n            //Parse the XML fragment.  If they exist, display the   \n            //prefix and namespace URI of each element.\n            while (reader.Read())\n            {\n                if (reader.IsStartElement())\n                {\n                    if (reader.Prefix == String.Empty)\n                        Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n                    else\n                    {\n                        Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n                        Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n                    }\n                }\n            }\n\n\n        }\n\n        finally\n        {\n            if (reader != null)\n                reader.Close();\n        }\n    }\n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_QuoteChar\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_QuoteChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QuoteChar</div>        \r\n          </div>\r\n    \r\n            <p>Gets the quotation mark character used to enclose the value of an attribute node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override char QuoteChar { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The quotation mark character (&quot; or &#39;) used to enclose the value of an attribute node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property applies only to an attribute node.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Reader\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Reader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reader</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> used to construct this <code>XmlValidatingReader</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlReader Reader { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">System.Xml.XmlReader</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlReader</code> specified in the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property allows the user to access properties specific to the supplied reader. It returns a typed <code>XmlReader</code>. The user should query for the type before casting.  </p>\n<p> Changing the state of the returned reader (for example, calling one of the read methods) can lead to unpredictable results.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ReadState\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ReadState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the state of the reader.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.ReadState ReadState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Schemas\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Schemas_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Schemas</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.xml.schema.xmlschemacollection\" data-linktype=\"relative-path\">XmlSchemaCollection</a> to use for validation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Schema.XmlSchemaCollection Schemas { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemacollection\" data-linktype=\"relative-path\">XmlSchemaCollection</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlSchemaCollection</code> to use for validation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The <code>XmlSchemaCollection</code> holds pre-loaded XML-Data Reduced (XDR) and XML Schema definition language (XSD) schemas. This property gives the reader access to the cache of schemas and allows it to validate without having to re-load schemas every time. The reader does not add anything to the <code>XmlSchemaCollection</code>.  </p>\n<p> If the <code>XmlSchemaCollection</code> includes an XML schema (XSD) which contains <code>include</code> or <code>import</code> elements that reference other namespaces, the schemas for these other namespaces are loaded for validation purposes only. Unless these schemas were explicitly added to the schema collection, they will not be accessible using any of the collection methods or properties. For example, if the collection contains the schema file <code>a.xsd</code>, which contains a reference to the schema file <code>b.xsd</code>, you must add <code>b.xsd</code> to the schema collection before you can access it using any of the collection methods or properties.  </p>\n<p> When the <code>XmlSchemaCollection</code> is accessed using the <code>Schemas</code> property, the <a class=\"xref\" href=\"system.xml.schema.xmlschemacollection#System_Xml_Schema_XmlSchemaCollection_Add_\" data-linktype=\"relative-path\">Add</a> method uses the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> specified by the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The schemas must be added to the <code>XmlSchemaCollection</code> before the first <code>Read</code> call.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example validates three XML files using schemas stored in the XmlSchemaCollection.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.Schemas Example#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Schema;\n\npublic ref class SchemaCollectionSample\n{\nprivate:\n   XmlTextReader^ reader;\n   XmlValidatingReader^ vreader;\n   Boolean m_success;\n\npublic:\n   SchemaCollectionSample()\n   {\n      reader = nullptr;\n      vreader = nullptr;\n      m_success = true;\n\n      //Load the schema collection.\n      XmlSchemaCollection^ xsc = gcnew XmlSchemaCollection;\n      String^ schema = &quot;books.xsd&quot;;\n      String^ schema1 = &quot;schema1.xdr&quot;;\n      xsc-&gt;Add( &quot;urn:bookstore-schema&quot;, schema ); //XSD schema\n      xsc-&gt;Add( &quot;urn:newbooks-schema&quot;, schema1 ); //XDR schema\n      String^ doc1 = &quot;booksSchema.xml&quot;;\n      String^ doc2 = &quot;booksSchemaFail.xml&quot;;\n      String^ doc3 = &quot;newbooks.xml&quot;;\n\n      //Validate the files using schemas stored in the collection.\n      Validate( doc1, xsc ); //Should pass.\n      Validate( doc2, xsc ); //Should fail.   \n      Validate( doc3, xsc ); //Should fail. \n   }\n\n\nprivate:\n   void Validate( String^ filename, XmlSchemaCollection^ xsc )\n   {\n      m_success = true;\n      Console::WriteLine();\n      Console::WriteLine( &quot;Validating XML file {0}...&quot;, filename );\n      reader = gcnew XmlTextReader( filename );\n\n      //Create a validating reader.\n      vreader = gcnew XmlValidatingReader( reader );\n\n      //Validate using the schemas stored in the schema collection.\n      vreader-&gt;Schemas-&gt;Add( xsc );\n\n      //Set the validation event handler\n      vreader-&gt;ValidationEventHandler += gcnew ValidationEventHandler( this, &amp;SchemaCollectionSample::ValidationCallBack );\n\n      //Read and validate the XML data.\n      while ( vreader-&gt;Read() )\n      {}\n\n      Console::WriteLine( &quot;Validation finished. Validation {0}&quot;, (m_success == true ? (String^)&quot;successful&quot; : &quot;failed&quot;) );\n      Console::WriteLine();\n\n      //Close the reader.\n      vreader-&gt;Close();\n   }\n\n   void ValidationCallBack( Object^ /*sender*/, ValidationEventArgs^ args )\n   {\n      m_success = false;\n      Console::Write( &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Validation error: {0}&quot;, args-&gt;Message );\n   }\n\n};\n\nint main()\n{\n   gcnew SchemaCollectionSample;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.Schemas Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Schema\nImports Microsoft.VisualBasic\n\nPublic Class SchemaCollectionSample\n    Private doc1 As String = &quot;booksSchema.xml&quot;\n    Private doc2 As String = &quot;booksSchemaFail.xml&quot;\n    Private doc3 As String = &quot;newbooks.xml&quot;\n    Private schema As String = &quot;books.xsd&quot;\n    Private schema1 As String = &quot;schema1.xdr&quot;\n    \n    Private reader As XmlTextReader = Nothing\n    Private vreader As XmlValidatingReader = Nothing\n    Private m_success As Boolean = True\n    \n    Public Sub New()\n\n            &#39;Load the schema collection\n            Dim xsc As New XmlSchemaCollection()\n            xsc.Add(&quot;urn:bookstore-schema&quot;, schema) &#39;XSD schema\n            xsc.Add(&quot;urn:newbooks-schema&quot;, schema1) &#39;XDR schema\n\n            &#39;Validate the files using schemas stored in the collection.\n            Validate(doc1, xsc) &#39;Should pass.\n            Validate(doc2, xsc) &#39;Should fail.   \n            Validate(doc3, xsc) &#39;Should fail. \n        \n    End Sub &#39;New\n    \n    Public Shared Sub Main()\n        Dim validation As New SchemaCollectionSample()\n    End Sub &#39;Main\n    \n    Private Sub Validate(filename As String, xsc As XmlSchemaCollection)\n        \n            m_success = True\n            Console.WriteLine()\n            Console.WriteLine(&quot;Validating XML file {0}...&quot;, filename.ToString())\n            reader = New XmlTextReader(filename)\n            \n            &#39;Create a validating reader.\n            vreader = New XmlValidatingReader(reader)\n            \n            &#39;Use the schemas stored in the schema collection.\n            vreader.Schemas.Add(xsc)\n            \n            &#39;Set the validation event handler.\n            AddHandler vreader.ValidationEventHandler, AddressOf ValidationCallBack\n            &#39;Read and validate the XML data.\n            While vreader.Read()\n            End While\n            Console.WriteLine(&quot;Validation finished. Validation {0}&quot;, IIf(m_success, &quot;successful&quot;, &quot;failed&quot;))\n            Console.WriteLine()\n\n            &#39;Close the reader.\n            vreader.Close()\n\n    End Sub &#39;Validate\n       \n    \n    Private Sub ValidationCallBack(sender As Object, args As ValidationEventArgs)\n        m_success = False\n        \n        Console.Write((ControlChars.CrLf &amp; ControlChars.Tab &amp; &quot;Validation error: &quot; &amp; args.Message))\n    End Sub &#39;ValidationCallBack \nEnd Class &#39;SchemaCollectionSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.Schemas Example#1\"> using System;\n using System.IO;\n using System.Xml;\n using System.Xml.Schema;\n \n public class SchemaCollectionSample\n {\n   private const String doc1 = &quot;booksSchema.xml&quot;;\n   private const String doc2 = &quot;booksSchemaFail.xml&quot;;\n   private const String doc3 = &quot;newbooks.xml&quot;;\n   private const String schema = &quot;books.xsd&quot;;\n   private const String schema1 = &quot;schema1.xdr&quot;;\n   \n   private XmlTextReader reader=null;\n   private XmlValidatingReader vreader = null;\n   private Boolean m_success = true;\n \n   public SchemaCollectionSample ()\n   {\n     //Load the schema collection.\n     XmlSchemaCollection xsc = new XmlSchemaCollection();\n     xsc.Add(&quot;urn:bookstore-schema&quot;, schema);  //XSD schema\n     xsc.Add(&quot;urn:newbooks-schema&quot;, schema1);  //XDR schema\n \n     //Validate the files using schemas stored in the collection.\n     Validate(doc1, xsc); //Should pass.\n     Validate(doc2, xsc); //Should fail.   \n     Validate(doc3, xsc); //Should fail. \n \n   }    \n \n   public static void Main ()\n   {\n       SchemaCollectionSample validation = new SchemaCollectionSample();\n   }\n \n   private void Validate(String filename, XmlSchemaCollection xsc)\n   {\n    \n      m_success = true;\n      Console.WriteLine();\n      Console.WriteLine(&quot;Validating XML file {0}...&quot;, filename.ToString());\n      reader = new XmlTextReader (filename);\n         \n      //Create a validating reader.\n     vreader = new XmlValidatingReader (reader);\n\n      //Validate using the schemas stored in the schema collection.\n      vreader.Schemas.Add(xsc);\n  \n      //Set the validation event handler\n      vreader.ValidationEventHandler += new ValidationEventHandler (ValidationCallBack);\n      //Read and validate the XML data.\n      while (vreader.Read()){}\n      Console.WriteLine (&quot;Validation finished. Validation {0}&quot;, (m_success==true ? &quot;successful&quot; : &quot;failed&quot;));\n      Console.WriteLine();\n\n      //Close the reader.\n      vreader.Close();\n \n   } \n \n \n   private void ValidationCallBack (object sender, ValidationEventArgs args)\n   {\n      m_success = false;\n \n      Console.Write(&quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Validation error: &quot; + args.Message);\n\n   }  \n }\n</code></pre><p> The sample uses the following five input files:  </p>\n<p> <code>booksSchema.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Schemas Example#2\">\n&lt;?xml version=&#39;1.0&#39;?&gt;\n &lt;bookstore xmlns=&quot;urn:bookstore-schema&quot;&gt;\n   &lt;book genre=&quot;autobiography&quot;&gt;\n     &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n     &lt;author&gt;\n       &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n       &lt;last-name&gt;Franklin&lt;/last-name&gt;\n     &lt;/author&gt;\n     &lt;price&gt;8.99&lt;/price&gt;\n   &lt;/book&gt;\n   &lt;book genre=&quot;novel&quot;&gt;\n     &lt;title&gt;The Confidence Man&lt;/title&gt;\n     &lt;author&gt;\n       &lt;first-name&gt;Herman&lt;/first-name&gt;\n       &lt;last-name&gt;Melville&lt;/last-name&gt;\n     &lt;/author&gt;\n     &lt;price&gt;11.99&lt;/price&gt;\n   &lt;/book&gt;\n &lt;/bookstore&gt;\n</code></pre><p> <code>booksSchemaFail.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Schemas Example#3\">\n&lt;?xml version=&#39;1.0&#39;?&gt;\n &lt;bookstore xmlns=&quot;urn:bookstore-schema&quot;&gt;\n   &lt;book&gt;\n     &lt;author&gt;\n       &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n       &lt;last-name&gt;Franklin&lt;/last-name&gt;\n     &lt;/author&gt;\n   &lt;/book&gt;\n   &lt;book genre=&quot;novel&quot;&gt;\n     &lt;title&gt;The Confidence Man&lt;/title&gt;\n     &lt;author&gt;\n       &lt;first-name&gt;Herman&lt;/first-name&gt;\n       &lt;last-name&gt;Melville&lt;/last-name&gt;\n     &lt;/author&gt;\n     &lt;price&gt;11.99&lt;/price&gt;\n   &lt;/book&gt;\n   &lt;book genre=&quot;philosophy&quot;&gt;\n     &lt;title&gt;The Gorgias&lt;/title&gt;\n     &lt;author&gt;\n       &lt;name&gt;Plato&lt;/name&gt;\n     &lt;/author&gt;\n     &lt;price&gt;9.99&lt;/price&gt;\n   &lt;/book&gt;\n &lt;/bookstore&gt;\n</code></pre><p> <code>newbooks.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Schemas Example#4\">\n&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;bookstore xmlns=&quot;urn:newbooks-schema&quot;&gt;\n  &lt;book genre=&quot;novel&quot; style=&quot;hardcover&quot;&gt;\n    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Margaret&lt;/first-name&gt;\n      &lt;last-name&gt;Atwood&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;19.95&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot; style=&quot;other&quot;&gt;\n    &lt;title&gt;The Poisonwood Bible&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Barbara&lt;/first-name&gt;\n      &lt;last-name&gt;Kingsolver&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> <code>books.xsd</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Schemas Example#5\">\n&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;\n     xmlns=&quot;urn:bookstore-schema&quot;\n     elementFormDefault=&quot;qualified&quot;\n     targetNamespace=&quot;urn:bookstore-schema&quot;&gt;\n \n  &lt;xsd:element name=&quot;bookstore&quot; type=&quot;bookstoreType&quot;/&gt;\n \n  &lt;xsd:complexType name=&quot;bookstoreType&quot;&gt;\n   &lt;xsd:sequence maxOccurs=&quot;unbounded&quot;&gt;\n    &lt;xsd:element name=&quot;book&quot;  type=&quot;bookType&quot;/&gt;\n   &lt;/xsd:sequence&gt;\n  &lt;/xsd:complexType&gt;\n \n  &lt;xsd:complexType name=&quot;bookType&quot;&gt;\n   &lt;xsd:sequence&gt;\n    &lt;xsd:element name=&quot;title&quot; type=&quot;xsd:string&quot;/&gt;\n    &lt;xsd:element name=&quot;author&quot; type=&quot;authorName&quot;/&gt;\n    &lt;xsd:element name=&quot;price&quot;  type=&quot;xsd:decimal&quot;/&gt;\n   &lt;/xsd:sequence&gt;\n   &lt;xsd:attribute name=&quot;genre&quot; type=&quot;xsd:string&quot;/&gt;\n  &lt;/xsd:complexType&gt;\n \n  &lt;xsd:complexType name=&quot;authorName&quot;&gt;\n   &lt;xsd:sequence&gt;\n    &lt;xsd:element name=&quot;first-name&quot;  type=&quot;xsd:string&quot;/&gt;\n    &lt;xsd:element name=&quot;last-name&quot; type=&quot;xsd:string&quot;/&gt;\n   &lt;/xsd:sequence&gt;\n  &lt;/xsd:complexType&gt;\n \n &lt;/xsd:schema&gt;\n</code></pre><p> <code>schema1.xdr</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Schemas Example#6\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;Schema xmlns=&quot;urn:schemas-microsoft-com:xml-data&quot;\n        xmlns:dt=&quot;urn:schemas-microsoft-com:datatypes&quot;&gt;\n  &lt;ElementType name=&quot;first-name&quot; content=&quot;textOnly&quot;/&gt;\n  &lt;ElementType name=&quot;last-name&quot; content=&quot;textOnly&quot;/&gt;\n  &lt;ElementType name=&quot;name&quot; content=&quot;textOnly&quot;/&gt;\n  &lt;ElementType name=&quot;price&quot; content=&quot;textOnly&quot; dt:type=&quot;fixed.14.4&quot;/&gt;\n  &lt;ElementType name=&quot;author&quot; content=&quot;eltOnly&quot; order=&quot;one&quot;&gt;\n    &lt;group order=&quot;seq&quot;&gt;\n      &lt;element type=&quot;name&quot;/&gt;\n    &lt;/group&gt;\n    &lt;group order=&quot;seq&quot;&gt;\n      &lt;element type=&quot;first-name&quot;/&gt;\n      &lt;element type=&quot;last-name&quot;/&gt;\n    &lt;/group&gt;\n  &lt;/ElementType&gt;\n  &lt;ElementType name=&quot;title&quot; content=&quot;textOnly&quot;/&gt;\n  &lt;AttributeType name=&quot;genre&quot; dt:type=&quot;string&quot;/&gt;\n  &lt;AttributeType name=&quot;style&quot; dt:type=&quot;enumeration&quot;\n        dt:values=&quot;paperback hardcover&quot;/&gt;\n  &lt;ElementType name=&quot;book&quot; content=&quot;eltOnly&quot;&gt;\n    &lt;attribute type=&quot;genre&quot; required=&quot;yes&quot;/&gt;\n    &lt;attribute type=&quot;style&quot; required=&quot;yes&quot;/&gt;\n    &lt;element type=&quot;title&quot;/&gt;\n    &lt;element type=&quot;author&quot;/&gt;\n    &lt;element type=&quot;price&quot;/&gt;\n  &lt;/ElementType&gt;\n  &lt;ElementType name=&quot;bookstore&quot; content=&quot;eltOnly&quot;&gt;\n    &lt;element type=&quot;book&quot;/&gt;\n  &lt;/ElementType&gt;\n&lt;/Schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_SchemaType\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_SchemaType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a schema type object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object SchemaType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.xml.schema.xmlschemadatatype\" data-linktype=\"relative-path\">XmlSchemaDatatype</a>, <a class=\"xref\" href=\"system.xml.schema.xmlschemasimpletype\" data-linktype=\"relative-path\">XmlSchemaSimpleType</a>, or <a class=\"xref\" href=\"system.xml.schema.xmlschemacomplextype\" data-linktype=\"relative-path\">XmlSchemaComplexType</a> depending whether the node value is a built in XML Schema definition language (XSD) type or a user defined simpleType or complexType; <code>null</code> if the current node has no schema type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The user needs to test for the returned type. For example,  </p>\n<pre><code>object obj = vreader.SchemaType;  \n if (obj is XmlSchemaType)  \n {  \n   XmlSchemaType st = (XmlSchemaType)obj;  \n   // use XmlSchemaType object  \n }  \n if (obj is XmlSchemaDatatype)  \n {  \n   XmlSchemaDatatype sd = (XmlSchemaDatatype)obj;  \n   Type vt = sd.ValueType;  \n   // use XmlSchemaDatatype object  \n       }\n</code></pre><p> If XML Schema validation is being performed, the <code>XmlSchemaType</code> or <code>XmlSchemaDatatype</code> corresponds to the current element being read. If document type definition (DTD validation) is being performed, this property returns <code>null</code>.  </p>\n<p> <code>XmlSchemaDatatype</code> is returned if the current element, or attribute, is a simple type that can specify special validation constraints on the simple types, like min and max.  </p>\n<p> <code>XmlSchemaSimpleType</code> is returned if the current element, or attribute, is a user defined simpleType.  </p>\n<p> <code>XmlSchemaComplexType</code> is returned if the current element is a user defined complexType. This type cannot be returned by attributes.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ValidationType_\" data-linktype=\"relative-path\">ValidationType</a> has been set to ValidationType.None, no data type information is provided from either schemas or DTDs.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> After calling <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Close_\" data-linktype=\"relative-path\">Close</a>, SchemaType will return Null.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the type information for each of the elements in the XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlValidatingReader.SchemaType#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Schema;\n\npublic class Sample{\n\n  public static void Main(){\n  \n  XmlTextReader tr = new XmlTextReader(&quot;booksSchema.xml&quot;);\n  XmlValidatingReader vr = new XmlValidatingReader(tr);\n \n  vr.Schemas.Add(null, &quot;books.xsd&quot;);\n  vr.ValidationType = ValidationType.Schema;\n  vr.ValidationEventHandler += new ValidationEventHandler (ValidationCallBack);\n \n  while(vr.Read()){\n    if(vr.NodeType == XmlNodeType.Element){\n      if(vr.SchemaType is XmlSchemaComplexType){\n        XmlSchemaComplexType sct = (XmlSchemaComplexType)vr.SchemaType;\n        Console.WriteLine(&quot;{0}({1})&quot;, vr.Name, sct.Name);\n      }\n      else{\n        object value = vr.ReadTypedValue();\n        Console.WriteLine(&quot;{0}({1}):{2}&quot;, vr.Name, value.GetType().Name, value);\n      }\n    }\n  }\n }\n\n  private static void ValidationCallBack (object sender, ValidationEventArgs args){\n    Console.WriteLine(&quot;***Validation error&quot;);\n    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Severity:{0}&quot;, args.Severity);\n    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Message  :{0}&quot;, args.Message);\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlValidatingReader.SchemaType#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Schema;\n\npublic ref class Sample\n{\nprivate:\n   static void ValidationCallBack( Object^ sender, ValidationEventArgs^ args )\n   {\n      Console::WriteLine( &quot;***Validation error&quot; );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Severity: {0}&quot;, args-&gt;Severity );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Message  : {0}&quot;, args-&gt;Message );\n   }\n\npublic:\n   static void main()\n   {\n      XmlTextReader^ tr = gcnew XmlTextReader( &quot;booksSchema.xml&quot; );\n      XmlValidatingReader^ vr = gcnew XmlValidatingReader( tr );\n      vr-&gt;Schemas-&gt;Add( nullptr, &quot;books.xsd&quot; );\n      vr-&gt;ValidationType = ValidationType::Schema;\n      vr-&gt;ValidationEventHandler += gcnew ValidationEventHandler( Sample::ValidationCallBack );\n      while ( vr-&gt;Read() )\n      {\n         if ( vr-&gt;NodeType == XmlNodeType::Element )\n         {\n            if ( dynamic_cast&lt;XmlSchemaComplexType^&gt;(vr-&gt;SchemaType) != nullptr )\n            {\n               XmlSchemaComplexType^ sct = dynamic_cast&lt;XmlSchemaComplexType^&gt;(vr-&gt;SchemaType);\n               Console::WriteLine( &quot; {0}( {1})&quot;, vr-&gt;Name, sct-&gt;Name );\n            }\n            else\n            {\n               Object^ value = vr-&gt;ReadTypedValue();\n               Console::WriteLine( &quot; {0}( {1}): {2}&quot;, vr-&gt;Name, value-&gt;GetType()-&gt;Name, value );\n            }\n         }\n      }\n   }\n};\n\nint main()\n{\n   Sample::main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlValidatingReader.SchemaType#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Schema\n\npublic class Sample\n\n  public shared sub Main()\n  \n  Dim tr as XmlTextReader = new XmlTextReader(&quot;booksSchema.xml&quot;)\n  Dim vr as XmlValidatingReader = new XmlValidatingReader(tr)\n \n  vr.Schemas.Add(nothing, &quot;books.xsd&quot;)\n  vr.ValidationType = ValidationType.Schema\n  AddHandler vr.ValidationEventHandler, AddressOf ValidationCallBack\n\n  while(vr.Read())\n\n    if(vr.NodeType = XmlNodeType.Element)\n    \n      if (vr.SchemaType.ToString() = &quot;System.Xml.Schema.XmlSchemaComplexType&quot;)\n        Dim sct as XmlSchemaComplexType = CType(vr.SchemaType,XmlSchemaComplexType)\n        Console.WriteLine(&quot;{0}({1})&quot;, vr.Name, sct.Name)\n      else      \n        Dim value as object = vr.ReadTypedValue()\n        Console.WriteLine(&quot;{0}({1}):{2}&quot;, vr.Name, value.GetType().Name, value)    \n      end if\n    end if\n  end while\n  end sub\n\n  private shared sub ValidationCallBack (sender as object, args as ValidationEventArgs)\n\n   Console.WriteLine(&quot;***Validation error&quot;)\n   Console.WriteLine(&quot;Severity:{0}&quot;, args.Severity)\n   Console.WriteLine(&quot;Message  :{0}&quot;, args.Message)\n  end sub\nend class\n</code></pre><p> The example uses the following input files.  </p>\n<p> <code>booksSchema.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.SchemaType#2\">&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;bookstore xmlns=&quot;urn:bookstore-schema&quot;&gt;\n  &lt;book genre=&quot;autobiography&quot;&gt;\n    &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n      &lt;last-name&gt;Franklin&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;8.99&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot;&gt;\n    &lt;title&gt;The Confidence Man&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Herman&lt;/first-name&gt;\n      &lt;last-name&gt;Melville&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> <code>books.xsd</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.SchemaType#3\">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;\n    xmlns=&quot;urn:bookstore-schema&quot;\n    elementFormDefault=&quot;qualified&quot;\n    targetNamespace=&quot;urn:bookstore-schema&quot;&gt;\n\n &lt;xsd:element name=&quot;bookstore&quot; type=&quot;bookstoreType&quot;/&gt;\n\n &lt;xsd:complexType name=&quot;bookstoreType&quot;&gt;\n  &lt;xsd:sequence maxOccurs=&quot;unbounded&quot;&gt;\n   &lt;xsd:element name=&quot;book&quot;  type=&quot;bookType&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;bookType&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;title&quot; type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;author&quot; type=&quot;authorName&quot;/&gt;\n   &lt;xsd:element name=&quot;price&quot;  type=&quot;xsd:decimal&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n  &lt;xsd:attribute name=&quot;genre&quot; type=&quot;xsd:string&quot;/&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;authorName&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;first-name&quot;  type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;last-name&quot; type=&quot;xsd:string&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n&lt;/xsd:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ValidationType\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ValidationType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValidationType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating the type of validation to perform.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.ValidationType ValidationType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.validationtype\" data-linktype=\"relative-path\">ValidationType</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.validationtype\" data-linktype=\"relative-path\">ValidationType</a> values. If this property is not set, it defaults to ValidationType.Auto.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Setting the property after a Read has been called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property must be set before the first call to <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a>. Setting this property to ValidationType.None creates a non-validating reader.  </p>\n<p> If external document type definitions (DTDs) or schemas are needed for validation, the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example validates two files.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.ValidationType Example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Schema\nImports Microsoft.VisualBasic\n\nPublic Class Sample\n    Private doc1 As String = &quot;notValid.xml&quot;\n    Private doc2 As String = &quot;cdDTD.xml&quot;\n    Private doc3 As String = &quot;book1.xml&quot;\n    \n    Private txtreader As XmlTextReader = Nothing\n    Private reader As XmlValidatingReader = Nothing\n    Private m_success As Boolean = True\n    \n    Public Sub New()\n        &#39;Parse the files and validate when requested.\n        Validate(doc1, ValidationType.XDR) &#39;Validation should fail.\n        Validate(doc2, ValidationType.DTD) &#39;Validation should fail.\n        Validate(doc3, ValidationType.None) &#39;No validation performed.\n    End Sub &#39;New\n    \n    Public Shared Sub Main()\n        Dim validation As New Sample()\n    End Sub &#39;Main\n    \n    Private Sub Validate(filename As String, vt As ValidationType)\n        Try\n            &#39;Implement the readers.  Set the ValidationType.\n            txtreader = New XmlTextReader(filename)\n            reader = New XmlValidatingReader(txtreader)\n            reader.ValidationType = vt\n            \n            &#39;If the reader is set to validate, set the event handler.\n            If vt = ValidationType.None Then\n                Console.WriteLine(ControlChars.Cr &amp; &quot;Parsing XML file &quot; &amp; filename.ToString())\n            Else\n                Console.WriteLine(ControlChars.Cr &amp; &quot;Validating XML file &quot; &amp; filename.ToString())\n                m_success = True\n                &#39;Set the validation event handler.\n                AddHandler reader.ValidationEventHandler, AddressOf ValidationCallBack\n            End If\n            \n            &#39; Read XML data\n            While reader.Read()\n            End While \n            If vt = ValidationType.None Then\n                Console.WriteLine(&quot;Finished parsing file.&quot;)\n            Else\n                Console.WriteLine(&quot;Validation finished. Validation {0}&quot;, IIf(m_success, &quot;successful&quot;, &quot;failed&quot;))\n            End If\n        \n        Finally\n            &#39;Close the reader.\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try \n    End Sub &#39;Validate\n    \n    &#39;Display the validation errors.\n    Private Sub ValidationCallBack(sender As Object, args As ValidationEventArgs)\n        m_success = False\n        \n        Console.Write(ControlChars.CrLf &amp; ControlChars.Tab &amp; &quot;Validation error: &quot; &amp; args.Message)\n    End Sub &#39;ValidationCallBack\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.ValidationType Example#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Schema;\n\npublic class Sample\n{\n  private const String doc1 = &quot;notValid.xml&quot;;\n  private const String doc2 = &quot;cdDTD.xml&quot;;\n  private const String doc3 = &quot;book1.xml&quot;;\n\n  private XmlTextReader txtreader = null;\n  private XmlValidatingReader reader = null;\n  private Boolean m_success = true;\n\n  public Sample ()\n  {\n      //Parse the files and validate when requested.\n      Validate(doc1, ValidationType.XDR);  //Validation should fail.\n      Validate(doc2, ValidationType.DTD);  //Validation should fail.\n      Validate(doc3, ValidationType.None); //No validation performed.\n\n  }    \n\n  public static void Main ()\n  {\n      Sample validation = new Sample();\n  }\n\n  private void Validate(String filename, ValidationType vt)\n  {\n    try\n    {    \n        //Implement the readers.  Set the ValidationType.\n        txtreader = new XmlTextReader(filename);\n        reader = new XmlValidatingReader(txtreader);\n        reader.ValidationType = vt;\n\n        //If the reader is set to validate, set the event handler.\n        if (vt==ValidationType.None)\n           Console.WriteLine(&quot;<br>Parsing XML file &quot; + filename.ToString());\n        else{\n           Console.WriteLine(&quot;<br>Validating XML file &quot; + filename.ToString());\n           m_success = true;\n           //Set the validation event handler.\n           reader.ValidationEventHandler += new ValidationEventHandler (ValidationCallBack);\n        }\n\n        // Read XML data\n        while (reader.Read()){}\n\n        if (vt==ValidationType.None)\n           Console.WriteLine(&quot;Finished parsing file.&quot;);\n        else\n          Console.WriteLine (&quot;Validation finished. Validation {0}&quot;, (m_success==true ? &quot;successful&quot; : &quot;failed&quot;));\n     }\n\n     finally\n     {\n        //Close the reader.\n        if (reader != null)\n          reader.Close();\n     } \n\n  }\n  \n  //Display the validation errors.\n  private void ValidationCallBack (object sender, ValidationEventArgs args)\n  {\n     m_success = false;\n\n     Console.Write(&quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Validation error: &quot; + args.Message);\n\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.ValidationType Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Schema;\npublic ref class Sample\n{\nprivate:\n   XmlTextReader^ txtreader;\n   XmlValidatingReader^ reader;\n   Boolean m_success;\n\npublic:\n   Sample()\n   {\n      txtreader = nullptr;\n      reader = nullptr;\n      m_success = true;\n      String^ doc1 = &quot;notValid.xml&quot;;\n      String^ doc2 = &quot;cdDTD.xml&quot;;\n      String^ doc3 = &quot;book1.xml&quot;;\n      \n      //Parse the files and validate when requested.\n      Validate( doc1, ValidationType::XDR ); //Validation should fail.\n      Validate( doc2, ValidationType::DTD ); //Validation should fail.\n      Validate( doc3, ValidationType::None ); //No validation performed.\n   }\n\n\nprivate:\n   void Validate( String^ filename, ValidationType vt )\n   {\n      try\n      {\n         \n         //Implement the readers.  Set the ValidationType.\n         txtreader = gcnew XmlTextReader( filename );\n         reader = gcnew XmlValidatingReader( txtreader );\n         reader-&gt;ValidationType = vt;\n         \n         //If the reader is set to validate, set the event handler.\n         if ( vt == ValidationType::None )\n                  Console::WriteLine( &quot;<br>Parsing XML file {0}&quot;, filename );\n         else\n         {\n            Console::WriteLine( &quot;<br>Validating XML file {0}&quot;, filename );\n            m_success = true;\n            \n            //Set the validation event handler.\n            reader-&gt;ValidationEventHandler += gcnew ValidationEventHandler( this, &amp;Sample::ValidationCallBack );\n         }\n         \n         // Read XML data\n         while ( reader-&gt;Read() )\n         {}\n         if ( vt == ValidationType::None )\n                  Console::WriteLine( &quot;Finished parsing file.&quot; );\n         else\n                  Console::WriteLine( &quot;Validation finished. Validation {0}&quot;, m_success ? (String^)&quot;successful&quot; : &quot;failed&quot; );\n      }\n      finally\n      {\n         \n         //Close the reader.\n         if ( reader != nullptr )\n                  reader-&gt;Close();\n      }\n\n   }\n\n\n   //Display the validation errors.\n   void ValidationCallBack( Object^ /*sender*/, ValidationEventArgs^ args )\n   {\n      m_success = false;\n      Console::Write( &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Validation error: {0}&quot;, args-&gt;Message );\n   }\n\n};\n\nint main()\n{\n   gcnew Sample;\n}\n</code></pre><p> The sample uses the following four input files:  </p>\n<p> <code>notValid.xml</code> (The &quot;x-schema:&quot; prefix identifies the XML-Data Reduced (XDR) schema for the reader.)  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.ValidationType Example#2\">\n&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;bookstore xmlns=&quot;x-schema:schema1.xdr&quot;&gt;\n  &lt;book genre=&quot;novel&quot; style=&quot;hardcover&quot;&gt;\n    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Margaret&lt;/first-name&gt;\n      &lt;last-name&gt;Atwood&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;19.95&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot; style=&quot;other&quot;&gt;\n    &lt;title&gt;The Poisonwood Bible&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Barbara&lt;/first-name&gt;\n      &lt;last-name&gt;Kingsolver&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> <code>schema1.xdr</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.ValidationType Example#3\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n &lt;Schema xmlns=&quot;urn:schemas-microsoft-com:xml-data&quot;\n         xmlns:dt=&quot;urn:schemas-microsoft-com:datatypes&quot;&gt;\n   &lt;ElementType name=&quot;first-name&quot; content=&quot;textOnly&quot;/&gt;\n   &lt;ElementType name=&quot;last-name&quot; content=&quot;textOnly&quot;/&gt;\n   &lt;ElementType name=&quot;name&quot; content=&quot;textOnly&quot;/&gt;\n   &lt;ElementType name=&quot;price&quot; content=&quot;textOnly&quot; dt:type=&quot;fixed.14.4&quot;/&gt;\n   &lt;ElementType name=&quot;author&quot; content=&quot;eltOnly&quot; order=&quot;one&quot;&gt;\n     &lt;group order=&quot;seq&quot;&gt;\n       &lt;element type=&quot;name&quot;/&gt;\n     &lt;/group&gt;\n     &lt;group order=&quot;seq&quot;&gt;\n       &lt;element type=&quot;first-name&quot;/&gt;\n       &lt;element type=&quot;last-name&quot;/&gt;\n     &lt;/group&gt;\n   &lt;/ElementType&gt;\n   &lt;ElementType name=&quot;title&quot; content=&quot;textOnly&quot;/&gt;\n   &lt;AttributeType name=&quot;genre&quot; dt:type=&quot;string&quot;/&gt;\n   &lt;AttributeType name=&quot;style&quot; dt:type=&quot;enumeration&quot;\n         dt:values=&quot;paperback hardcover&quot;/&gt;\n   &lt;ElementType name=&quot;book&quot; content=&quot;eltOnly&quot;&gt;\n     &lt;attribute type=&quot;genre&quot; required=&quot;yes&quot;/&gt;\n     &lt;attribute type=&quot;style&quot; required=&quot;yes&quot;/&gt;\n     &lt;element type=&quot;title&quot;/&gt;\n     &lt;element type=&quot;author&quot;/&gt;\n     &lt;element type=&quot;price&quot;/&gt;\n   &lt;/ElementType&gt;\n   &lt;ElementType name=&quot;bookstore&quot; content=&quot;eltOnly&quot;&gt;\n     &lt;element type=&quot;book&quot;/&gt;\n   &lt;/ElementType&gt;\n &lt;/Schema&gt;\n</code></pre><p> <code>cdDTD.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.ValidationType Example#4\">\n&lt;!--XML file using a DTD--&gt;\n&lt;!DOCTYPE bookstore [\n  &lt;!ELEMENT bookstore (cd)*&gt; \n  &lt;!ELEMENT cd (title,artist,price)&gt;\n  &lt;!ATTLIST cd genre CDATA #REQUIRED&gt;\n  &lt;!ELEMENT title (#PCDATA)&gt;\n  &lt;!ELEMENT artist (#PCDATA)&gt;\n  &lt;!ELEMENT price (#PCDATA)&gt;]&gt;\n&lt;bookstore&gt;\n  &lt;cd genre=&quot;alternative&quot;  ISBN=&quot;2-3631-4&quot;&gt;\n    &lt;title&gt;Americana&lt;/title&gt;\n    &lt;artist&gt;Offspring&lt;/artist&gt;\n    &lt;price&gt;16.95&lt;/price&gt;\n  &lt;/cd&gt;\n&lt;/bookstore&gt;\n</code></pre><p> <code>book1.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.ValidationType Example#5\">\n&lt;?xml version=&#39;1.0&#39; ?&gt;\n&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;\n&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;misc&gt;&amp;h;&lt;/misc&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Value\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets the text value of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Value { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value returned depends on the <span class=\"xref\">stem.Xml.XmlValidatingReader.NodeType*</span> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.  </p>\n <table><thead><tr><th> Node Type<br>\n </th><th> Value<br>\n </th></tr></thead><tbody><tr><td><code>Attribute</code></td><td> The value of the attribute.<br>\n </td></tr><tr><td><code>CDATA</code></td><td> The content of the CDATA section.<br>\n </td></tr><tr><td><code>Comment</code></td><td> The content of the comment.<br>\n </td></tr><tr><td><code>DocumentType</code></td><td> The internal subset.<br>\n </td></tr><tr><td><code>ProcessingInstruction</code></td><td> The entire content, excluding the target.<br>\n </td></tr><tr><td><code>SignificantWhitespace</code></td><td> The white space between markup in a mixed content model.<br>\n </td></tr><tr><td><code>Text</code></td><td> The content of the text node.<br>\n </td></tr><tr><td><code>Whitespace</code></td><td> The white space between markup.<br>\n </td></tr><tr><td><code>XmlDeclaration</code></td><td> The content of the declaration.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextReader txtreader = null;\n     XmlValidatingReader reader = null;\n\n     try\n     {  \n        //Load the reader with the data file and ignore all white space nodes.         \n        txtreader = new XmlTextReader(filename);\n        txtreader.WhitespaceHandling = WhitespaceHandling.None;\n\n        //Implement the validating reader over the text reader. \n        reader = new XmlValidatingReader(txtreader);\n        reader.ValidationType = ValidationType.None;\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally\n     {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ txtreader = nullptr;\n   XmlValidatingReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      //Load the reader with the data file and ignore all white space nodes.         \n      txtreader = gcnew XmlTextReader( filename );\n      txtreader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      //Implement the validating reader over the text reader. \n      reader = gcnew XmlValidatingReader( txtreader );\n      reader-&gt;ValidationType = ValidationType::None;\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   Private Const filename As String = &quot;items.xml&quot;\n   \n   Public Shared Sub Main()\n      Dim txtreader As XmlTextReader = Nothing\n      Dim reader As XmlValidatingReader = Nothing\n      \n      Try\n         &#39;Load the reader with the data file and ignore all white space nodes.         \n         txtreader = New XmlTextReader(filename)\n         txtreader.WhitespaceHandling = WhitespaceHandling.None\n         \n         &#39;Implement the validating reader over the text reader. \n         reader = New XmlValidatingReader(txtreader)\n         reader.ValidationType = ValidationType.None\n         \n         &#39;Parse the file and display each of the nodes.\n         While reader.Read()\n            Select Case reader.NodeType\n               Case XmlNodeType.Element\n                  Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n               Case XmlNodeType.Text\n                  Console.Write(reader.Value)\n               Case XmlNodeType.CDATA\n                  Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n               Case XmlNodeType.ProcessingInstruction\n                  Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n               Case XmlNodeType.Comment\n                  Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n               Case XmlNodeType.XmlDeclaration\n                  Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n               Case XmlNodeType.Document\n               Case XmlNodeType.DocumentType\n                  Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n               Case XmlNodeType.EntityReference\n                  Console.Write(reader.Name)\n               Case XmlNodeType.EndElement\n                  Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n            End Select\n         End While\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_XmlLang\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_XmlLang_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlLang</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <code>xml:lang</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string XmlLang { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The current <code>xml:lang</code> scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This property represents the xml:lang scope within which the current node resides. For example, here is an XML fragment with <code>xml:lang</code> set to U.S. English in the root element:  </p>\n<pre><code>&lt;root xml:lang=&quot;en-us&quot;&gt;   \n&lt;name&gt;Fred&lt;/name&gt;   \n&lt;/root&gt;\n</code></pre><p> When the reader is positioned on the <code>name</code> element, you can use this property to find that it is in the scope of a U.S. English <code>xml:lang</code> attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_XmlResolver\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_XmlResolver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlResolver</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> used for resolving external document type definition (DTD) and schema location references. The <code>XmlResolver</code> is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlResolver XmlResolver { set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlResolver</code> to use. If set to <code>null</code>, external resources are not resolved.  </p>\n<p> In version 1.1 of the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnshort-md.md&quot; -->.NET Framework<!--END INCLUDE -->, the caller must be fully trusted to specify an <code>XmlResolver</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The <code>XmlResolver</code> is used to load any DTDs, entities, or schemas needed to complete the validation process.  </p>\n<p> This property can be set at any time and takes affect after the next <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a> call. If this property is set to <code>null</code>, the reader assumes the user is not interested in resolving external references. In this case, the reader only validates against internal resources, if the resource is present.  </p>\n<p> In version 1.1 of <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnshort-md.md&quot; -->.NET Framework<!--END INCLUDE --> , if this property is not set, the trust level of the application determines the default behavior.  </p>\n<p> <code>Fully trusted code:</code> The reader uses a default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no user credentials. If authentication is required to access a network resource, use the <code>XmlResolver</code> property to specify an <code>XmlResolver</code> with the necessary credentials.  </p>\n<p> <code>Semi-trusted code:</code> The <code>XmlResolver</code> property is set to <code>null</code>. External resources are not resolved.  </p>\n<p> When validating using schemas, you can avoid the expensive load process by providing an <a class=\"xref\" href=\"system.xml.schema.xmlschemacollection\" data-linktype=\"relative-path\">XmlSchemaCollection</a> using the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Schemas_\" data-linktype=\"relative-path\">Schemas</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>XmlResolver</code> property to specify the credentials necessary to access the networked DTD file.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlValidatingReader.XmlResolver#1\">   // Create the reader. -&gt; \n   XmlTextReader^ txtreader = gcnew XmlTextReader( &quot;book5.xml&quot; );\n   XmlValidatingReader^ reader = gcnew XmlValidatingReader( txtreader );\n   txtreader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n   \n   // Set the credentials necessary to access the DTD file stored on the network.\n   XmlUrlResolver^ resolver = gcnew XmlUrlResolver;\n   resolver-&gt;Credentials = System::Net::CredentialCache::DefaultCredentials;\n   reader-&gt;XmlResolver = resolver;\n   \n   // Display each of the element nodes.\n   while ( reader-&gt;Read() )\n   {\n      switch ( reader-&gt;NodeType )\n      {\n         case XmlNodeType::Element:\n            Console::Write( &quot;&lt; {0}&gt;&quot;, reader-&gt;Name );\n            break;\n\n         case XmlNodeType::Text:\n            Console::Write( reader-&gt;Value );\n            break;\n\n         case XmlNodeType::DocumentType:\n            Console::Write( &quot;&lt;!DOCTYPE {0} [ {1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n            break;\n\n         case XmlNodeType::EntityReference:\n            Console::Write( reader-&gt;Name );\n            break;\n\n         case XmlNodeType::EndElement:\n            Console::Write( &quot;&lt;/ {0}&gt;&quot;, reader-&gt;Name );\n            break;\n      }\n   }\n\n   \n   // Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlValidatingReader.XmlResolver#1\">    &#39; Create the reader.\n    Dim txtreader as XmlTextReader = new XmlTextReader(&quot;book5.xml&quot;)\n    Dim reader as XmlValidatingReader = new XmlValidatingReader(txtreader)\n    txtreader.WhitespaceHandling = WhitespaceHandling.None\n\n    &#39; Set the credentials necessary to access the DTD file stored on the network.\n    Dim resolver as XmlUrlResolver = new XmlUrlResolver()\n    resolver.Credentials = System.Net.CredentialCache.DefaultCredentials\n    reader.XmlResolver = resolver\n\n    &#39; Display each of the element nodes.\n    while (reader.Read())\n       select case reader.NodeType\n         case XmlNodeType.Element:\n           Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n         case XmlNodeType.Text:\n           Console.Write(reader.Value)\n         case XmlNodeType.DocumentType:\n           Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n         case XmlNodeType.EntityReference:\n           Console.Write(reader.Name)\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n       end select        \n    end while           \n</code></pre><pre><code class=\"lang-cs\" name=\"XmlValidatingReader.XmlResolver#1\">    // Create the reader.\n    XmlTextReader txtreader = new XmlTextReader(&quot;book5.xml&quot;);\n    XmlValidatingReader reader = new XmlValidatingReader(txtreader);\n    txtreader.WhitespaceHandling = WhitespaceHandling.None;\n\n    // Set the credentials necessary to access the DTD file stored on the network.\n    XmlUrlResolver resolver = new XmlUrlResolver();\n    resolver.Credentials = System.Net.CredentialCache.DefaultCredentials;\n    reader.XmlResolver = resolver;\n\n    // Display each of the element nodes.\n    while (reader.Read()){\n       switch (reader.NodeType){\n         case XmlNodeType.Element:\n           Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n           break;\n         case XmlNodeType.Text:\n           Console.Write(reader.Value);\n           break;\n         case XmlNodeType.DocumentType:\n           Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n           break;\n         case XmlNodeType.EntityReference:\n           Console.Write(reader.Name);\n           break;\n         case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n      }        \n    }           \n</code></pre><p> The example uses the following files as input.  </p>\n<p> <code>book5.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.XmlResolver#2\">&lt;!DOCTYPE book SYSTEM &#39;http://myServer/DTDs/books.dtd&#39;&gt;\n&lt;book ISBN = &#39;1-861001-57-5&#39;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n  &lt;misc&gt;&amp;h;&lt;/misc&gt;\n&lt;/book&gt;\n</code></pre><p> <code>books.dtd</code>  </p>\n<!-- Can not find reference ../CodeSnippet/VS_Snippets_Data/XmlValidatingReader.XmlResolver -->\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_XmlSpace\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_XmlSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlSpace</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <code>xml:space</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlSpace XmlSpace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a> values. If no <code>xml:space</code> scope exists, this property defaults to <code>XmlSpace.None</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Close\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Changes the <span class=\"xref\">stem.Xml.XmlReader.ReadState*</span> to Closed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method also releases any resources held while reading. If this reader was constructed by using an <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a>, this method also calls <code>Close</code> on the underlying reader. If this reader was constructed by using a stream, this method also calls <code>Close</code> on the underlying stream.  </p>\n<p> If <code>Close</code> has already been called, no action is performed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_GetAttribute_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (int i);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>i</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute. The index is zero-based. (The first attribute has index 0.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>i</code> parameter is less than 0 or greater than or equal to <span class=\"xref\">stem.Xml.XmlValidatingReader.AttributeCount*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not move the reader.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_GetAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method does not move the reader.  </p>\n<p> If the reader is positioned on a <code>DocumentType</code> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <code>reader.GetAttribute(&quot;PUBLIC&quot;)</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the ISBN attribute.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.GetAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n\n    //Create the validating reader.\n    XmlTextReader txtreader = new XmlTextReader(&quot;attrs.xml&quot;);\n    XmlValidatingReader reader = new XmlValidatingReader(txtreader);\n\n    //Read the ISBN attribute.\n    reader.MoveToContent();\n    string isbn = reader.GetAttribute(&quot;ISBN&quot;);\n    Console.WriteLine(&quot;The ISBN value: &quot; + isbn);\n\n    //Close the reader.\n    reader.Close();\n\n  } \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.GetAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the validating reader.\n   XmlTextReader^ txtreader = gcnew XmlTextReader( &quot;attrs.xml&quot; );\n   XmlValidatingReader^ reader = gcnew XmlValidatingReader( txtreader );\n   \n   //Read the ISBN attribute.\n   reader-&gt;MoveToContent();\n   String^ isbn = reader-&gt;GetAttribute( &quot;ISBN&quot; );\n   Console::WriteLine( &quot;The ISBN value: {0}&quot;, isbn );\n   \n   //Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.GetAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main()\n\n    &#39;Create the validating reader.\n    Dim txtreader as XmlTextReader = new XmlTextReader(&quot;attrs.xml&quot;)\n    Dim reader as XmlValidatingReader = new XmlValidatingReader(txtreader)\n\n    &#39;Read the ISBN attribute.\n    reader.MoveToContent()\n    Dim isbn as string = reader.GetAttribute(&quot;ISBN&quot;)\n    Console.WriteLine(&quot;The ISBN value: &quot; + isbn)\n\n    &#39;Close the reader.\n    reader.Close()\n\n  End sub\nEnd class \n</code></pre><p> The example uses the file, <code>attrs.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.GetAttribute Example#2\">&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_GetAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetAttribute (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found, <code>null</code> is returned. This method does not move the reader.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> The following XML contains an attribute in a specific namespace:  </p>\n<pre><code>&lt;test xmlns:dt=&quot;urn:datatypes&quot; dt:type=&quot;int&quot;/&gt;\n</code></pre><p> You can look up the <code>dt:type</code> attribute by using one argument (prefix and local name) or two arguments (local name and namespace URI):  </p>\n<pre><code>String dt = reader.GetAttribute(&quot;dt:type&quot;);  \nString dt2 = reader.GetAttribute(&quot;type&quot;,&quot;urn:datatypes&quot;);\n</code></pre><p> To look up the <code>xmlns:dt</code> attribute, use one of the following arguments:  </p>\n<pre><code>String dt3 = reader.GetAttribute(&quot;xmlns:dt&quot;);  \nString dt4 = reader.GetAttribute(&quot;dt&quot;,http://www.w3.org/2000/xmlns/);\n</code></pre><p> You can also get this information by using the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_HasLineInfo\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_HasLineInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasLineInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the class can return line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasLineInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the class can return line information; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_LookupNamespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_LookupNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LookupNamespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves a namespace prefix in the current element&#39;s scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LookupNamespace (string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI to which the prefix maps or <code>null</code> if no matching prefix is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page..  </p>\n</div>\n<p> In the following XML string, if the reader is positioned on the <code>href</code> attribute, the prefix <code>a</code> is resolved by calling <code>reader.LookupNamespace(&quot;a&quot;, true)</code>. The returned string is <code>urn:456</code>.  </p>\n<pre><code>&lt;root xmlns:a=&quot;urn:456&quot;&gt;  \n &lt;item&gt;  \n &lt;ref href=&quot;a:b&quot;/&gt;  \n &lt;/item&gt;  \n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_MoveToAttribute_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void MoveToAttribute (int i);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>i</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>i</code> parameter is less than 0 or greater than or equal to <span class=\"xref\">stem.Xml.XmlReader.AttributeCount*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads all the elements on the root node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlValidatingReader reader = null;\n\n    try\n    {\n       //Create the string to parse.\n       string xmlFrag=&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;;\n\n       //Create the XmlNamespaceManager.\n       NameTable nt = new NameTable();\n       XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n\n       //Create the XmlParserContext.\n       XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n       //Create the XmlValidatingReader .\n       reader = new XmlValidatingReader(xmlFrag, XmlNodeType.Element, context);\n  \n       //Read the attributes on the root element.\n       reader.MoveToContent();\n       if (reader.HasAttributes){\n         for (int i=0; i&lt;reader.AttributeCount; i++){\n            reader.MoveToAttribute(i);\n            Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);\n         }\n         //Move the reader back to the node that owns the attribute.\n         reader.MoveToElement();\n       }\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlValidatingReader^ reader = nullptr;\n   try\n   {\n      \n      //Create the string to parse.\n      String^ xmlFrag = &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;;\n      \n      //Create the XmlNamespaceManager.\n      NameTable^ nt = gcnew NameTable;\n      XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n      \n      //Create the XmlParserContext.\n      XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n      \n      //Create the XmlValidatingReader .\n      reader = gcnew XmlValidatingReader( xmlFrag,XmlNodeType::Element,context );\n      \n      //Read the attributes on the root element.\n      reader-&gt;MoveToContent();\n      if ( reader-&gt;HasAttributes )\n      {\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::WriteLine( &quot;{0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement();\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlValidatingReader = Nothing\n        \n        Try\n            &#39;Create the string to parse.\n            Dim xmlFrag As String = &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;\n            \n            &#39;Create the XmlNamespaceManager.\n            Dim nt As New NameTable()\n            Dim nsmgr As New XmlNamespaceManager(nt)\n            \n            &#39;Create the XmlParserContext.\n            Dim context As New XmlParserContext(Nothing, nsmgr, Nothing, XmlSpace.None)\n            \n            &#39;Create the XmlValidatingReader .\n            reader = New XmlValidatingReader(xmlFrag, XmlNodeType.Element, context)\n            \n            &#39;Read the attributes on the root element.\n            reader.MoveToContent()\n            If reader.HasAttributes Then\n                Dim i As Integer\n                For i = 0 To reader.AttributeCount - 1\n                    reader.MoveToAttribute(i)\n                    Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)\n                Next i\n                &#39;Move the reader back to the node that owns the attribute.\n                reader.MoveToElement()\n            End If\n        \n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_MoveToAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute is found; otherwise, <code>false</code>. If <code>false</code>, the position of the reader does not change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> After calling this method, the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> properties reflect the properties of that attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an attribute with text and entity reference nodes.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.MoveToAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlValidatingReader reader = null;\n\n    try\n    {\n       //Create the XML fragment to be parsed.\n       string xmlFrag =&quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;;\n\n       //Create the XmlParserContext.\n       XmlParserContext context;\n       string subset = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;;\n       context = new XmlParserContext(null, null, &quot;book&quot;, null, null, subset, &quot;&quot;, &quot;&quot;, XmlSpace.None);\n        \n       //Create the reader and set it to not expand general entities. \n       reader = new XmlValidatingReader(xmlFrag, XmlNodeType.Element, context);\n       reader.ValidationType = ValidationType.None;\n       reader.EntityHandling = EntityHandling.ExpandCharEntities;\n  \n       //Read the misc attribute. Because EntityHandling is set to\n       //ExpandCharEntities, the attribute is parsed into multiple text\n       //and entity reference nodes.\n       reader.MoveToContent();\n       reader.MoveToAttribute(&quot;misc&quot;);\n       while (reader.ReadAttributeValue()){\n          if (reader.NodeType==XmlNodeType.EntityReference)\n            //To expand the entity, call ResolveEntity.\n            Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Name);\n          else\n             Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Value);\n        } \n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.MoveToAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlValidatingReader^ reader = nullptr;\n   try\n   {\n      \n      //Create the XML fragment to be parsed.\n      String^ xmlFrag = &quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;;\n      \n      //Create the XmlParserContext.\n      XmlParserContext^ context;\n      String^ subset = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;;\n      context = gcnew XmlParserContext( nullptr,nullptr,&quot;book&quot;,nullptr,nullptr,subset,&quot;&quot;,&quot;&quot;,XmlSpace::None );\n      \n      //Create the reader and set it to not expand general entities. \n      reader = gcnew XmlValidatingReader( xmlFrag,XmlNodeType::Element,context );\n      reader-&gt;ValidationType = ValidationType::None;\n      reader-&gt;EntityHandling = EntityHandling::ExpandCharEntities;\n      \n      //Read the misc attribute. Because EntityHandling is set to\n      //ExpandCharEntities, the attribute is parsed into multiple text\n      //and entity reference nodes.\n      reader-&gt;MoveToContent();\n      reader-&gt;MoveToAttribute( &quot;misc&quot; );\n      while ( reader-&gt;ReadAttributeValue() )\n      {\n         if ( reader-&gt;NodeType == XmlNodeType::EntityReference )\n                  \n         //To expand the entity, call ResolveEntity.\n         Console::WriteLine( &quot;{0} {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n         else\n                  Console::WriteLine( &quot;{0} {1}&quot;, reader-&gt;NodeType, reader-&gt;Value );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.MoveToAttribute Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlValidatingReader = Nothing\n        \n        Try\n            &#39;Create the XML fragment to be parsed.\n            Dim xmlFrag As String = &quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;\n            \n            &#39;Create the XmlParserContext.\n            Dim context As XmlParserContext\n            Dim subset As String = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;\n            context = New XmlParserContext(Nothing, Nothing, &quot;book&quot;, Nothing, Nothing, subset, &quot;&quot;, &quot;&quot;, XmlSpace.None)\n            \n            &#39;Create the reader and set it to not expand general entities. \n            reader = New XmlValidatingReader(xmlFrag, XmlNodeType.Element, context)\n            reader.ValidationType = ValidationType.None\n            reader.EntityHandling = EntityHandling.ExpandCharEntities\n            \n            &#39;Read the misc attribute. Because EntityHandling is set to\n            &#39;ExpandCharEntities, the attribute is parsed into multiple text\n            &#39;and entity reference nodes.\n            reader.MoveToContent()\n            reader.MoveToAttribute(&quot;misc&quot;)\n            While reader.ReadAttributeValue()\n                If reader.NodeType = XmlNodeType.EntityReference Then\n                    &#39;To expand the entity, call ResolveEntity.\n                    Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Name)\n                Else\n                    Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Value)\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_MoveToAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToAttribute (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute is found; otherwise, <code>false</code>. If <code>false</code>, the position of the reader does not change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> After calling this method, the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> properties reflect the properties of that attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_MoveToElement\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_MoveToElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToElement()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the element that contains the current attribute node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToElement ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <code>false</code> if the reader is not positioned on an attribute (the position of the reader does not change).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: <code>Element</code>, <code>DocumentType</code>, or <code>XmlDeclaration</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads all the elements on the root node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlValidatingReader reader = null;\n\n    try\n    {\n       //Create the string to parse.\n       string xmlFrag=&quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;;\n\n       //Create the XmlNamespaceManager.\n       NameTable nt = new NameTable();\n       XmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\n\n       //Create the XmlParserContext.\n       XmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n       //Create the XmlValidatingReader .\n       reader = new XmlValidatingReader(xmlFrag, XmlNodeType.Element, context);\n  \n       //Read the attributes on the root element.\n       reader.MoveToContent();\n       if (reader.HasAttributes){\n         for (int i=0; i&lt;reader.AttributeCount; i++){\n            reader.MoveToAttribute(i);\n            Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);\n         }\n         //Move the reader back to the node that owns the attribute.\n         reader.MoveToElement();\n       }\n\n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlValidatingReader^ reader = nullptr;\n   try\n   {\n      \n      //Create the string to parse.\n      String^ xmlFrag = &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;;\n      \n      //Create the XmlNamespaceManager.\n      NameTable^ nt = gcnew NameTable;\n      XmlNamespaceManager^ nsmgr = gcnew XmlNamespaceManager( nt );\n      \n      //Create the XmlParserContext.\n      XmlParserContext^ context = gcnew XmlParserContext( nullptr,nsmgr,nullptr,XmlSpace::None );\n      \n      //Create the XmlValidatingReader .\n      reader = gcnew XmlValidatingReader( xmlFrag,XmlNodeType::Element,context );\n      \n      //Read the attributes on the root element.\n      reader-&gt;MoveToContent();\n      if ( reader-&gt;HasAttributes )\n      {\n         for ( int i = 0; i &lt; reader-&gt;AttributeCount; i++ )\n         {\n            reader-&gt;MoveToAttribute( i );\n            Console::WriteLine( &quot;{0} = {1}&quot;, reader-&gt;Name, reader-&gt;Value );\n\n         }\n         reader-&gt;MoveToElement();\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.AttributeCount Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlValidatingReader = Nothing\n        \n        Try\n            &#39;Create the string to parse.\n            Dim xmlFrag As String = &quot;&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; pubdate=&#39;1987&#39;&gt;&lt;/book&gt; &quot;\n            \n            &#39;Create the XmlNamespaceManager.\n            Dim nt As New NameTable()\n            Dim nsmgr As New XmlNamespaceManager(nt)\n            \n            &#39;Create the XmlParserContext.\n            Dim context As New XmlParserContext(Nothing, nsmgr, Nothing, XmlSpace.None)\n            \n            &#39;Create the XmlValidatingReader .\n            reader = New XmlValidatingReader(xmlFrag, XmlNodeType.Element, context)\n            \n            &#39;Read the attributes on the root element.\n            reader.MoveToContent()\n            If reader.HasAttributes Then\n                Dim i As Integer\n                For i = 0 To reader.AttributeCount - 1\n                    reader.MoveToAttribute(i)\n                    Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value)\n                Next i\n                &#39;Move the reader back to the node that owns the attribute.\n                reader.MoveToElement()\n            End If\n        \n        \n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main &#39; End class\nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_MoveToFirstAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_MoveToFirstAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToFirstAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the first attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToFirstAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if an attribute exists (the reader moves to the first attribute); otherwise, <code>false</code> (the position of the reader does not change).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML fragment.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the validating reader.\n   XmlTextReader^ txtreader = gcnew XmlTextReader( &quot;attrs.xml&quot; );\n   XmlValidatingReader^ reader = gcnew XmlValidatingReader( txtreader );\n   \n   //Read the genre attribute.\n   reader-&gt;MoveToContent();\n   reader-&gt;MoveToFirstAttribute();\n   String^ genre = reader-&gt;Value;\n   Console::WriteLine( &quot;The genre value: {0}&quot;, genre );\n   \n   //Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main()\n\n    &#39;Create the validating reader.\n    Dim txtreader as XmlTextReader = new XmlTextReader(&quot;attrs.xml&quot;)\n    Dim reader as XmlValidatingReader = new XmlValidatingReader(txtreader)\n\n    &#39;Read the genre attribute.\n    reader.MoveToContent()\n    reader.MoveToFirstAttribute()\n    Dim genre As String = reader.Value\n    Console.WriteLine(&quot;The genre value: &quot; &amp; genre)\n\n    &#39;Close the reader.\n    reader.Close()\n\n  End sub\nEnd class \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n\n    //Create the validating reader.\n    XmlTextReader txtreader = new XmlTextReader(&quot;attrs.xml&quot;);\n    XmlValidatingReader reader = new XmlValidatingReader(txtreader);\n\n    //Read the genre attribute.\n    reader.MoveToContent();\n    reader.MoveToFirstAttribute();\n    string genre=reader.Value;\n    Console.WriteLine(&quot;The genre value: &quot; + genre);\n\n    //Close the reader.\n    reader.Close();\n\n  } \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_MoveToNextAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_MoveToNextAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToNextAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>Moves to the next attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool MoveToNextAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there is a next attribute; <code>false</code> if there are no more attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> If the current node is an element node, this method is equivalent to <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_MoveToFirstAttribute_\" data-linktype=\"relative-path\">MoveToFirstAttribute</a>. If <code>MoveToNextAttribute</code> returns <code>true</code>, the reader moves to the next attribute; otherwise, the position of the reader does not change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML fragment.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create the validating reader.\n   XmlTextReader^ txtreader = gcnew XmlTextReader( &quot;attrs.xml&quot; );\n   XmlValidatingReader^ reader = gcnew XmlValidatingReader( txtreader );\n   \n   //Read the genre attribute.\n   reader-&gt;MoveToContent();\n   reader-&gt;MoveToFirstAttribute();\n   String^ genre = reader-&gt;Value;\n   Console::WriteLine( &quot;The genre value: {0}&quot;, genre );\n   \n   //Close the reader.\n   reader-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample \n\n  public shared sub Main()\n\n    &#39;Create the validating reader.\n    Dim txtreader as XmlTextReader = new XmlTextReader(&quot;attrs.xml&quot;)\n    Dim reader as XmlValidatingReader = new XmlValidatingReader(txtreader)\n\n    &#39;Read the genre attribute.\n    reader.MoveToContent()\n    reader.MoveToFirstAttribute()\n    Dim genre As String = reader.Value\n    Console.WriteLine(&quot;The genre value: &quot; &amp; genre)\n\n    &#39;Close the reader.\n    reader.Close()\n\n  End sub\nEnd class \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n\n    //Create the validating reader.\n    XmlTextReader txtreader = new XmlTextReader(&quot;attrs.xml&quot;);\n    XmlValidatingReader reader = new XmlValidatingReader(txtreader);\n\n    //Read the genre attribute.\n    reader.MoveToContent();\n    reader.MoveToFirstAttribute();\n    string genre=reader.Value;\n    Console.WriteLine(&quot;The genre value: &quot; + genre);\n\n    //Close the reader.\n    reader.Close();\n\n  } \n} // End class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_Read\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the next node from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Read ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the next node was read successfully; <code>false</code> if there are no more nodes to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> When a reader is first created and initialized, there is no information available. You must call <code>Read</code> to read the first node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each node.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const String filename = &quot;items.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextReader txtreader = null;\n     XmlValidatingReader reader = null;\n\n     try\n     {  \n        //Load the reader with the data file and ignore all white space nodes.         \n        txtreader = new XmlTextReader(filename);\n        txtreader.WhitespaceHandling = WhitespaceHandling.None;\n\n        //Implement the validating reader over the text reader. \n        reader = new XmlValidatingReader(txtreader);\n        reader.ValidationType = ValidationType.None;\n\n        //Parse the file and display each of the nodes.\n        while (reader.Read())\n        {\n           switch (reader.NodeType)\n           {\n             case XmlNodeType.Element:\n               Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n               break;\n             case XmlNodeType.Text:\n               Console.Write(reader.Value);\n               break;\n             case XmlNodeType.CDATA:\n               Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.ProcessingInstruction:\n               Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.Comment:\n               Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n               break;\n             case XmlNodeType.XmlDeclaration:\n               Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n               break;\n             case XmlNodeType.Document:\n               break;\n             case XmlNodeType.DocumentType:\n               Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n               break;\n             case XmlNodeType.EntityReference:\n               Console.Write(reader.Name);\n               break;\n             case XmlNodeType.EndElement:\n               Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n               break;\n           }       \n        }           \n     }\n\n     finally\n     {\n        if (reader!=null)\n          reader.Close();\n     }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ txtreader = nullptr;\n   XmlValidatingReader^ reader = nullptr;\n   String^ filename = &quot;items.xml&quot;;\n   try\n   {\n      \n      //Load the reader with the data file and ignore all white space nodes.         \n      txtreader = gcnew XmlTextReader( filename );\n      txtreader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      //Implement the validating reader over the text reader. \n      reader = gcnew XmlValidatingReader( txtreader );\n      reader-&gt;ValidationType = ValidationType::None;\n      \n      //Parse the file and display each of the nodes.\n      while ( reader-&gt;Read() )\n      {\n         switch ( reader-&gt;NodeType )\n         {\n            case XmlNodeType::Element:\n               Console::Write( &quot;&lt;{0}&gt;&quot;, reader-&gt;Name );\n               break;\n\n            case XmlNodeType::Text:\n               Console::Write( reader-&gt;Value );\n               break;\n\n            case XmlNodeType::CDATA:\n               Console::Write( &quot;&lt;![CDATA[{0}]]&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::ProcessingInstruction:\n               Console::Write( &quot;&lt;?{0} {1}?&gt;&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::Comment:\n               Console::Write( &quot;&lt;!--{0}--&gt;&quot;, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::XmlDeclaration:\n               Console::Write( &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot; );\n               break;\n\n            case XmlNodeType::Document:\n               break;\n\n            case XmlNodeType::DocumentType:\n               Console::Write( &quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader-&gt;Name, reader-&gt;Value );\n               break;\n\n            case XmlNodeType::EntityReference:\n               Console::Write( reader-&gt;Name );\n               break;\n\n            case XmlNodeType::EndElement:\n               Console::Write( &quot;&lt;/{0}&gt;&quot;, reader-&gt;Name );\n               break;\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.Name Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   Private Const filename As String = &quot;items.xml&quot;\n   \n   Public Shared Sub Main()\n      Dim txtreader As XmlTextReader = Nothing\n      Dim reader As XmlValidatingReader = Nothing\n      \n      Try\n         &#39;Load the reader with the data file and ignore all white space nodes.         \n         txtreader = New XmlTextReader(filename)\n         txtreader.WhitespaceHandling = WhitespaceHandling.None\n         \n         &#39;Implement the validating reader over the text reader. \n         reader = New XmlValidatingReader(txtreader)\n         reader.ValidationType = ValidationType.None\n         \n         &#39;Parse the file and display each of the nodes.\n         While reader.Read()\n            Select Case reader.NodeType\n               Case XmlNodeType.Element\n                  Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n               Case XmlNodeType.Text\n                  Console.Write(reader.Value)\n               Case XmlNodeType.CDATA\n                  Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n               Case XmlNodeType.ProcessingInstruction\n                  Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n               Case XmlNodeType.Comment\n                  Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n               Case XmlNodeType.XmlDeclaration\n                  Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n               Case XmlNodeType.Document\n               Case XmlNodeType.DocumentType\n                  Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n               Case XmlNodeType.EntityReference\n                  Console.Write(reader.Name)\n               Case XmlNodeType.EndElement\n                  Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n            End Select\n         End While\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>items.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.Name Example#2\">\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ReadAttributeValue\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ReadAttributeValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAttributeValue()</div>        \r\n          </div>\r\n    \r\n            <p>Parses the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool ReadAttributeValue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there are nodes to return.  </p>\n<p> <code>false</code> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  </p>\n<p> An empty attribute, such as, <code>misc=&quot;&quot;</code>, returns <code>true</code> with a single node with a value of String.Empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> Use this method after calling <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a> to read through the text or entity reference nodes that make up the attribute value. The <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Depth_\" data-linktype=\"relative-path\">Depth</a> of the attribute value nodes is one plus the depth of the attribute node. The <code>Depth</code> increments and decrements by one when you step into and out of general entity references.  </p>\n<p> For example, suppose you have the following XML: <code>&lt;test name=&quot;a &amp;b; c&quot;/&gt;</code>  </p>\n<p> where the entity <code>b</code> is defined in the document type definition (DTD) as follows: <code>&lt;!ENTITY b &quot;123&quot;&gt;</code>  </p>\n<p> If <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_EntityHandling_\" data-linktype=\"relative-path\">EntityHandling</a> is set to <code>ExpandCharEntities</code>, the following C# code returns the attribute value as two text nodes and one entity reference node:  </p>\n<pre><code>reader.MoveToAttribute(&quot;name&quot;);  \n  while (reader.ReadAttributeValue())  \n  {  \n  if (reader.NodeType == XmlNodeType.Text)  \n  {  \n  // at this point reader.Value == &quot;a &quot; or &quot; c&quot;  \n  }  \n  else if (reader.NodeType == XmlNodeType.EntityReference)  \n  {  \n  // at this point reader.Name == &quot;b&quot;  \n  reader.ResolveEntity();  \n  while (reader.ReadAttributeValue() &amp;&amp;  \n  reader.NodeType != XmlNodeType.EndEntity)  \n  {  \n  // reader.Value == &quot;123&quot;  \n  }  \n  }  \n    }\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an attribute with text and entity reference nodes.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.MoveToAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlValidatingReader reader = null;\n\n    try\n    {\n       //Create the XML fragment to be parsed.\n       string xmlFrag =&quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;;\n\n       //Create the XmlParserContext.\n       XmlParserContext context;\n       string subset = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;;\n       context = new XmlParserContext(null, null, &quot;book&quot;, null, null, subset, &quot;&quot;, &quot;&quot;, XmlSpace.None);\n        \n       //Create the reader and set it to not expand general entities. \n       reader = new XmlValidatingReader(xmlFrag, XmlNodeType.Element, context);\n       reader.ValidationType = ValidationType.None;\n       reader.EntityHandling = EntityHandling.ExpandCharEntities;\n  \n       //Read the misc attribute. Because EntityHandling is set to\n       //ExpandCharEntities, the attribute is parsed into multiple text\n       //and entity reference nodes.\n       reader.MoveToContent();\n       reader.MoveToAttribute(&quot;misc&quot;);\n       while (reader.ReadAttributeValue()){\n          if (reader.NodeType==XmlNodeType.EntityReference)\n            //To expand the entity, call ResolveEntity.\n            Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Name);\n          else\n             Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Value);\n        } \n     } \n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.MoveToAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlValidatingReader^ reader = nullptr;\n   try\n   {\n      \n      //Create the XML fragment to be parsed.\n      String^ xmlFrag = &quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;;\n      \n      //Create the XmlParserContext.\n      XmlParserContext^ context;\n      String^ subset = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;;\n      context = gcnew XmlParserContext( nullptr,nullptr,&quot;book&quot;,nullptr,nullptr,subset,&quot;&quot;,&quot;&quot;,XmlSpace::None );\n      \n      //Create the reader and set it to not expand general entities. \n      reader = gcnew XmlValidatingReader( xmlFrag,XmlNodeType::Element,context );\n      reader-&gt;ValidationType = ValidationType::None;\n      reader-&gt;EntityHandling = EntityHandling::ExpandCharEntities;\n      \n      //Read the misc attribute. Because EntityHandling is set to\n      //ExpandCharEntities, the attribute is parsed into multiple text\n      //and entity reference nodes.\n      reader-&gt;MoveToContent();\n      reader-&gt;MoveToAttribute( &quot;misc&quot; );\n      while ( reader-&gt;ReadAttributeValue() )\n      {\n         if ( reader-&gt;NodeType == XmlNodeType::EntityReference )\n                  \n         //To expand the entity, call ResolveEntity.\n         Console::WriteLine( &quot;{0} {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n         else\n                  Console::WriteLine( &quot;{0} {1}&quot;, reader-&gt;NodeType, reader-&gt;Value );\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.MoveToAttribute Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        Dim reader As XmlValidatingReader = Nothing\n        \n        Try\n            &#39;Create the XML fragment to be parsed.\n            Dim xmlFrag As String = &quot;&lt;book genre=&#39;novel&#39; misc=&#39;sale-item &amp;h; 1987&#39;&gt;&lt;/book&gt;&quot;\n            \n            &#39;Create the XmlParserContext.\n            Dim context As XmlParserContext\n            Dim subset As String = &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;\n            context = New XmlParserContext(Nothing, Nothing, &quot;book&quot;, Nothing, Nothing, subset, &quot;&quot;, &quot;&quot;, XmlSpace.None)\n            \n            &#39;Create the reader and set it to not expand general entities. \n            reader = New XmlValidatingReader(xmlFrag, XmlNodeType.Element, context)\n            reader.ValidationType = ValidationType.None\n            reader.EntityHandling = EntityHandling.ExpandCharEntities\n            \n            &#39;Read the misc attribute. Because EntityHandling is set to\n            &#39;ExpandCharEntities, the attribute is parsed into multiple text\n            &#39;and entity reference nodes.\n            reader.MoveToContent()\n            reader.MoveToAttribute(&quot;misc&quot;)\n            While reader.ReadAttributeValue()\n                If reader.NodeType = XmlNodeType.EntityReference Then\n                    &#39;To expand the entity, call ResolveEntity.\n                    Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Name)\n                Else\n                    Console.WriteLine(&quot;{0} {1}&quot;, reader.NodeType, reader.Value)\n                End If\n            End While\n        Finally\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ReadContentAsBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ReadContentAsBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content and returns the Base64 decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadContentAsBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>ReadContentAsBase64 is not supported on the current node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page..  </p>\n</div>\n<p> This method streams the content, decodes the Base64 content, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, &quot;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&quot;. You can obtain RFCs from the Request for Comments Web site at <a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You should not access any of the reader properties between calls to the ReadContentAsBase64 method until the method returns the value 0.  </p>\n</div>\n<p> This method has the following behavior:  </p>\n<ul>\n<li><p>ReadContentAsBase64 returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  </p>\n</li>\n<li><p>If you ask for fewer, or the exact number, of bytes than are left in the stream, the reader remains in its current position.  </p>\n</li>\n<li><p>ReadContentAsBase64 is not supported on the following XML node types:  Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, and DocumentFragment.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ReadContentAsBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ReadContentAsBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content and returns the BinHex decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadContentAsBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>ReadContentAsBinHex is not supported on the current node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page..  </p>\n</div>\n<p> This method streams the content, decodes the BinHex content, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You should not access any of the reader properties between calls to the ReadContentAsBinHex method until the method returns the value 0.  </p>\n</div>\n<p> This method has the following behavior:  </p>\n<ul>\n<li><p>ReadContentAsBinHex returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  </p>\n</li>\n<li><p>If you ask for fewer, or the exact number, of bytes than are left in the stream, the reader remains in its current position.  </p>\n</li>\n<li><p>ReadContentAsBinHex is not supported on the following XML node types:  Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, and DocumentFragment.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ReadElementContentAsBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ReadElementContentAsBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element and decodes the Base64 content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current node is not an element node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The element contains mixed-content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. For more information, see RFC 1521, &quot;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&quot;. You can obtain RFCs from the Request for Comments Web site at <a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<p> This method can read only simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments, and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  </p>\n<p> This method is very similar to the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a> method except that it can be called only on element node types.  </p>\n<p> If the <code>count</code> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> reads all the remaining bytes in the document and returns the number of bytes read. The next <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> method call returns a zero and moves the reader to the node following the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.  </p>\n<p> If you call <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ReadElementContentAsBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ReadElementContentAsBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element and decodes the BinHex content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current node is not an element node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The element contains mixed-content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> This method reads the element content, decodes it using BinHex encoding, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer.  </p>\n<p> This method can read only simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments, and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  </p>\n<p> This method is very similar to the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a> method except that it can be called only on element node types.  </p>\n<p> If the <code>count</code> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> reads all the remaining bytes in the document and returns the number of bytes read. The next <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> method call returns a zero and moves the reader to the node following the <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.  </p>\n<p> If you call <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ReadString\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ReadString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadString()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the contents of an element or text node as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ReadString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  </p>\n <div class=\"alert NOTE\"><br> The text node can be either an element or an attribute text node.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> If positioned on an element, <code>ReadString</code> concatenates all text, significant white space, white space, and CDATA section node types together and returns the concatenated data as the element content. The reader stops when any markup is encountered, including comments and processing instructions. This could occur in a mixed content model, or when an element end tag is read.  </p>\n<p> If positioned on a text node, <code>ReadString</code> performs the same concatenation from the text node to the element end tag. If the reader is positioned on an attribute text node, <code>ReadString</code> has the same functionality as if the reader were position on the element start tag. It returns all the concatenated element text nodes.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_EntityHandling_\" data-linktype=\"relative-path\">EntityHandling</a> property determines how <code>ReadString</code> works as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ExpandEntities</td>\n<td>Returns expanded character and general entities. This is the default.</td>\n</tr>\n<tr>\n<td>ExpandCharEntities</td>\n<td>Returns the text content up to but not including a general entity reference. This means a general entity causes ReadString to stop. You must call <code>Read</code> to step over the entity reference.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each of the elements.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.IsEmptyElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\n  public static void Main()\n  {\n    XmlTextReader txtreader = null;\n    XmlValidatingReader reader = null;\n\n    try\n    {\n       //Implement the readers.\n       txtreader = new XmlTextReader(&quot;elems.xml&quot;);\n       reader = new XmlValidatingReader(txtreader);\n  \n       //Parse the XML and display the text content of each of the elements.\n       while (reader.Read()){\n         if (reader.IsStartElement()){\n           if (reader.IsEmptyElement)\n              Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n           else{\n               Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n               reader.Read(); //Read the start tag.\n               if (reader.IsStartElement())  //Handle nested elements.\n                   Console.Write(&quot;\\r<br>&lt;{0}&gt;&quot;, reader.Name);\n               Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n           }\n         }\n       } \n       \n     } \n\n     finally \n     {\n        if (reader != null)\n          reader.Close();\n      }\n  }\n  \n} // End class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.IsEmptyElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextReader^ txtreader = nullptr;\n   XmlValidatingReader^ reader = nullptr;\n   try\n   {\n      \n      //Implement the readers.\n      txtreader = gcnew XmlTextReader( &quot;elems.xml&quot; );\n      reader = gcnew XmlValidatingReader( txtreader );\n      \n      //Parse the XML and display the text content of each of the elements.\n      while ( reader-&gt;Read() )\n      {\n         if ( reader-&gt;IsStartElement() )\n         {\n            if ( reader-&gt;IsEmptyElement )\n                        Console::WriteLine( &quot;&lt;{0}/&gt;&quot;, reader-&gt;Name );\n            else\n            {\n               Console::Write( &quot;&lt;{0}&gt; &quot;, reader-&gt;Name );\n               reader-&gt;Read(); //Read the start tag.\n               if ( reader-&gt;IsStartElement() )\n                              \n               //Handle nested elements.\n               Console::Write( &quot;\\r<br>&lt;{0}&gt;&quot;, reader-&gt;Name );\n               Console::WriteLine( reader-&gt;ReadString() ); //Read the text content of the element.\n            }\n         }\n      }\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.IsEmptyElement Example#1\">Imports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   \n   Public Shared Sub Main()\n      Dim txtreader As XmlTextReader = Nothing\n      Dim reader As XmlValidatingReader = Nothing\n      \n      Try\n         &#39;Implement the readers.\n         txtreader = New XmlTextReader(&quot;elems.xml&quot;)\n         reader = New XmlValidatingReader(txtreader)\n         \n         &#39;Parse the XML and display the text content of each of the elements.\n         While reader.Read()\n            If reader.IsStartElement() Then\n               If reader.IsEmptyElement Then\n                  Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n               Else\n                  Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name)\n                  reader.Read() &#39;Read the start tag.\n                  If (reader.IsStartElement())  &#39;Handle nested elements.\n                    Console.WriteLine()\n                    Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n                  End If\n                  Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n               End If\n            End If\n         End While      \n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><p> The example uses the file, <code>elems.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.IsEmptyElement Example#2\">&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n  &lt;misc/&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ReadTypedValue\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ReadTypedValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadTypedValue()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the common language runtime type for the specified XML Schema definition language (XSD) type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object ReadTypedValue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The common language runtime type for the specified XML Schema type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> For example, if the schema type is defined as <code>xsd:int</code>, the runtime type <code>int32</code> is returned for the object. This can be tested using the <a class=\"xref\" href=\"system.object#System_Object_GetType_\" data-linktype=\"relative-path\">GetType</a> method and cast accordingly. The ReadTypedValue method always returns a type that is derived from the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> class. It never returns the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> type.  </p>\n<p> If the reader is positioned on an attribute, this method returns the runtime typed object, but does not change the position of the reader. If the reader is positioned on an element, <code>ReadTypedValue</code> reads any CDATA, text, white space, significant white space, and comment nodes, returns the runtime typed object and positions the reader on the end tag. Any types that do not have a direct mapping, for example <code>NMTOKENS</code>, are returned as strings.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ValidationType_\" data-linktype=\"relative-path\">ValidationType</a> has been set to ValidationType.None, data type information is not provided from either schemas or document type definitions (DTDs).  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> After calling <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Close_\" data-linktype=\"relative-path\">Close</a>, <code>ReadTypedValue</code> will return <code>null</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the type information for each of the elements in the XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlValidatingReader.SchemaType#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Schema;\n\npublic class Sample{\n\n  public static void Main(){\n  \n  XmlTextReader tr = new XmlTextReader(&quot;booksSchema.xml&quot;);\n  XmlValidatingReader vr = new XmlValidatingReader(tr);\n \n  vr.Schemas.Add(null, &quot;books.xsd&quot;);\n  vr.ValidationType = ValidationType.Schema;\n  vr.ValidationEventHandler += new ValidationEventHandler (ValidationCallBack);\n \n  while(vr.Read()){\n    if(vr.NodeType == XmlNodeType.Element){\n      if(vr.SchemaType is XmlSchemaComplexType){\n        XmlSchemaComplexType sct = (XmlSchemaComplexType)vr.SchemaType;\n        Console.WriteLine(&quot;{0}({1})&quot;, vr.Name, sct.Name);\n      }\n      else{\n        object value = vr.ReadTypedValue();\n        Console.WriteLine(&quot;{0}({1}):{2}&quot;, vr.Name, value.GetType().Name, value);\n      }\n    }\n  }\n }\n\n  private static void ValidationCallBack (object sender, ValidationEventArgs args){\n    Console.WriteLine(&quot;***Validation error&quot;);\n    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Severity:{0}&quot;, args.Severity);\n    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Message  :{0}&quot;, args.Message);\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlValidatingReader.SchemaType#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Schema;\n\npublic ref class Sample\n{\nprivate:\n   static void ValidationCallBack( Object^ sender, ValidationEventArgs^ args )\n   {\n      Console::WriteLine( &quot;***Validation error&quot; );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Severity: {0}&quot;, args-&gt;Severity );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Message  : {0}&quot;, args-&gt;Message );\n   }\n\npublic:\n   static void main()\n   {\n      XmlTextReader^ tr = gcnew XmlTextReader( &quot;booksSchema.xml&quot; );\n      XmlValidatingReader^ vr = gcnew XmlValidatingReader( tr );\n      vr-&gt;Schemas-&gt;Add( nullptr, &quot;books.xsd&quot; );\n      vr-&gt;ValidationType = ValidationType::Schema;\n      vr-&gt;ValidationEventHandler += gcnew ValidationEventHandler( Sample::ValidationCallBack );\n      while ( vr-&gt;Read() )\n      {\n         if ( vr-&gt;NodeType == XmlNodeType::Element )\n         {\n            if ( dynamic_cast&lt;XmlSchemaComplexType^&gt;(vr-&gt;SchemaType) != nullptr )\n            {\n               XmlSchemaComplexType^ sct = dynamic_cast&lt;XmlSchemaComplexType^&gt;(vr-&gt;SchemaType);\n               Console::WriteLine( &quot; {0}( {1})&quot;, vr-&gt;Name, sct-&gt;Name );\n            }\n            else\n            {\n               Object^ value = vr-&gt;ReadTypedValue();\n               Console::WriteLine( &quot; {0}( {1}): {2}&quot;, vr-&gt;Name, value-&gt;GetType()-&gt;Name, value );\n            }\n         }\n      }\n   }\n};\n\nint main()\n{\n   Sample::main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlValidatingReader.SchemaType#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Schema\n\npublic class Sample\n\n  public shared sub Main()\n  \n  Dim tr as XmlTextReader = new XmlTextReader(&quot;booksSchema.xml&quot;)\n  Dim vr as XmlValidatingReader = new XmlValidatingReader(tr)\n \n  vr.Schemas.Add(nothing, &quot;books.xsd&quot;)\n  vr.ValidationType = ValidationType.Schema\n  AddHandler vr.ValidationEventHandler, AddressOf ValidationCallBack\n\n  while(vr.Read())\n\n    if(vr.NodeType = XmlNodeType.Element)\n    \n      if (vr.SchemaType.ToString() = &quot;System.Xml.Schema.XmlSchemaComplexType&quot;)\n        Dim sct as XmlSchemaComplexType = CType(vr.SchemaType,XmlSchemaComplexType)\n        Console.WriteLine(&quot;{0}({1})&quot;, vr.Name, sct.Name)\n      else      \n        Dim value as object = vr.ReadTypedValue()\n        Console.WriteLine(&quot;{0}({1}):{2}&quot;, vr.Name, value.GetType().Name, value)    \n      end if\n    end if\n  end while\n  end sub\n\n  private shared sub ValidationCallBack (sender as object, args as ValidationEventArgs)\n\n   Console.WriteLine(&quot;***Validation error&quot;)\n   Console.WriteLine(&quot;Severity:{0}&quot;, args.Severity)\n   Console.WriteLine(&quot;Message  :{0}&quot;, args.Message)\n  end sub\nend class\n</code></pre><p> The example uses the following input files.  </p>\n<p> <code>booksSchema.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.SchemaType#2\">&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;bookstore xmlns=&quot;urn:bookstore-schema&quot;&gt;\n  &lt;book genre=&quot;autobiography&quot;&gt;\n    &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n      &lt;last-name&gt;Franklin&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;8.99&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot;&gt;\n    &lt;title&gt;The Confidence Man&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Herman&lt;/first-name&gt;\n      &lt;last-name&gt;Melville&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> <code>books.xsd</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlValidatingReader.SchemaType#3\">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;\n    xmlns=&quot;urn:bookstore-schema&quot;\n    elementFormDefault=&quot;qualified&quot;\n    targetNamespace=&quot;urn:bookstore-schema&quot;&gt;\n\n &lt;xsd:element name=&quot;bookstore&quot; type=&quot;bookstoreType&quot;/&gt;\n\n &lt;xsd:complexType name=&quot;bookstoreType&quot;&gt;\n  &lt;xsd:sequence maxOccurs=&quot;unbounded&quot;&gt;\n   &lt;xsd:element name=&quot;book&quot;  type=&quot;bookType&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;bookType&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;title&quot; type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;author&quot; type=&quot;authorName&quot;/&gt;\n   &lt;xsd:element name=&quot;price&quot;  type=&quot;xsd:decimal&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n  &lt;xsd:attribute name=&quot;genre&quot; type=&quot;xsd:string&quot;/&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;authorName&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;first-name&quot;  type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;last-name&quot; type=&quot;xsd:string&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n&lt;/xsd:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ResolveEntity\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_ResolveEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveEntity()</div>        \r\n          </div>\r\n    \r\n            <p>Resolves the entity reference for <code>EntityReference</code> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void ResolveEntity ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The reader is not positioned on an <code>EntityReference</code> node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> If the reader is positioned on an <code>EntityReference</code> node (<code>XmlNodeType.EntityReference</code>), if <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a> is called after calling this method, the entity replacement text is parsed. After the entity replacement text is finished, an <code>EndEntity</code> node is returned to close the entity reference scope.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> After calling this method, if the entity is part of an attribute value, you must call <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ReadAttributeValue_\" data-linktype=\"relative-path\">ReadAttributeValue</a> to step into the entity.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses <code>ResolveEntity</code> to expand a general entity.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.ResolveEntity Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlValidatingReader^ reader = nullptr;\n   XmlTextReader^ txtreader = nullptr;\n   try\n   {\n      \n      //Create and load the XmlTextReader with the XML file. \n      txtreader = gcnew XmlTextReader( &quot;book1.xml&quot; );\n      txtreader-&gt;WhitespaceHandling = WhitespaceHandling::None;\n      \n      //Create the XmlValidatingReader over the XmlTextReader.\n      //Set the reader to not expand general entities.\n      reader = gcnew XmlValidatingReader( txtreader );\n      reader-&gt;ValidationType = ValidationType::None;\n      reader-&gt;EntityHandling = EntityHandling::ExpandCharEntities;\n      reader-&gt;MoveToContent(); //Move to the root element.\n      reader-&gt;Read(); //Move to title start tag.\n      reader-&gt;Skip(); //Skip the title element.\n      \n      //Read the misc start tag.  The reader is now positioned on\n      //the entity reference node.\n      reader-&gt;ReadStartElement();\n      \n      //Because EntityHandling is set to ExpandCharEntities, you must call \n      //ResolveEntity to expand the entity.  The entity replacement text is \n      //then parsed and returned as a child node.         \n      Console::WriteLine( &quot;Expand the entity...&quot; );\n      reader-&gt;ResolveEntity();\n      Console::WriteLine( &quot;The entity replacement text is returned as a text node.&quot; );\n      reader-&gt;Read();\n      Console::WriteLine( &quot;NodeType: {0} Value: {1}&quot;, reader-&gt;NodeType, reader-&gt;Value );\n      Console::WriteLine( &quot;An EndEntity node closes the entity reference scope.&quot; );\n      reader-&gt;Read();\n      Console::WriteLine( &quot;NodeType: {0} Name: {1}&quot;, reader-&gt;NodeType, reader-&gt;Name );\n   }\n   finally\n   {\n      if ( reader != nullptr )\n            reader-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.ResolveEntity Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n     XmlValidatingReader reader = null;\n     XmlTextReader txtreader = null;\n\n     try\n     {\n       //Create and load the XmlTextReader with the XML file. \n       txtreader = new XmlTextReader(&quot;book1.xml&quot;);\n       txtreader.WhitespaceHandling = WhitespaceHandling.None;\n\n       //Create the XmlValidatingReader over the XmlTextReader.\n       //Set the reader to not expand general entities.\n       reader = new XmlValidatingReader(txtreader);\n       reader.ValidationType = ValidationType.None;\n       reader.EntityHandling = EntityHandling.ExpandCharEntities;\n\n       reader.MoveToContent();  //Move to the root element.\n       reader.Read();  //Move to title start tag.\n       reader.Skip();  //Skip the title element.\n      \n       //Read the misc start tag.  The reader is now positioned on\n       //the entity reference node.\n       reader.ReadStartElement(); \n\n       //Because EntityHandling is set to ExpandCharEntities, you must call \n       //ResolveEntity to expand the entity.  The entity replacement text is \n       //then parsed and returned as a child node.         \n       Console.WriteLine(&quot;Expand the entity...&quot;);\n       reader.ResolveEntity();  \n\n       Console.WriteLine(&quot;The entity replacement text is returned as a text node.&quot;);\n       reader.Read();  \n       Console.WriteLine(&quot;NodeType: {0} Value: {1}&quot;, reader.NodeType ,reader.Value);\n\n       Console.WriteLine(&quot;An EndEntity node closes the entity reference scope.&quot;);\n       reader.Read();\n       Console.WriteLine(&quot;NodeType: {0} Name: {1}&quot;, reader.NodeType,reader.Name);\n     \n    }\n    finally\n    {\n       if (reader != null)\n         reader.Close();\n    }\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.ResolveEntity Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n   \n   Public Shared Sub Main()\n      Dim reader As XmlValidatingReader = Nothing\n      Dim txtreader As XmlTextReader = Nothing\n      \n      Try\n         &#39;Create and load the XmlTextReader with the XML file. \n         txtreader = New XmlTextReader(&quot;book1.xml&quot;)\n         txtreader.WhitespaceHandling = WhitespaceHandling.None\n         \n         &#39;Create the XmlValidatingReader over the XmlTextReader.\n         &#39;Set the reader to not expand general entities.\n         reader = New XmlValidatingReader(txtreader)\n         reader.ValidationType = ValidationType.None\n         reader.EntityHandling = EntityHandling.ExpandCharEntities\n         \n         reader.MoveToContent() &#39;Move to the root element.\n         reader.Read() &#39;Move to title start tag.\n         reader.Skip() &#39;Skip the title element.\n         &#39;Read the misc start tag.  The reader is now positioned on\n         &#39;the entity reference node.\n         reader.ReadStartElement()\n         \n         &#39;Because EntityHandling is set to ExpandCharEntities, you must call \n         &#39;ResolveEntity to expand the entity.  The entity replacement text is \n         &#39;then parsed and returned as a child node.  \n         Console.WriteLine(&quot;Expand the entity...&quot;)\n         reader.ResolveEntity()\n         \n         Console.WriteLine(&quot;The entity replacement text is returned as a text node.&quot;)\n         reader.Read()\n         Console.WriteLine(&quot;NodeType: {0} Value: {1}&quot;, reader.NodeType, reader.Value)\n         \n         Console.WriteLine(&quot;An EndEntity node closes the entity reference scope.&quot;)\n         reader.Read()\n         Console.WriteLine(&quot;NodeType: {0} Name: {1}&quot;, reader.NodeType, reader.Name)\n      \n      Finally\n         If Not (reader Is Nothing) Then\n            reader.Close()\n         End If\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><p> The example uses the file, <code>book1.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.ResolveEntity Example#2\">\n&lt;?xml version=&#39;1.0&#39; ?&gt;\n&lt;!DOCTYPE book [&lt;!ENTITY h &#39;hardcover&#39;&gt;]&gt;\n&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;misc&gt;&amp;h;&lt;/misc&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_ValidationEventHandler\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValidationEventHandler</div>        \r\n          </div>\r\n    \r\n            <p>Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> class is obsolete in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. You can create a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class and the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.  </p>\n</div>\n<p> These events occur during <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_Read_\" data-linktype=\"relative-path\">Read</a> and only if a <a class=\"xref\" href=\"system.xml.xmlvalidatingreader#System_Xml_XmlValidatingReader_ValidationType_\" data-linktype=\"relative-path\">ValidationType</a> of DTD, XDR, Schema, or Auto is specified.  </p>\n<p> If no event handler is provided, an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> is thrown on the first validation error (Severity is equal to XmlSeverityType.Error).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If an element reports a validation error, the rest of the content model for that element is not validated, however, its children are validated. The reader only reports the first error for a given element.  </p>\n</div>\n<p> The callback handler can use the <a class=\"xref\" href=\"system.xml.schema.validationeventargs#System_Xml_Schema_ValidationEventArgs_Severity_\" data-linktype=\"relative-path\">Severity</a> property to guarantee that an XML instance document is validated against a schema. The <code>Severity</code> property allows you to distinguish between validation errors (Severity is equal to XmlSeverityType.Error) that indicate a fatal error, and validation warnings (Severity is equal to XmlSeverityType.Warning) that indicate that no schema information is available.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example validates a file against an XML Schema.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlValidatingReader.ValidationEventHandler Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Schema;\npublic ref class Sample\n{\nprivate:\n   XmlTextReader^ txtreader;\n   XmlValidatingReader^ reader;\n   Boolean m_success;\n\npublic:\n   Sample()\n   {\n      txtreader = nullptr;\n      reader = nullptr;\n      m_success = true;\n      \n      //Validate file against the XSD schema. \n      //The validation should fail.\n      Validate( &quot;notValidXSD.xml&quot; );\n   }\n\n\nprivate:\n   void Validate( String^ filename )\n   {\n      try\n      {\n         Console::WriteLine( &quot;Validating XML file {0}&quot;, filename );\n         txtreader = gcnew XmlTextReader( filename );\n         reader = gcnew XmlValidatingReader( txtreader );\n         \n         // Set the validation event handler\n         reader-&gt;ValidationEventHandler += gcnew ValidationEventHandler( this, &amp;Sample::ValidationEventHandle );\n         \n         // Read XML data\n         while ( reader-&gt;Read() )\n         {}\n         Console::WriteLine( &quot;Validation finished. Validation {0}&quot;, (m_success == true ? (String^)&quot;successful&quot; : &quot;failed&quot;) );\n      }\n      finally\n      {\n         \n         //Close the reader.\n         if ( reader != nullptr )\n                  reader-&gt;Close();\n      }\n\n   }\n\n\n   //Display the validation error.\n   void ValidationEventHandle( Object^ /*sender*/, ValidationEventArgs^ args )\n   {\n      m_success = false;\n      Console::WriteLine( &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Validation error: {0}&quot;, args-&gt;Message );\n   }\n\n};\n\nint main()\n{\n   gcnew Sample;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlValidatingReader.ValidationEventHandler Example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Schema\nImports Microsoft.VisualBasic\n\nPublic Class Sample\n    \n    Private txtreader As XmlTextReader = Nothing\n    Private reader As XmlValidatingReader = Nothing\n    Private m_success As Boolean = True\n    \n    Public Sub New()\n        &#39;Validate file against the XSD schema. \n        &#39;The validation should fail.\n        Validate(&quot;notValidXSD.xml&quot;)\n    End Sub &#39;New\n    \n    Public Shared Sub Main()\n        Dim validation As New Sample()\n    End Sub &#39;Main\n    \n    Private Sub Validate(filename As String)\n        Try\n            Console.WriteLine(&quot;Validating XML file &quot; &amp; filename.ToString())\n            txtreader = New XmlTextReader(filename)\n            reader = New XmlValidatingReader(txtreader)\n            \n            &#39; Set the validation event handler\n            AddHandler reader.ValidationEventHandler, AddressOf Me.ValidationEventHandle\n            \n            &#39; Read XML data\n            While reader.Read()\n            End While\n            Console.WriteLine(&quot;Validation finished. Validation {0}&quot;, IIf(m_success, &quot;successful&quot;, &quot;failed&quot;))\n        \n        Finally\n            &#39;Close the reader.\n            If Not (reader Is Nothing) Then\n                reader.Close()\n            End If\n        End Try\n    End Sub &#39;Validate\n     \n    &#39;Display the validation error.\n    Private Sub ValidationEventHandle(sender As Object, args As ValidationEventArgs)\n        m_success = False\n        Console.WriteLine(ControlChars.CrLf &amp; ControlChars.Tab &amp; &quot;Validation error: &quot; &amp; args.Message)\n    End Sub &#39;ValidationEventHandle\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlValidatingReader.ValidationEventHandler Example#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Schema;\n\npublic class Sample\n{\n\n  private XmlTextReader txtreader = null;\n  private XmlValidatingReader reader = null;\n  private Boolean m_success = true;\n\n  public Sample ()\n  {\n        //Validate file against the XSD schema. \n        //The validation should fail.\n        Validate(&quot;notValidXSD.xml&quot;); \n  }    \n\n  public static void Main ()\n  {\n      Sample validation = new Sample();\n  }\n\n  private void Validate(String filename)\n  {    \n     try\n     {\n        Console.WriteLine(&quot;Validating XML file &quot; + filename.ToString());\n        txtreader = new XmlTextReader (filename);\n        reader = new XmlValidatingReader (txtreader);\n\n        // Set the validation event handler\n        reader.ValidationEventHandler += new ValidationEventHandler (this.ValidationEventHandle);\n\n        // Read XML data\n        while (reader.Read()){}\n        Console.WriteLine (&quot;Validation finished. Validation {0}&quot;, (m_success==true ? &quot;successful&quot; : &quot;failed&quot;));\n     }\n\n     finally\n     {\n        //Close the reader.\n        if (reader != null)\n          reader.Close();\n     } \n  }\n\n  //Display the validation error.\n  private void ValidationEventHandle (object sender, ValidationEventArgs args)\n  {\n     m_success = false;\n     Console.WriteLine(&quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Validation error: &quot; + args.Message );\n  }\n}\n</code></pre><p> The sample uses the following two input files:  </p>\n<p> <code>notValidXSD.xml</code> (The <code>xsi:schemaLocation</code> attribute identifies the XML Schema for the reader.)  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.ValidationEventHandler Example#2\">\n&lt;?xml version=&#39;1.0&#39;?&gt;\n&lt;bookstore xmlns=&quot;urn:bookstore-schema&quot;\n     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n     xsi:schemaLocation=&quot;urn:bookstore-schema books.xsd&quot;&gt;\n  &lt;book&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n      &lt;last-name&gt;Franklin&lt;/last-name&gt;\n    &lt;/author&gt;\n  &lt;/book&gt;\n  &lt;book genre=&quot;novel&quot;&gt;\n    &lt;title&gt;The Confidence Man&lt;/title&gt;\n    &lt;author&gt;\n      &lt;first-name&gt;Herman&lt;/first-name&gt;\n      &lt;last-name&gt;Melville&lt;/last-name&gt;\n    &lt;/author&gt;\n    &lt;price&gt;11.99&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> <code>books.xsd</code>  </p>\n<pre><code class=\"lang-xml\" name=\"Classic WebData XmlValidatingReader.ValidationEventHandler Example#3\">\n&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;\n    xmlns=&quot;urn:bookstore-schema&quot;\n    elementFormDefault=&quot;qualified&quot;\n    targetNamespace=&quot;urn:bookstore-schema&quot;&gt;\n\n &lt;xsd:element name=&quot;bookstore&quot; type=&quot;bookstoreType&quot;/&gt;\n\n &lt;xsd:complexType name=&quot;bookstoreType&quot;&gt;\n  &lt;xsd:sequence maxOccurs=&quot;unbounded&quot;&gt;\n   &lt;xsd:element name=&quot;book&quot;  type=&quot;bookType&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;bookType&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;title&quot; type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;author&quot; type=&quot;authorName&quot;/&gt;\n   &lt;xsd:element name=&quot;price&quot;  type=&quot;xsd:decimal&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n  &lt;xsd:attribute name=&quot;genre&quot; type=&quot;xsd:string&quot;/&gt;\n &lt;/xsd:complexType&gt;\n\n &lt;xsd:complexType name=&quot;authorName&quot;&gt;\n  &lt;xsd:sequence&gt;\n   &lt;xsd:element name=&quot;first-name&quot;  type=&quot;xsd:string&quot;/&gt;\n   &lt;xsd:element name=&quot;last-name&quot; type=&quot;xsd:string&quot;/&gt;\n  &lt;/xsd:sequence&gt;\n &lt;/xsd:complexType&gt;\n\n&lt;/xsd:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_System_Xml_XmlNamespaceScope_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_GetNamespacesInScope_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.GetNamespacesInScope*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnamespacescope\" data-linktype=\"relative-path\">XmlNamespaceScope</a> object that identifies the scope of the reader.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An T:System.Collections.IDictionary object that identifies the namespaces in scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> instance is cast to an <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_LookupNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.LookupNamespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupNamespace*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">string IXmlNamespaceResolver.LookupNamespace (string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace prefix.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string value that contains the namespace Uri that is associated with the prefix.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> instance is cast to an <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlValidatingReader_System_Xml_IXmlNamespaceResolver_LookupPrefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlNamespaceResolver.LookupPrefix(String)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.IXmlNamespaceResolver.LookupPrefix*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">string IXmlNamespaceResolver.LookupPrefix (string namespaceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace that is associated with the prefix.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string value that contains the namespace prefix that is associated with the <code>namespaceName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> instance is cast to an <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlValidatingReader.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlValidatingReader.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.AttributeCount\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.BaseURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.CanReadBinaryContent\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.CanResolveEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Close\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Depth\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Encoding\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.EntityHandling\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.EOF\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.GetAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.HasLineInfo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.HasValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.IsDefault\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.IsEmptyElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.LineNumber\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.LinePosition\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.LocalName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.LookupNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.MoveToAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.MoveToElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.MoveToFirstAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.MoveToNextAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Namespaces\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.NamespaceURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.NameTable\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Prefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.QuoteChar\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Read\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ReadAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ReadContentAsBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ReadContentAsBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ReadElementContentAsBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ReadElementContentAsBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Reader\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ReadState\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ReadString\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ReadTypedValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ResolveEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Schemas\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.SchemaType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.IXmlNamespaceResolver.GetNamespacesInScope\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.IXmlNamespaceResolver.LookupNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.IXmlNamespaceResolver.LookupPrefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ValidationEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.add_ValidationEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.remove_ValidationEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.ValidationType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.Value\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.XmlLang\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.XmlResolver\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlValidatingReader.XmlSpace\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b958aba8-e86c-d966-e836-5549d976e3b3\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Xml\\XmlValidatingReader.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.  \n This class is obsolete. Starting with the .NETâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.XmlValidatingReader\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlValidatingReader.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlValidatingReader.yml","open_to_public_contributors":true,"api_name":["System.Xml.XmlValidatingReader","System.Xml.XmlValidatingReader..ctor","System.Xml.XmlValidatingReader.AttributeCount","System.Xml.XmlValidatingReader.BaseURI","System.Xml.XmlValidatingReader.CanReadBinaryContent","System.Xml.XmlValidatingReader.CanResolveEntity","System.Xml.XmlValidatingReader.Close","System.Xml.XmlValidatingReader.Depth","System.Xml.XmlValidatingReader.Encoding","System.Xml.XmlValidatingReader.EntityHandling","System.Xml.XmlValidatingReader.EOF","System.Xml.XmlValidatingReader.GetAttribute","System.Xml.XmlValidatingReader.HasLineInfo","System.Xml.XmlValidatingReader.HasValue","System.Xml.XmlValidatingReader.IsDefault","System.Xml.XmlValidatingReader.IsEmptyElement","System.Xml.XmlValidatingReader.LineNumber","System.Xml.XmlValidatingReader.LinePosition","System.Xml.XmlValidatingReader.LocalName","System.Xml.XmlValidatingReader.LookupNamespace","System.Xml.XmlValidatingReader.MoveToAttribute","System.Xml.XmlValidatingReader.MoveToElement","System.Xml.XmlValidatingReader.MoveToFirstAttribute","System.Xml.XmlValidatingReader.MoveToNextAttribute","System.Xml.XmlValidatingReader.Name","System.Xml.XmlValidatingReader.Namespaces","System.Xml.XmlValidatingReader.NamespaceURI","System.Xml.XmlValidatingReader.NameTable","System.Xml.XmlValidatingReader.NodeType","System.Xml.XmlValidatingReader.Prefix","System.Xml.XmlValidatingReader.QuoteChar","System.Xml.XmlValidatingReader.Read","System.Xml.XmlValidatingReader.ReadAttributeValue","System.Xml.XmlValidatingReader.ReadContentAsBase64","System.Xml.XmlValidatingReader.ReadContentAsBinHex","System.Xml.XmlValidatingReader.ReadElementContentAsBase64","System.Xml.XmlValidatingReader.ReadElementContentAsBinHex","System.Xml.XmlValidatingReader.Reader","System.Xml.XmlValidatingReader.ReadState","System.Xml.XmlValidatingReader.ReadString","System.Xml.XmlValidatingReader.ReadTypedValue","System.Xml.XmlValidatingReader.ResolveEntity","System.Xml.XmlValidatingReader.Schemas","System.Xml.XmlValidatingReader.SchemaType","System.Xml.XmlValidatingReader.IXmlNamespaceResolver.GetNamespacesInScope","System.Xml.XmlValidatingReader.IXmlNamespaceResolver.LookupNamespace","System.Xml.XmlValidatingReader.IXmlNamespaceResolver.LookupPrefix","System.Xml.XmlValidatingReader.ValidationEventHandler","System.Xml.XmlValidatingReader.add_ValidationEventHandler","System.Xml.XmlValidatingReader.remove_ValidationEventHandler","System.Xml.XmlValidatingReader.ValidationType","System.Xml.XmlValidatingReader.Value","System.Xml.XmlValidatingReader.XmlLang","System.Xml.XmlValidatingReader.XmlResolver","System.Xml.XmlValidatingReader.XmlSpace"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.XmlValidatingReader","System::Xml::XmlValidatingReader","System.Xml.XmlValidatingReader.#ctor","System::Xml::XmlValidatingReader::#ctor","System.Xml.XmlValidatingReader.AttributeCount","System::Xml::XmlValidatingReader::AttributeCount","System.Xml.XmlValidatingReader.BaseURI","System::Xml::XmlValidatingReader::BaseURI","System.Xml.XmlValidatingReader.CanReadBinaryContent","System::Xml::XmlValidatingReader::CanReadBinaryContent","System.Xml.XmlValidatingReader.CanResolveEntity","System::Xml::XmlValidatingReader::CanResolveEntity","System.Xml.XmlValidatingReader.Close","System::Xml::XmlValidatingReader::Close","System.Xml.XmlValidatingReader.Depth","System::Xml::XmlValidatingReader::Depth","System.Xml.XmlValidatingReader.Encoding","System::Xml::XmlValidatingReader::Encoding","System.Xml.XmlValidatingReader.EntityHandling","System::Xml::XmlValidatingReader::EntityHandling","System.Xml.XmlValidatingReader.EOF","System::Xml::XmlValidatingReader::EOF","System.Xml.XmlValidatingReader.GetAttribute","System::Xml::XmlValidatingReader::GetAttribute","System.Xml.XmlValidatingReader.HasLineInfo","System::Xml::XmlValidatingReader::HasLineInfo","System.Xml.XmlValidatingReader.HasValue","System::Xml::XmlValidatingReader::HasValue","System.Xml.XmlValidatingReader.IsDefault","System::Xml::XmlValidatingReader::IsDefault","System.Xml.XmlValidatingReader.IsEmptyElement","System::Xml::XmlValidatingReader::IsEmptyElement","System.Xml.XmlValidatingReader.LineNumber","System::Xml::XmlValidatingReader::LineNumber","System.Xml.XmlValidatingReader.LinePosition","System::Xml::XmlValidatingReader::LinePosition","System.Xml.XmlValidatingReader.LocalName","System::Xml::XmlValidatingReader::LocalName","System.Xml.XmlValidatingReader.LookupNamespace","System::Xml::XmlValidatingReader::LookupNamespace","System.Xml.XmlValidatingReader.MoveToAttribute","System::Xml::XmlValidatingReader::MoveToAttribute","System.Xml.XmlValidatingReader.MoveToElement","System::Xml::XmlValidatingReader::MoveToElement","System.Xml.XmlValidatingReader.MoveToFirstAttribute","System::Xml::XmlValidatingReader::MoveToFirstAttribute","System.Xml.XmlValidatingReader.MoveToNextAttribute","System::Xml::XmlValidatingReader::MoveToNextAttribute","System.Xml.XmlValidatingReader.Name","System::Xml::XmlValidatingReader::Name","System.Xml.XmlValidatingReader.Namespaces","System::Xml::XmlValidatingReader::Namespaces","System.Xml.XmlValidatingReader.NamespaceURI","System::Xml::XmlValidatingReader::NamespaceURI","System.Xml.XmlValidatingReader.NameTable","System::Xml::XmlValidatingReader::NameTable","System.Xml.XmlValidatingReader.NodeType","System::Xml::XmlValidatingReader::NodeType","System.Xml.XmlValidatingReader.Prefix","System::Xml::XmlValidatingReader::Prefix","System.Xml.XmlValidatingReader.QuoteChar","System::Xml::XmlValidatingReader::QuoteChar","System.Xml.XmlValidatingReader.Read","System::Xml::XmlValidatingReader::Read","System.Xml.XmlValidatingReader.ReadAttributeValue","System::Xml::XmlValidatingReader::ReadAttributeValue","System.Xml.XmlValidatingReader.ReadContentAsBase64","System::Xml::XmlValidatingReader::ReadContentAsBase64","System.Xml.XmlValidatingReader.ReadContentAsBinHex","System::Xml::XmlValidatingReader::ReadContentAsBinHex","System.Xml.XmlValidatingReader.ReadElementContentAsBase64","System::Xml::XmlValidatingReader::ReadElementContentAsBase64","System.Xml.XmlValidatingReader.ReadElementContentAsBinHex","System::Xml::XmlValidatingReader::ReadElementContentAsBinHex","System.Xml.XmlValidatingReader.Reader","System::Xml::XmlValidatingReader::Reader","System.Xml.XmlValidatingReader.ReadState","System::Xml::XmlValidatingReader::ReadState","System.Xml.XmlValidatingReader.ReadString","System::Xml::XmlValidatingReader::ReadString","System.Xml.XmlValidatingReader.ReadTypedValue","System::Xml::XmlValidatingReader::ReadTypedValue","System.Xml.XmlValidatingReader.ResolveEntity","System::Xml::XmlValidatingReader::ResolveEntity","System.Xml.XmlValidatingReader.Schemas","System::Xml::XmlValidatingReader::Schemas","System.Xml.XmlValidatingReader.SchemaType","System::Xml::XmlValidatingReader::SchemaType","System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope","System::Xml::XmlValidatingReader::System#Xml#IXmlNamespaceResolver#GetNamespacesInScope","System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace","System::Xml::XmlValidatingReader::System#Xml#IXmlNamespaceResolver#LookupNamespace","System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix","System::Xml::XmlValidatingReader::System#Xml#IXmlNamespaceResolver#LookupPrefix","System.Xml.XmlValidatingReader.ValidationEventHandler","System::Xml::XmlValidatingReader::ValidationEventHandler","System.Xml.XmlValidatingReader.ValidationType","System::Xml::XmlValidatingReader::ValidationType","System.Xml.XmlValidatingReader.Value","System::Xml::XmlValidatingReader::Value","System.Xml.XmlValidatingReader.XmlLang","System::Xml::XmlValidatingReader::XmlLang","System.Xml.XmlValidatingReader.XmlResolver","System::Xml::XmlValidatingReader::XmlResolver","System.Xml.XmlValidatingReader.XmlSpace","System::Xml::XmlValidatingReader::XmlSpace"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b958aba8-e86c-d966-e836-5549d976e3b3","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Xml\\XmlValidatingReader.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml/XmlValidatingReader.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlValidatingReader class | Microsoft Docs","_op_ogTitle":"XmlValidatingReader class","description":"Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.  \n This class is obsolete. Starting with the .NETâ€¦","toc_asset_id":"_splitted/System.Xml/toc.json","toc_rel":"_splitted/System.Xml/toc.json","source_url":"","ms.assetid":"System.Xml.XmlValidatingReader","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmlvalidatingreader","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmlvalidatingreader","fileRelativePath":"System.Xml.XmlValidatingReader.html"},"themesRelativePathToOutputRoot":"_themes/"}