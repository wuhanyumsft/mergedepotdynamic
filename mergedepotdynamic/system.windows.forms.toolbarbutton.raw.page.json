{"content":"    \r\n    <h1 id=\"System_Windows_Forms_ToolBarButton\">\r\n      <span class=\"lang-csharp\">ToolBarButton</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a Windows toolbar button. Although <a class=\"xref\" href=\"system.windows.forms.toolstripbutton\" data-linktype=\"relative-path\">ToolStripButton</a> replaces and extends the ToolBarButton control of previous versions, ToolBarButton is retained for both backward compatibility and future use if you choose.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultProperty(&quot;Text&quot;)]\n[System.ComponentModel.Designer(&quot;System.Windows.Forms.Design.ToolBarButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.DesignTimeVisible(false)]\n[System.ComponentModel.ToolboxItem(false)]\npublic class ToolBarButton : System.ComponentModel.Component</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ToolBarButton</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>ToolBarButton controls are parented by <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> controls. Common properties to set once the toolbar button has been created are <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Text_\" data-linktype=\"relative-path\">Text</a> and <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a>. Set the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Text_\" data-linktype=\"relative-path\">Text</a> property of the button to display text beneath or to the right of the image. To assign images to the buttons by creating an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, assigning it to the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property of the toolbar; then assign the image index value to the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> property of the button.  </p>\n<p> To change the appearance of the toolbar buttons assigned to the toolbar, set the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_Appearance_\" data-linktype=\"relative-path\">Appearance</a> property of the parent toolbar control. The <code>ToolBarAppearance.Flat</code> appearance gives the buttons a flat appearance. As the mouse pointer moves over the buttons, their appearance changes to three-dimensional. Button separators appear as lines rather than spaces between the buttons when the buttons have a flat appearance. If the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_Appearance_\" data-linktype=\"relative-path\">Appearance</a> property is set to <code>ToolBarAppearance.Normal</code>, the buttons appear raised and three-dimensional, and the separators appear as a gap between the buttons.  </p>\n<p> You can assign a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> to a button if the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Style_\" data-linktype=\"relative-path\">Style</a> property is set to <code>ToolBarButtonStyle.DropDown</code>. When the button is clicked, the assigned menu is displayed.  </p>\n<p> To create a collection of ToolBarButton controls to display on a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a>, add the buttons individually by using the <a class=\"xref\" href=\"system.windows.forms.toolbar.toolbarbuttoncollection#System_Windows_Forms_ToolBar_ToolBarButtonCollection_Add_\" data-linktype=\"relative-path\">Add</a> method of the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_Buttons_\" data-linktype=\"relative-path\">Buttons</a> property. Alternatively, you can add several toolbar buttons using the <a class=\"xref\" href=\"system.windows.forms.toolbar.toolbarbuttoncollection#System_Windows_Forms_ToolBar_ToolBarButtonCollection_AddRange_\" data-linktype=\"relative-path\">AddRange</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton__ctor\" data-linktype=\"self-bookmark\">ToolBarButton()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton__ctor_System_String_\" data-linktype=\"self-bookmark\">ToolBarButton(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> class and displays the assigned text on the button.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_DropDownMenu\" data-linktype=\"self-bookmark\">DropDownMenu</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the menu to be displayed in the drop-down toolbar button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Enabled\" data-linktype=\"self-bookmark\">Enabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the button is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_ImageIndex\" data-linktype=\"self-bookmark\">ImageIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the index value of the image assigned to the button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_ImageKey\" data-linktype=\"self-bookmark\">ImageKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the image assigned to the button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The name of the button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Parent\" data-linktype=\"self-bookmark\">Parent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the toolbar control that the toolbar button is assigned to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_PartialPush\" data-linktype=\"self-bookmark\">PartialPush</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether a toggle-style toolbar button is partially pushed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Pushed\" data-linktype=\"self-bookmark\">Pushed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether a toggle-style toolbar button is currently in the pushed state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Rectangle\" data-linktype=\"self-bookmark\">Rectangle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the bounding rectangle for a toolbar button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Style\" data-linktype=\"self-bookmark\">Style</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the style of the toolbar button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Tag\" data-linktype=\"self-bookmark\">Tag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the object that contains data about the toolbar button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Text\" data-linktype=\"self-bookmark\">Text</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text displayed on the toolbar button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_ToolTipText\" data-linktype=\"self-bookmark\">ToolTipText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text that appears as a ToolTip for the button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Visible\" data-linktype=\"self-bookmark\">Visible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the toolbar button is visible.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ToolBarButton_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton__ctor\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToolBarButton()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ToolBarButton ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A newly created <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> has no default <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Text_\" data-linktype=\"relative-path\">Text</a> or <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it. The button&#39;s default style is <code>ToolBarButtonStyle.PushButton</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and three <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> controls, assigns the buttons to the toolbar, and sets some of the buttons&#39; common properties. This code requires that a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> and a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> have been created and the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> has at least one <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ToolBarButton.Style Example#1\">public:\n   void InitializeMyToolBar()\n   {\n      // Create the ToolBar, ToolBarButton controls, and menus.\n      ToolBarButton^ toolBarButton1 = gcnew ToolBarButton( &quot;Open&quot; );\n      ToolBarButton^ toolBarButton2 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton3 = gcnew ToolBarButton;\n      ToolBar^ toolBar1 = gcnew ToolBar;\n      MenuItem^ menuItem1 = gcnew MenuItem( &quot;Print&quot; );\n      array&lt;MenuItem^&gt;^ temp1 = {menuItem1};\n      System::Windows::Forms::ContextMenu^ contextMenu1 =\n         gcnew System::Windows::Forms::ContextMenu( temp1 );\n      \n      // Add the ToolBarButton controls to the ToolBar.\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton1 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton2 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton3 );\n      \n      // Assign an ImageList to the ToolBar and show ToolTips.\n      toolBar1-&gt;ImageList = imageList1;\n      toolBar1-&gt;ShowToolTips = true;\n      \n      /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n         Style properties of the ToolBarButton controls. */\n      toolBarButton2-&gt;Style = ToolBarButtonStyle::Separator;\n      toolBarButton3-&gt;Text = &quot;Print&quot;;\n      toolBarButton3-&gt;Style = ToolBarButtonStyle::DropDownButton;\n      toolBarButton3-&gt;ToolTipText = &quot;Print&quot;;\n      toolBarButton3-&gt;ImageIndex = 0;\n      toolBarButton3-&gt;DropDownMenu = contextMenu1;\n      \n      // Add the ToolBar to a form.\n      Controls-&gt;Add( toolBar1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ToolBarButton.Style Example#1\">public void InitializeMyToolBar()\n {\n    // Create the ToolBar, ToolBarButton controls, and menus.\n    ToolBarButton toolBarButton1 = new ToolBarButton(&quot;Open&quot;);\n    ToolBarButton toolBarButton2 = new ToolBarButton();\n    ToolBarButton toolBarButton3 = new ToolBarButton();\n    ToolBar toolBar1 = new ToolBar();\n    MenuItem menuItem1 = new MenuItem(&quot;Print&quot;);\n    ContextMenu contextMenu1 = new ContextMenu(new MenuItem[]{menuItem1});\n\n     \n    // Add the ToolBarButton controls to the ToolBar.\n    toolBar1.Buttons.Add(toolBarButton1);\n    toolBar1.Buttons.Add(toolBarButton2);\n    toolBar1.Buttons.Add(toolBarButton3);\n \n    // Assign an ImageList to the ToolBar and show ToolTips.\n    toolBar1.ImageList = imageList1;\n    toolBar1.ShowToolTips = true;\n \n    /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n       Style properties of the ToolBarButton controls. */\n    toolBarButton2.Style = ToolBarButtonStyle.Separator;\n    toolBarButton3.Text = &quot;Print&quot;;\n    toolBarButton3.Style = ToolBarButtonStyle.DropDownButton;\n    toolBarButton3.ToolTipText = &quot;Print&quot;;\n    toolBarButton3.ImageIndex = 0;\n    toolBarButton3.DropDownMenu = contextMenu1;\n \n    // Add the ToolBar to a form.\n    Controls.Add(toolBar1);\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ToolBarButton.Style Example#1\">    Public Sub InitializeMyToolBar()\n        &#39; Create the ToolBar, ToolBarButton controls, and menus.\n        Dim toolBarButton1 As New ToolBarButton(&quot;Open&quot;)\n        Dim toolBarButton2 As New ToolBarButton()\n        Dim toolBarButton3 As New ToolBarButton()\n        Dim toolBar1 As New ToolBar()\n\tDim menuItem1 As New MenuItem(&quot;Print&quot;)\n\tDim contextMenu1 As New ContextMenu(New MenuItem(){menuItem1})\n        \n        &#39; Add the ToolBarButton controls to the ToolBar.\n        toolBar1.Buttons.Add(toolBarButton1)\n        toolBar1.Buttons.Add(toolBarButton2)\n        toolBar1.Buttons.Add(toolBarButton3)\n        \n        &#39; Assign an ImageList to the ToolBar and show ToolTips.\n        toolBar1.ImageList = imageList1\n        toolBar1.ShowToolTips = True\n        \n        &#39; Assign ImageIndex, ContextMenu, Text, ToolTip, and\n        &#39; Style properties of the ToolBarButton controls. \n        toolBarButton2.Style = ToolBarButtonStyle.Separator\n        toolBarButton3.Text = &quot;Print&quot;\n        toolBarButton3.Style = ToolBarButtonStyle.DropDownButton\n        toolBarButton3.ToolTipText = &quot;Print&quot;\n        toolBarButton3.ImageIndex = 0\n        toolBarButton3.DropDownMenu = contextMenu1\n        \n        &#39; Add the ToolBar to a form.\n        Controls.Add(toolBar1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToolBarButton(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> class and displays the assigned text on the button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ToolBarButton (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text to display on the new <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The newly created <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> has no <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it. The button&#39;s default style is <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonstyle\" data-linktype=\"relative-path\">ToolBarButtonStyle</a>. The <code>text</code> parameter is assigned to the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Text_\" data-linktype=\"relative-path\">Text</a> property and is displayed on the new toolbar button control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and three <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> controls, assigns the buttons to the toolbar, and sets some of the buttons&#39; common properties. This code requires that a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> and a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> have been created and the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> has at least one <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ToolBarButton.Style Example#1\">public:\n   void InitializeMyToolBar()\n   {\n      // Create the ToolBar, ToolBarButton controls, and menus.\n      ToolBarButton^ toolBarButton1 = gcnew ToolBarButton( &quot;Open&quot; );\n      ToolBarButton^ toolBarButton2 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton3 = gcnew ToolBarButton;\n      ToolBar^ toolBar1 = gcnew ToolBar;\n      MenuItem^ menuItem1 = gcnew MenuItem( &quot;Print&quot; );\n      array&lt;MenuItem^&gt;^ temp1 = {menuItem1};\n      System::Windows::Forms::ContextMenu^ contextMenu1 =\n         gcnew System::Windows::Forms::ContextMenu( temp1 );\n      \n      // Add the ToolBarButton controls to the ToolBar.\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton1 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton2 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton3 );\n      \n      // Assign an ImageList to the ToolBar and show ToolTips.\n      toolBar1-&gt;ImageList = imageList1;\n      toolBar1-&gt;ShowToolTips = true;\n      \n      /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n         Style properties of the ToolBarButton controls. */\n      toolBarButton2-&gt;Style = ToolBarButtonStyle::Separator;\n      toolBarButton3-&gt;Text = &quot;Print&quot;;\n      toolBarButton3-&gt;Style = ToolBarButtonStyle::DropDownButton;\n      toolBarButton3-&gt;ToolTipText = &quot;Print&quot;;\n      toolBarButton3-&gt;ImageIndex = 0;\n      toolBarButton3-&gt;DropDownMenu = contextMenu1;\n      \n      // Add the ToolBar to a form.\n      Controls-&gt;Add( toolBar1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ToolBarButton.Style Example#1\">public void InitializeMyToolBar()\n {\n    // Create the ToolBar, ToolBarButton controls, and menus.\n    ToolBarButton toolBarButton1 = new ToolBarButton(&quot;Open&quot;);\n    ToolBarButton toolBarButton2 = new ToolBarButton();\n    ToolBarButton toolBarButton3 = new ToolBarButton();\n    ToolBar toolBar1 = new ToolBar();\n    MenuItem menuItem1 = new MenuItem(&quot;Print&quot;);\n    ContextMenu contextMenu1 = new ContextMenu(new MenuItem[]{menuItem1});\n\n     \n    // Add the ToolBarButton controls to the ToolBar.\n    toolBar1.Buttons.Add(toolBarButton1);\n    toolBar1.Buttons.Add(toolBarButton2);\n    toolBar1.Buttons.Add(toolBarButton3);\n \n    // Assign an ImageList to the ToolBar and show ToolTips.\n    toolBar1.ImageList = imageList1;\n    toolBar1.ShowToolTips = true;\n \n    /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n       Style properties of the ToolBarButton controls. */\n    toolBarButton2.Style = ToolBarButtonStyle.Separator;\n    toolBarButton3.Text = &quot;Print&quot;;\n    toolBarButton3.Style = ToolBarButtonStyle.DropDownButton;\n    toolBarButton3.ToolTipText = &quot;Print&quot;;\n    toolBarButton3.ImageIndex = 0;\n    toolBarButton3.DropDownMenu = contextMenu1;\n \n    // Add the ToolBar to a form.\n    Controls.Add(toolBar1);\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ToolBarButton.Style Example#1\">    Public Sub InitializeMyToolBar()\n        &#39; Create the ToolBar, ToolBarButton controls, and menus.\n        Dim toolBarButton1 As New ToolBarButton(&quot;Open&quot;)\n        Dim toolBarButton2 As New ToolBarButton()\n        Dim toolBarButton3 As New ToolBarButton()\n        Dim toolBar1 As New ToolBar()\n\tDim menuItem1 As New MenuItem(&quot;Print&quot;)\n\tDim contextMenu1 As New ContextMenu(New MenuItem(){menuItem1})\n        \n        &#39; Add the ToolBarButton controls to the ToolBar.\n        toolBar1.Buttons.Add(toolBarButton1)\n        toolBar1.Buttons.Add(toolBarButton2)\n        toolBar1.Buttons.Add(toolBarButton3)\n        \n        &#39; Assign an ImageList to the ToolBar and show ToolTips.\n        toolBar1.ImageList = imageList1\n        toolBar1.ShowToolTips = True\n        \n        &#39; Assign ImageIndex, ContextMenu, Text, ToolTip, and\n        &#39; Style properties of the ToolBarButton controls. \n        toolBarButton2.Style = ToolBarButtonStyle.Separator\n        toolBarButton3.Text = &quot;Print&quot;\n        toolBarButton3.Style = ToolBarButtonStyle.DropDownButton\n        toolBarButton3.ToolTipText = &quot;Print&quot;\n        toolBarButton3.ImageIndex = 0\n        toolBarButton3.DropDownMenu = contextMenu1\n        \n        &#39; Add the ToolBar to a form.\n        Controls.Add(toolBar1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_DropDownMenu\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_DropDownMenu_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DropDownMenu</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the menu to be displayed in the drop-down toolbar button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Menu DropDownMenu { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.menu\" data-linktype=\"relative-path\">Menu</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> to be displayed in the drop-down toolbar button. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned object is not a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> to be displayed when the drop-down button is clicked. This property is not used unless the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Style_\" data-linktype=\"relative-path\">Style</a> property value is set to <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonstyle\" data-linktype=\"relative-path\">System.Windows.Forms.ToolBarButtonStyle</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Although the DropDownMenu property is defined as a <a class=\"xref\" href=\"system.windows.forms.menu\" data-linktype=\"relative-path\">Menu</a> type, you must assign it a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> for it to display properly. If you are creating your own <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a> derived class you must assign that object to a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> and assign the <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> to the DropDownMenu property.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and three <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> controls, assigns the buttons to the toolbar, and sets some of the buttons&#39; common properties. This code requires that an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> and a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> have been created and the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> has at least one <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ToolBarButton.Style Example#1\">public:\n   void InitializeMyToolBar()\n   {\n      // Create the ToolBar, ToolBarButton controls, and menus.\n      ToolBarButton^ toolBarButton1 = gcnew ToolBarButton( &quot;Open&quot; );\n      ToolBarButton^ toolBarButton2 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton3 = gcnew ToolBarButton;\n      ToolBar^ toolBar1 = gcnew ToolBar;\n      MenuItem^ menuItem1 = gcnew MenuItem( &quot;Print&quot; );\n      array&lt;MenuItem^&gt;^ temp1 = {menuItem1};\n      System::Windows::Forms::ContextMenu^ contextMenu1 =\n         gcnew System::Windows::Forms::ContextMenu( temp1 );\n      \n      // Add the ToolBarButton controls to the ToolBar.\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton1 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton2 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton3 );\n      \n      // Assign an ImageList to the ToolBar and show ToolTips.\n      toolBar1-&gt;ImageList = imageList1;\n      toolBar1-&gt;ShowToolTips = true;\n      \n      /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n         Style properties of the ToolBarButton controls. */\n      toolBarButton2-&gt;Style = ToolBarButtonStyle::Separator;\n      toolBarButton3-&gt;Text = &quot;Print&quot;;\n      toolBarButton3-&gt;Style = ToolBarButtonStyle::DropDownButton;\n      toolBarButton3-&gt;ToolTipText = &quot;Print&quot;;\n      toolBarButton3-&gt;ImageIndex = 0;\n      toolBarButton3-&gt;DropDownMenu = contextMenu1;\n      \n      // Add the ToolBar to a form.\n      Controls-&gt;Add( toolBar1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ToolBarButton.Style Example#1\">public void InitializeMyToolBar()\n {\n    // Create the ToolBar, ToolBarButton controls, and menus.\n    ToolBarButton toolBarButton1 = new ToolBarButton(&quot;Open&quot;);\n    ToolBarButton toolBarButton2 = new ToolBarButton();\n    ToolBarButton toolBarButton3 = new ToolBarButton();\n    ToolBar toolBar1 = new ToolBar();\n    MenuItem menuItem1 = new MenuItem(&quot;Print&quot;);\n    ContextMenu contextMenu1 = new ContextMenu(new MenuItem[]{menuItem1});\n\n     \n    // Add the ToolBarButton controls to the ToolBar.\n    toolBar1.Buttons.Add(toolBarButton1);\n    toolBar1.Buttons.Add(toolBarButton2);\n    toolBar1.Buttons.Add(toolBarButton3);\n \n    // Assign an ImageList to the ToolBar and show ToolTips.\n    toolBar1.ImageList = imageList1;\n    toolBar1.ShowToolTips = true;\n \n    /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n       Style properties of the ToolBarButton controls. */\n    toolBarButton2.Style = ToolBarButtonStyle.Separator;\n    toolBarButton3.Text = &quot;Print&quot;;\n    toolBarButton3.Style = ToolBarButtonStyle.DropDownButton;\n    toolBarButton3.ToolTipText = &quot;Print&quot;;\n    toolBarButton3.ImageIndex = 0;\n    toolBarButton3.DropDownMenu = contextMenu1;\n \n    // Add the ToolBar to a form.\n    Controls.Add(toolBar1);\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ToolBarButton.Style Example#1\">    Public Sub InitializeMyToolBar()\n        &#39; Create the ToolBar, ToolBarButton controls, and menus.\n        Dim toolBarButton1 As New ToolBarButton(&quot;Open&quot;)\n        Dim toolBarButton2 As New ToolBarButton()\n        Dim toolBarButton3 As New ToolBarButton()\n        Dim toolBar1 As New ToolBar()\n\tDim menuItem1 As New MenuItem(&quot;Print&quot;)\n\tDim contextMenu1 As New ContextMenu(New MenuItem(){menuItem1})\n        \n        &#39; Add the ToolBarButton controls to the ToolBar.\n        toolBar1.Buttons.Add(toolBarButton1)\n        toolBar1.Buttons.Add(toolBarButton2)\n        toolBar1.Buttons.Add(toolBarButton3)\n        \n        &#39; Assign an ImageList to the ToolBar and show ToolTips.\n        toolBar1.ImageList = imageList1\n        toolBar1.ShowToolTips = True\n        \n        &#39; Assign ImageIndex, ContextMenu, Text, ToolTip, and\n        &#39; Style properties of the ToolBarButton controls. \n        toolBarButton2.Style = ToolBarButtonStyle.Separator\n        toolBarButton3.Text = &quot;Print&quot;\n        toolBarButton3.Style = ToolBarButtonStyle.DropDownButton\n        toolBarButton3.ToolTipText = &quot;Print&quot;\n        toolBarButton3.ImageIndex = 0\n        toolBarButton3.DropDownMenu = contextMenu1\n        \n        &#39; Add the ToolBar to a form.\n        Controls.Add(toolBar1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Enabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Enabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the button is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Enabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the button is enabled; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the Enabled property is set to <code>false</code>, the toolbar button cannot be clicked, and the button&#39;s appearance changes. The <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> and <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Text_\" data-linktype=\"relative-path\">Text</a> assigned to the button appear grayed out. If the image or text has multiple colors, they display in a monochromatic gray.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_ImageIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_ImageIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the index value of the image assigned to the button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ImageIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index value of the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to the toolbar button. The default is -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is less than -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ImageIndex value references the indexed value of the images in an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> assigned to the parent <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and three <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> controls, assigns the buttons to the toolbar, and sets some of the buttons&#39; common properties. This code requires that a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> and a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> have been created and the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> has at least one <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ToolBarButton.Style Example#1\">public:\n   void InitializeMyToolBar()\n   {\n      // Create the ToolBar, ToolBarButton controls, and menus.\n      ToolBarButton^ toolBarButton1 = gcnew ToolBarButton( &quot;Open&quot; );\n      ToolBarButton^ toolBarButton2 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton3 = gcnew ToolBarButton;\n      ToolBar^ toolBar1 = gcnew ToolBar;\n      MenuItem^ menuItem1 = gcnew MenuItem( &quot;Print&quot; );\n      array&lt;MenuItem^&gt;^ temp1 = {menuItem1};\n      System::Windows::Forms::ContextMenu^ contextMenu1 =\n         gcnew System::Windows::Forms::ContextMenu( temp1 );\n      \n      // Add the ToolBarButton controls to the ToolBar.\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton1 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton2 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton3 );\n      \n      // Assign an ImageList to the ToolBar and show ToolTips.\n      toolBar1-&gt;ImageList = imageList1;\n      toolBar1-&gt;ShowToolTips = true;\n      \n      /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n         Style properties of the ToolBarButton controls. */\n      toolBarButton2-&gt;Style = ToolBarButtonStyle::Separator;\n      toolBarButton3-&gt;Text = &quot;Print&quot;;\n      toolBarButton3-&gt;Style = ToolBarButtonStyle::DropDownButton;\n      toolBarButton3-&gt;ToolTipText = &quot;Print&quot;;\n      toolBarButton3-&gt;ImageIndex = 0;\n      toolBarButton3-&gt;DropDownMenu = contextMenu1;\n      \n      // Add the ToolBar to a form.\n      Controls-&gt;Add( toolBar1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ToolBarButton.Style Example#1\">public void InitializeMyToolBar()\n {\n    // Create the ToolBar, ToolBarButton controls, and menus.\n    ToolBarButton toolBarButton1 = new ToolBarButton(&quot;Open&quot;);\n    ToolBarButton toolBarButton2 = new ToolBarButton();\n    ToolBarButton toolBarButton3 = new ToolBarButton();\n    ToolBar toolBar1 = new ToolBar();\n    MenuItem menuItem1 = new MenuItem(&quot;Print&quot;);\n    ContextMenu contextMenu1 = new ContextMenu(new MenuItem[]{menuItem1});\n\n     \n    // Add the ToolBarButton controls to the ToolBar.\n    toolBar1.Buttons.Add(toolBarButton1);\n    toolBar1.Buttons.Add(toolBarButton2);\n    toolBar1.Buttons.Add(toolBarButton3);\n \n    // Assign an ImageList to the ToolBar and show ToolTips.\n    toolBar1.ImageList = imageList1;\n    toolBar1.ShowToolTips = true;\n \n    /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n       Style properties of the ToolBarButton controls. */\n    toolBarButton2.Style = ToolBarButtonStyle.Separator;\n    toolBarButton3.Text = &quot;Print&quot;;\n    toolBarButton3.Style = ToolBarButtonStyle.DropDownButton;\n    toolBarButton3.ToolTipText = &quot;Print&quot;;\n    toolBarButton3.ImageIndex = 0;\n    toolBarButton3.DropDownMenu = contextMenu1;\n \n    // Add the ToolBar to a form.\n    Controls.Add(toolBar1);\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ToolBarButton.Style Example#1\">    Public Sub InitializeMyToolBar()\n        &#39; Create the ToolBar, ToolBarButton controls, and menus.\n        Dim toolBarButton1 As New ToolBarButton(&quot;Open&quot;)\n        Dim toolBarButton2 As New ToolBarButton()\n        Dim toolBarButton3 As New ToolBarButton()\n        Dim toolBar1 As New ToolBar()\n\tDim menuItem1 As New MenuItem(&quot;Print&quot;)\n\tDim contextMenu1 As New ContextMenu(New MenuItem(){menuItem1})\n        \n        &#39; Add the ToolBarButton controls to the ToolBar.\n        toolBar1.Buttons.Add(toolBarButton1)\n        toolBar1.Buttons.Add(toolBarButton2)\n        toolBar1.Buttons.Add(toolBarButton3)\n        \n        &#39; Assign an ImageList to the ToolBar and show ToolTips.\n        toolBar1.ImageList = imageList1\n        toolBar1.ShowToolTips = True\n        \n        &#39; Assign ImageIndex, ContextMenu, Text, ToolTip, and\n        &#39; Style properties of the ToolBarButton controls. \n        toolBarButton2.Style = ToolBarButtonStyle.Separator\n        toolBarButton3.Text = &quot;Print&quot;\n        toolBarButton3.Style = ToolBarButtonStyle.DropDownButton\n        toolBarButton3.ToolTipText = &quot;Print&quot;\n        toolBarButton3.ImageIndex = 0\n        toolBarButton3.DropDownMenu = contextMenu1\n        \n        &#39; Add the ToolBar to a form.\n        Controls.Add(toolBar1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_ImageKey\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_ImageKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the image assigned to the button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ImageKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to the toolbar button.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ImageKey value indicates an image in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> assigned to the parent <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Name\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>The name of the button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the button.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the button name as a key to retrieve the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> from the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_Buttons_\" data-linktype=\"relative-path\">Buttons</a> collection of a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Parent\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Parent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parent</div>        \r\n          </div>\r\n    \r\n            <p>Gets the toolbar control that the toolbar button is assigned to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.ToolBar Parent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> control that the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> is assigned to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_PartialPush\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_PartialPush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PartialPush</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether a toggle-style toolbar button is partially pushed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool PartialPush { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a toggle-style toolbar button is partially pushed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When PartialPush is set to <code>true</code>, the toolbar button appears to have its face grayed. This appearance is different from the dimmed appearance when the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property is set to <code>false</code> since the partial-push appearance gives a haze to the entire button face. This property has no effect unless the <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonstyle\" data-linktype=\"relative-path\">ToolBarButtonStyle</a> is set to <code>ToggleButton</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Pushed_\" data-linktype=\"relative-path\">Pushed</a>, and PartialPush properties. To run the example, paste the following code in a form containing a <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control called <code>RichTextBox1</code>.Call the <code>InitializeToolBar</code> method in the form&#39;s constructor or <code>Load</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">\t\n\t// Declare ToolBar1.\n\tinternal System.Windows.Forms.ToolBar ToolBar1;\n\n\t// Initialize ToolBar1 with Bold(B), Italic(I), and \n\t// Underline(U) buttons.\n\tprivate void InitializeToolBar()\n\t{\n\t\tToolBar1 = new ToolBar();\n\n\t\t// Set the appearance to Flat.\n\t\tToolBar1.Appearance = ToolBarAppearance.Flat;\n\n\t\t// Set the toolbar to dock at the bottom of the form.\n\t\tToolBar1.Dock = DockStyle.Bottom;\n\n\t\t// Set the toolbar font to 14 points and bold.\n\t\tToolBar1.Font = new Font(FontFamily.GenericSansSerif,\n\t\t\t14, FontStyle.Bold);\n\n\t\t// Declare fontstyle array with the three font styles.\n\t\tFontStyle[] fonts = new FontStyle[]{FontStyle.Bold, \n\t\t\tFontStyle.Italic, FontStyle.Underline};\n\t\t\n\t\tint count;\n\n\t\t// Create a button for each value in the array, setting its \n\t\t// text to the first letter of the style and its \n\t\t// button&#39;s tag property.\n\t\tfor(count=0; count&lt;fonts.Length; count++)\n\t\t{\n\t\t\tToolBarButton fontButton = \n\t\t\t\tnew ToolBarButton(fonts[count].ToString().Substring(0, 1));\n\t\t\tfontButton.Style = ToolBarButtonStyle.ToggleButton;\n\t\t\tfontButton.Tag = fonts[count];\n\t\t\tToolBar1.Buttons.Add(fontButton);\n\t\t}\n\t\tthis.ToolBar1.ButtonClick += \n\t\t\tnew ToolBarButtonClickEventHandler(ToolBar1_ButtonClick);\n\t\tthis.Controls.Add(this.ToolBar1);\n\t}\n\t\n\n\t// Declare FontStyle object, which defaults to the Regular\n\t// FontStyle.\n\tFontStyle style = new FontStyle();\n\n\tprivate void ToolBar1_ButtonClick(object sender, \n\t\tSystem.Windows.Forms.ToolBarButtonClickEventArgs e)\n\t{\n\n\t\t// If a button is pushed, use a bitwise Or combination \n\t\t// of the style variable and the button tag, to set style to \n\t\t// the correct FontStyle. Set the button&#39;s PartialPush \n\t\t// property to true for a Windows XP-like appearance.\n\t\tif (e.Button.Pushed)\n\t\t{\n\t\t\te.Button.PartialPush = true;\n\t\t\tstyle = style |(FontStyle) e.Button.Tag;\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// If the button was not pushed, use a bitwise XOR \n\t\t\t// combination to turn off that style \n\t\t\t// and set the PartialPush property to false.\n\t\t\te.Button.PartialPush = false;\n\t\t\tstyle = style ^ (FontStyle) e.Button.Tag;\n\t\t}\n\n\t\t// Set the font using the existing RichTextBox font and the new\n\t\t// style.\n\t\tRichTextBox1.Font = new Font(RichTextBox1.Font, style);\n\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">   // Declare ToolBar1.\ninternal:\n   System::Windows::Forms::ToolBar^ ToolBar1;\n\nprivate:\n\n   // Initialize ToolBar1 with Bold(B), Italic(I), and \n   // Underline(U) buttons.\n   void InitializeToolBar()\n   {\n      ToolBar1 = gcnew ToolBar;\n      \n      // Set the appearance to Flat.\n      ToolBar1-&gt;Appearance = ToolBarAppearance::Flat;\n      \n      // Set the toolbar to dock at the bottom of the form.\n      ToolBar1-&gt;Dock = DockStyle::Bottom;\n      \n      // Set the toolbar font to 14 points and bold.\n      ToolBar1-&gt;Font = gcnew System::Drawing::Font( FontFamily::GenericSansSerif,14,FontStyle::Bold );\n      \n      // Declare fontstyle array with the three font styles.\n      array&lt;FontStyle&gt;^ fonts = {FontStyle::Bold,FontStyle::Italic,FontStyle::Underline};\n      int count;\n      \n      // Create a button for each value in the array, setting its \n      // text to the first letter of the style and its \n      // button&#39;s tag property.\n      for ( count = 0; count &lt; fonts-&gt;Length; count++ )\n      {\n         ToolBarButton^ fontButton = gcnew ToolBarButton( fonts[ count ].ToString()-&gt;Substring( 0, 1 ) );\n         fontButton-&gt;Style = ToolBarButtonStyle::ToggleButton;\n         fontButton-&gt;Tag = fonts[ count ];\n         ToolBar1-&gt;Buttons-&gt;Add( fontButton );\n\n      }\n      this-&gt;ToolBar1-&gt;ButtonClick += gcnew ToolBarButtonClickEventHandler( this, &amp;Form1::ToolBar1_ButtonClick );\n      this-&gt;Controls-&gt;Add( this-&gt;ToolBar1 );\n   }\n\n   // Declare FontStyle object, which defaults to the Regular\n   // FontStyle.\n   FontStyle style;\n   void ToolBar1_ButtonClick( Object^ /*sender*/, System::Windows::Forms::ToolBarButtonClickEventArgs^ e )\n   {\n      // If a button is pushed, use a bitwise Or combination \n      // of the style variable and the button tag, to set style to \n      // the correct FontStyle. Set the button&#39;s PartialPush \n      // property to true for a Windows XP-like appearance.\n      if ( e-&gt;Button-&gt;Pushed )\n      {\n         e-&gt;Button-&gt;PartialPush = true;\n         style = (FontStyle)(style | safe_cast&lt;FontStyle&gt;(e-&gt;Button-&gt;Tag));\n      }\n      else\n      {\n         // If the button was not pushed, use a bitwise XOR \n         // combination to turn off that style \n         // and set the PartialPush property to false.\n         e-&gt;Button-&gt;PartialPush = false;\n         style = (FontStyle)(style ^ safe_cast&lt;FontStyle&gt;(e-&gt;Button-&gt;Tag));\n      }\n\n      // Set the font using the existing RichTextBox font and the new\n      // style.\n      RichTextBox1-&gt;Font = gcnew System::Drawing::Font( RichTextBox1-&gt;Font,style );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">\n    &#39; Declare ToolBar1.\n    Friend WithEvents ToolBar1 As System.Windows.Forms.ToolBar\n\n    &#39; Initialize ToolBar1 with Bold(B), Italic(I), and Underline(U) buttons.\n    Private Sub InitializeToolBar()\n        ToolBar1 = New ToolBar\n\n        &#39; Set the appearance to Flat.\n        ToolBar1.Appearance = ToolBarAppearance.Flat\n\n        &#39; Set the toolbar to dock at the bottom of the form.\n        ToolBar1.Dock = DockStyle.Bottom\n\n        &#39; Set the toolbar font to 14 points and bold.\n        ToolBar1.Font = New System.Drawing.Font _\n            (FontFamily.GenericSansSerif, 14, FontStyle.Bold)\n\n        &#39; Declare fontstyle array with the three font styles.\n        Dim fonts() As FontStyle = New FontStyle() _\n            {FontStyle.Bold, FontStyle.Italic, FontStyle.Underline}\n        Dim count As Integer\n\n        &#39; Create a button for each value in the array, setting its text to the\n        &#39; first letter of the style and its button&#39;s tag property.\n        For count = 0 To fonts.Length - 1\n            Dim fontButton As New ToolBarButton(fonts(count). _\n                ToString.Substring(0, 1))\n            fontButton.Style = ToolBarButtonStyle.ToggleButton\n            fontButton.Tag = fonts(count)\n            ToolBar1.Buttons.Add(fontButton)\n        Next\n        Me.Controls.Add(Me.ToolBar1)\n    End Sub\n\n\n    &#39; Declare FontStyle object, which defaults to the Regular FontStyle.\n    Dim style As New FontStyle\n\n    Private Sub ToolBar1_ButtonClick(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.ToolBarButtonClickEventArgs) _\n        Handles ToolBar1.ButtonClick\n\n        &#39; If a button is pushed, use a bitwise Or combination \n        &#39; of the style variable and the button tag, to set style to \n        &#39; the correct FontStyle. Set the button&#39;s PartialPush property to\n        &#39; true for a Windows XP-like appearance.\n        If (e.Button.Pushed) Then\n            e.Button.PartialPush = True\n            style = style Or e.Button.Tag\n\n        Else\n            &#39; If the button was not pushed, use a bitwise XOR \n            &#39; combination to turn off that style \n            &#39; and set the PartialPush property to False.\n            e.Button.PartialPush = False\n            style = style Xor e.Button.Tag\n        End If\n\n        &#39; Set the font using the existing RichTextBox font and the new\n        &#39; style.\n        RichTextBox1.Font = New Font(RichTextBox1.Font, style)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Pushed\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Pushed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pushed</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether a toggle-style toolbar button is currently in the pushed state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Pushed { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a toggle-style toolbar button is currently in the pushed state; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When Pushed is set to <code>true</code>, the toolbar button appears sunken or inset relative to the other buttons. This property has no effect unless the <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonstyle\" data-linktype=\"relative-path\">ToolBarButtonStyle</a> is set to <code>ToggleButton</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Pushed, and <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_PartialPush_\" data-linktype=\"relative-path\">PartialPush</a> properties. To run the example, paste the following code in a form containing a <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control called <code>RichTextBox1</code>. Call the <code>InitializeToolBar</code> method in the form&#39;s constructor or <code>Load</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">\t\n\t// Declare ToolBar1.\n\tinternal System.Windows.Forms.ToolBar ToolBar1;\n\n\t// Initialize ToolBar1 with Bold(B), Italic(I), and \n\t// Underline(U) buttons.\n\tprivate void InitializeToolBar()\n\t{\n\t\tToolBar1 = new ToolBar();\n\n\t\t// Set the appearance to Flat.\n\t\tToolBar1.Appearance = ToolBarAppearance.Flat;\n\n\t\t// Set the toolbar to dock at the bottom of the form.\n\t\tToolBar1.Dock = DockStyle.Bottom;\n\n\t\t// Set the toolbar font to 14 points and bold.\n\t\tToolBar1.Font = new Font(FontFamily.GenericSansSerif,\n\t\t\t14, FontStyle.Bold);\n\n\t\t// Declare fontstyle array with the three font styles.\n\t\tFontStyle[] fonts = new FontStyle[]{FontStyle.Bold, \n\t\t\tFontStyle.Italic, FontStyle.Underline};\n\t\t\n\t\tint count;\n\n\t\t// Create a button for each value in the array, setting its \n\t\t// text to the first letter of the style and its \n\t\t// button&#39;s tag property.\n\t\tfor(count=0; count&lt;fonts.Length; count++)\n\t\t{\n\t\t\tToolBarButton fontButton = \n\t\t\t\tnew ToolBarButton(fonts[count].ToString().Substring(0, 1));\n\t\t\tfontButton.Style = ToolBarButtonStyle.ToggleButton;\n\t\t\tfontButton.Tag = fonts[count];\n\t\t\tToolBar1.Buttons.Add(fontButton);\n\t\t}\n\t\tthis.ToolBar1.ButtonClick += \n\t\t\tnew ToolBarButtonClickEventHandler(ToolBar1_ButtonClick);\n\t\tthis.Controls.Add(this.ToolBar1);\n\t}\n\t\n\n\t// Declare FontStyle object, which defaults to the Regular\n\t// FontStyle.\n\tFontStyle style = new FontStyle();\n\n\tprivate void ToolBar1_ButtonClick(object sender, \n\t\tSystem.Windows.Forms.ToolBarButtonClickEventArgs e)\n\t{\n\n\t\t// If a button is pushed, use a bitwise Or combination \n\t\t// of the style variable and the button tag, to set style to \n\t\t// the correct FontStyle. Set the button&#39;s PartialPush \n\t\t// property to true for a Windows XP-like appearance.\n\t\tif (e.Button.Pushed)\n\t\t{\n\t\t\te.Button.PartialPush = true;\n\t\t\tstyle = style |(FontStyle) e.Button.Tag;\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// If the button was not pushed, use a bitwise XOR \n\t\t\t// combination to turn off that style \n\t\t\t// and set the PartialPush property to false.\n\t\t\te.Button.PartialPush = false;\n\t\t\tstyle = style ^ (FontStyle) e.Button.Tag;\n\t\t}\n\n\t\t// Set the font using the existing RichTextBox font and the new\n\t\t// style.\n\t\tRichTextBox1.Font = new Font(RichTextBox1.Font, style);\n\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">   // Declare ToolBar1.\ninternal:\n   System::Windows::Forms::ToolBar^ ToolBar1;\n\nprivate:\n\n   // Initialize ToolBar1 with Bold(B), Italic(I), and \n   // Underline(U) buttons.\n   void InitializeToolBar()\n   {\n      ToolBar1 = gcnew ToolBar;\n      \n      // Set the appearance to Flat.\n      ToolBar1-&gt;Appearance = ToolBarAppearance::Flat;\n      \n      // Set the toolbar to dock at the bottom of the form.\n      ToolBar1-&gt;Dock = DockStyle::Bottom;\n      \n      // Set the toolbar font to 14 points and bold.\n      ToolBar1-&gt;Font = gcnew System::Drawing::Font( FontFamily::GenericSansSerif,14,FontStyle::Bold );\n      \n      // Declare fontstyle array with the three font styles.\n      array&lt;FontStyle&gt;^ fonts = {FontStyle::Bold,FontStyle::Italic,FontStyle::Underline};\n      int count;\n      \n      // Create a button for each value in the array, setting its \n      // text to the first letter of the style and its \n      // button&#39;s tag property.\n      for ( count = 0; count &lt; fonts-&gt;Length; count++ )\n      {\n         ToolBarButton^ fontButton = gcnew ToolBarButton( fonts[ count ].ToString()-&gt;Substring( 0, 1 ) );\n         fontButton-&gt;Style = ToolBarButtonStyle::ToggleButton;\n         fontButton-&gt;Tag = fonts[ count ];\n         ToolBar1-&gt;Buttons-&gt;Add( fontButton );\n\n      }\n      this-&gt;ToolBar1-&gt;ButtonClick += gcnew ToolBarButtonClickEventHandler( this, &amp;Form1::ToolBar1_ButtonClick );\n      this-&gt;Controls-&gt;Add( this-&gt;ToolBar1 );\n   }\n\n   // Declare FontStyle object, which defaults to the Regular\n   // FontStyle.\n   FontStyle style;\n   void ToolBar1_ButtonClick( Object^ /*sender*/, System::Windows::Forms::ToolBarButtonClickEventArgs^ e )\n   {\n      // If a button is pushed, use a bitwise Or combination \n      // of the style variable and the button tag, to set style to \n      // the correct FontStyle. Set the button&#39;s PartialPush \n      // property to true for a Windows XP-like appearance.\n      if ( e-&gt;Button-&gt;Pushed )\n      {\n         e-&gt;Button-&gt;PartialPush = true;\n         style = (FontStyle)(style | safe_cast&lt;FontStyle&gt;(e-&gt;Button-&gt;Tag));\n      }\n      else\n      {\n         // If the button was not pushed, use a bitwise XOR \n         // combination to turn off that style \n         // and set the PartialPush property to false.\n         e-&gt;Button-&gt;PartialPush = false;\n         style = (FontStyle)(style ^ safe_cast&lt;FontStyle&gt;(e-&gt;Button-&gt;Tag));\n      }\n\n      // Set the font using the existing RichTextBox font and the new\n      // style.\n      RichTextBox1-&gt;Font = gcnew System::Drawing::Font( RichTextBox1-&gt;Font,style );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">\n    &#39; Declare ToolBar1.\n    Friend WithEvents ToolBar1 As System.Windows.Forms.ToolBar\n\n    &#39; Initialize ToolBar1 with Bold(B), Italic(I), and Underline(U) buttons.\n    Private Sub InitializeToolBar()\n        ToolBar1 = New ToolBar\n\n        &#39; Set the appearance to Flat.\n        ToolBar1.Appearance = ToolBarAppearance.Flat\n\n        &#39; Set the toolbar to dock at the bottom of the form.\n        ToolBar1.Dock = DockStyle.Bottom\n\n        &#39; Set the toolbar font to 14 points and bold.\n        ToolBar1.Font = New System.Drawing.Font _\n            (FontFamily.GenericSansSerif, 14, FontStyle.Bold)\n\n        &#39; Declare fontstyle array with the three font styles.\n        Dim fonts() As FontStyle = New FontStyle() _\n            {FontStyle.Bold, FontStyle.Italic, FontStyle.Underline}\n        Dim count As Integer\n\n        &#39; Create a button for each value in the array, setting its text to the\n        &#39; first letter of the style and its button&#39;s tag property.\n        For count = 0 To fonts.Length - 1\n            Dim fontButton As New ToolBarButton(fonts(count). _\n                ToString.Substring(0, 1))\n            fontButton.Style = ToolBarButtonStyle.ToggleButton\n            fontButton.Tag = fonts(count)\n            ToolBar1.Buttons.Add(fontButton)\n        Next\n        Me.Controls.Add(Me.ToolBar1)\n    End Sub\n\n\n    &#39; Declare FontStyle object, which defaults to the Regular FontStyle.\n    Dim style As New FontStyle\n\n    Private Sub ToolBar1_ButtonClick(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.ToolBarButtonClickEventArgs) _\n        Handles ToolBar1.ButtonClick\n\n        &#39; If a button is pushed, use a bitwise Or combination \n        &#39; of the style variable and the button tag, to set style to \n        &#39; the correct FontStyle. Set the button&#39;s PartialPush property to\n        &#39; true for a Windows XP-like appearance.\n        If (e.Button.Pushed) Then\n            e.Button.PartialPush = True\n            style = style Or e.Button.Tag\n\n        Else\n            &#39; If the button was not pushed, use a bitwise XOR \n            &#39; combination to turn off that style \n            &#39; and set the PartialPush property to False.\n            e.Button.PartialPush = False\n            style = style Xor e.Button.Tag\n        End If\n\n        &#39; Set the font using the existing RichTextBox font and the new\n        &#39; style.\n        RichTextBox1.Font = New Font(RichTextBox1.Font, style)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Rectangle\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Rectangle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rectangle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the bounding rectangle for a toolbar button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle Rectangle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>The bounding <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> for a toolbar button.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and the current button are both <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Visible_\" data-linktype=\"relative-path\">Visible</a>, then this property retrieves the bounding rectangle the button is currently contained in.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Style\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Style_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Style</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the style of the toolbar button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.ToolBarButtonStyle Style { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.toolbarbuttonstyle\" data-linktype=\"relative-path\">ToolBarButtonStyle</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonstyle\" data-linktype=\"relative-path\">ToolBarButtonStyle</a> values. The default is <code>ToolBarButtonStyle.PushButton</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is not one of the <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonstyle\" data-linktype=\"relative-path\">ToolBarButtonStyle</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the button Style is set to <a class=\"xref\" href=\"system.windows.forms.toolbarbuttonstyle\" data-linktype=\"relative-path\">ToolBarButtonStyle</a> you can specify a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a> to be displayed when the drop-down button is pressed. If the style is set to <code>ToolBarButtonStyle.Separator</code>, the toolbar button appears as a button separator and not as a button. The <code>ToolBarButtonStyle.ToggleButton</code> style causes the toolbar button to act like a toggle button; it can be in an on or off state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and three <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> controls, assigns the buttons to the toolbar, and sets some of the buttons&#39; common properties. This code requires that a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> and a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> have been created and the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> has at least one <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ToolBarButton.Style Example#1\">public:\n   void InitializeMyToolBar()\n   {\n      // Create the ToolBar, ToolBarButton controls, and menus.\n      ToolBarButton^ toolBarButton1 = gcnew ToolBarButton( &quot;Open&quot; );\n      ToolBarButton^ toolBarButton2 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton3 = gcnew ToolBarButton;\n      ToolBar^ toolBar1 = gcnew ToolBar;\n      MenuItem^ menuItem1 = gcnew MenuItem( &quot;Print&quot; );\n      array&lt;MenuItem^&gt;^ temp1 = {menuItem1};\n      System::Windows::Forms::ContextMenu^ contextMenu1 =\n         gcnew System::Windows::Forms::ContextMenu( temp1 );\n      \n      // Add the ToolBarButton controls to the ToolBar.\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton1 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton2 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton3 );\n      \n      // Assign an ImageList to the ToolBar and show ToolTips.\n      toolBar1-&gt;ImageList = imageList1;\n      toolBar1-&gt;ShowToolTips = true;\n      \n      /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n         Style properties of the ToolBarButton controls. */\n      toolBarButton2-&gt;Style = ToolBarButtonStyle::Separator;\n      toolBarButton3-&gt;Text = &quot;Print&quot;;\n      toolBarButton3-&gt;Style = ToolBarButtonStyle::DropDownButton;\n      toolBarButton3-&gt;ToolTipText = &quot;Print&quot;;\n      toolBarButton3-&gt;ImageIndex = 0;\n      toolBarButton3-&gt;DropDownMenu = contextMenu1;\n      \n      // Add the ToolBar to a form.\n      Controls-&gt;Add( toolBar1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ToolBarButton.Style Example#1\">public void InitializeMyToolBar()\n {\n    // Create the ToolBar, ToolBarButton controls, and menus.\n    ToolBarButton toolBarButton1 = new ToolBarButton(&quot;Open&quot;);\n    ToolBarButton toolBarButton2 = new ToolBarButton();\n    ToolBarButton toolBarButton3 = new ToolBarButton();\n    ToolBar toolBar1 = new ToolBar();\n    MenuItem menuItem1 = new MenuItem(&quot;Print&quot;);\n    ContextMenu contextMenu1 = new ContextMenu(new MenuItem[]{menuItem1});\n\n     \n    // Add the ToolBarButton controls to the ToolBar.\n    toolBar1.Buttons.Add(toolBarButton1);\n    toolBar1.Buttons.Add(toolBarButton2);\n    toolBar1.Buttons.Add(toolBarButton3);\n \n    // Assign an ImageList to the ToolBar and show ToolTips.\n    toolBar1.ImageList = imageList1;\n    toolBar1.ShowToolTips = true;\n \n    /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n       Style properties of the ToolBarButton controls. */\n    toolBarButton2.Style = ToolBarButtonStyle.Separator;\n    toolBarButton3.Text = &quot;Print&quot;;\n    toolBarButton3.Style = ToolBarButtonStyle.DropDownButton;\n    toolBarButton3.ToolTipText = &quot;Print&quot;;\n    toolBarButton3.ImageIndex = 0;\n    toolBarButton3.DropDownMenu = contextMenu1;\n \n    // Add the ToolBar to a form.\n    Controls.Add(toolBar1);\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ToolBarButton.Style Example#1\">    Public Sub InitializeMyToolBar()\n        &#39; Create the ToolBar, ToolBarButton controls, and menus.\n        Dim toolBarButton1 As New ToolBarButton(&quot;Open&quot;)\n        Dim toolBarButton2 As New ToolBarButton()\n        Dim toolBarButton3 As New ToolBarButton()\n        Dim toolBar1 As New ToolBar()\n\tDim menuItem1 As New MenuItem(&quot;Print&quot;)\n\tDim contextMenu1 As New ContextMenu(New MenuItem(){menuItem1})\n        \n        &#39; Add the ToolBarButton controls to the ToolBar.\n        toolBar1.Buttons.Add(toolBarButton1)\n        toolBar1.Buttons.Add(toolBarButton2)\n        toolBar1.Buttons.Add(toolBarButton3)\n        \n        &#39; Assign an ImageList to the ToolBar and show ToolTips.\n        toolBar1.ImageList = imageList1\n        toolBar1.ShowToolTips = True\n        \n        &#39; Assign ImageIndex, ContextMenu, Text, ToolTip, and\n        &#39; Style properties of the ToolBarButton controls. \n        toolBarButton2.Style = ToolBarButtonStyle.Separator\n        toolBarButton3.Text = &quot;Print&quot;\n        toolBarButton3.Style = ToolBarButtonStyle.DropDownButton\n        toolBarButton3.ToolTipText = &quot;Print&quot;\n        toolBarButton3.ImageIndex = 0\n        toolBarButton3.DropDownMenu = contextMenu1\n        \n        &#39; Add the ToolBar to a form.\n        Controls.Add(toolBar1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Tag\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Tag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tag</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the object that contains data about the toolbar button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Tag { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains data about the toolbar button. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieves or assigns the data currently associated with the toolbar button. Any <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Pushed_\" data-linktype=\"relative-path\">Pushed</a>, <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_PartialPush_\" data-linktype=\"relative-path\">PartialPush</a>, and Tag properties. To run the example, paste the following code in a form containing a <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control called <code>RichTextBox1</code>. Call the <code>InitializeToolBar</code> method in the form&#39;s constructor or <code>Load</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">\t\n\t// Declare ToolBar1.\n\tinternal System.Windows.Forms.ToolBar ToolBar1;\n\n\t// Initialize ToolBar1 with Bold(B), Italic(I), and \n\t// Underline(U) buttons.\n\tprivate void InitializeToolBar()\n\t{\n\t\tToolBar1 = new ToolBar();\n\n\t\t// Set the appearance to Flat.\n\t\tToolBar1.Appearance = ToolBarAppearance.Flat;\n\n\t\t// Set the toolbar to dock at the bottom of the form.\n\t\tToolBar1.Dock = DockStyle.Bottom;\n\n\t\t// Set the toolbar font to 14 points and bold.\n\t\tToolBar1.Font = new Font(FontFamily.GenericSansSerif,\n\t\t\t14, FontStyle.Bold);\n\n\t\t// Declare fontstyle array with the three font styles.\n\t\tFontStyle[] fonts = new FontStyle[]{FontStyle.Bold, \n\t\t\tFontStyle.Italic, FontStyle.Underline};\n\t\t\n\t\tint count;\n\n\t\t// Create a button for each value in the array, setting its \n\t\t// text to the first letter of the style and its \n\t\t// button&#39;s tag property.\n\t\tfor(count=0; count&lt;fonts.Length; count++)\n\t\t{\n\t\t\tToolBarButton fontButton = \n\t\t\t\tnew ToolBarButton(fonts[count].ToString().Substring(0, 1));\n\t\t\tfontButton.Style = ToolBarButtonStyle.ToggleButton;\n\t\t\tfontButton.Tag = fonts[count];\n\t\t\tToolBar1.Buttons.Add(fontButton);\n\t\t}\n\t\tthis.ToolBar1.ButtonClick += \n\t\t\tnew ToolBarButtonClickEventHandler(ToolBar1_ButtonClick);\n\t\tthis.Controls.Add(this.ToolBar1);\n\t}\n\t\n\n\t// Declare FontStyle object, which defaults to the Regular\n\t// FontStyle.\n\tFontStyle style = new FontStyle();\n\n\tprivate void ToolBar1_ButtonClick(object sender, \n\t\tSystem.Windows.Forms.ToolBarButtonClickEventArgs e)\n\t{\n\n\t\t// If a button is pushed, use a bitwise Or combination \n\t\t// of the style variable and the button tag, to set style to \n\t\t// the correct FontStyle. Set the button&#39;s PartialPush \n\t\t// property to true for a Windows XP-like appearance.\n\t\tif (e.Button.Pushed)\n\t\t{\n\t\t\te.Button.PartialPush = true;\n\t\t\tstyle = style |(FontStyle) e.Button.Tag;\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// If the button was not pushed, use a bitwise XOR \n\t\t\t// combination to turn off that style \n\t\t\t// and set the PartialPush property to false.\n\t\t\te.Button.PartialPush = false;\n\t\t\tstyle = style ^ (FontStyle) e.Button.Tag;\n\t\t}\n\n\t\t// Set the font using the existing RichTextBox font and the new\n\t\t// style.\n\t\tRichTextBox1.Font = new Font(RichTextBox1.Font, style);\n\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">   // Declare ToolBar1.\ninternal:\n   System::Windows::Forms::ToolBar^ ToolBar1;\n\nprivate:\n\n   // Initialize ToolBar1 with Bold(B), Italic(I), and \n   // Underline(U) buttons.\n   void InitializeToolBar()\n   {\n      ToolBar1 = gcnew ToolBar;\n      \n      // Set the appearance to Flat.\n      ToolBar1-&gt;Appearance = ToolBarAppearance::Flat;\n      \n      // Set the toolbar to dock at the bottom of the form.\n      ToolBar1-&gt;Dock = DockStyle::Bottom;\n      \n      // Set the toolbar font to 14 points and bold.\n      ToolBar1-&gt;Font = gcnew System::Drawing::Font( FontFamily::GenericSansSerif,14,FontStyle::Bold );\n      \n      // Declare fontstyle array with the three font styles.\n      array&lt;FontStyle&gt;^ fonts = {FontStyle::Bold,FontStyle::Italic,FontStyle::Underline};\n      int count;\n      \n      // Create a button for each value in the array, setting its \n      // text to the first letter of the style and its \n      // button&#39;s tag property.\n      for ( count = 0; count &lt; fonts-&gt;Length; count++ )\n      {\n         ToolBarButton^ fontButton = gcnew ToolBarButton( fonts[ count ].ToString()-&gt;Substring( 0, 1 ) );\n         fontButton-&gt;Style = ToolBarButtonStyle::ToggleButton;\n         fontButton-&gt;Tag = fonts[ count ];\n         ToolBar1-&gt;Buttons-&gt;Add( fontButton );\n\n      }\n      this-&gt;ToolBar1-&gt;ButtonClick += gcnew ToolBarButtonClickEventHandler( this, &amp;Form1::ToolBar1_ButtonClick );\n      this-&gt;Controls-&gt;Add( this-&gt;ToolBar1 );\n   }\n\n   // Declare FontStyle object, which defaults to the Regular\n   // FontStyle.\n   FontStyle style;\n   void ToolBar1_ButtonClick( Object^ /*sender*/, System::Windows::Forms::ToolBarButtonClickEventArgs^ e )\n   {\n      // If a button is pushed, use a bitwise Or combination \n      // of the style variable and the button tag, to set style to \n      // the correct FontStyle. Set the button&#39;s PartialPush \n      // property to true for a Windows XP-like appearance.\n      if ( e-&gt;Button-&gt;Pushed )\n      {\n         e-&gt;Button-&gt;PartialPush = true;\n         style = (FontStyle)(style | safe_cast&lt;FontStyle&gt;(e-&gt;Button-&gt;Tag));\n      }\n      else\n      {\n         // If the button was not pushed, use a bitwise XOR \n         // combination to turn off that style \n         // and set the PartialPush property to false.\n         e-&gt;Button-&gt;PartialPush = false;\n         style = (FontStyle)(style ^ safe_cast&lt;FontStyle&gt;(e-&gt;Button-&gt;Tag));\n      }\n\n      // Set the font using the existing RichTextBox font and the new\n      // style.\n      RichTextBox1-&gt;Font = gcnew System::Drawing::Font( RichTextBox1-&gt;Font,style );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolBarButtonExample#1\">\n    &#39; Declare ToolBar1.\n    Friend WithEvents ToolBar1 As System.Windows.Forms.ToolBar\n\n    &#39; Initialize ToolBar1 with Bold(B), Italic(I), and Underline(U) buttons.\n    Private Sub InitializeToolBar()\n        ToolBar1 = New ToolBar\n\n        &#39; Set the appearance to Flat.\n        ToolBar1.Appearance = ToolBarAppearance.Flat\n\n        &#39; Set the toolbar to dock at the bottom of the form.\n        ToolBar1.Dock = DockStyle.Bottom\n\n        &#39; Set the toolbar font to 14 points and bold.\n        ToolBar1.Font = New System.Drawing.Font _\n            (FontFamily.GenericSansSerif, 14, FontStyle.Bold)\n\n        &#39; Declare fontstyle array with the three font styles.\n        Dim fonts() As FontStyle = New FontStyle() _\n            {FontStyle.Bold, FontStyle.Italic, FontStyle.Underline}\n        Dim count As Integer\n\n        &#39; Create a button for each value in the array, setting its text to the\n        &#39; first letter of the style and its button&#39;s tag property.\n        For count = 0 To fonts.Length - 1\n            Dim fontButton As New ToolBarButton(fonts(count). _\n                ToString.Substring(0, 1))\n            fontButton.Style = ToolBarButtonStyle.ToggleButton\n            fontButton.Tag = fonts(count)\n            ToolBar1.Buttons.Add(fontButton)\n        Next\n        Me.Controls.Add(Me.ToolBar1)\n    End Sub\n\n\n    &#39; Declare FontStyle object, which defaults to the Regular FontStyle.\n    Dim style As New FontStyle\n\n    Private Sub ToolBar1_ButtonClick(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.ToolBarButtonClickEventArgs) _\n        Handles ToolBar1.ButtonClick\n\n        &#39; If a button is pushed, use a bitwise Or combination \n        &#39; of the style variable and the button tag, to set style to \n        &#39; the correct FontStyle. Set the button&#39;s PartialPush property to\n        &#39; true for a Windows XP-like appearance.\n        If (e.Button.Pushed) Then\n            e.Button.PartialPush = True\n            style = style Or e.Button.Tag\n\n        Else\n            &#39; If the button was not pushed, use a bitwise XOR \n            &#39; combination to turn off that style \n            &#39; and set the PartialPush property to False.\n            e.Button.PartialPush = False\n            style = style Xor e.Button.Tag\n        End If\n\n        &#39; Set the font using the existing RichTextBox font and the new\n        &#39; style.\n        RichTextBox1.Font = New Font(RichTextBox1.Font, style)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Text\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Text_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Text</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text displayed on the toolbar button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Text { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text displayed on the toolbar button. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default the Text property value is an empty string (&quot;&quot;) unless you created the control with the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar__ctor_\" data-linktype=\"relative-path\">ToolBar</a> constructor that accepts the text string as a parameter. The orientation of the text on the toolbar button is determined by the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_TextAlign_\" data-linktype=\"relative-path\">TextAlign</a> property of the button&#39;s parent <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a>, which can be set to one of the <a class=\"xref\" href=\"system.windows.forms.toolbartextalign\" data-linktype=\"relative-path\">ToolBarTextAlign</a> enumeration values. The orientation is in relation to the image assigned to the button. If no image is assigned to the button, there will be space left for one on the surface of the toolbar button.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and three <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> controls, assigns the buttons to the toolbar, and sets some of the buttons&#39; common properties. This code requires that a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> and a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> have been created and the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> has at least one <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ToolBarButton.Style Example#1\">public:\n   void InitializeMyToolBar()\n   {\n      // Create the ToolBar, ToolBarButton controls, and menus.\n      ToolBarButton^ toolBarButton1 = gcnew ToolBarButton( &quot;Open&quot; );\n      ToolBarButton^ toolBarButton2 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton3 = gcnew ToolBarButton;\n      ToolBar^ toolBar1 = gcnew ToolBar;\n      MenuItem^ menuItem1 = gcnew MenuItem( &quot;Print&quot; );\n      array&lt;MenuItem^&gt;^ temp1 = {menuItem1};\n      System::Windows::Forms::ContextMenu^ contextMenu1 =\n         gcnew System::Windows::Forms::ContextMenu( temp1 );\n      \n      // Add the ToolBarButton controls to the ToolBar.\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton1 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton2 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton3 );\n      \n      // Assign an ImageList to the ToolBar and show ToolTips.\n      toolBar1-&gt;ImageList = imageList1;\n      toolBar1-&gt;ShowToolTips = true;\n      \n      /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n         Style properties of the ToolBarButton controls. */\n      toolBarButton2-&gt;Style = ToolBarButtonStyle::Separator;\n      toolBarButton3-&gt;Text = &quot;Print&quot;;\n      toolBarButton3-&gt;Style = ToolBarButtonStyle::DropDownButton;\n      toolBarButton3-&gt;ToolTipText = &quot;Print&quot;;\n      toolBarButton3-&gt;ImageIndex = 0;\n      toolBarButton3-&gt;DropDownMenu = contextMenu1;\n      \n      // Add the ToolBar to a form.\n      Controls-&gt;Add( toolBar1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ToolBarButton.Style Example#1\">public void InitializeMyToolBar()\n {\n    // Create the ToolBar, ToolBarButton controls, and menus.\n    ToolBarButton toolBarButton1 = new ToolBarButton(&quot;Open&quot;);\n    ToolBarButton toolBarButton2 = new ToolBarButton();\n    ToolBarButton toolBarButton3 = new ToolBarButton();\n    ToolBar toolBar1 = new ToolBar();\n    MenuItem menuItem1 = new MenuItem(&quot;Print&quot;);\n    ContextMenu contextMenu1 = new ContextMenu(new MenuItem[]{menuItem1});\n\n     \n    // Add the ToolBarButton controls to the ToolBar.\n    toolBar1.Buttons.Add(toolBarButton1);\n    toolBar1.Buttons.Add(toolBarButton2);\n    toolBar1.Buttons.Add(toolBarButton3);\n \n    // Assign an ImageList to the ToolBar and show ToolTips.\n    toolBar1.ImageList = imageList1;\n    toolBar1.ShowToolTips = true;\n \n    /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n       Style properties of the ToolBarButton controls. */\n    toolBarButton2.Style = ToolBarButtonStyle.Separator;\n    toolBarButton3.Text = &quot;Print&quot;;\n    toolBarButton3.Style = ToolBarButtonStyle.DropDownButton;\n    toolBarButton3.ToolTipText = &quot;Print&quot;;\n    toolBarButton3.ImageIndex = 0;\n    toolBarButton3.DropDownMenu = contextMenu1;\n \n    // Add the ToolBar to a form.\n    Controls.Add(toolBar1);\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ToolBarButton.Style Example#1\">    Public Sub InitializeMyToolBar()\n        &#39; Create the ToolBar, ToolBarButton controls, and menus.\n        Dim toolBarButton1 As New ToolBarButton(&quot;Open&quot;)\n        Dim toolBarButton2 As New ToolBarButton()\n        Dim toolBarButton3 As New ToolBarButton()\n        Dim toolBar1 As New ToolBar()\n\tDim menuItem1 As New MenuItem(&quot;Print&quot;)\n\tDim contextMenu1 As New ContextMenu(New MenuItem(){menuItem1})\n        \n        &#39; Add the ToolBarButton controls to the ToolBar.\n        toolBar1.Buttons.Add(toolBarButton1)\n        toolBar1.Buttons.Add(toolBarButton2)\n        toolBar1.Buttons.Add(toolBarButton3)\n        \n        &#39; Assign an ImageList to the ToolBar and show ToolTips.\n        toolBar1.ImageList = imageList1\n        toolBar1.ShowToolTips = True\n        \n        &#39; Assign ImageIndex, ContextMenu, Text, ToolTip, and\n        &#39; Style properties of the ToolBarButton controls. \n        toolBarButton2.Style = ToolBarButtonStyle.Separator\n        toolBarButton3.Text = &quot;Print&quot;\n        toolBarButton3.Style = ToolBarButtonStyle.DropDownButton\n        toolBarButton3.ToolTipText = &quot;Print&quot;\n        toolBarButton3.ImageIndex = 0\n        toolBarButton3.DropDownMenu = contextMenu1\n        \n        &#39; Add the ToolBar to a form.\n        Controls.Add(toolBar1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_ToolTipText\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_ToolTipText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToolTipText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text that appears as a ToolTip for the button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToolTipText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text that is displayed when the mouse pointer moves over the toolbar button. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To enable the display of the ToolTip text when the mouse pointer is moved over the button, set the <a class=\"xref\" href=\"system.windows.forms.toolbar#System_Windows_Forms_ToolBar_ShowToolTips_\" data-linktype=\"relative-path\">ShowToolTips</a> property of the button&#39;s parent <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> and three <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> controls, assigns the buttons to the toolbar, and sets some of the buttons&#39; common properties. This code requires that a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> and a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> have been created and the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> has at least one <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> assigned to it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ToolBarButton.Style Example#1\">public:\n   void InitializeMyToolBar()\n   {\n      // Create the ToolBar, ToolBarButton controls, and menus.\n      ToolBarButton^ toolBarButton1 = gcnew ToolBarButton( &quot;Open&quot; );\n      ToolBarButton^ toolBarButton2 = gcnew ToolBarButton;\n      ToolBarButton^ toolBarButton3 = gcnew ToolBarButton;\n      ToolBar^ toolBar1 = gcnew ToolBar;\n      MenuItem^ menuItem1 = gcnew MenuItem( &quot;Print&quot; );\n      array&lt;MenuItem^&gt;^ temp1 = {menuItem1};\n      System::Windows::Forms::ContextMenu^ contextMenu1 =\n         gcnew System::Windows::Forms::ContextMenu( temp1 );\n      \n      // Add the ToolBarButton controls to the ToolBar.\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton1 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton2 );\n      toolBar1-&gt;Buttons-&gt;Add( toolBarButton3 );\n      \n      // Assign an ImageList to the ToolBar and show ToolTips.\n      toolBar1-&gt;ImageList = imageList1;\n      toolBar1-&gt;ShowToolTips = true;\n      \n      /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n         Style properties of the ToolBarButton controls. */\n      toolBarButton2-&gt;Style = ToolBarButtonStyle::Separator;\n      toolBarButton3-&gt;Text = &quot;Print&quot;;\n      toolBarButton3-&gt;Style = ToolBarButtonStyle::DropDownButton;\n      toolBarButton3-&gt;ToolTipText = &quot;Print&quot;;\n      toolBarButton3-&gt;ImageIndex = 0;\n      toolBarButton3-&gt;DropDownMenu = contextMenu1;\n      \n      // Add the ToolBar to a form.\n      Controls-&gt;Add( toolBar1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ToolBarButton.Style Example#1\">public void InitializeMyToolBar()\n {\n    // Create the ToolBar, ToolBarButton controls, and menus.\n    ToolBarButton toolBarButton1 = new ToolBarButton(&quot;Open&quot;);\n    ToolBarButton toolBarButton2 = new ToolBarButton();\n    ToolBarButton toolBarButton3 = new ToolBarButton();\n    ToolBar toolBar1 = new ToolBar();\n    MenuItem menuItem1 = new MenuItem(&quot;Print&quot;);\n    ContextMenu contextMenu1 = new ContextMenu(new MenuItem[]{menuItem1});\n\n     \n    // Add the ToolBarButton controls to the ToolBar.\n    toolBar1.Buttons.Add(toolBarButton1);\n    toolBar1.Buttons.Add(toolBarButton2);\n    toolBar1.Buttons.Add(toolBarButton3);\n \n    // Assign an ImageList to the ToolBar and show ToolTips.\n    toolBar1.ImageList = imageList1;\n    toolBar1.ShowToolTips = true;\n \n    /* Assign ImageIndex, ContextMenu, Text, ToolTip, and \n       Style properties of the ToolBarButton controls. */\n    toolBarButton2.Style = ToolBarButtonStyle.Separator;\n    toolBarButton3.Text = &quot;Print&quot;;\n    toolBarButton3.Style = ToolBarButtonStyle.DropDownButton;\n    toolBarButton3.ToolTipText = &quot;Print&quot;;\n    toolBarButton3.ImageIndex = 0;\n    toolBarButton3.DropDownMenu = contextMenu1;\n \n    // Add the ToolBar to a form.\n    Controls.Add(toolBar1);\n }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ToolBarButton.Style Example#1\">    Public Sub InitializeMyToolBar()\n        &#39; Create the ToolBar, ToolBarButton controls, and menus.\n        Dim toolBarButton1 As New ToolBarButton(&quot;Open&quot;)\n        Dim toolBarButton2 As New ToolBarButton()\n        Dim toolBarButton3 As New ToolBarButton()\n        Dim toolBar1 As New ToolBar()\n\tDim menuItem1 As New MenuItem(&quot;Print&quot;)\n\tDim contextMenu1 As New ContextMenu(New MenuItem(){menuItem1})\n        \n        &#39; Add the ToolBarButton controls to the ToolBar.\n        toolBar1.Buttons.Add(toolBarButton1)\n        toolBar1.Buttons.Add(toolBarButton2)\n        toolBar1.Buttons.Add(toolBarButton3)\n        \n        &#39; Assign an ImageList to the ToolBar and show ToolTips.\n        toolBar1.ImageList = imageList1\n        toolBar1.ShowToolTips = True\n        \n        &#39; Assign ImageIndex, ContextMenu, Text, ToolTip, and\n        &#39; Style properties of the ToolBarButton controls. \n        toolBarButton2.Style = ToolBarButtonStyle.Separator\n        toolBarButton3.Text = &quot;Print&quot;\n        toolBarButton3.Style = ToolBarButtonStyle.DropDownButton\n        toolBarButton3.ToolTipText = &quot;Print&quot;\n        toolBarButton3.ImageIndex = 0\n        toolBarButton3.DropDownMenu = contextMenu1\n        \n        &#39; Add the ToolBar to a form.\n        Controls.Add(toolBar1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Visible\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Visible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Visible</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the toolbar button is visible.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Visible { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the toolbar button is visible; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the toolbar button is not visible, it will not be displayed on the toolbar, and therefore cannot receive user input.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose</code> method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <code>Dispose</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is true, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> references. This method invokes the <code>Dispose</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ToolBarButton_ToString\">\r\n    \r\n            <a id=\"System_Windows_Forms_ToolBarButton_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method returns a string that includes the type and the value of the <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Style_\" data-linktype=\"relative-path\">Style</a> and <a class=\"xref\" href=\"system.windows.forms.toolbarbutton#System_Windows_Forms_ToolBarButton_Text_\" data-linktype=\"relative-path\">Text</a> properties.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.ToolBarButton.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.ToolBarButton.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.DropDownMenu\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Enabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.ImageIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.ImageKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Name\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Parent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.PartialPush\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Pushed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Rectangle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Style\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Tag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Text\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.ToolTipText\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.ToString\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ToolBarButton.Visible\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2c799d1d-def2-e896-99d4-7be0f44b4a4f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a Windows toolbar button. Although  replaces and extends the ToolBarButton control of previous versions, ToolBarButton is retained for both backward compatibility and future use if you cho…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.ToolBarButton\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.ToolBarButton.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.ToolBarButton.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.ToolBarButton","System.Windows.Forms.ToolBarButton..ctor","System.Windows.Forms.ToolBarButton.Dispose","System.Windows.Forms.ToolBarButton.DropDownMenu","System.Windows.Forms.ToolBarButton.Enabled","System.Windows.Forms.ToolBarButton.ImageIndex","System.Windows.Forms.ToolBarButton.ImageKey","System.Windows.Forms.ToolBarButton.Name","System.Windows.Forms.ToolBarButton.Parent","System.Windows.Forms.ToolBarButton.PartialPush","System.Windows.Forms.ToolBarButton.Pushed","System.Windows.Forms.ToolBarButton.Rectangle","System.Windows.Forms.ToolBarButton.Style","System.Windows.Forms.ToolBarButton.Tag","System.Windows.Forms.ToolBarButton.Text","System.Windows.Forms.ToolBarButton.ToolTipText","System.Windows.Forms.ToolBarButton.ToString","System.Windows.Forms.ToolBarButton.Visible"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.ToolBarButton","System::Windows::Forms::ToolBarButton","System.Windows.Forms.ToolBarButton.#ctor","System::Windows::Forms::ToolBarButton::#ctor","System.Windows.Forms.ToolBarButton.Dispose","System::Windows::Forms::ToolBarButton::Dispose","System.Windows.Forms.ToolBarButton.DropDownMenu","System::Windows::Forms::ToolBarButton::DropDownMenu","System.Windows.Forms.ToolBarButton.Enabled","System::Windows::Forms::ToolBarButton::Enabled","System.Windows.Forms.ToolBarButton.ImageIndex","System::Windows::Forms::ToolBarButton::ImageIndex","System.Windows.Forms.ToolBarButton.ImageKey","System::Windows::Forms::ToolBarButton::ImageKey","System.Windows.Forms.ToolBarButton.Name","System::Windows::Forms::ToolBarButton::Name","System.Windows.Forms.ToolBarButton.Parent","System::Windows::Forms::ToolBarButton::Parent","System.Windows.Forms.ToolBarButton.PartialPush","System::Windows::Forms::ToolBarButton::PartialPush","System.Windows.Forms.ToolBarButton.Pushed","System::Windows::Forms::ToolBarButton::Pushed","System.Windows.Forms.ToolBarButton.Rectangle","System::Windows::Forms::ToolBarButton::Rectangle","System.Windows.Forms.ToolBarButton.Style","System::Windows::Forms::ToolBarButton::Style","System.Windows.Forms.ToolBarButton.Tag","System::Windows::Forms::ToolBarButton::Tag","System.Windows.Forms.ToolBarButton.Text","System::Windows::Forms::ToolBarButton::Text","System.Windows.Forms.ToolBarButton.ToolTipText","System::Windows::Forms::ToolBarButton::ToolTipText","System.Windows.Forms.ToolBarButton.ToString","System::Windows::Forms::ToolBarButton::ToString","System.Windows.Forms.ToolBarButton.Visible","System::Windows::Forms::ToolBarButton::Visible"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2c799d1d-def2-e896-99d4-7be0f44b4a4f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/ToolBarButton.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ToolBarButton class | Microsoft Docs","_op_ogTitle":"ToolBarButton class","description":"Represents a Windows toolbar button. Although  replaces and extends the ToolBarButton control of previous versions, ToolBarButton is retained for both backward compatibility and future use if you cho…","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.ToolBarButton","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.toolbarbutton","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.toolbarbutton","fileRelativePath":"System.Windows.Forms.ToolBarButton.html"},"themesRelativePathToOutputRoot":"_themes/"}