{"content":"    \r\n    <h1 id=\"System_Threading_Timer\">\r\n      <span class=\"lang-csharp\">Timer</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class Timer : MarshalByRefObject, IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Timer</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Use a <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate to specify the method you want the Timer to execute. The signature of the <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate is:  </p>\n<pre><code class=\"lang-c#\">void TimerCallback(Object state)  \n</code></pre><pre><code class=\"lang-cpp\">void TimerCallback(Object state)  \n</code></pre><pre><code class=\"lang-vb\">Sub TimerCallback(state As Object)  \n</code></pre><p> The timer delegate is specified when the timer is constructed, and cannot be changed. The method does not execute on the thread that created the timer; it executes on a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread supplied by the system.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> The .NET Framework Class Library includes four classes named <code>Timer</code>, each of which offers different functionality:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">System.Timers.Timer</a>, which fires an event and executes the code in one or more event sinks at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  <ul>\n<li>Timer, which executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">System.Timers.Timer</a> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  </li>\n<li><a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">System.Windows.Forms.Timer</a>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals. The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.  </li>\n<li><a class=\"xref\" href=\"system.web.ui.timer\" data-linktype=\"relative-path\">System.Web.UI.Timer</a>, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.  </li>\n</ul>\n</li>\n</ul>\n</div>\n<p> When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period). The Timer class has the same resolution as the system clock. This means that if the period is less than the resolution of the system clock, the <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems. You can change the due time and period, or disable the timer, by using the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> As long as you are using a Timer, you must keep a reference to it. As with any managed object, a Timer is subject to garbage collection when there are no references to it. The fact that a Timer is still active does not prevent it from being collected.  </p>\n</div>\n<p> When a timer is no longer needed, use the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method to free the resources held by the timer. Note that callbacks can occur after the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Dispose\" data-linktype=\"relative-path\">Dispose()</a> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Dispose_System_Threading_WaitHandle_\" data-linktype=\"relative-path\">Dispose(WaitHandle)</a> method overload to wait until all callbacks have completed.  </p>\n<p> The callback method executed by the timer should be reentrant, because it is called on <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> threads. The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Timer is a simple, lightweight timer that uses callback methods and is served by thread pool threads. It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread. <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">System.Windows.Forms.Timer</a> is a better choice for use with Windows Forms. For server-based timer functionality, you might consider using <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">System.Timers.Timer</a>, which raises events and has additional features.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer__ctor_System_Threading_TimerCallback_\" data-linktype=\"self-bookmark\">Timer(TimerCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> class with an infinite period and an infinite due time, using the newly created <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> object as the state object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer__ctor_System_Threading_TimerCallback_System_Object_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Timer(TimerCallback,Object,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>Timer</code> class, using a 32-bit signed integer to specify the time interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer__ctor_System_Threading_TimerCallback_System_Object_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">Timer(TimerCallback,Object,Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>Timer</code> class, using 64-bit signed integers to measure time intervals.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer__ctor_System_Threading_TimerCallback_System_Object_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">Timer(TimerCallback,Object,TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>Timer</code> class, using <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values to measure time intervals.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer__ctor_System_Threading_TimerCallback_System_Object_System_UInt32_System_UInt32_\" data-linktype=\"self-bookmark\">Timer(TimerCallback,Object,UInt32,UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>Timer</code> class, using 32-bit unsigned integers to measure time intervals.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer_Change_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Change(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer_Change_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">Change(Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer_Change_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">Change(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the start time and the interval between method invocations for a timer, using <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values to measure time intervals.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer_Change_System_UInt32_System_UInt32_\" data-linktype=\"self-bookmark\">Change(UInt32,UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Timer_Dispose_System_Threading_WaitHandle_\" data-linktype=\"self-bookmark\">Dispose(WaitHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> and signals when the timer has been disposed of.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer__ctor_System_Threading_TimerCallback_\">\r\n    \r\n            <a id=\"System_Threading_Timer__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timer(TimerCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> class with an infinite period and an infinite due time, using the newly created <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> object as the state object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Timer (System.Threading.TimerCallback callback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate representing a method to be executed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this constructor when you want to use the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> object itself as the state object. After creating the timer, use the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method to set the interval and due time.  </p>\n<p> This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> object is assigned to the state object.  </p>\n<p> The method specified for <code>callback</code> should be reentrant, because it is called on <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new timer, using the timer itself as the state object. The <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method is used to start the timer. When the timer callback occurs, the state object is used to turn the timer off.  </p>\n<pre><code class=\"lang-vb\" name=\"TimerSelfCtor#1\">Imports System\nImports System.Threading\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create an instance of the Example class, and start two\n        &#39; timers.\n        Dim ex As New Example()\n        ex.StartTimer(2000)\n        ex.StartTimer(1000)\n\n        Console.WriteLine(&quot;Press Enter to end the program.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Public Sub StartTimer(ByVal dueTime As Integer)\n        Dim t As New Timer(AddressOf TimerProc)\n        t.Change(dueTime, 0)\n    End Sub\n\n    Private Sub TimerProc(ByVal state As Object)\n        &#39; The state object is the Timer object.\n        Dim t As Timer = CType(state, Timer)\n        t.Dispose()\n        Console.WriteLine(&quot;The timer callback executes.&quot;)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"TimerSelfCtor#1\">using System;\nusing System.Threading;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create an instance of the Example class, and start two\n        // timers.\n        Example ex = new Example();\n        ex.StartTimer(2000);\n        ex.StartTimer(1000);\n\n        Console.WriteLine(&quot;Press Enter to end the program.&quot;);\n        Console.ReadLine();\n    }\n\n    public void StartTimer(int dueTime)\n    {\n        Timer t = new Timer(new TimerCallback(TimerProc));\n        t.Change(dueTime, 0);\n    }\n\n    private void TimerProc(object state)\n    {\n        // The state object is the Timer object.\n        Timer t = (Timer) state;\n        t.Dispose();\n        Console.WriteLine(&quot;The timer callback executes.&quot;);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer__ctor_System_Threading_TimerCallback_System_Object_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Timer__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timer(TimerCallback,Object,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>Timer</code> class, using a 32-bit signed integer to specify the time interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate representing a method to be executed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object containing information to be used by the callback method, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dueTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>period</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval between invocations of <code>callback</code>, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to disable periodic signaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>callback</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delegate specified by the <code>callback</code> parameter is invoked once after <code>dueTime</code> elapses, and thereafter each time the <code>period</code> time interval elapses.  </p>\n<p> If <code>dueTime</code> is zero (0), <code>callback</code> is invoked immediately. If <code>dueTime</code> is <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, <code>callback</code> is not invoked; the timer is disabled, but can be re-enabled by calling the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<p> Because the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <code>callback</code> delegate executes at intervals defined by the resolution of the system clock if <code>period</code> is less than the resolution of the system clock. If <code>period</code> is zero (0) or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a> and <code>dueTime</code> is not <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, <code>callback</code> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<p> The method specified for <code>callback</code> should be reentrant, because it is called on <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a <code>TimerCallback</code> delegate and initialize a new instance of the <code>Timer</code> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.Timer#1\">using namespace System;\nusing namespace System::Threading;\n\nref class StatusChecker\n{\nprivate:\n    int invokeCount, maxCount;\n\npublic:\n    StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    void CheckStatus(Object^ stateInfo)\n    {\n        AutoResetEvent^ autoEvent = dynamic_cast&lt;AutoResetEvent^&gt;(stateInfo);\n        Console::WriteLine(&quot;{0:h:mm:ss.fff} Checking status {1,2}.&quot;,\n                           DateTime::Now, ++invokeCount);\n\n        if (invokeCount == maxCount) {\n            // Reset the counter and signal the waiting thread.\n            invokeCount  = 0;\n            autoEvent-&gt;Set();\n        }\n    }\n};\n\nref class TimerExample\n{\npublic:\n    static void Main()\n    {\n        // Create an AutoResetEvent to signal the timeout threshold in the\n        // timer callback has been reached.\n        AutoResetEvent^ autoEvent = gcnew AutoResetEvent(false);\n\n        StatusChecker^ statusChecker = gcnew StatusChecker(10);\n\n        // Create a delegate that invokes methods for the timer.\n        TimerCallback^ tcb =\n           gcnew TimerCallback(statusChecker, &amp;StatusChecker::CheckStatus);\n\n        // Create a timer that invokes CheckStatus after one second, \n        // and every 1/4 second thereafter.\n        Console::WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.<br>&quot;,\n                           DateTime::Now);\n        Timer^ stateTimer = gcnew Timer(tcb, autoEvent, 1000, 250);\n\n        // When autoEvent signals, change the period to every half second.\n        autoEvent-&gt;WaitOne(5000, false);\n        stateTimer-&gt;Change(0, 500);\n        Console::WriteLine(&quot;<br>Changing period to .5 seconds.<br>&quot;);\n\n        // When autoEvent signals the second time, dispose of the timer.\n        autoEvent-&gt;WaitOne(5000, false);\n        stateTimer-&gt;~Timer();\n        Console::WriteLine(&quot;<br>Destroying timer.&quot;);\n    }\n};\n\nint main()\n{\n    TimerExample::Main();\n}\n// The example displays output like the following:\n//       11:59:54.202 Creating timer.\n//       \n//       11:59:55.217 Checking status  1.\n//       11:59:55.466 Checking status  2.\n//       11:59:55.716 Checking status  3.\n//       11:59:55.968 Checking status  4.\n//       11:59:56.218 Checking status  5.\n//       11:59:56.470 Checking status  6.\n//       11:59:56.722 Checking status  7.\n//       11:59:56.972 Checking status  8.\n//       11:59:57.223 Checking status  9.\n//       11:59:57.473 Checking status 10.\n//       \n//       Changing period to .5 seconds.\n//       \n//       11:59:57.474 Checking status  1.\n//       11:59:57.976 Checking status  2.\n//       11:59:58.476 Checking status  3.\n//       11:59:58.977 Checking status  4.\n//       11:59:59.477 Checking status  5.\n//       11:59:59.977 Checking status  6.\n//       12:00:00.478 Checking status  7.\n//       12:00:00.980 Checking status  8.\n//       12:00:01.481 Checking status  9.\n//       12:00:01.981 Checking status 10.\n//       \n//       Destroying timer.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Timer#1\">using System;\nusing System.Threading;\n\nclass TimerExample\n{\n    static void Main()\n    {\n        // Create an AutoResetEvent to signal the timeout threshold in the\n        // timer callback has been reached.\n        var autoEvent = new AutoResetEvent(false);\n        \n        var statusChecker = new StatusChecker(10);\n\n        // Create a timer that invokes CheckStatus after one second, \n        // and every 1/4 second thereafter.\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.<br>&quot;, \n                          DateTime.Now);\n        var stateTimer = new Timer(statusChecker.CheckStatus, \n                                   autoEvent, 1000, 250);\n\n        // When autoEvent signals, change the period to every half second.\n        autoEvent.WaitOne();\n        stateTimer.Change(0, 500);\n        Console.WriteLine(&quot;<br>Changing period to .5 seconds.<br>&quot;);\n\n        // When autoEvent signals the second time, dispose of the timer.\n        autoEvent.WaitOne();\n        stateTimer.Dispose();\n        Console.WriteLine(&quot;<br>Destroying timer.&quot;);\n    }\n}\n\nclass StatusChecker\n{\n    private int invokeCount;\n    private int  maxCount;\n\n    public StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    public void CheckStatus(Object stateInfo)\n    {\n        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;\n        Console.WriteLine(&quot;{0} Checking status {1,2}.&quot;, \n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;), \n            (++invokeCount).ToString());\n\n        if(invokeCount == maxCount)\n        {\n            // Reset the counter and signal the waiting thread.\n            invokeCount = 0;\n            autoEvent.Set();\n        }\n    }\n}\n// The example displays output like the following:\n//       11:59:54.202 Creating timer.\n//       \n//       11:59:55.217 Checking status  1.\n//       11:59:55.466 Checking status  2.\n//       11:59:55.716 Checking status  3.\n//       11:59:55.968 Checking status  4.\n//       11:59:56.218 Checking status  5.\n//       11:59:56.470 Checking status  6.\n//       11:59:56.722 Checking status  7.\n//       11:59:56.972 Checking status  8.\n//       11:59:57.223 Checking status  9.\n//       11:59:57.473 Checking status 10.\n//       \n//       Changing period to .5 seconds.\n//       \n//       11:59:57.474 Checking status  1.\n//       11:59:57.976 Checking status  2.\n//       11:59:58.476 Checking status  3.\n//       11:59:58.977 Checking status  4.\n//       11:59:59.477 Checking status  5.\n//       11:59:59.977 Checking status  6.\n//       12:00:00.478 Checking status  7.\n//       12:00:00.980 Checking status  8.\n//       12:00:01.481 Checking status  9.\n//       12:00:01.981 Checking status 10.\n//       \n//       Destroying timer.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Timer#1\">Imports System.Threading\n\nPublic Module Example\n    Public Sub Main()\n        &#39; Use an AutoResetEvent to signal the timeout threshold in the\n        &#39; timer callback has been reached.\n        Dim autoEvent As New AutoResetEvent(False)\n\n        Dim statusChecker As New StatusChecker(10)\n\n        &#39; Create a timer that invokes CheckStatus after one second, \n        &#39; and every 1/4 second thereafter.\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.&quot; &amp; vbCrLf, \n                          DateTime.Now)\n        Dim stateTimer As New Timer(AddressOf statusChecker.CheckStatus, \n                                    autoEvent, 1000, 250)\n\n        &#39; When autoEvent signals, change the period to every half second.\n        autoEvent.WaitOne()\n        stateTimer.Change(0, 500)\n        Console.WriteLine(vbCrLf &amp; &quot;Changing period to .5 seconds.&quot; &amp; vbCrLf)\n\n        &#39; When autoEvent signals the second time, dispose of the timer.\n        autoEvent.WaitOne()\n        stateTimer.Dispose()\n        Console.WriteLine(vbCrLf &amp; &quot;Destroying timer.&quot;)\n    End Sub\nEnd Module\n\nPublic Class StatusChecker\n    Dim invokeCount, maxCount As Integer \n\n    Sub New(count As Integer)\n        invokeCount  = 0\n        maxCount = count\n    End Sub\n\n    &#39; The timer callback method.\n    Sub CheckStatus(stateInfo As Object)\n        Dim autoEvent As AutoResetEvent = DirectCast(stateInfo, AutoResetEvent)\n        invokeCount += 1\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Checking status {1,2}.&quot;, \n                          DateTime.Now, invokeCount)\n        If invokeCount = maxCount Then\n            &#39; Reset the counter and signal the waiting thread.\n            invokeCount = 0\n            autoEvent.Set()\n        End If\n    End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39;       11:59:54.202 Creating timer.\n&#39;       \n&#39;       11:59:55.217 Checking status  1.\n&#39;       11:59:55.466 Checking status  2.\n&#39;       11:59:55.716 Checking status  3.\n&#39;       11:59:55.968 Checking status  4.\n&#39;       11:59:56.218 Checking status  5.\n&#39;       11:59:56.470 Checking status  6.\n&#39;       11:59:56.722 Checking status  7.\n&#39;       11:59:56.972 Checking status  8.\n&#39;       11:59:57.223 Checking status  9.\n&#39;       11:59:57.473 Checking status 10.\n&#39;       \n&#39;       Changing period to .5 seconds.\n&#39;       \n&#39;       11:59:57.474 Checking status  1.\n&#39;       11:59:57.976 Checking status  2.\n&#39;       11:59:58.476 Checking status  3.\n&#39;       11:59:58.977 Checking status  4.\n&#39;       11:59:59.477 Checking status  5.\n&#39;       11:59:59.977 Checking status  6.\n&#39;       12:00:00.478 Checking status  7.\n&#39;       12:00:00.980 Checking status  8.\n&#39;       12:00:01.481 Checking status  9.\n&#39;       12:00:01.981 Checking status 10.\n&#39;       \n&#39;       Destroying timer.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer__ctor_System_Threading_TimerCallback_System_Object_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Threading_Timer__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timer(TimerCallback,Object,Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>Timer</code> class, using 64-bit signed integers to measure time intervals.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate representing a method to be executed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object containing information to be used by the callback method, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dueTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>period</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval between invocations of <code>callback</code>, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to disable periodic signaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter is greater than 4294967294.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delegate specified by the <code>callback</code> parameter is invoked once after <code>dueTime</code> elapses, and thereafter each time the <code>period</code> time interval elapses.  </p>\n<p> If <code>dueTime</code> is zero (0), <code>callback</code> is invoked immediately. If <code>dueTime</code> is <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, <code>callback</code> is not invoked; the timer is disabled, but can be re-enabled by calling the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<p> Because the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <code>callback</code> delegate executes at intervals defined by the resolution of the system clock if <code>period</code> is less than the resolution of the system clock. If <code>period</code> is zero (0) or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a> and <code>dueTime</code> is not <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, <code>callback</code> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<p> The method specified for <code>callback</code> should be reentrant, because it is called on <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer__ctor_System_Threading_TimerCallback_System_Object_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_Timer__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timer(TimerCallback,Object,TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>Timer</code> class, using <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values to measure time intervals.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate representing a method to be executed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object containing information to be used by the callback method, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dueTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time to delay before the <code>callback</code> parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>period</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval between invocations of the methods referenced by <code>callback</code>. Specify negative one (-1) milliseconds to disable periodic signaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The number of milliseconds in the value of <code>dueTime</code> or <code>period</code> is negative and not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>, or is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>callback</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delegate specified by the <code>callback</code> parameter is invoked once after <code>dueTime</code> elapses, and thereafter each time the <code>period</code> time interval elapses.  </p>\n<p> If <code>dueTime</code> is zero (0), <code>callback</code> is invoked immediately. If <code>dueTime</code> is negative one (-1) milliseconds, <code>callback</code> is not invoked; the timer is disabled, but can be re-enabled by calling the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<p> Because the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <code>callback</code> delegate executes at intervals defined by the resolution of the system clock if <code>period</code> is less than the resolution of the system clock. If <code>period</code> is zero (0) or negative one (-1) milliseconds and <code>dueTime</code> is positive, <code>callback</code> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<p> The method specified for <code>callback</code> should be reentrant, because it is called on <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a <code>TimerCallback</code> delegate and initialize a new instance of the <code>Timer</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Timer2#1\">using System;\nusing System.Threading;\n\nclass TimerExample\n{\n    static void Main()\n    {\n        AutoResetEvent autoEvent     = new AutoResetEvent(false);\n        StatusChecker  statusChecker = new StatusChecker(10);\n\n        // Create the delegate that invokes methods for the timer.\n        TimerCallback timerDelegate = \n            new TimerCallback(statusChecker.CheckStatus);\n\n        TimeSpan delayTime = new TimeSpan(0, 0, 1);\n        TimeSpan intervalTime = new TimeSpan(0, 0, 0, 0, 250);\n\n        // Create a timer that signals the delegate to invoke \n        // CheckStatus after one second, and every 1/4 second \n        // thereafter.\n        Console.WriteLine(&quot;{0} Creating timer.<br>&quot;, \n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;));\n        Timer stateTimer = new Timer(\n            timerDelegate, autoEvent, delayTime, intervalTime);\n\n        // When autoEvent signals, change the period to every \n        // 1/2 second.\n        autoEvent.WaitOne(5000, false);\n        stateTimer.Change(new TimeSpan(0), \n            intervalTime + intervalTime);\n        Console.WriteLine(&quot;<br>Changing period.<br>&quot;);\n\n        // When autoEvent signals the second time, dispose of \n        // the timer.\n        autoEvent.WaitOne(5000, false);\n        stateTimer.Dispose();\n        Console.WriteLine(&quot;<br>Destroying timer.&quot;);\n    }\n}\n\nclass StatusChecker\n{\n    int invokeCount, maxCount;\n\n    public StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    public void CheckStatus(Object stateInfo)\n    {\n        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;\n        Console.WriteLine(&quot;{0} Checking status {1,2}.&quot;, \n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;), \n            (++invokeCount).ToString());\n\n        if(invokeCount == maxCount)\n        {\n            // Reset the counter and signal Main.\n            invokeCount  = 0;\n            autoEvent.Set();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Timer2#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Threading\n\nPublic Class TimerExample\n\n    &lt;MTAThread&gt; _\n    Shared Sub Main()\n    \n        Dim autoEvent As New AutoResetEvent(False)\n        Dim statusChecker As New StatusChecker(10)\n\n        &#39; Create the delegate that invokes methods for the timer.\n        Dim timerDelegate As TimerCallback = _\n            AddressOf statusChecker.CheckStatus\n\n        Dim delayTime As New TimeSpan(0, 0, 1)\n        Dim intervalTime As New TimeSpan(0, 0, 0, 0, 250)\n\n        &#39; Create a timer that signals the delegate to invoke \n        &#39; CheckStatus after one second, and every 1/4 second \n        &#39; thereafter.\n        Console.WriteLine(&quot;{0} Creating timer.&quot; &amp; vbCrLf, _\n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;))\n        Dim stateTimer As Timer = New Timer( _\n            timerDelegate, autoEvent, delayTime, intervalTime)\n\n        &#39; When autoEvent signals, change the period to every \n        &#39; 1/2 second.\n        autoEvent.WaitOne(5000, False)\n        stateTimer.Change( _\n            new TimeSpan(0), intervalTime.Add(intervalTime))\n        Console.WriteLine(vbCrLf &amp; &quot;Changing period.&quot; &amp; vbCrLf)\n\n        &#39; When autoEvent signals the second time, dispose of \n        &#39; the timer.\n        autoEvent.WaitOne(5000, False)\n        stateTimer.Dispose()\n        Console.WriteLine(vbCrLf &amp; &quot;Destroying timer.&quot;)\n    \n    End Sub\nEnd Class\n\nPublic Class StatusChecker\n\n    Dim invokeCount, maxCount As Integer \n\n    Sub New(count As Integer)\n        invokeCount  = 0\n        maxCount = count\n    End Sub\n\n    &#39; This method is called by the timer delegate.\n    Sub CheckStatus(stateInfo As Object)\n        Dim autoEvent As AutoResetEvent = _\n            DirectCast(stateInfo, AutoResetEvent)\n        invokeCount += 1\n        Console.WriteLine(&quot;{0} Checking status {1,2}.&quot;, _\n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;), _\n            invokeCount.ToString())\n\n        If invokeCount = maxCount Then\n        \n            &#39; Reset the counter and signal to stop the timer.\n            invokeCount  = 0\n            autoEvent.Set()\n        End If\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Threading.Timer2#1\">using namespace System;\nusing namespace System::Threading;\nref class StatusChecker\n{\nprivate:\n   int invokeCount;\n   int maxCount;\n\npublic:\n   StatusChecker( int count )\n      : invokeCount( 0 ), maxCount( count )\n   {}\n\n\n   // This method is called by the timer delegate.\n   void CheckStatus( Object^ stateInfo )\n   {\n      AutoResetEvent^ autoEvent = dynamic_cast&lt;AutoResetEvent^&gt;(stateInfo);\n      Console::WriteLine( &quot;{0} Checking status {1,2}.&quot;, DateTime::Now.ToString(  &quot;h:mm:ss.fff&quot; ), (++invokeCount).ToString() );\n      if ( invokeCount == maxCount )\n      {\n         \n         // Reset the counter and signal main.\n         invokeCount = 0;\n         autoEvent-&gt;Set();\n      }\n   }\n\n};\n\nint main()\n{\n   AutoResetEvent^ autoEvent = gcnew AutoResetEvent( false );\n   StatusChecker^ statusChecker = gcnew StatusChecker( 10 );\n   \n   // Create the delegate that invokes methods for the timer.\n   TimerCallback^ timerDelegate = gcnew TimerCallback( statusChecker, &amp;StatusChecker::CheckStatus );\n   TimeSpan delayTime = TimeSpan(0,0,1);\n   TimeSpan intervalTime = TimeSpan(0,0,0,0,250);\n   \n   // Create a timer that signals the delegate to invoke CheckStatus \n   // after one second, and every 1/4 second thereafter.\n   Console::WriteLine( &quot;{0} Creating timer.<br>&quot;, DateTime::Now.ToString(  &quot;h:mm:ss.fff&quot; ) );\n   Timer^ stateTimer = gcnew Timer( timerDelegate,autoEvent,delayTime,intervalTime );\n   \n   // When autoEvent signals, change the period to every 1/2 second.\n   autoEvent-&gt;WaitOne( 5000, false );\n   stateTimer-&gt;Change( TimeSpan(0), intervalTime + intervalTime );\n   Console::WriteLine( &quot;<br>Changing period.<br>&quot; );\n   \n   // When autoEvent signals the second time, dispose of the timer.\n   autoEvent-&gt;WaitOne( 5000, false );\n   stateTimer-&gt;~Timer();\n   Console::WriteLine( &quot;<br>Destroying timer.&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer__ctor_System_Threading_TimerCallback_System_Object_System_UInt32_System_UInt32_\">\r\n    \r\n            <a id=\"System_Threading_Timer__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timer(TimerCallback,Object,UInt32,UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>Timer</code> class, using 32-bit unsigned integers to measure time intervals.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate representing a method to be executed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object containing information to be used by the callback method, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dueTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>period</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval between invocations of <code>callback</code>, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to disable periodic signaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>callback</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delegate specified by the <code>callback</code> parameter is invoked once after <code>dueTime</code> elapses, and thereafter each time the <code>period</code> time interval elapses.  </p>\n<p> If <code>dueTime</code> is zero (0), <code>callback</code> is invoked immediately. If <code>dueTime</code> is <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, <code>callback</code> is not invoked; the timer is disabled, but can be re-enabled by calling the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<p> Because the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <code>callback</code> delegate executes at intervals defined by the resolution of the system clock if <code>period</code> is less than the resolution of the system clock. If <code>period</code> is zero (0) or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a> and <code>dueTime</code> is not <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, <code>callback</code> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.  </p>\n<p> The method specified for <code>callback</code> should be reentrant, because it is called on <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer_Change_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Timer_Change_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Change(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Change (int dueTime, int period);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dueTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time to delay before the invoking the callback method specified when the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> was constructed, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>period</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval between invocations of the callback method specified when the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> was constructed, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to disable periodic signaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the timer was successfully updated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The callback method is invoked once after <code>dueTime</code> elapses, and thereafter each time the time interval specified by <code>period</code> elapses.  </p>\n<p> If <code>dueTime</code> is zero (0), the callback method is invoked immediately. If <code>dueTime</code> is <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling Change and specifying a positive value for <code>dueTime</code>.  </p>\n<p> If <code>period</code> is zero (0) or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, and <code>dueTime</code> is not <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling Change and specifying a positive value for <code>period</code>.  </p>\n<p> The Change method can be called from the <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to start a <code>Timer</code> and, after a set number of invocations, change its period.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.Timer#1\">using namespace System;\nusing namespace System::Threading;\n\nref class StatusChecker\n{\nprivate:\n    int invokeCount, maxCount;\n\npublic:\n    StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    void CheckStatus(Object^ stateInfo)\n    {\n        AutoResetEvent^ autoEvent = dynamic_cast&lt;AutoResetEvent^&gt;(stateInfo);\n        Console::WriteLine(&quot;{0:h:mm:ss.fff} Checking status {1,2}.&quot;,\n                           DateTime::Now, ++invokeCount);\n\n        if (invokeCount == maxCount) {\n            // Reset the counter and signal the waiting thread.\n            invokeCount  = 0;\n            autoEvent-&gt;Set();\n        }\n    }\n};\n\nref class TimerExample\n{\npublic:\n    static void Main()\n    {\n        // Create an AutoResetEvent to signal the timeout threshold in the\n        // timer callback has been reached.\n        AutoResetEvent^ autoEvent = gcnew AutoResetEvent(false);\n\n        StatusChecker^ statusChecker = gcnew StatusChecker(10);\n\n        // Create a delegate that invokes methods for the timer.\n        TimerCallback^ tcb =\n           gcnew TimerCallback(statusChecker, &amp;StatusChecker::CheckStatus);\n\n        // Create a timer that invokes CheckStatus after one second, \n        // and every 1/4 second thereafter.\n        Console::WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.<br>&quot;,\n                           DateTime::Now);\n        Timer^ stateTimer = gcnew Timer(tcb, autoEvent, 1000, 250);\n\n        // When autoEvent signals, change the period to every half second.\n        autoEvent-&gt;WaitOne(5000, false);\n        stateTimer-&gt;Change(0, 500);\n        Console::WriteLine(&quot;<br>Changing period to .5 seconds.<br>&quot;);\n\n        // When autoEvent signals the second time, dispose of the timer.\n        autoEvent-&gt;WaitOne(5000, false);\n        stateTimer-&gt;~Timer();\n        Console::WriteLine(&quot;<br>Destroying timer.&quot;);\n    }\n};\n\nint main()\n{\n    TimerExample::Main();\n}\n// The example displays output like the following:\n//       11:59:54.202 Creating timer.\n//       \n//       11:59:55.217 Checking status  1.\n//       11:59:55.466 Checking status  2.\n//       11:59:55.716 Checking status  3.\n//       11:59:55.968 Checking status  4.\n//       11:59:56.218 Checking status  5.\n//       11:59:56.470 Checking status  6.\n//       11:59:56.722 Checking status  7.\n//       11:59:56.972 Checking status  8.\n//       11:59:57.223 Checking status  9.\n//       11:59:57.473 Checking status 10.\n//       \n//       Changing period to .5 seconds.\n//       \n//       11:59:57.474 Checking status  1.\n//       11:59:57.976 Checking status  2.\n//       11:59:58.476 Checking status  3.\n//       11:59:58.977 Checking status  4.\n//       11:59:59.477 Checking status  5.\n//       11:59:59.977 Checking status  6.\n//       12:00:00.478 Checking status  7.\n//       12:00:00.980 Checking status  8.\n//       12:00:01.481 Checking status  9.\n//       12:00:01.981 Checking status 10.\n//       \n//       Destroying timer.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Timer#1\">using System;\nusing System.Threading;\n\nclass TimerExample\n{\n    static void Main()\n    {\n        // Create an AutoResetEvent to signal the timeout threshold in the\n        // timer callback has been reached.\n        var autoEvent = new AutoResetEvent(false);\n        \n        var statusChecker = new StatusChecker(10);\n\n        // Create a timer that invokes CheckStatus after one second, \n        // and every 1/4 second thereafter.\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.<br>&quot;, \n                          DateTime.Now);\n        var stateTimer = new Timer(statusChecker.CheckStatus, \n                                   autoEvent, 1000, 250);\n\n        // When autoEvent signals, change the period to every half second.\n        autoEvent.WaitOne();\n        stateTimer.Change(0, 500);\n        Console.WriteLine(&quot;<br>Changing period to .5 seconds.<br>&quot;);\n\n        // When autoEvent signals the second time, dispose of the timer.\n        autoEvent.WaitOne();\n        stateTimer.Dispose();\n        Console.WriteLine(&quot;<br>Destroying timer.&quot;);\n    }\n}\n\nclass StatusChecker\n{\n    private int invokeCount;\n    private int  maxCount;\n\n    public StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    public void CheckStatus(Object stateInfo)\n    {\n        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;\n        Console.WriteLine(&quot;{0} Checking status {1,2}.&quot;, \n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;), \n            (++invokeCount).ToString());\n\n        if(invokeCount == maxCount)\n        {\n            // Reset the counter and signal the waiting thread.\n            invokeCount = 0;\n            autoEvent.Set();\n        }\n    }\n}\n// The example displays output like the following:\n//       11:59:54.202 Creating timer.\n//       \n//       11:59:55.217 Checking status  1.\n//       11:59:55.466 Checking status  2.\n//       11:59:55.716 Checking status  3.\n//       11:59:55.968 Checking status  4.\n//       11:59:56.218 Checking status  5.\n//       11:59:56.470 Checking status  6.\n//       11:59:56.722 Checking status  7.\n//       11:59:56.972 Checking status  8.\n//       11:59:57.223 Checking status  9.\n//       11:59:57.473 Checking status 10.\n//       \n//       Changing period to .5 seconds.\n//       \n//       11:59:57.474 Checking status  1.\n//       11:59:57.976 Checking status  2.\n//       11:59:58.476 Checking status  3.\n//       11:59:58.977 Checking status  4.\n//       11:59:59.477 Checking status  5.\n//       11:59:59.977 Checking status  6.\n//       12:00:00.478 Checking status  7.\n//       12:00:00.980 Checking status  8.\n//       12:00:01.481 Checking status  9.\n//       12:00:01.981 Checking status 10.\n//       \n//       Destroying timer.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Timer#1\">Imports System.Threading\n\nPublic Module Example\n    Public Sub Main()\n        &#39; Use an AutoResetEvent to signal the timeout threshold in the\n        &#39; timer callback has been reached.\n        Dim autoEvent As New AutoResetEvent(False)\n\n        Dim statusChecker As New StatusChecker(10)\n\n        &#39; Create a timer that invokes CheckStatus after one second, \n        &#39; and every 1/4 second thereafter.\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.&quot; &amp; vbCrLf, \n                          DateTime.Now)\n        Dim stateTimer As New Timer(AddressOf statusChecker.CheckStatus, \n                                    autoEvent, 1000, 250)\n\n        &#39; When autoEvent signals, change the period to every half second.\n        autoEvent.WaitOne()\n        stateTimer.Change(0, 500)\n        Console.WriteLine(vbCrLf &amp; &quot;Changing period to .5 seconds.&quot; &amp; vbCrLf)\n\n        &#39; When autoEvent signals the second time, dispose of the timer.\n        autoEvent.WaitOne()\n        stateTimer.Dispose()\n        Console.WriteLine(vbCrLf &amp; &quot;Destroying timer.&quot;)\n    End Sub\nEnd Module\n\nPublic Class StatusChecker\n    Dim invokeCount, maxCount As Integer \n\n    Sub New(count As Integer)\n        invokeCount  = 0\n        maxCount = count\n    End Sub\n\n    &#39; The timer callback method.\n    Sub CheckStatus(stateInfo As Object)\n        Dim autoEvent As AutoResetEvent = DirectCast(stateInfo, AutoResetEvent)\n        invokeCount += 1\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Checking status {1,2}.&quot;, \n                          DateTime.Now, invokeCount)\n        If invokeCount = maxCount Then\n            &#39; Reset the counter and signal the waiting thread.\n            invokeCount = 0\n            autoEvent.Set()\n        End If\n    End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39;       11:59:54.202 Creating timer.\n&#39;       \n&#39;       11:59:55.217 Checking status  1.\n&#39;       11:59:55.466 Checking status  2.\n&#39;       11:59:55.716 Checking status  3.\n&#39;       11:59:55.968 Checking status  4.\n&#39;       11:59:56.218 Checking status  5.\n&#39;       11:59:56.470 Checking status  6.\n&#39;       11:59:56.722 Checking status  7.\n&#39;       11:59:56.972 Checking status  8.\n&#39;       11:59:57.223 Checking status  9.\n&#39;       11:59:57.473 Checking status 10.\n&#39;       \n&#39;       Changing period to .5 seconds.\n&#39;       \n&#39;       11:59:57.474 Checking status  1.\n&#39;       11:59:57.976 Checking status  2.\n&#39;       11:59:58.476 Checking status  3.\n&#39;       11:59:58.977 Checking status  4.\n&#39;       11:59:59.477 Checking status  5.\n&#39;       11:59:59.977 Checking status  6.\n&#39;       12:00:00.478 Checking status  7.\n&#39;       12:00:00.980 Checking status  8.\n&#39;       12:00:01.481 Checking status  9.\n&#39;       12:00:01.981 Checking status 10.\n&#39;       \n&#39;       Destroying timer.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer_Change_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Threading_Timer_Change_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Change(Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Change (long dueTime, long period);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dueTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time to delay before the invoking the callback method specified when the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> was constructed, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>period</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval between invocations of the callback method specified when the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> was constructed, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to disable periodic signaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the timer was successfully updated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter is less than -1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter is greater than 4294967294.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The callback method is invoked once after <code>dueTime</code> elapses, and thereafter each time the time interval specified by <code>period</code> elapses.  </p>\n<p> If <code>dueTime</code> is zero (0), the callback method is invoked immediately. If <code>dueTime</code> is <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> and specifying a positive value for <code>dueTime</code>.  </p>\n<p> If <code>period</code> is zero (0) or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, and <code>dueTime</code> is not <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> and specifying a positive value for <code>period</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method can be called from the <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer_Change_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_Timer_Change_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Change(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the start time and the interval between method invocations for a timer, using <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values to measure time intervals.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Change (TimeSpan dueTime, TimeSpan period);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dueTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> representing the amount of time to delay before invoking the callback method specified when the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>period</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval between invocations of the callback method specified when the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the timer was successfully updated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter, in milliseconds, is less than -1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>dueTime</code> or <code>period</code> parameter, in milliseconds, is greater than 4294967294.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The callback method is invoked once after <code>dueTime</code> elapses, and thereafter each time the time interval specified by <code>period</code> elapses.  </p>\n<p> If <code>dueTime</code> is zero (0), the callback method is invoked immediately. If <code>dueTime</code> is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> and specifying a positive value for <code>dueTime</code>.  </p>\n<p> If <code>period</code> is zero (0) or negative one (-1) milliseconds, and <code>dueTime</code> is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> and specifying a value greater than zero for <code>period</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method can be called from the <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to start a <code>Timer</code> and, after a set number of invocations, change its period.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Timer2#1\">using System;\nusing System.Threading;\n\nclass TimerExample\n{\n    static void Main()\n    {\n        AutoResetEvent autoEvent     = new AutoResetEvent(false);\n        StatusChecker  statusChecker = new StatusChecker(10);\n\n        // Create the delegate that invokes methods for the timer.\n        TimerCallback timerDelegate = \n            new TimerCallback(statusChecker.CheckStatus);\n\n        TimeSpan delayTime = new TimeSpan(0, 0, 1);\n        TimeSpan intervalTime = new TimeSpan(0, 0, 0, 0, 250);\n\n        // Create a timer that signals the delegate to invoke \n        // CheckStatus after one second, and every 1/4 second \n        // thereafter.\n        Console.WriteLine(&quot;{0} Creating timer.<br>&quot;, \n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;));\n        Timer stateTimer = new Timer(\n            timerDelegate, autoEvent, delayTime, intervalTime);\n\n        // When autoEvent signals, change the period to every \n        // 1/2 second.\n        autoEvent.WaitOne(5000, false);\n        stateTimer.Change(new TimeSpan(0), \n            intervalTime + intervalTime);\n        Console.WriteLine(&quot;<br>Changing period.<br>&quot;);\n\n        // When autoEvent signals the second time, dispose of \n        // the timer.\n        autoEvent.WaitOne(5000, false);\n        stateTimer.Dispose();\n        Console.WriteLine(&quot;<br>Destroying timer.&quot;);\n    }\n}\n\nclass StatusChecker\n{\n    int invokeCount, maxCount;\n\n    public StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    public void CheckStatus(Object stateInfo)\n    {\n        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;\n        Console.WriteLine(&quot;{0} Checking status {1,2}.&quot;, \n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;), \n            (++invokeCount).ToString());\n\n        if(invokeCount == maxCount)\n        {\n            // Reset the counter and signal Main.\n            invokeCount  = 0;\n            autoEvent.Set();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Timer2#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Threading\n\nPublic Class TimerExample\n\n    &lt;MTAThread&gt; _\n    Shared Sub Main()\n    \n        Dim autoEvent As New AutoResetEvent(False)\n        Dim statusChecker As New StatusChecker(10)\n\n        &#39; Create the delegate that invokes methods for the timer.\n        Dim timerDelegate As TimerCallback = _\n            AddressOf statusChecker.CheckStatus\n\n        Dim delayTime As New TimeSpan(0, 0, 1)\n        Dim intervalTime As New TimeSpan(0, 0, 0, 0, 250)\n\n        &#39; Create a timer that signals the delegate to invoke \n        &#39; CheckStatus after one second, and every 1/4 second \n        &#39; thereafter.\n        Console.WriteLine(&quot;{0} Creating timer.&quot; &amp; vbCrLf, _\n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;))\n        Dim stateTimer As Timer = New Timer( _\n            timerDelegate, autoEvent, delayTime, intervalTime)\n\n        &#39; When autoEvent signals, change the period to every \n        &#39; 1/2 second.\n        autoEvent.WaitOne(5000, False)\n        stateTimer.Change( _\n            new TimeSpan(0), intervalTime.Add(intervalTime))\n        Console.WriteLine(vbCrLf &amp; &quot;Changing period.&quot; &amp; vbCrLf)\n\n        &#39; When autoEvent signals the second time, dispose of \n        &#39; the timer.\n        autoEvent.WaitOne(5000, False)\n        stateTimer.Dispose()\n        Console.WriteLine(vbCrLf &amp; &quot;Destroying timer.&quot;)\n    \n    End Sub\nEnd Class\n\nPublic Class StatusChecker\n\n    Dim invokeCount, maxCount As Integer \n\n    Sub New(count As Integer)\n        invokeCount  = 0\n        maxCount = count\n    End Sub\n\n    &#39; This method is called by the timer delegate.\n    Sub CheckStatus(stateInfo As Object)\n        Dim autoEvent As AutoResetEvent = _\n            DirectCast(stateInfo, AutoResetEvent)\n        invokeCount += 1\n        Console.WriteLine(&quot;{0} Checking status {1,2}.&quot;, _\n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;), _\n            invokeCount.ToString())\n\n        If invokeCount = maxCount Then\n        \n            &#39; Reset the counter and signal to stop the timer.\n            invokeCount  = 0\n            autoEvent.Set()\n        End If\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Threading.Timer2#1\">using namespace System;\nusing namespace System::Threading;\nref class StatusChecker\n{\nprivate:\n   int invokeCount;\n   int maxCount;\n\npublic:\n   StatusChecker( int count )\n      : invokeCount( 0 ), maxCount( count )\n   {}\n\n\n   // This method is called by the timer delegate.\n   void CheckStatus( Object^ stateInfo )\n   {\n      AutoResetEvent^ autoEvent = dynamic_cast&lt;AutoResetEvent^&gt;(stateInfo);\n      Console::WriteLine( &quot;{0} Checking status {1,2}.&quot;, DateTime::Now.ToString(  &quot;h:mm:ss.fff&quot; ), (++invokeCount).ToString() );\n      if ( invokeCount == maxCount )\n      {\n         \n         // Reset the counter and signal main.\n         invokeCount = 0;\n         autoEvent-&gt;Set();\n      }\n   }\n\n};\n\nint main()\n{\n   AutoResetEvent^ autoEvent = gcnew AutoResetEvent( false );\n   StatusChecker^ statusChecker = gcnew StatusChecker( 10 );\n   \n   // Create the delegate that invokes methods for the timer.\n   TimerCallback^ timerDelegate = gcnew TimerCallback( statusChecker, &amp;StatusChecker::CheckStatus );\n   TimeSpan delayTime = TimeSpan(0,0,1);\n   TimeSpan intervalTime = TimeSpan(0,0,0,0,250);\n   \n   // Create a timer that signals the delegate to invoke CheckStatus \n   // after one second, and every 1/4 second thereafter.\n   Console::WriteLine( &quot;{0} Creating timer.<br>&quot;, DateTime::Now.ToString(  &quot;h:mm:ss.fff&quot; ) );\n   Timer^ stateTimer = gcnew Timer( timerDelegate,autoEvent,delayTime,intervalTime );\n   \n   // When autoEvent signals, change the period to every 1/2 second.\n   autoEvent-&gt;WaitOne( 5000, false );\n   stateTimer-&gt;Change( TimeSpan(0), intervalTime + intervalTime );\n   Console::WriteLine( &quot;<br>Changing period.<br>&quot; );\n   \n   // When autoEvent signals the second time, dispose of the timer.\n   autoEvent-&gt;WaitOne( 5000, false );\n   stateTimer-&gt;~Timer();\n   Console::WriteLine( &quot;<br>Destroying timer.&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer_Change_System_UInt32_System_UInt32_\">\r\n    \r\n            <a id=\"System_Threading_Timer_Change_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Change(UInt32,UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Change (uint dueTime, uint period);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dueTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time to delay before the invoking the callback method specified when the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> was constructed, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>period</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval between invocations of the callback method specified when the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> was constructed, in milliseconds. Specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> to disable periodic signaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the timer was successfully updated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The callback method is invoked once after <code>dueTime</code> elapses, and thereafter each time the time interval specified by <code>period</code> elapses.  </p>\n<p> If <code>dueTime</code> is zero (0), the callback method is invoked immediately. If <code>dueTime</code> is <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> and specifying a positive value for <code>dueTime</code>.  </p>\n<p> If <code>period</code> is zero (0) or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, and <code>dueTime</code> is not <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> and specifying a positive value for <code>period</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method can be called from the <a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a> delegate.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer_Dispose\">\r\n    \r\n            <a id=\"System_Threading_Timer_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling <code>Dispose</code> allows the resources used by the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> to be reallocated for other purposes. For more information about <code>Dispose</code>, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Callbacks can occur after the Dispose method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Dispose_System_Threading_WaitHandle_\" data-linktype=\"relative-path\">Dispose(WaitHandle)</a> method overload to wait until all callbacks have completed.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to free the resources held by a <code>Timer</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.Timer#1\">using namespace System;\nusing namespace System::Threading;\n\nref class StatusChecker\n{\nprivate:\n    int invokeCount, maxCount;\n\npublic:\n    StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    void CheckStatus(Object^ stateInfo)\n    {\n        AutoResetEvent^ autoEvent = dynamic_cast&lt;AutoResetEvent^&gt;(stateInfo);\n        Console::WriteLine(&quot;{0:h:mm:ss.fff} Checking status {1,2}.&quot;,\n                           DateTime::Now, ++invokeCount);\n\n        if (invokeCount == maxCount) {\n            // Reset the counter and signal the waiting thread.\n            invokeCount  = 0;\n            autoEvent-&gt;Set();\n        }\n    }\n};\n\nref class TimerExample\n{\npublic:\n    static void Main()\n    {\n        // Create an AutoResetEvent to signal the timeout threshold in the\n        // timer callback has been reached.\n        AutoResetEvent^ autoEvent = gcnew AutoResetEvent(false);\n\n        StatusChecker^ statusChecker = gcnew StatusChecker(10);\n\n        // Create a delegate that invokes methods for the timer.\n        TimerCallback^ tcb =\n           gcnew TimerCallback(statusChecker, &amp;StatusChecker::CheckStatus);\n\n        // Create a timer that invokes CheckStatus after one second, \n        // and every 1/4 second thereafter.\n        Console::WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.<br>&quot;,\n                           DateTime::Now);\n        Timer^ stateTimer = gcnew Timer(tcb, autoEvent, 1000, 250);\n\n        // When autoEvent signals, change the period to every half second.\n        autoEvent-&gt;WaitOne(5000, false);\n        stateTimer-&gt;Change(0, 500);\n        Console::WriteLine(&quot;<br>Changing period to .5 seconds.<br>&quot;);\n\n        // When autoEvent signals the second time, dispose of the timer.\n        autoEvent-&gt;WaitOne(5000, false);\n        stateTimer-&gt;~Timer();\n        Console::WriteLine(&quot;<br>Destroying timer.&quot;);\n    }\n};\n\nint main()\n{\n    TimerExample::Main();\n}\n// The example displays output like the following:\n//       11:59:54.202 Creating timer.\n//       \n//       11:59:55.217 Checking status  1.\n//       11:59:55.466 Checking status  2.\n//       11:59:55.716 Checking status  3.\n//       11:59:55.968 Checking status  4.\n//       11:59:56.218 Checking status  5.\n//       11:59:56.470 Checking status  6.\n//       11:59:56.722 Checking status  7.\n//       11:59:56.972 Checking status  8.\n//       11:59:57.223 Checking status  9.\n//       11:59:57.473 Checking status 10.\n//       \n//       Changing period to .5 seconds.\n//       \n//       11:59:57.474 Checking status  1.\n//       11:59:57.976 Checking status  2.\n//       11:59:58.476 Checking status  3.\n//       11:59:58.977 Checking status  4.\n//       11:59:59.477 Checking status  5.\n//       11:59:59.977 Checking status  6.\n//       12:00:00.478 Checking status  7.\n//       12:00:00.980 Checking status  8.\n//       12:00:01.481 Checking status  9.\n//       12:00:01.981 Checking status 10.\n//       \n//       Destroying timer.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Timer#1\">using System;\nusing System.Threading;\n\nclass TimerExample\n{\n    static void Main()\n    {\n        // Create an AutoResetEvent to signal the timeout threshold in the\n        // timer callback has been reached.\n        var autoEvent = new AutoResetEvent(false);\n        \n        var statusChecker = new StatusChecker(10);\n\n        // Create a timer that invokes CheckStatus after one second, \n        // and every 1/4 second thereafter.\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.<br>&quot;, \n                          DateTime.Now);\n        var stateTimer = new Timer(statusChecker.CheckStatus, \n                                   autoEvent, 1000, 250);\n\n        // When autoEvent signals, change the period to every half second.\n        autoEvent.WaitOne();\n        stateTimer.Change(0, 500);\n        Console.WriteLine(&quot;<br>Changing period to .5 seconds.<br>&quot;);\n\n        // When autoEvent signals the second time, dispose of the timer.\n        autoEvent.WaitOne();\n        stateTimer.Dispose();\n        Console.WriteLine(&quot;<br>Destroying timer.&quot;);\n    }\n}\n\nclass StatusChecker\n{\n    private int invokeCount;\n    private int  maxCount;\n\n    public StatusChecker(int count)\n    {\n        invokeCount  = 0;\n        maxCount = count;\n    }\n\n    // This method is called by the timer delegate.\n    public void CheckStatus(Object stateInfo)\n    {\n        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;\n        Console.WriteLine(&quot;{0} Checking status {1,2}.&quot;, \n            DateTime.Now.ToString(&quot;h:mm:ss.fff&quot;), \n            (++invokeCount).ToString());\n\n        if(invokeCount == maxCount)\n        {\n            // Reset the counter and signal the waiting thread.\n            invokeCount = 0;\n            autoEvent.Set();\n        }\n    }\n}\n// The example displays output like the following:\n//       11:59:54.202 Creating timer.\n//       \n//       11:59:55.217 Checking status  1.\n//       11:59:55.466 Checking status  2.\n//       11:59:55.716 Checking status  3.\n//       11:59:55.968 Checking status  4.\n//       11:59:56.218 Checking status  5.\n//       11:59:56.470 Checking status  6.\n//       11:59:56.722 Checking status  7.\n//       11:59:56.972 Checking status  8.\n//       11:59:57.223 Checking status  9.\n//       11:59:57.473 Checking status 10.\n//       \n//       Changing period to .5 seconds.\n//       \n//       11:59:57.474 Checking status  1.\n//       11:59:57.976 Checking status  2.\n//       11:59:58.476 Checking status  3.\n//       11:59:58.977 Checking status  4.\n//       11:59:59.477 Checking status  5.\n//       11:59:59.977 Checking status  6.\n//       12:00:00.478 Checking status  7.\n//       12:00:00.980 Checking status  8.\n//       12:00:01.481 Checking status  9.\n//       12:00:01.981 Checking status 10.\n//       \n//       Destroying timer.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Timer#1\">Imports System.Threading\n\nPublic Module Example\n    Public Sub Main()\n        &#39; Use an AutoResetEvent to signal the timeout threshold in the\n        &#39; timer callback has been reached.\n        Dim autoEvent As New AutoResetEvent(False)\n\n        Dim statusChecker As New StatusChecker(10)\n\n        &#39; Create a timer that invokes CheckStatus after one second, \n        &#39; and every 1/4 second thereafter.\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Creating timer.&quot; &amp; vbCrLf, \n                          DateTime.Now)\n        Dim stateTimer As New Timer(AddressOf statusChecker.CheckStatus, \n                                    autoEvent, 1000, 250)\n\n        &#39; When autoEvent signals, change the period to every half second.\n        autoEvent.WaitOne()\n        stateTimer.Change(0, 500)\n        Console.WriteLine(vbCrLf &amp; &quot;Changing period to .5 seconds.&quot; &amp; vbCrLf)\n\n        &#39; When autoEvent signals the second time, dispose of the timer.\n        autoEvent.WaitOne()\n        stateTimer.Dispose()\n        Console.WriteLine(vbCrLf &amp; &quot;Destroying timer.&quot;)\n    End Sub\nEnd Module\n\nPublic Class StatusChecker\n    Dim invokeCount, maxCount As Integer \n\n    Sub New(count As Integer)\n        invokeCount  = 0\n        maxCount = count\n    End Sub\n\n    &#39; The timer callback method.\n    Sub CheckStatus(stateInfo As Object)\n        Dim autoEvent As AutoResetEvent = DirectCast(stateInfo, AutoResetEvent)\n        invokeCount += 1\n        Console.WriteLine(&quot;{0:h:mm:ss.fff} Checking status {1,2}.&quot;, \n                          DateTime.Now, invokeCount)\n        If invokeCount = maxCount Then\n            &#39; Reset the counter and signal the waiting thread.\n            invokeCount = 0\n            autoEvent.Set()\n        End If\n    End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39;       11:59:54.202 Creating timer.\n&#39;       \n&#39;       11:59:55.217 Checking status  1.\n&#39;       11:59:55.466 Checking status  2.\n&#39;       11:59:55.716 Checking status  3.\n&#39;       11:59:55.968 Checking status  4.\n&#39;       11:59:56.218 Checking status  5.\n&#39;       11:59:56.470 Checking status  6.\n&#39;       11:59:56.722 Checking status  7.\n&#39;       11:59:56.972 Checking status  8.\n&#39;       11:59:57.223 Checking status  9.\n&#39;       11:59:57.473 Checking status 10.\n&#39;       \n&#39;       Changing period to .5 seconds.\n&#39;       \n&#39;       11:59:57.474 Checking status  1.\n&#39;       11:59:57.976 Checking status  2.\n&#39;       11:59:58.476 Checking status  3.\n&#39;       11:59:58.977 Checking status  4.\n&#39;       11:59:59.477 Checking status  5.\n&#39;       11:59:59.977 Checking status  6.\n&#39;       12:00:00.478 Checking status  7.\n&#39;       12:00:00.980 Checking status  8.\n&#39;       12:00:01.481 Checking status  9.\n&#39;       12:00:01.981 Checking status 10.\n&#39;       \n&#39;       Destroying timer.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Timer_Dispose_System_Threading_WaitHandle_\">\r\n    \r\n            <a id=\"System_Threading_Timer_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(WaitHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> and signals when the timer has been disposed of.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Dispose (System.Threading.WaitHandle notifyObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>notifyObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> to be signaled when the <code>Timer</code> has been disposed of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the function succeeds; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>notifyObject</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling <code>Dispose</code> allows the resources used by the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> to be reallocated for other purposes. For more information about <code>Dispose</code>, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.  </p>\n<p> When this method completes, it signals the <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> specified by the <code>notifyObject</code> parameter.Use this overload of the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method if you want to be able to block until you are certain that the timer has been disposed. The timer is not disposed until all currently queued callbacks have completed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the callback uses the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method to set the <code>dueTime</code> parameter to zero, a race condition can occur when the Dispose method overload is called: If the timer queues a new callback before the Dispose method overload detects that there are no callbacks queued, Dispose continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a> is thrown when the new callback calls the <a class=\"xref\" href=\"system.threading.timer#System_Threading_Timer_Change_\" data-linktype=\"relative-path\">Change</a> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Timer.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Timer.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Timer\">\r\n<meta name=\"APIName\" content=\"System.Threading.Timer..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.Timer.Change\">\r\n<meta name=\"APIName\" content=\"System.Threading.Timer.Dispose\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b06c8238-7bdd-27bb-2c21-c87f71ef701f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see the Referenc…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Timer\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Timer.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Timer.yml","open_to_public_contributors":true,"api_name":["System.Threading.Timer","System.Threading.Timer..ctor","System.Threading.Timer.Change","System.Threading.Timer.Dispose"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Timer","System::Threading::Timer","System.Threading.Timer.#ctor","System::Threading::Timer::#ctor","System.Threading.Timer.Change","System::Threading::Timer::Change","System.Threading.Timer.Dispose","System::Threading::Timer::Dispose"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b06c8238-7bdd-27bb-2c21-c87f71ef701f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/Timer.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Timer class | Microsoft Docs","_op_ogTitle":"Timer class","description":"Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see the Referenc…","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.Timer","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.timer","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.timer","fileRelativePath":"System.Threading.Timer.html"},"themesRelativePathToOutputRoot":"_themes/"}