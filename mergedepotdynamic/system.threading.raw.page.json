{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  <h1>\r\n    <span class=\"lang-csharp\">System.Threading</span>\r\n      Namespace\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>The System.Threading namespace provides classes and interfaces that enable multithreaded programming. In addition to classes for synchronizing thread activities and access to data (<a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a>, <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a>, <a class=\"xref\" href=\"system.threading.interlocked\" data-linktype=\"relative-path\">Interlocked</a>, <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a>, and so on), this namespace includes a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> class that allows you to use a pool of system-supplied threads, and a <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> class that executes callback methods on thread pool threads.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \r\n  \r\n  \t\t<h2 class=\"accented\" id=\"classes\">Classes\r\n  </h2>\r\n  \r\n  \t<table class=\"nameValue \">\r\n  \t\t<tr id=\"System_Threading_AbandonedMutexException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when one thread acquires a <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that another thread has abandoned by exiting without releasing it.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_AsyncLocal_1\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.asynclocal-1\" data-linktype=\"relative-path\">AsyncLocal&lt;T&gt;</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_AutoResetEvent\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Notifies a waiting thread that an event has occurred. This class cannot be inherited.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Barrier\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.barrier\" data-linktype=\"relative-path\">Barrier</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_BarrierPostPhaseException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.barrierpostphaseexception\" data-linktype=\"relative-path\">BarrierPostPhaseException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when the post-phase action of a <a class=\"xref\" href=\"system.threading.barrier\" data-linktype=\"relative-path\">Barrier</a> fails</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_CancellationTokenSource\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Signals to a <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that it should be canceled.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_CompressedStack\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.compressedstack\" data-linktype=\"relative-path\">CompressedStack</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides methods for setting and capturing the compressed stack on the current thread. This class cannot be inherited.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_CountdownEvent\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.countdownevent\" data-linktype=\"relative-path\">CountdownEvent</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a synchronization primitive that is signaled when its count reaches zero.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_EventWaitHandle\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a thread synchronization event.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ExecutionContext\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.executioncontext\" data-linktype=\"relative-path\">ExecutionContext</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Manages the execution context for the current thread. This class cannot be inherited.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_HostExecutionContext\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.hostexecutioncontext\" data-linktype=\"relative-path\">HostExecutionContext</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Encapsulates and propagates the host execution context across threads.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_HostExecutionContextManager\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.hostexecutioncontextmanager\" data-linktype=\"relative-path\">HostExecutionContextManager</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides the functionality that allows a common language runtime host to participate in the flow, or migration, of the execution context.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Interlocked\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.interlocked\" data-linktype=\"relative-path\">Interlocked</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides atomic operations for variables that are shared by multiple threads.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_LazyInitializer\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lazyinitializer\" data-linktype=\"relative-path\">LazyInitializer</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides lazy initialization routines.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_LockRecursionException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when recursive entry into a lock is not compatible with the recursion policy for the lock.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ManualResetEvent\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.manualresetevent\" data-linktype=\"relative-path\">ManualResetEvent</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ManualResetEventSlim\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.manualreseteventslim\" data-linktype=\"relative-path\">ManualResetEventSlim</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides a slimmed down version of <a class=\"xref\" href=\"system.threading.manualresetevent\" data-linktype=\"relative-path\">ManualResetEvent</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Monitor\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides a mechanism that synchronizes access to objects.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Mutex\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>A synchronization primitive that can also be used for interprocess synchronization.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Overlapped\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.overlapped\" data-linktype=\"relative-path\">Overlapped</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides a managed representation of a Win32 <code>OVERLAPPED</code> structure, including methods to transfer information from an Overlapped instance to a <a class=\"xref\" href=\"system.threading.nativeoverlapped\" data-linktype=\"relative-path\">NativeOverlapped</a> structure.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ReaderWriterLock\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.readerwriterlock\" data-linktype=\"relative-path\">ReaderWriterLock</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Defines a lock that supports single writers and multiple readers.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ReaderWriterLockSlim\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.readerwriterlockslim\" data-linktype=\"relative-path\">ReaderWriterLockSlim</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_RegisteredWaitHandle\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a handle that has been registered when calling <span class=\"xref\">stem.Threading.ThreadPool.RegisterWaitForSingleObject*</span>. This class cannot be inherited.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Semaphore\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Limits the number of threads that can access a resource or pool of resources concurrently.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_SemaphoreFullException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.semaphorefullexception\" data-linktype=\"relative-path\">SemaphoreFullException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when the <span class=\"xref\">stem.Threading.Semaphore.Release*</span> method is called on a semaphore whose count is already at the maximum.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_SemaphoreSlim\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.semaphoreslim\" data-linktype=\"relative-path\">SemaphoreSlim</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a lightweight alternative to <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> that limits the number of threads that can access a resource or pool of resources concurrently.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_SynchronizationContext\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides the basic functionality for propagating a synchronization context in various synchronization models.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_SynchronizationLockException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when a method requires the caller to own the lock on a given Monitor, and the method is invoked by a caller that does not own that lock.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Thread\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Creates and controls a thread, sets its priority, and gets its status.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadAbortException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when a call is made to the <span class=\"xref\">stem.Threading.Thread.Abort*</span> method. This class cannot be inherited.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadExceptionEventArgs\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadexceptioneventargs\" data-linktype=\"relative-path\">ThreadExceptionEventArgs</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">ThreadException</a> event.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadInterruptedException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> is interrupted while it is in a waiting state.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadLocal_1\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadlocal-1\" data-linktype=\"relative-path\">ThreadLocal&lt;T&gt;</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides thread-local storage of data.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadPool\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadStartException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstartexception\" data-linktype=\"relative-path\">ThreadStartException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when a failure occurs in a managed thread after the underlying operating system thread has been started, but before the thread is ready to execute user code.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadStateException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> is in an invalid <span class=\"xref\">stem.Threading.Thread.ThreadState*</span> for the method call.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Timeout\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.timeout\" data-linktype=\"relative-path\">Timeout</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Contains constants that specify infinite time-out intervals. This class cannot be inherited.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Timer\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_Volatile\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.volatile\" data-linktype=\"relative-path\">Volatile</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Contains methods for performing volatile memory operations.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_WaitHandle\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_WaitHandleCannotBeOpenedException\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandlecannotbeopenedexception\" data-linktype=\"relative-path\">WaitHandleCannotBeOpenedException</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The exception that is thrown when an attempt is made to open a system mutex, semaphore, or event wait handle that does not exist.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_WaitHandleExtensions\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandleextensions\" data-linktype=\"relative-path\">WaitHandleExtensions</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides convenience methods to for working with a safe handle for a wait handle.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \r\n  \t\t<h2 class=\"accented\" id=\"structs\">Structs\r\n  </h2>\r\n  \r\n  \t<table class=\"nameValue \">\r\n  \t\t<tr id=\"System_Threading_AsyncFlowControl\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.asyncflowcontrol\" data-linktype=\"relative-path\">AsyncFlowControl</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides the functionality to restore the migration, or flow, of the execution context between threads.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_AsyncLocalValueChangedArgs_1\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.asynclocalvaluechangedargs-1\" data-linktype=\"relative-path\">AsyncLocalValueChangedArgs&lt;T&gt;</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>The class that provides data change information to <span class=\"xref\">stem.Threading.AsyncLocal`1</span> instances that register for change notifications.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_CancellationToken\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Propagates notification that operations should be canceled.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_CancellationTokenRegistration\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtokenregistration\" data-linktype=\"relative-path\">CancellationTokenRegistration</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a callback delegate that has been registered with a <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_LockCookie\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockcookie\" data-linktype=\"relative-path\">LockCookie</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Defines the lock that implements single-writer/multiple-reader semantics. This is a value type.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_NativeOverlapped\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.nativeoverlapped\" data-linktype=\"relative-path\">NativeOverlapped</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides an explicit layout that is visible from unmanaged code and that will have the same layout as the Win32 OVERLAPPED structure with additional reserved fields at the end.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_SpinLock\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.spinlock\" data-linktype=\"relative-path\">SpinLock</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_SpinWait\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.spinwait\" data-linktype=\"relative-path\">SpinWait</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides support for spin-based waiting.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \r\n  \t\t<h2 class=\"accented\" id=\"enums\">Enums\r\n  </h2>\r\n  \r\n  \t<table class=\"nameValue \">\r\n  \t\t<tr id=\"System_Threading_ApartmentState\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Specifies the apartment state of a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_EventResetMode\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.eventresetmode\" data-linktype=\"relative-path\">EventResetMode</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Indicates whether an <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a> is reset automatically or manually after receiving a signal.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_LazyThreadSafetyMode\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Specifies how a <span class=\"xref\">stem.Lazy`1</span> instance synchronizes access among multiple threads.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_LockRecursionPolicy\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionpolicy\" data-linktype=\"relative-path\">LockRecursionPolicy</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Specifies whether a lock can be entered multiple times by the same thread.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadPriority\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadpriority\" data-linktype=\"relative-path\">ThreadPriority</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Specifies the scheduling priority of a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadState\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Specifies the execution states of a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \r\n  \t\t<h2 class=\"accented\" id=\"delegates\">Delegates\r\n  </h2>\r\n  \r\n  \t<table class=\"nameValue \">\r\n  \t\t<tr id=\"System_Threading_ContextCallback\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.contextcallback\" data-linktype=\"relative-path\">ContextCallback</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a method to be called within a new context.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_IOCompletionCallback\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.iocompletioncallback\" data-linktype=\"relative-path\">IOCompletionCallback</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Receives the error code, number of bytes, and overlapped value type when an I/O operation completes on the thread pool.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ParameterizedThreadStart\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents the method that executes on a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_SendOrPostCallback\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a method to be called when a message is to be dispatched to a synchronization context.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadExceptionEventHandler\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadexceptioneventhandler\" data-linktype=\"relative-path\">ThreadExceptionEventHandler</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">ThreadException</a> event of an <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_ThreadStart\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents the method that executes on a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_TimerCallback\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.timercallback\" data-linktype=\"relative-path\">TimerCallback</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents the method that handles calls from a <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_WaitCallback\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waitcallback\" data-linktype=\"relative-path\">WaitCallback</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a callback method to be executed by a thread pool thread.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Threading_WaitOrTimerCallback\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waitortimercallback\" data-linktype=\"relative-path\">WaitOrTimerCallback</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a method to be called when a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> is signaled or times out.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.yml\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bb630a84-e2b1-f224-4e91-3bb1fbc04850\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The System.Threading namespace provides classes and interfaces that enable multithreaded programming. In addition to classes for synchronizing thread activities and access to data (, , , , and so on)…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.yml","open_to_public_contributors":true,"f1_keywords":["System.Threading","System::Threading"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bb630a84-e2b1-f224-4e91-3bb1fbc04850","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/ns-System.Threading.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"System.Threading namespace | Microsoft Docs","_op_ogTitle":"System.Threading namespace","description":"The System.Threading namespace provides classes and interfaces that enable multithreaded programming. In addition to classes for synchronizing thread activities and access to data (, , , , and so on)…","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading","fileRelativePath":"System.Threading.html"},"themesRelativePathToOutputRoot":"_themes/"}