{"content":"    \r\n    <h1 id=\"System_Windows_Forms_DataGridViewCellValueEventArgs\">\r\n      <span class=\"lang-csharp\">DataGridViewCellValueEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValueNeeded\" data-linktype=\"relative-path\">CellValueNeeded</a> and <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValuePushed\" data-linktype=\"relative-path\">CellValuePushed</a> events of the <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class DataGridViewCellValueEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataGridViewCellValueEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValueNeeded\" data-linktype=\"relative-path\">CellValueNeeded</a> and <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValuePushed\" data-linktype=\"relative-path\">CellValuePushed</a> events to implement virtual mode in the <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control. For more information about virtual mode, see <a href=\"../Topic/Virtual%20Mode%20in%20the%20Windows%20Forms%20DataGridView%20Control.md\" data-linktype=\"relative-path\">Virtual Mode in the Windows Forms DataGridView Control</a>.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellValueEventArgs__ctor_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">DataGridViewCellValueEventArgs(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellvalueeventargs\" data-linktype=\"relative-path\">DataGridViewCellValueEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellValueEventArgs_ColumnIndex\" data-linktype=\"self-bookmark\">ColumnIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating the column index of the cell that the event occurs for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellValueEventArgs_RowIndex\" data-linktype=\"self-bookmark\">RowIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating the row index of the cell that the event occurs for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellValueEventArgs_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the cell that the event occurs for.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellValueEventArgs__ctor_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellValueEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataGridViewCellValueEventArgs(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellvalueeventargs\" data-linktype=\"relative-path\">DataGridViewCellValueEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataGridViewCellValueEventArgs (int columnIndex, int rowIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>columnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the column containing the cell that the event occurs for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the row containing the cell that the event occurs for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>columnIndex</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>rowIndex</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellValueEventArgs_ColumnIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellValueEventArgs_ColumnIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating the column index of the cell that the event occurs for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ColumnIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the column containing the cell that the event occurs for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this offset with the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_Columns_\" data-linktype=\"relative-path\">Columns</a> property to reference the cell that the event occurs for.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ColumnIndex property to retrieve cell values from the data store. This example is part of a larger example provided in <a href=\"../Topic/How%20to:%20Implement%20Virtual%20Mode%20in%20the%20Windows%20Forms%20DataGridView%20Control.md\" data-linktype=\"relative-path\">How to: Implement Virtual Mode in the Windows Forms DataGridView Control</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.DataGridView.VirtualMode#120\">   void dataGridView1_CellValueNeeded( Object^ /*sender*/,\n       System::Windows::Forms::DataGridViewCellValueEventArgs^ e )\n   {\n      Customer^ customerTmp = nullptr;\n      \n      // Store a reference to the Customer object for the row being painted.\n      if ( e-&gt;RowIndex == rowInEdit )\n      {\n         customerTmp = this-&gt;customerInEdit;\n      }\n      else\n      {\n         customerTmp = dynamic_cast&lt;Customer^&gt;(this-&gt;customers[ e-&gt;RowIndex ]);\n      }\n      \n      // Set the cell value to paint using the Customer object retrieved.\n      int switchcase = 0;\n      if ( (this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name)-&gt;Equals( L&quot;Company Name&quot; ) )\n            switchcase = 1;\n      else\n      if ( (this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name)-&gt;Equals( L&quot;Contact Name&quot; ) )\n            switchcase = 2;\n\n\n      switch ( switchcase )\n      {\n         case 1:\n            e-&gt;Value = customerTmp-&gt;CompanyName;\n            break;\n\n         case 2:\n            e-&gt;Value = customerTmp-&gt;ContactName;\n            break;\n      }\n   }\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.DataGridView.VirtualMode#120\">    Private Sub dataGridView1_CellValueNeeded(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.DataGridViewCellValueEventArgs) _\n        Handles dataGridView1.CellValueNeeded\n\n        &#39; If this is the row for new records, no values are needed.\n        If e.RowIndex = Me.dataGridView1.RowCount - 1 Then\n            Return\n        End If\n\n        Dim customerTmp As Customer = Nothing\n\n        &#39; Store a reference to the Customer object for the row being painted.\n        If e.RowIndex = rowInEdit Then\n            customerTmp = Me.customerInEdit\n        Else\n            customerTmp = CType(Me.customers(e.RowIndex), Customer)\n        End If\n\n        &#39; Set the cell value to paint using the Customer object retrieved.\n        Select Case Me.dataGridView1.Columns(e.ColumnIndex).Name\n            Case &quot;Company Name&quot;\n                e.Value = customerTmp.CompanyName\n\n            Case &quot;Contact Name&quot;\n                e.Value = customerTmp.ContactName\n        End Select\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.DataGridView.VirtualMode#120\">    private void dataGridView1_CellValueNeeded(object sender,\n        System.Windows.Forms.DataGridViewCellValueEventArgs e)\n    {\n        // If this is the row for new records, no values are needed.\n        if (e.RowIndex == this.dataGridView1.RowCount - 1) return;\n\n        Customer customerTmp = null;\n\n        // Store a reference to the Customer object for the row being painted.\n        if (e.RowIndex == rowInEdit)\n        {\n            customerTmp = this.customerInEdit;\n        }\n        else \n        {\n            customerTmp = (Customer)this.customers[e.RowIndex];\n        }\n\n        // Set the cell value to paint using the Customer object retrieved.\n        switch (this.dataGridView1.Columns[e.ColumnIndex].Name)\n        {\n            case &quot;Company Name&quot;:\n                e.Value = customerTmp.CompanyName;\n                break;\n\n            case &quot;Contact Name&quot;:\n                e.Value = customerTmp.ContactName;\n                break;\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellValueEventArgs_RowIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellValueEventArgs_RowIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating the row index of the cell that the event occurs for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RowIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the row containing the cell that the event occurs for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this offset with the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_Rows_\" data-linktype=\"relative-path\">Rows</a> property to reference the cell that the event occurs for.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example handles the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValuePushed\" data-linktype=\"relative-path\">CellValuePushed</a> event to store updates and new entries in a data store object. This example is part of a larger example available in the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_VirtualMode_\" data-linktype=\"relative-path\">VirtualMode</a> reference topic.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">    #region &quot;data store maintance&quot;\n    const int initialValue = -1;\n\n    private void dataGridView1_CellValueNeeded(object sender,\n        DataGridViewCellValueEventArgs e)\n    {\n        if (store.ContainsKey(e.RowIndex))\n        {\n            // Use the store if the e value has been modified \n            // and stored.            \n            e.Value = store[e.RowIndex];\n        }\n        else if (newRowNeeded &amp;&amp; e.RowIndex == numberOfRows)\n        {\n            if (dataGridView1.IsCurrentCellInEditMode)\n            {\n                e.Value = initialValue;\n            }\n            else\n            {\n                // Show a blank value if the cursor is just resting\n                // on the last row.\n                e.Value = String.Empty;\n            }\n        }\n        else\n        {\n            e.Value = e.RowIndex;\n        }\n    }\n\n    private void dataGridView1_CellValuePushed(object sender,\n        DataGridViewCellValueEventArgs e)\n    {\n        store.Add(e.RowIndex, int.Parse(e.Value.ToString()));\n    }\n    #endregion\n\n    private Dictionary&lt;int, int&gt; store = new Dictionary&lt;int, int&gt;();\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">#pragma region Data store maintance\n\n    void VirtualConnector::dataGridView1_CellValueNeeded\n        (Object^ sender, DataGridViewCellValueEventArgs^ e)\n    {\n        if (store-&gt;ContainsKey(e-&gt;RowIndex))\n        {\n            // Use the store if the e value has been modified \n            // and stored.            \n            e-&gt;Value = gcnew Int32(store-&gt;default[e-&gt;RowIndex]); \n        }\n        else if (newRowNeeded &amp;&amp; e-&gt;RowIndex == numberOfRows)\n        {\n            if (dataGridView1-&gt;IsCurrentCellInEditMode)\n            {\n                e-&gt;Value = initialValue;\n            }\n            else\n            {\n                // Show a blank e if the cursor is just loitering\n                // over(the) last row.\n                e-&gt;Value = String::Empty;\n            }\n        }\n        else\n        {\n            e-&gt;Value = e-&gt;RowIndex;\n        }\n    }\n\n    void VirtualConnector::dataGridView1_CellValuePushed\n        (Object^ sender, DataGridViewCellValueEventArgs^ e)\n    {\n        String^ value = e-&gt;Value-&gt;ToString();\n        store[e-&gt;RowIndex] = Int32::Parse(value, \n            CultureInfo::CurrentCulture);\n    }\n#pragma endregion\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">#Region &quot;data store maintance&quot;\n    Const initialValue As Integer = -1\n\n    Private Sub dataGridView1_CellValueNeeded(ByVal sender As Object, _\n        ByVal e As DataGridViewCellValueEventArgs) _\n        Handles dataGridView1.CellValueNeeded\n\n        If store.ContainsKey(e.RowIndex) Then\n            &#39; Use the store if the e value has been modified \n            &#39; and stored.\n            e.Value = store(e.RowIndex)\n        ElseIf newRowNeeded AndAlso e.RowIndex = numberOfRows Then\n            If dataGridView1.IsCurrentCellInEditMode Then\n                e.Value = initialValue\n            Else\n                &#39; Show a blank value if the cursor is just resting\n                &#39; on the last row.\n                e.Value = String.Empty\n            End If\n        Else\n            e.Value = e.RowIndex\n        End If\n    End Sub\n\n    Private Sub dataGridView1_CellValuePushed(ByVal sender As Object, _\n        ByVal e As DataGridViewCellValueEventArgs) _\n        Handles dataGridView1.CellValuePushed\n\n        store.Add(e.RowIndex, CInt(e.Value))\n\n    End Sub\n#End Region\n\n    Dim store As System.Collections.Generic.Dictionary(Of Integer, Integer) = _\n        New Dictionary(Of Integer, Integer)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellValueEventArgs_Value\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellValueEventArgs_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the cell that the event occurs for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Value { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> representing the cell&#39;s value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to inspect the cell&#39;s value when handling an event, or to communicate the cell&#39;s current value if creating an event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example handles the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValuePushed\" data-linktype=\"relative-path\">CellValuePushed</a> event to store updates and new entries in a data store object. This example is part of a larger example available in the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_VirtualMode_\" data-linktype=\"relative-path\">VirtualMode</a> reference topic.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">    #region &quot;data store maintance&quot;\n    const int initialValue = -1;\n\n    private void dataGridView1_CellValueNeeded(object sender,\n        DataGridViewCellValueEventArgs e)\n    {\n        if (store.ContainsKey(e.RowIndex))\n        {\n            // Use the store if the e value has been modified \n            // and stored.            \n            e.Value = store[e.RowIndex];\n        }\n        else if (newRowNeeded &amp;&amp; e.RowIndex == numberOfRows)\n        {\n            if (dataGridView1.IsCurrentCellInEditMode)\n            {\n                e.Value = initialValue;\n            }\n            else\n            {\n                // Show a blank value if the cursor is just resting\n                // on the last row.\n                e.Value = String.Empty;\n            }\n        }\n        else\n        {\n            e.Value = e.RowIndex;\n        }\n    }\n\n    private void dataGridView1_CellValuePushed(object sender,\n        DataGridViewCellValueEventArgs e)\n    {\n        store.Add(e.RowIndex, int.Parse(e.Value.ToString()));\n    }\n    #endregion\n\n    private Dictionary&lt;int, int&gt; store = new Dictionary&lt;int, int&gt;();\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">#pragma region Data store maintance\n\n    void VirtualConnector::dataGridView1_CellValueNeeded\n        (Object^ sender, DataGridViewCellValueEventArgs^ e)\n    {\n        if (store-&gt;ContainsKey(e-&gt;RowIndex))\n        {\n            // Use the store if the e value has been modified \n            // and stored.            \n            e-&gt;Value = gcnew Int32(store-&gt;default[e-&gt;RowIndex]); \n        }\n        else if (newRowNeeded &amp;&amp; e-&gt;RowIndex == numberOfRows)\n        {\n            if (dataGridView1-&gt;IsCurrentCellInEditMode)\n            {\n                e-&gt;Value = initialValue;\n            }\n            else\n            {\n                // Show a blank e if the cursor is just loitering\n                // over(the) last row.\n                e-&gt;Value = String::Empty;\n            }\n        }\n        else\n        {\n            e-&gt;Value = e-&gt;RowIndex;\n        }\n    }\n\n    void VirtualConnector::dataGridView1_CellValuePushed\n        (Object^ sender, DataGridViewCellValueEventArgs^ e)\n    {\n        String^ value = e-&gt;Value-&gt;ToString();\n        store[e-&gt;RowIndex] = Int32::Parse(value, \n            CultureInfo::CurrentCulture);\n    }\n#pragma endregion\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">#Region &quot;data store maintance&quot;\n    Const initialValue As Integer = -1\n\n    Private Sub dataGridView1_CellValueNeeded(ByVal sender As Object, _\n        ByVal e As DataGridViewCellValueEventArgs) _\n        Handles dataGridView1.CellValueNeeded\n\n        If store.ContainsKey(e.RowIndex) Then\n            &#39; Use the store if the e value has been modified \n            &#39; and stored.\n            e.Value = store(e.RowIndex)\n        ElseIf newRowNeeded AndAlso e.RowIndex = numberOfRows Then\n            If dataGridView1.IsCurrentCellInEditMode Then\n                e.Value = initialValue\n            Else\n                &#39; Show a blank value if the cursor is just resting\n                &#39; on the last row.\n                e.Value = String.Empty\n            End If\n        Else\n            e.Value = e.RowIndex\n        End If\n    End Sub\n\n    Private Sub dataGridView1_CellValuePushed(ByVal sender As Object, _\n        ByVal e As DataGridViewCellValueEventArgs) _\n        Handles dataGridView1.CellValuePushed\n\n        store.Add(e.RowIndex, CInt(e.Value))\n\n    End Sub\n#End Region\n\n    Dim store As System.Collections.Generic.Dictionary(Of Integer, Integer) = _\n        New Dictionary(Of Integer, Integer)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DataGridViewCellValueEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DataGridViewCellValueEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventArgs.Value\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"33578142-5468-d224-04b8-acd4e314978b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  and  events of the  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DataGridViewCellValueEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DataGridViewCellValueEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DataGridViewCellValueEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.DataGridViewCellValueEventArgs","System.Windows.Forms.DataGridViewCellValueEventArgs..ctor","System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex","System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex","System.Windows.Forms.DataGridViewCellValueEventArgs.Value"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DataGridViewCellValueEventArgs","System::Windows::Forms::DataGridViewCellValueEventArgs","System.Windows.Forms.DataGridViewCellValueEventArgs.#ctor","System::Windows::Forms::DataGridViewCellValueEventArgs::#ctor","System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex","System::Windows::Forms::DataGridViewCellValueEventArgs::ColumnIndex","System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex","System::Windows::Forms::DataGridViewCellValueEventArgs::RowIndex","System.Windows.Forms.DataGridViewCellValueEventArgs.Value","System::Windows::Forms::DataGridViewCellValueEventArgs::Value"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"33578142-5468-d224-04b8-acd4e314978b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/DataGridViewCellValueEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridViewCellValueEventArgs class | Microsoft Docs","_op_ogTitle":"DataGridViewCellValueEventArgs class","description":"Provides data for the  and  events of the  control.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DataGridViewCellValueEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.datagridviewcellvalueeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.datagridviewcellvalueeventargs","fileRelativePath":"System.Windows.Forms.DataGridViewCellValueEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}