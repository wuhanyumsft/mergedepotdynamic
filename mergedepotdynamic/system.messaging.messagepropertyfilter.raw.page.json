{"content":"    \r\n    <h1 id=\"System_Messaging_MessagePropertyFilter\">\r\n      <span class=\"lang-csharp\">MessagePropertyFilter</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Controls and selects the properties that are retrieved when peeking or receiving messages from a message queue.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]\npublic class MessagePropertyFilter : ICloneable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">MessagePropertyFilter</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Setting the MessagePropertyFilter on a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instance controls the set of properties that are retrieved when peeking or receiving a message. The filter is set on the instance of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> that retrieves the message information. When you set a MessagePropertyFilter Boolean-valued member to <code>false</code>, you prevent the information of the associated <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> property from being retrieved by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.  </p>\n<p> There are several filter properties that are not Boolean values. They are integer values that get or set the default sizes of the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Body_\" data-linktype=\"relative-path\">Body</a>, <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Extension_\" data-linktype=\"relative-path\">Extension</a>, or <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Label_\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> Retrieving a limited set of properties helps improve performance because smaller amounts of data are transferred from the queue.  </p>\n<p> When setting a property on MessagePropertyFilter, you are only indicating whether that property is retrieved when a message is received or peeked. You are not changing the associated property value for the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter__ctor_\" data-linktype=\"relative-path\">MessagePropertyFilter</a> constructor sets all filter properties to their default values, which for the Boolean values is <code>false</code>. See the constructor topic for the defaults assigned to the integer-valued properties.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter__ctor\" data-linktype=\"self-bookmark\">MessagePropertyFilter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> class and sets default values for all properties.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_AcknowledgeType\" data-linktype=\"self-bookmark\">AcknowledgeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AcknowledgeType*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Acknowledgment\" data-linktype=\"self-bookmark\">Acknowledgment</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Acknowledgment*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_AdministrationQueue\" data-linktype=\"self-bookmark\">AdministrationQueue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AdministrationQueue*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_AppSpecific\" data-linktype=\"self-bookmark\">AppSpecific</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AppSpecific*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_ArrivedTime\" data-linktype=\"self-bookmark\">ArrivedTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.ArrivedTime*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_AttachSenderId\" data-linktype=\"self-bookmark\">AttachSenderId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AttachSenderId*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Authenticated\" data-linktype=\"self-bookmark\">Authenticated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Authenticated*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_AuthenticationProviderName\" data-linktype=\"self-bookmark\">AuthenticationProviderName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AuthenticationProviderName*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_AuthenticationProviderType\" data-linktype=\"self-bookmark\">AuthenticationProviderType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AuthenticationProviderType*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Body\" data-linktype=\"self-bookmark\">Body</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Body*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_ConnectorType\" data-linktype=\"self-bookmark\">ConnectorType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.ConnectorType*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_CorrelationId\" data-linktype=\"self-bookmark\">CorrelationId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_DefaultBodySize\" data-linktype=\"self-bookmark\">DefaultBodySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the size, in bytes, of the default body buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_DefaultExtensionSize\" data-linktype=\"self-bookmark\">DefaultExtensionSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the size, in bytes, of the default extension buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_DefaultLabelSize\" data-linktype=\"self-bookmark\">DefaultLabelSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the size, in bytes, of the default label buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_DestinationQueue\" data-linktype=\"self-bookmark\">DestinationQueue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.DestinationQueue*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_DestinationSymmetricKey\" data-linktype=\"self-bookmark\">DestinationSymmetricKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.DestinationSymmetricKey*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_DigitalSignature\" data-linktype=\"self-bookmark\">DigitalSignature</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.DigitalSignature*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_EncryptionAlgorithm\" data-linktype=\"self-bookmark\">EncryptionAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.EncryptionAlgorithm*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Extension\" data-linktype=\"self-bookmark\">Extension</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Extension*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_HashAlgorithm\" data-linktype=\"self-bookmark\">HashAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.HashAlgorithm*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Id*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_IsFirstInTransaction\" data-linktype=\"self-bookmark\">IsFirstInTransaction</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.IsFirstInTransaction*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_IsLastInTransaction\" data-linktype=\"self-bookmark\">IsLastInTransaction</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.IsLastInTransaction*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Label\" data-linktype=\"self-bookmark\">Label</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Label*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_LookupId\" data-linktype=\"self-bookmark\">LookupId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.LookupId*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_MessageType\" data-linktype=\"self-bookmark\">MessageType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.MessageType*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Priority\" data-linktype=\"self-bookmark\">Priority</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Priority*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Recoverable\" data-linktype=\"self-bookmark\">Recoverable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Recoverable*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_ResponseQueue\" data-linktype=\"self-bookmark\">ResponseQueue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.ResponseQueue*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_SenderCertificate\" data-linktype=\"self-bookmark\">SenderCertificate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SenderCertificate*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_SenderId\" data-linktype=\"self-bookmark\">SenderId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SenderId*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_SenderVersion\" data-linktype=\"self-bookmark\">SenderVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SenderVersion*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_SentTime\" data-linktype=\"self-bookmark\">SentTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SentTime*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_SourceMachine\" data-linktype=\"self-bookmark\">SourceMachine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SourceMachine*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_TimeToBeReceived\" data-linktype=\"self-bookmark\">TimeToBeReceived</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.TimeToBeReceived*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_TimeToReachQueue\" data-linktype=\"self-bookmark\">TimeToReachQueue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.TimeToReachQueue*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_TransactionId\" data-linktype=\"self-bookmark\">TransactionId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.TransactionId*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_TransactionStatusQueue\" data-linktype=\"self-bookmark\">TransactionStatusQueue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.TransactionStatusQueue*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_UseAuthentication\" data-linktype=\"self-bookmark\">UseAuthentication</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseAuthentication*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_UseDeadLetterQueue\" data-linktype=\"self-bookmark\">UseDeadLetterQueue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseDeadLetterQueue*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_UseEncryption\" data-linktype=\"self-bookmark\">UseEncryption</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseEncryption*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_UseJournalQueue\" data-linktype=\"self-bookmark\">UseJournalQueue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseJournalQueue*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_UseTracing\" data-linktype=\"self-bookmark\">UseTracing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseTracing*</span> property information when receiving or peeking a message.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_ClearAll\" data-linktype=\"self-bookmark\">ClearAll()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets all Boolean filter values to <code>false</code>, so that no message properties are retrieved when receiving a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_SetAll\" data-linktype=\"self-bookmark\">SetAll()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies to retrieve all message properties when receiving a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessagePropertyFilter_SetDefaults\" data-linktype=\"self-bookmark\">SetDefaults()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the filter values of common Message Queuing properties to <code>true</code> and the integer-valued properties to their default values.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter__ctor\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessagePropertyFilter()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> class and sets default values for all properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public MessagePropertyFilter ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MessagePropertyFilter constructor sets all Boolean values to <code>false</code> and sets the integer-valued properties to the default values shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultBodySize_\" data-linktype=\"relative-path\">DefaultBodySize</a></td>\n<td>1024</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultExtensionSize_\" data-linktype=\"relative-path\">DefaultExtensionSize</a></td>\n<td>255</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultLabelSize_\" data-linktype=\"relative-path\">DefaultLabelSize</a></td>\n<td>255</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> constructor.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#40\">            // Assign the queue a new MessageReadPropertyFilter.\n            queue-&gt;MessageReadPropertyFilter = \n                gcnew MessagePropertyFilter;\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#40\">        // Assign the queue a new MessageReadPropertyFilter.\n        queue.MessageReadPropertyFilter = new MessagePropertyFilter();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_AcknowledgeType\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_AcknowledgeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcknowledgeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AcknowledgeType*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AcknowledgeType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.AcknowledgeType*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AcknowledgeType_\" data-linktype=\"relative-path\">AcknowledgeType</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the type of acknowledgment messages requested by the sending application. The type of acknowledgment defines when acknowledgments are returned. Set the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AcknowledgeType_\" data-linktype=\"relative-path\">AcknowledgeType</a> property before sending the message to request a specific type of acknowledgment.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the AcknowledgeType property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#1\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s AcknowledgeType property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                AcknowledgeType = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // AcknowledgeType property.\n            Console::WriteLine(&quot;Message.AcknowledgeType: {0}&quot;, \n                orderMessage-&gt;AcknowledgeType);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#1\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s AcknowledgeType property.\n        queue.MessageReadPropertyFilter.AcknowledgeType = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s AcknowledgeType property.\n        Console.WriteLine(&quot;Message.AcknowledgeType: {0}&quot;,\n            orderMessage.AcknowledgeType);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Acknowledgment\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Acknowledgment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Acknowledgment</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Acknowledgment*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Acknowledgment { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.Acknowledgment*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Acknowledgment_\" data-linktype=\"relative-path\">Acknowledgment</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the type of acknowledgment messages the system posts in the administration queue, which determines when acknowledgments are generated.  </p>\n<p> Acknowledgments are returned from the destination queue and posted as messages to the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AdministrationQueue_\" data-linktype=\"relative-path\">AdministrationQueue</a> specified by the original message. The type of acknowledgment generated depends on what was requested.  </p>\n<p> Read the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Acknowledgment_\" data-linktype=\"relative-path\">Acknowledgment</a> property when receiving a message from an administration queue to verify the status of the message originally sent to the message queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  </p>\n<pre><code class=\"lang-cs\" name=\"Message.Acknowledgment#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create new queues.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tCreateQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\n\t\t\t// Send messages to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive messages from a queue.\n\t\t\tstring messageId = myNewQueue.ReceiveMessage(); \n\n\t\t\t// Receive acknowledgment message.\n\t\t\tif(messageId != null)\n\t\t\t{\n\t\t\t\tmyNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\\\myAdministrationQueue&quot;);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends a string message to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Create a new message.\n\t\t\tMessage myMessage = new Message(&quot;Original Message&quot;); \n\n\t\t\tmyMessage.AdministrationQueue = new MessageQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\t\t\tmyMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive | AcknowledgeTypes.PositiveArrival;\n\n\t\t\t// Send the Order to the queue.\n\t\t\tmyQueue.Send(myMessage);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  string ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\tmyQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(string)});\n\n\t\t\tstring returnString = null;\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Original message information--&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Body: &quot; +myMessage.Body.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myMessage.Id.ToString());\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\treturnString =  myMessage.Id;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn returnString;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic void ReceiveAcknowledgment(string messageId, string queuePath)\n\t\t{\n\t\t\tbool found = false;\n\t\t\tMessageQueue queue = new MessageQueue(queuePath);\n\t\t\tqueue.MessageReadPropertyFilter.CorrelationId = true;\n\t\t\tqueue.MessageReadPropertyFilter.Acknowledgment = true;\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\twhile(queue.PeekByCorrelationId(messageId) != null)\n\t\t\t\t{\n\t\t\t\t\tMessage myAcknowledgmentMessage = queue.ReceiveByCorrelationId(messageId);\n\t\t\t\n\t\t\t\t\t// Output acknowledgment message information. The correlation Id is identical\n\t\t\t\t\t// to the id of the original message.\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Message Information--&quot;);\n\t\t\t\t\tConsole.WriteLine(&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{ \n\t\t\t\t// This exception would be thrown if there is no (further) acknowledgment message\n\t\t\t\t// with the specified correlation Id. Only output a message if there are no messages;\n\t\t\t\t// not if the loop has found at least one.\n\t\t\t\tif(found == false)\n\t\t\t\t{\t\n\t\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\t}\n\n\t\t\t\t// Handle other causes of invalid operation exception.\n\t\t\t}\n\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Message.Acknowledgment#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   void SendMessage()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Create a new message.\n      Message^ myMessage = gcnew Message( &quot;Original Message&quot; );\n      myMessage-&gt;AdministrationQueue = gcnew MessageQueue( &quot;.\\\\myAdministrationQueue&quot; );\n      myMessage-&gt;AcknowledgeType = (AcknowledgeTypes)(AcknowledgeTypes::PositiveReceive | AcknowledgeTypes::PositiveArrival);\n\n      // Send the Order to the queue.\n      myQueue-&gt;Send( myMessage );\n      return;\n   }\n\n   String^ ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      myQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      String^ returnString = nullptr;\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n\n         // Display message information.\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         Console::WriteLine( &quot;Original message information--&quot; );\n         Console::WriteLine( &quot;Body: {0}&quot;, myMessage-&gt;Body );\n         Console::WriteLine( &quot;Id: {0}&quot;, myMessage-&gt;Id );\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         returnString = myMessage-&gt;Id;\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return returnString;\n   }\n\n   void ReceiveAcknowledgment( String^ messageId, String^ queuePath )\n   {\n      bool found = false;\n      MessageQueue^ queue = gcnew MessageQueue( queuePath );\n      queue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      queue-&gt;MessageReadPropertyFilter-&gt;Acknowledgment = true;\n      try\n      {\n         while ( queue-&gt;PeekByCorrelationId( messageId ) != nullptr )\n         {\n            Message^ myAcknowledgmentMessage = queue-&gt;ReceiveByCorrelationId( messageId );\n\n            // Output acknowledgment message information. The correlation Id is identical\n            // to the id of the original message.\n            Console::WriteLine( &quot;Acknowledgment Message Information--&quot; );\n            Console::WriteLine( &quot;Correlation Id: {0}&quot;, myAcknowledgmentMessage-&gt;CorrelationId );\n            Console::WriteLine( &quot;Id: {0}&quot;, myAcknowledgmentMessage-&gt;Id );\n            Console::WriteLine( &quot;Acknowledgment Type: {0}&quot;, myAcknowledgmentMessage-&gt;Acknowledgment );\n            Console::WriteLine( &quot;____________________________________________&quot; );\n            found = true;\n         }\n      }\n      catch ( InvalidOperationException^ e ) \n      {\n         // This exception would be thrown if there is no (further) acknowledgment message\n         // with the specified correlation Id. Only output a message if there are no messages;\n         // not if the loop has found at least one.\n         if ( found == false )\n         {\n            Console::WriteLine( e-&gt;Message );\n         }\n\n         // Handle other causes of invalid operation exception.\n      }\n\n   }\n\n};\n\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Create new queues.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n   MyNewQueue::CreateQueue( &quot;.\\\\myAdministrationQueue&quot; );\n\n   // Send messages to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive messages from a queue.\n   String^ messageId = myNewQueue-&gt;ReceiveMessage();\n\n   // Receive acknowledgment message.\n   if ( messageId != nullptr )\n   {\n      myNewQueue-&gt;ReceiveAcknowledgment( messageId, &quot;.\\\\myAdministrationQueue&quot; );\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.Acknowledgment#1\">Imports System\nImports System.Messaging\n\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n   \n   \n\n   &#39; Provides an entry point into the application.       \n   &#39; This example sends and receives a message from\n   &#39; a queue.\n      \n   Public Shared Sub Main()\n         &#39; Create a new instance of the class.\n         Dim myNewQueue As New MyNewQueue()\n         \n         &#39; Create new queues.\n         CreateQueue(&quot;.\\myQueue&quot;)\n         CreateQueue(&quot;.\\myAdministrationQueue&quot;)\n         \n         &#39; Send messages to a queue.\n         myNewQueue.SendMessage()\n         \n         &#39; Receive messages from a queue.\n         Dim messageId As String = myNewQueue.ReceiveMessage()\n         \n         &#39; Receive acknowledgment message.\n         If Not (messageId Is Nothing) Then\n            myNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\myAdministrationQueue&quot;)\n         End If\n         \n         Return\n   End Sub &#39;Main\n      \n      \n      &#39; Creates a new queue.\n\n   Public Shared Sub CreateQueue(queuePath As String)\n         Try\n            If Not MessageQueue.Exists(queuePath) Then\n               MessageQueue.Create(queuePath)\n            Else\n               Console.WriteLine((queuePath + &quot; already exists.&quot;))\n            End If\n         Catch e As MessageQueueException\n            Console.WriteLine(e.Message)\n         End Try\n   End Sub &#39;CreateQueue\n       \n      \n      \n \n      &#39; Sends a string message to a queue.\n \n   Public Sub SendMessage()\n         \n         &#39; Connect to a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Create a new message.\n         Dim myMessage As New Message(&quot;Original Message&quot;)\n         \n         myMessage.AdministrationQueue = New MessageQueue(&quot;.\\myAdministrationQueue&quot;)\n         myMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive Or AcknowledgeTypes.PositiveArrival\n         \n         &#39; Send the Order to the queue.\n         myQueue.Send(myMessage)\n         \n         Return\n   End Sub &#39;SendMessage\n      \n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Function ReceiveMessage() As String\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         myQueue.MessageReadPropertyFilter.CorrelationId = True\n         \n         \n         &#39; Set the formatter to indicate body contains an Order.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(String)})\n         \n         Dim returnString As String = Nothing\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            \n            \n            &#39; Display message information.\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            Console.WriteLine(&quot;Original message information--&quot;)\n            Console.WriteLine((&quot;Body: &quot; + myMessage.Body.ToString()))\n            Console.WriteLine((&quot;Id: &quot; + myMessage.Id.ToString()))\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            \n            returnString = myMessage.Id\n         \n         \n                  \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return returnString\n   End Function &#39;ReceiveMessage\n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Sub ReceiveAcknowledgment(messageId As String, queuePath As String)\n         Dim found As Boolean = False\n         Dim queue As New MessageQueue(queuePath)\n         queue.MessageReadPropertyFilter.CorrelationId = True\n         queue.MessageReadPropertyFilter.Acknowledgment = True\n         \n         Try\n            While Not (queue.PeekByCorrelationId(messageId) Is Nothing)\n               Dim myAcknowledgmentMessage As Message = queue.ReceiveByCorrelationId(messageId)\n               \n               &#39; Output acknowledgment message information. The correlation Id is identical\n               &#39; to the id of the original message.\n               Console.WriteLine(&quot;Acknowledgment Message Information--&quot;)\n               Console.WriteLine((&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString()))\n               Console.WriteLine((&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString()))\n               Console.WriteLine((&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString()))\n               Console.WriteLine(&quot;____________________________________________&quot;)\n               \n               found = True\n            End While\n         Catch e As InvalidOperationException\n            &#39; This exception would be thrown if there is no (further) acknowledgment message\n            &#39; with the specified correlation Id. Only output a message if there are no messages;\n            &#39; not if the loop has found at least one.\n            If found = False Then\n               Console.WriteLine(e.Message)\n            End If\n         End Try \n   End Sub &#39;ReceiveAcknowledgment &#39; Handle other causes of invalid operation exception.\n End Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_AdministrationQueue\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_AdministrationQueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AdministrationQueue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AdministrationQueue*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AdministrationQueue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.AdministrationQueue*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AdministrationQueue_\" data-linktype=\"relative-path\">AdministrationQueue</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the name of the queue that receives system-generated acknowledgments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the AdministrationQueue property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#2\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s AdministrationQueue property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                AdministrationQueue = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // AdministrationQueue property.\n            Console::WriteLine(&quot;Message.AdministrationQueue: {0}&quot;, \n                orderMessage-&gt;AdministrationQueue);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#2\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s AdministrationQueue property.\n        queue.MessageReadPropertyFilter.AdministrationQueue = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s AdministrationQueue property.\n        Console.WriteLine(&quot;Message.AdministrationQueue: {0}&quot;,\n            orderMessage.AdministrationQueue);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_AppSpecific\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_AppSpecific_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppSpecific</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AppSpecific*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AppSpecific { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.AppSpecific*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AppSpecific_\" data-linktype=\"relative-path\">AppSpecific</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class contains additional, application-specific information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the AppSpecific property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#3\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s AppSpecific property.\n            queue-&gt;MessageReadPropertyFilter-&gt;AppSpecific = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // AppSpecific property.\n            Console::WriteLine(&quot;Message.AppSpecific: {0}&quot;, \n                orderMessage-&gt;AppSpecific);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#3\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s AppSpecific property.\n        queue.MessageReadPropertyFilter.AppSpecific = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s AppSpecific property.\n        Console.WriteLine(&quot;Message.AppSpecific: {0}&quot;,\n            orderMessage.AppSpecific);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_ArrivedTime\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_ArrivedTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrivedTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.ArrivedTime*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ArrivedTime { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.ArrivedTime*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_ArrivedTime_\" data-linktype=\"relative-path\">ArrivedTime</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class indicates when the message arrived at the destination queue. This is local time, adjusted from GMT, of the computer on which the message is retrieved.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ArrivedTime property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#4\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s ArrivedTime property.\n            queue-&gt;MessageReadPropertyFilter-&gt;ArrivedTime = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // ArrivedTime property.\n            Console::WriteLine(&quot;Message.ArrivedTime: {0}&quot;, \n                orderMessage-&gt;ArrivedTime);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#4\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s ArrivedTime property.\n        queue.MessageReadPropertyFilter.ArrivedTime = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s ArrivedTime property.\n        Console.WriteLine(&quot;Message.ArrivedTime: {0}&quot;,\n            orderMessage.ArrivedTime);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_AttachSenderId\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_AttachSenderId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AttachSenderId</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AttachSenderId*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AttachSenderId { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.AttachSenderId*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AttachSenderId_\" data-linktype=\"relative-path\">AttachSenderId</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies whether the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SenderId_\" data-linktype=\"relative-path\">SenderId</a> should be or has been attached to the message. The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SenderId_\" data-linktype=\"relative-path\">SenderId</a> is set by Message Queuing and is used by the receiving Queue Manager to verify whether the sender has access rights to a queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the AttachSenderId property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#5\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s AttachSenderId property.\n            queue-&gt;MessageReadPropertyFilter-&gt;AttachSenderId = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // AttachSenderId property.\n            Console::WriteLine(&quot;Message.AttachSenderId: {0}&quot;, \n                orderMessage-&gt;AttachSenderId);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#5\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s AttachSenderId property.\n        queue.MessageReadPropertyFilter.AttachSenderId = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s AttachSenderId property.\n        Console.WriteLine(&quot;Message.AttachSenderId: {0}&quot;,\n            orderMessage.AttachSenderId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Authenticated\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Authenticated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Authenticated</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Authenticated*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Authenticated { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.Authenticated*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Authenticated_\" data-linktype=\"relative-path\">Authenticated</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class is used by the receiving application to determine if authentication was requested. If authentication was requested and the message is in the queue, then the message is authenticated.  </p>\n<p> It is not possible to look at the properties of a message and determine whether a message failed authentication. Messages that fail authentication are discarded and are not delivered to the queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the Authenticated property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#6\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s Authenticated property.\n            queue-&gt;MessageReadPropertyFilter-&gt;Authenticated = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // Authenticated property.\n            Console::WriteLine(&quot;Message.Authenticated: {0}&quot;, \n                orderMessage-&gt;Authenticated);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#6\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s Authenticated property.\n        queue.MessageReadPropertyFilter.Authenticated = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s Authenticated property.\n        Console.WriteLine(&quot;Message.Authenticated: {0}&quot;,\n            orderMessage.Authenticated);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_AuthenticationProviderName\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_AuthenticationProviderName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticationProviderName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AuthenticationProviderName*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AuthenticationProviderName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.AuthenticationProviderName*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AuthenticationProviderName_\" data-linktype=\"relative-path\">AuthenticationProviderName</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the name of the cryptographic provider used to generate the digital signature of the message. <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AuthenticationProviderName_\" data-linktype=\"relative-path\">AuthenticationProviderName</a> is typically used when working with foreign queues.  </p>\n<p> A foreign queue exists in a queuing system other than Microsoft Message Queuing. Microsoft Message Queuing communicates with such queues through a connector application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the AuthenticationProviderName property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#7\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s \n            // AuthenticationProviderName property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                AuthenticationProviderName = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // AuthenticationProviderName property.\n            Console::WriteLine(\n                &quot;Message.AuthenticationProviderName: {0}&quot;, \n                orderMessage-&gt;AuthenticationProviderName);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#7\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s AuthenticationProviderName property.\n        queue.MessageReadPropertyFilter.AuthenticationProviderName = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s AuthenticationProviderName\n        // property.\n        Console.WriteLine(&quot;Message.AuthenticationProviderName: {0}&quot;,\n            orderMessage.AuthenticationProviderName);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_AuthenticationProviderType\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_AuthenticationProviderType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticationProviderType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.AuthenticationProviderType*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AuthenticationProviderType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.AuthenticationProviderType*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AuthenticationProviderType_\" data-linktype=\"relative-path\">AuthenticationProviderType</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the type of cryptographic provider used to generate the digital signature of the message. <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AuthenticationProviderType_\" data-linktype=\"relative-path\">AuthenticationProviderType</a> is typically used when working with foreign queues.  </p>\n<p> A foreign queue exists in a queuing system other than Microsoft Message Queuing. Microsoft Message Queuing communicates with such queues through a connector application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the AuthenticationProviderType property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#8\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s \n            // AuthenticationProviderType property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                AuthenticationProviderType = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // AuthenticationProviderType property.\n            Console::WriteLine(\n                &quot;Message.AuthenticationProviderType: {0}&quot;, \n                orderMessage-&gt;AuthenticationProviderType);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#8\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s AuthenticationProviderType property.\n        queue.MessageReadPropertyFilter.AuthenticationProviderType = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s AuthenticationProviderType\n        // property.\n        Console.WriteLine(&quot;Message.AuthenticationProviderType: {0}&quot;,\n            orderMessage.AuthenticationProviderType);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Body\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Body_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Body</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Body*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Body { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.Body*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Body_\" data-linktype=\"relative-path\">Body</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class represents the serialized contents of the message. The body can contain up to 4 MB of data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the Body property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#9\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s Body property.\n            queue-&gt;MessageReadPropertyFilter-&gt;Body = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s Body property.\n            Console::WriteLine(&quot;Message.Body: {0}&quot;, \n                orderMessage-&gt;Body);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#9\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s Body property.\n        queue.MessageReadPropertyFilter.Body = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s Body property.\n        Console.WriteLine(&quot;Message.Body: {0}&quot;, orderMessage.Body);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_ConnectorType\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_ConnectorType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConnectorType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.ConnectorType*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ConnectorType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.ConnectorType*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_ConnectorType_\" data-linktype=\"relative-path\">ConnectorType</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class is required when an application sets a message property that is typically set by Message Queuing. It is used in the following two instances:  </p>\n<ul>\n<li><p>When a message is passed by a connector application, the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_ConnectorType_\" data-linktype=\"relative-path\">ConnectorType</a> is required for the sending and receiving applications to interpret the security and acknowledgment properties of the message.  </p>\n</li>\n<li><p>When sending application-encrypted messages, the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_ConnectorType_\" data-linktype=\"relative-path\">ConnectorType</a> property informs Message Queuing to use the symmetric key.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ConnectorType property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#10\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s ConnectorType property.\n            queue-&gt;MessageReadPropertyFilter-&gt;ConnectorType = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // ConnectorType property.\n            Console::WriteLine(&quot;Message.ConnectorType: {0}&quot;, \n                orderMessage-&gt;ConnectorType);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#10\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s ConnectorType property.\n        queue.MessageReadPropertyFilter.ConnectorType = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s ConnectorType property.\n        Console.WriteLine(&quot;Message.ConnectorType: {0}&quot;,\n            orderMessage.ConnectorType);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_CorrelationId\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_CorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CorrelationId</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CorrelationId { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies a message identifier that is used by acknowledgment and report messages to reference the original message. It provides an application-defined identifier that the receiving application can use to sort messages.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  </p>\n<pre><code class=\"lang-cs\" name=\"Message.Acknowledgment#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create new queues.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tCreateQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\n\t\t\t// Send messages to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive messages from a queue.\n\t\t\tstring messageId = myNewQueue.ReceiveMessage(); \n\n\t\t\t// Receive acknowledgment message.\n\t\t\tif(messageId != null)\n\t\t\t{\n\t\t\t\tmyNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\\\myAdministrationQueue&quot;);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends a string message to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Create a new message.\n\t\t\tMessage myMessage = new Message(&quot;Original Message&quot;); \n\n\t\t\tmyMessage.AdministrationQueue = new MessageQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\t\t\tmyMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive | AcknowledgeTypes.PositiveArrival;\n\n\t\t\t// Send the Order to the queue.\n\t\t\tmyQueue.Send(myMessage);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  string ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\tmyQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(string)});\n\n\t\t\tstring returnString = null;\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Original message information--&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Body: &quot; +myMessage.Body.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myMessage.Id.ToString());\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\treturnString =  myMessage.Id;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn returnString;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic void ReceiveAcknowledgment(string messageId, string queuePath)\n\t\t{\n\t\t\tbool found = false;\n\t\t\tMessageQueue queue = new MessageQueue(queuePath);\n\t\t\tqueue.MessageReadPropertyFilter.CorrelationId = true;\n\t\t\tqueue.MessageReadPropertyFilter.Acknowledgment = true;\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\twhile(queue.PeekByCorrelationId(messageId) != null)\n\t\t\t\t{\n\t\t\t\t\tMessage myAcknowledgmentMessage = queue.ReceiveByCorrelationId(messageId);\n\t\t\t\n\t\t\t\t\t// Output acknowledgment message information. The correlation Id is identical\n\t\t\t\t\t// to the id of the original message.\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Message Information--&quot;);\n\t\t\t\t\tConsole.WriteLine(&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{ \n\t\t\t\t// This exception would be thrown if there is no (further) acknowledgment message\n\t\t\t\t// with the specified correlation Id. Only output a message if there are no messages;\n\t\t\t\t// not if the loop has found at least one.\n\t\t\t\tif(found == false)\n\t\t\t\t{\t\n\t\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\t}\n\n\t\t\t\t// Handle other causes of invalid operation exception.\n\t\t\t}\n\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Message.Acknowledgment#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   void SendMessage()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Create a new message.\n      Message^ myMessage = gcnew Message( &quot;Original Message&quot; );\n      myMessage-&gt;AdministrationQueue = gcnew MessageQueue( &quot;.\\\\myAdministrationQueue&quot; );\n      myMessage-&gt;AcknowledgeType = (AcknowledgeTypes)(AcknowledgeTypes::PositiveReceive | AcknowledgeTypes::PositiveArrival);\n\n      // Send the Order to the queue.\n      myQueue-&gt;Send( myMessage );\n      return;\n   }\n\n   String^ ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      myQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      String^ returnString = nullptr;\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n\n         // Display message information.\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         Console::WriteLine( &quot;Original message information--&quot; );\n         Console::WriteLine( &quot;Body: {0}&quot;, myMessage-&gt;Body );\n         Console::WriteLine( &quot;Id: {0}&quot;, myMessage-&gt;Id );\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         returnString = myMessage-&gt;Id;\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return returnString;\n   }\n\n   void ReceiveAcknowledgment( String^ messageId, String^ queuePath )\n   {\n      bool found = false;\n      MessageQueue^ queue = gcnew MessageQueue( queuePath );\n      queue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      queue-&gt;MessageReadPropertyFilter-&gt;Acknowledgment = true;\n      try\n      {\n         while ( queue-&gt;PeekByCorrelationId( messageId ) != nullptr )\n         {\n            Message^ myAcknowledgmentMessage = queue-&gt;ReceiveByCorrelationId( messageId );\n\n            // Output acknowledgment message information. The correlation Id is identical\n            // to the id of the original message.\n            Console::WriteLine( &quot;Acknowledgment Message Information--&quot; );\n            Console::WriteLine( &quot;Correlation Id: {0}&quot;, myAcknowledgmentMessage-&gt;CorrelationId );\n            Console::WriteLine( &quot;Id: {0}&quot;, myAcknowledgmentMessage-&gt;Id );\n            Console::WriteLine( &quot;Acknowledgment Type: {0}&quot;, myAcknowledgmentMessage-&gt;Acknowledgment );\n            Console::WriteLine( &quot;____________________________________________&quot; );\n            found = true;\n         }\n      }\n      catch ( InvalidOperationException^ e ) \n      {\n         // This exception would be thrown if there is no (further) acknowledgment message\n         // with the specified correlation Id. Only output a message if there are no messages;\n         // not if the loop has found at least one.\n         if ( found == false )\n         {\n            Console::WriteLine( e-&gt;Message );\n         }\n\n         // Handle other causes of invalid operation exception.\n      }\n\n   }\n\n};\n\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Create new queues.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n   MyNewQueue::CreateQueue( &quot;.\\\\myAdministrationQueue&quot; );\n\n   // Send messages to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive messages from a queue.\n   String^ messageId = myNewQueue-&gt;ReceiveMessage();\n\n   // Receive acknowledgment message.\n   if ( messageId != nullptr )\n   {\n      myNewQueue-&gt;ReceiveAcknowledgment( messageId, &quot;.\\\\myAdministrationQueue&quot; );\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.Acknowledgment#1\">Imports System\nImports System.Messaging\n\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n   \n   \n\n   &#39; Provides an entry point into the application.       \n   &#39; This example sends and receives a message from\n   &#39; a queue.\n      \n   Public Shared Sub Main()\n         &#39; Create a new instance of the class.\n         Dim myNewQueue As New MyNewQueue()\n         \n         &#39; Create new queues.\n         CreateQueue(&quot;.\\myQueue&quot;)\n         CreateQueue(&quot;.\\myAdministrationQueue&quot;)\n         \n         &#39; Send messages to a queue.\n         myNewQueue.SendMessage()\n         \n         &#39; Receive messages from a queue.\n         Dim messageId As String = myNewQueue.ReceiveMessage()\n         \n         &#39; Receive acknowledgment message.\n         If Not (messageId Is Nothing) Then\n            myNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\myAdministrationQueue&quot;)\n         End If\n         \n         Return\n   End Sub &#39;Main\n      \n      \n      &#39; Creates a new queue.\n\n   Public Shared Sub CreateQueue(queuePath As String)\n         Try\n            If Not MessageQueue.Exists(queuePath) Then\n               MessageQueue.Create(queuePath)\n            Else\n               Console.WriteLine((queuePath + &quot; already exists.&quot;))\n            End If\n         Catch e As MessageQueueException\n            Console.WriteLine(e.Message)\n         End Try\n   End Sub &#39;CreateQueue\n       \n      \n      \n \n      &#39; Sends a string message to a queue.\n \n   Public Sub SendMessage()\n         \n         &#39; Connect to a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Create a new message.\n         Dim myMessage As New Message(&quot;Original Message&quot;)\n         \n         myMessage.AdministrationQueue = New MessageQueue(&quot;.\\myAdministrationQueue&quot;)\n         myMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive Or AcknowledgeTypes.PositiveArrival\n         \n         &#39; Send the Order to the queue.\n         myQueue.Send(myMessage)\n         \n         Return\n   End Sub &#39;SendMessage\n      \n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Function ReceiveMessage() As String\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         myQueue.MessageReadPropertyFilter.CorrelationId = True\n         \n         \n         &#39; Set the formatter to indicate body contains an Order.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(String)})\n         \n         Dim returnString As String = Nothing\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            \n            \n            &#39; Display message information.\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            Console.WriteLine(&quot;Original message information--&quot;)\n            Console.WriteLine((&quot;Body: &quot; + myMessage.Body.ToString()))\n            Console.WriteLine((&quot;Id: &quot; + myMessage.Id.ToString()))\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            \n            returnString = myMessage.Id\n         \n         \n                  \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return returnString\n   End Function &#39;ReceiveMessage\n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Sub ReceiveAcknowledgment(messageId As String, queuePath As String)\n         Dim found As Boolean = False\n         Dim queue As New MessageQueue(queuePath)\n         queue.MessageReadPropertyFilter.CorrelationId = True\n         queue.MessageReadPropertyFilter.Acknowledgment = True\n         \n         Try\n            While Not (queue.PeekByCorrelationId(messageId) Is Nothing)\n               Dim myAcknowledgmentMessage As Message = queue.ReceiveByCorrelationId(messageId)\n               \n               &#39; Output acknowledgment message information. The correlation Id is identical\n               &#39; to the id of the original message.\n               Console.WriteLine(&quot;Acknowledgment Message Information--&quot;)\n               Console.WriteLine((&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString()))\n               Console.WriteLine((&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString()))\n               Console.WriteLine((&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString()))\n               Console.WriteLine(&quot;____________________________________________&quot;)\n               \n               found = True\n            End While\n         Catch e As InvalidOperationException\n            &#39; This exception would be thrown if there is no (further) acknowledgment message\n            &#39; with the specified correlation Id. Only output a message if there are no messages;\n            &#39; not if the loop has found at least one.\n            If found = False Then\n               Console.WriteLine(e.Message)\n            End If\n         End Try \n   End Sub &#39;ReceiveAcknowledgment &#39; Handle other causes of invalid operation exception.\n End Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_DefaultBodySize\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_DefaultBodySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultBodySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the size, in bytes, of the default body buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int DefaultBodySize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The default body buffer size to create when the message is received. The default is 1024 bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default body size specifies the number of bytes to allocate for the message&#39;s body contents. The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Body_\" data-linktype=\"relative-path\">Body</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class represents the serialized contents of the message. The body can contain up to 4 MB of data. Restricting the body size can improve performance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the DefaultBodySize property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#11\">            // Set the filter&#39;s DefaultBodySize \n            // property to 2048 bytes.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                DefaultBodySize = 2048;\n            \n            // Display the new value of the filter&#39;s \n            // DefaultBodySize property.\n            Console::WriteLine(\n                &quot;MessageReadPropertyFilter.DefaultBodySize: {0}&quot;, \n                queue-&gt;MessageReadPropertyFilter-&gt;DefaultBodySize);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#11\">        // Set the filter&#39;s DefaultBodySize property to 2048 bytes.\n        queue.MessageReadPropertyFilter.DefaultBodySize = 2048;\n\n        // Display the new value of the filter&#39;s DefaultBodySize property.\n        Console.WriteLine(&quot;MessageReadPropertyFilter.DefaultBodySize: {0}&quot;,\n            queue.MessageReadPropertyFilter.DefaultBodySize.ToString());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_DefaultExtensionSize\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_DefaultExtensionSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultExtensionSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the size, in bytes, of the default extension buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int DefaultExtensionSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The default extension buffer size to create when the message is received. The default is 255 bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default extension size specifies the number of bytes to allocate for the message&#39;s extension. The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Extension_\" data-linktype=\"relative-path\">Extension</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class represents the additional, application-defined information associated with the message, such as a binary large object. It is the responsibility of the application to interpret the contents of the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Extension_\" data-linktype=\"relative-path\">Extension</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the DefaultExtensionSize property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#12\">            // Set the filter&#39;s DefaultExtensionSize\n            // property to 1024 bytes.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                DefaultExtensionSize = 1024;\n            \n            // Display the new value of the filter&#39;s \n            // DefaultExtensionSize property.\n            Console::WriteLine(\n                &quot;MessageReadPropertyFilter.&quot;\n                &quot;DefaultExtensionSize: {0}&quot;, \n                queue-&gt;MessageReadPropertyFilter-&gt;\n                DefaultExtensionSize);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#12\">        // Set the filter&#39;s DefaultExtensionSize property to 1024 bytes.\n        queue.MessageReadPropertyFilter.DefaultExtensionSize = 1024;\n\n        // Display the new value of the filter&#39;s DefaultExtensionSize property.\n        Console.WriteLine(&quot;MessageReadPropertyFilter.DefaultExtensionSize: {0}&quot;,\n            queue.MessageReadPropertyFilter.DefaultExtensionSize.ToString());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_DefaultLabelSize\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_DefaultLabelSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultLabelSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the size, in bytes, of the default label buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int DefaultLabelSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The default label buffer size to create when the message is received. The default is 255 bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default label size specifies the number of bytes to allocate for the message&#39;s label. The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Label_\" data-linktype=\"relative-path\">Label</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the label of the message.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the DefaultLabelSize property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#13\">            // Set the filter&#39;s DefaultLabelSize \n            // property to 1024 bytes.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                DefaultLabelSize = 1024;\n            \n            // Display the new value of the filter&#39;s \n            // DefaultLabelSize property.\n            Console::WriteLine(\n                &quot;MessageReadPropertyFilter.DefaultLabelSize: {0}&quot;, \n                queue-&gt;MessageReadPropertyFilter-&gt;DefaultLabelSize);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#13\">        // Set the filter&#39;s DefaultLabelSize property to 1024 bytes.\n        queue.MessageReadPropertyFilter.DefaultLabelSize = 1024;\n\n        // Display the new value of the filter&#39;s DefaultLabelSize property.\n        Console.WriteLine(&quot;MessageReadPropertyFilter.DefaultLabelSize: {0}&quot;,\n            queue.MessageReadPropertyFilter.DefaultLabelSize.ToString());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_DestinationQueue\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_DestinationQueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DestinationQueue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.DestinationQueue*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DestinationQueue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.DestinationQueue*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_DestinationQueue_\" data-linktype=\"relative-path\">DestinationQueue</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class identifies the original destination queue of the message. It is typically used to determine the original destination of a message that is in a journal or dead-letter queue. It can also be used when sending a response message back to a response queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the DestinationQueue property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#14\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s DestinationQueue property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                DestinationQueue = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // Destinationqueue-&gt;QueueName property.\n            Console::WriteLine(\n                &quot;Message.Destinationqueue-&gt;QueueName: {0}&quot;, \n                orderMessage-&gt;DestinationQueue-&gt;QueueName);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#14\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s DestinationQueue property.\n        queue.MessageReadPropertyFilter.DestinationQueue = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s DestinationQueue.QueueName\n        // property.\n        Console.WriteLine(&quot;Message.DestinationQueue.QueueName: {0}&quot;,\n            orderMessage.DestinationQueue.QueueName);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_DestinationSymmetricKey\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_DestinationSymmetricKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DestinationSymmetricKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.DestinationSymmetricKey*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DestinationSymmetricKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.DestinationSymmetricKey*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_DestinationSymmetricKey_\" data-linktype=\"relative-path\">DestinationSymmetricKey</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the symmetric key used to encrypt the message. It is required when you send application-encrypted messages, or when you send encrypted messages to a foreign queue.  </p>\n<p> A foreign queue exists in a queuing system other than Microsoft Message Queuing. Microsoft Message Queuing communicates with such queues through a connector application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the DestinationSymmetricKey property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#15\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s \n            // DestinationSymmetricKey property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                DestinationSymmetricKey = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // DestinationSymmetricKey property.\n            Console::WriteLine(\n                &quot;Message.DestinationSymmetricKey: {0}&quot;, \n                orderMessage-&gt;DestinationSymmetricKey);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#15\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s DestinationSymmetricKey property.\n        queue.MessageReadPropertyFilter.DestinationSymmetricKey = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s DestinationSymmetricKey property.\n        Console.WriteLine(&quot;Message.DestinationSymmetricKey: {0}&quot;,\n            orderMessage.DestinationSymmetricKey);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_DigitalSignature\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_DigitalSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DigitalSignature</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.DigitalSignature*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DigitalSignature { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.DigitalSignature*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_DigitalSignature_\" data-linktype=\"relative-path\">DigitalSignature</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the digital signature used to authenticate the message. In most cases, it is generated and set by Message Queuing when the sending application requests authentication.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the DigitalSignature property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#16\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s DigitalSignature property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                DigitalSignature = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // DigitalSignature property.\n            Console::WriteLine(&quot;Message.DigitalSignature: {0}&quot;, \n                orderMessage-&gt;DigitalSignature);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#16\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s DigitalSignature property.\n        queue.MessageReadPropertyFilter.DigitalSignature = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s DigitalSignature property.\n        Console.WriteLine(&quot;Message.DigitalSignature: {0}&quot;,\n            orderMessage.DigitalSignature);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_EncryptionAlgorithm\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_EncryptionAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncryptionAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.EncryptionAlgorithm*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EncryptionAlgorithm { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.EncryptionAlgorithm*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a message is private, it is encrypted before it is sent and decrypted when it is received. The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_EncryptionAlgorithm_\" data-linktype=\"relative-path\">EncryptionAlgorithm</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the algorithm used to encrypt the message body of a private message.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the EncryptionAlgorithm property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#17\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s EncryptionAlgorithm property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                EncryptionAlgorithm = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // EncryptionAlgorithm property.\n            Console::WriteLine(&quot;Message.EncryptionAlgorithm: {0}&quot;, \n                orderMessage-&gt;EncryptionAlgorithm);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#17\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s EncryptionAlgorithm property.\n        queue.MessageReadPropertyFilter.EncryptionAlgorithm = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s EncryptionAlgorithm property.\n        Console.WriteLine(&quot;Message.EncryptionAlgorithm: {0}&quot;,\n            orderMessage.EncryptionAlgorithm);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Extension\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Extension_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Extension</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Extension*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Extension { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.Extension*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Extension_\" data-linktype=\"relative-path\">Extension</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class provides for additional application-defined information that is associated with the message, like a large binary object. It is the responsibility of the receiving application to interpret the contents of the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Extension_\" data-linktype=\"relative-path\">Extension</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the Extension property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#18\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s Extension property.\n            queue-&gt;MessageReadPropertyFilter-&gt;Extension = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s Extension property.\n            Console::WriteLine(&quot;Message.Extension: {0}&quot;, \n                orderMessage-&gt;Extension);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#18\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s Extension property.\n        queue.MessageReadPropertyFilter.Extension = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s Extension property.\n        Console.WriteLine(&quot;Message.Extension: {0}&quot;,\n            orderMessage.Extension);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_HashAlgorithm\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_HashAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.HashAlgorithm*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HashAlgorithm { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.HashAlgorithm*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_HashAlgorithm_\" data-linktype=\"relative-path\">HashAlgorithm</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class identifies the hashing algorithm Message Queuing uses when authenticating messages. The hashing algorithm is also used when creating a digital signature for a message.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the HashAlgorithm property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#19\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s HashAlgorithm property.\n            queue-&gt;MessageReadPropertyFilter-&gt;HashAlgorithm = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // HashAlgorithm property.\n            Console::WriteLine(&quot;Message.HashAlgorithm: {0}&quot;, \n                orderMessage-&gt;HashAlgorithm);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#19\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s HashAlgorithm property.\n        queue.MessageReadPropertyFilter.HashAlgorithm = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s HashAlgorithm property.\n        Console.WriteLine(&quot;Message.HashAlgorithm: {0}&quot;,\n            orderMessage.HashAlgorithm);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Id\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Id*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Id { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.Id*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class indicates the Message Queuing-generated unique identifier of the message. This identifier is generated when the message is sent.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the Id property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#20\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s Id property.\n            queue-&gt;MessageReadPropertyFilter-&gt;Id = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s Id property.\n            Console::WriteLine(&quot;Message.Id: {0}&quot;, orderMessage-&gt;Id);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#20\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s Id property.\n        queue.MessageReadPropertyFilter.Id = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s Id property.\n        Console.WriteLine(&quot;Message.Id: {0}&quot;,\n            orderMessage.Id);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_IsFirstInTransaction\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_IsFirstInTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFirstInTransaction</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.IsFirstInTransaction*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFirstInTransaction { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.IsFirstInTransaction*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_IsFirstInTransaction_\" data-linktype=\"relative-path\">IsFirstInTransaction</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class is used by receiving applications to verify whether a message is the first message sent in a single transaction to a single queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the IsFirstInTransaction property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#50\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s IsFirstInTransaction property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                IsFirstInTransaction = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // IsFirstInTransaction property.\n            Console::WriteLine(&quot;Message.IsFirstInTransaction: {0}&quot;, \n                orderMessage-&gt;IsFirstInTransaction);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#50\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s IsFirstInTransaction property.\n        queue.MessageReadPropertyFilter.IsFirstInTransaction = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s IsFirstInTransaction property.\n        Console.WriteLine(&quot;Message.IsFirstInTransaction: {0}&quot;,\n            orderMessage.IsFirstInTransaction);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_IsLastInTransaction\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_IsLastInTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLastInTransaction</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.IsLastInTransaction*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsLastInTransaction { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.IsLastInTransaction*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_IsLastInTransaction_\" data-linktype=\"relative-path\">IsLastInTransaction</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class is used by receiving applications to verify whether a message is the last message sent from a single transaction to a single queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the IsLastInTransaction property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#51\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s IsLastInTransaction property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                IsLastInTransaction = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // IsLastInTransaction property.\n            Console::WriteLine(&quot;Message.IsLastInTransaction: {0}&quot;, \n                orderMessage-&gt;IsLastInTransaction);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#51\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s IsLastInTransaction property.\n        queue.MessageReadPropertyFilter.IsLastInTransaction = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s IsLastInTransaction property.\n        Console.WriteLine(&quot;Message.IsLastInTransaction: {0}&quot;,\n            orderMessage.IsLastInTransaction);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Label\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Label*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Label { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.Label*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Label_\" data-linktype=\"relative-path\">Label</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the label of the message.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the Label property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#21\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s Label property.\n            queue-&gt;MessageReadPropertyFilter-&gt;Label = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s Label property.\n            Console::WriteLine(&quot;Message.Label: {0}&quot;, \n                orderMessage-&gt;Label);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#21\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s Label property.\n        queue.MessageReadPropertyFilter.Label = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s Label property.\n        Console.WriteLine(&quot;Message.Label: {0}&quot;,\n            orderMessage.Label);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_LookupId\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_LookupId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LookupId</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.LookupId*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool LookupId { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.LookupId*</span> property information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_LookupId_\" data-linktype=\"relative-path\">LookupId</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the lookup identifier of the message.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_MessageType\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_MessageType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.MessageType*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool MessageType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.MessageType*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_MessageType_\" data-linktype=\"relative-path\">MessageType</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class identifies the type of the message. A message can be a normal message, a positive or negative acknowledgment message, or a report message.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the MessageType property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#22\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s MessageType property.\n            queue-&gt;MessageReadPropertyFilter-&gt;MessageType = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // MessageType property.\n            Console::WriteLine(&quot;Message.MessageType: {0}&quot;, \n                orderMessage-&gt;MessageType);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#22\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s MessageType property.\n        queue.MessageReadPropertyFilter.MessageType = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s MessageType property.\n        Console.WriteLine(&quot;Message.MessageType: {0}&quot;,\n            orderMessage.MessageType);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Priority\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Priority_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Priority</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Priority*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Priority { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.Priority*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Priority_\" data-linktype=\"relative-path\">Priority</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class affects how Message Queuing handles the message while it is en route, as well as where the message is placed in the queue when it reaches its destination.  </p>\n<p> Message priority can only be set meaningfully for non-transactional messages. The priority for transactional messages is automatically set to zero, which causes transactional message priority to be ignored.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  </p>\n<pre><code class=\"lang-cpp\" name=\"Message.DefaultPropertiesToSend#1\">\n#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\n   //**************************************************\n   // Sends a string message to a queue.\n   //**************************************************\npublic:\n   void SendMessage( MessagePriority priority, String^ messageBody )\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Create a new message.\n      Message^ myMessage = gcnew Message;\n      if ( priority &gt; MessagePriority::Normal )\n      {\n         myMessage-&gt;Body = &quot;High Priority: {0}&quot;,messageBody;\n      }\n      else\n      {\n         myMessage-&gt;Body = messageBody;\n      }\n\n      // Set the priority of the message.\n      myMessage-&gt;Priority = priority;\n\n      // Send the Order to the queue.\n      myQueue-&gt;Send( myMessage );\n\n      return;\n   }\n\n   //**************************************************\n   // Receives a message.\n   //**************************************************\n   void ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Set the queue to read the priority. By default, it\n      // is not read.\n      myQueue-&gt;MessageReadPropertyFilter-&gt;Priority = true;\n\n      // Set the formatter to indicate body contains a String^.\n      array&lt;Type^&gt;^ p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n\n         // Display message information.\n         Console::WriteLine( &quot;Priority: {0}&quot;,\n            myMessage-&gt;Priority );\n         Console::WriteLine( &quot;Body: {0}&quot;,\n            myMessage-&gt;Body );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n\n      return;\n   }\n};\n\n//**************************************************\n// Provides an entry point into the application.\n//\t\t \n// This example sends and receives a message from\n// a queue.\n//**************************************************\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Send messages to a queue.\n   myNewQueue-&gt;SendMessage( MessagePriority::Normal, &quot;First Message Body.&quot; );\n   myNewQueue-&gt;SendMessage( MessagePriority::Highest, &quot;Second Message Body.&quot; );\n\n   // Receive messages from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   myNewQueue-&gt;ReceiveMessage();\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.DefaultPropertiesToSend#1\">Imports System\nImports System.Messaging\n\n\n&#39;Provides a container class for the example.\nPublic Class MyNewQueue\n      \n      \n\n      &#39; Provides an entry point into the application.\n      &#39;\t\t \n      &#39; This example sends and receives a message from\n      &#39; a queue.\n\n      Public Shared Sub Main()\n         &#39; Create a new instance of the class.\n         Dim myNewQueue As New MyNewQueue()\n         \n         &#39; Send messages to a queue.\n         myNewQueue.SendMessage(MessagePriority.Normal, &quot;First Message Body.&quot;)\n         myNewQueue.SendMessage(MessagePriority.Highest, &quot;Second Message Body.&quot;)\n         \n         &#39; Receive messages from a queue.\n         myNewQueue.ReceiveMessage()\n         myNewQueue.ReceiveMessage()\n         \n         Return\n      End Sub &#39;Main\n      \n      \n      \n\n      &#39; Sends a string message to a queue.\n\n      Public Sub SendMessage(priority As MessagePriority, messageBody As String)\n         \n         &#39; Connect to a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Create a new message.\n         Dim myMessage As New Message()\n         \n         If priority &gt; MessagePriority.Normal Then\n            myMessage.Body = &quot;High Priority: &quot; + messageBody\n         Else\n            myMessage.Body = messageBody\n         End If \n         &#39; Set the priority of the message.\n         myMessage.Priority = priority\n         \n         \n         &#39; Send the Order to the queue.\n         myQueue.Send(myMessage)\n         \n         Return\n      End Sub &#39;SendMessage\n      \n      \n      \n\n      &#39; Receives a message.\n\n      Public Sub ReceiveMessage()\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Set the queue to read the priority. By default, it\n         &#39; is not read.\n         myQueue.MessageReadPropertyFilter.Priority = True\n         \n         &#39; Set the formatter to indicate body contains a string.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(String)})\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            \n            &#39; Display message information.\n            Console.WriteLine((&quot;Priority: &quot; + myMessage.Priority.ToString()))\n            Console.WriteLine((&quot;Body: &quot; + myMessage.Body.ToString()))\n         \n         \n         \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return\n      End Sub &#39;ReceiveMessage\n   End Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cs\" name=\"Message.DefaultPropertiesToSend#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send messages to a queue.\n\t\t\tmyNewQueue.SendMessage(MessagePriority.Normal, &quot;First Message Body.&quot;);\n\t\t\tmyNewQueue.SendMessage(MessagePriority.Highest, &quot;Second Message Body.&quot;);\n\n\t\t\t// Receive messages from a queue.\n\t\t\tmyNewQueue.ReceiveMessage(); \n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends a string message to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage(MessagePriority priority, string messageBody)\n\t\t{\n\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Create a new message.\n\t\t\tMessage myMessage = new Message();\n\n\t\t\tif(priority &gt; MessagePriority.Normal)\n\t\t\t{\n\t\t\t\tmyMessage.Body = &quot;High Priority: &quot; + messageBody;\n\t\t\t}\n\t\t\telse myMessage.Body = messageBody;\n\n\t\t\t// Set the priority of the message.\n\t\t\tmyMessage.Priority = priority;\n\n\n\t\t\t// Send the Order to the queue.\n\t\t\tmyQueue.Send(myMessage);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message.\n\t\t//**************************************************\n\t\t\n\t\tpublic  void ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Set the queue to read the priority. By default, it\n\t\t\t// is not read.\n\t\t\tmyQueue.MessageReadPropertyFilter.Priority = true;\n\n\t\t\t// Set the formatter to indicate body contains a string.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(string)});\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;Priority: &quot; + \n\t\t\t\t\tmyMessage.Priority.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Body: &quot; + \n\t\t\t\t\tmyMessage.Body.ToString());\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Recoverable\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Recoverable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Recoverable</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.Recoverable*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Recoverable { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.Recoverable*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Recoverable_\" data-linktype=\"relative-path\">Recoverable</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class indicates whether delivery of a message is guaranteed, even if a computer crashes while the message is en route to the destination queue.  </p>\n<p> If delivery of a message is guaranteed, the message is stored locally at every step until the message is successfully forwarded to the next computer. Setting <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Recoverable_\" data-linktype=\"relative-path\">Recoverable</a> to <code>true</code> on the message could affect the throughput.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the Recoverable property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#23\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s Recoverable property.\n            queue-&gt;MessageReadPropertyFilter-&gt;Recoverable = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // Recoverable property.\n            Console::WriteLine(&quot;Message.Recoverable: {0}&quot;, \n                orderMessage-&gt;Recoverable);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#23\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s Recoverable property.\n        queue.MessageReadPropertyFilter.Recoverable = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s Recoverable property.\n        Console.WriteLine(&quot;Message.Recoverable: {0}&quot;,\n            orderMessage.Recoverable);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_ResponseQueue\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_ResponseQueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResponseQueue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.ResponseQueue*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ResponseQueue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.ResponseQueue*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_ResponseQueue_\" data-linktype=\"relative-path\">ResponseQueue</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class identifies the queue that receives application-generated response messages that are sent back to the sending application by the receiving application. Response queues are specified by the sending application when the application sends its messages. Any available queue can be specified as a response queue.  </p>\n<p> Messages returned to the response queue are application-specific. The application must define what is in the messages as well as what is to be done when a message is received.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ResponseQueue property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#24\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s ResponseQueue property.\n            queue-&gt;MessageReadPropertyFilter-&gt;ResponseQueue = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // Responsequeue-&gt;QueueName property.\n            if (orderMessage-&gt;ResponseQueue != nullptr)\n            {\n                Console::WriteLine(\n                    &quot;Message.Responsequeue-&gt;QueueName: {0}&quot;, \n                    orderMessage-&gt;ResponseQueue-&gt;QueueName);\n            }\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#24\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s ResponseQueue property.\n        queue.MessageReadPropertyFilter.ResponseQueue = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s ResponseQueue.QueueName property.\n        if(orderMessage.ResponseQueue != null)\n        {\n            Console.WriteLine(&quot;Message.ResponseQueue.QueueName: {0}&quot;,\n                orderMessage.ResponseQueue.QueueName);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_SenderCertificate\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_SenderCertificate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SenderCertificate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SenderCertificate*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SenderCertificate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.SenderCertificate*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SenderCertificate_\" data-linktype=\"relative-path\">SenderCertificate</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the security certificate used to authenticate messages.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the SenderCertificate property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#25\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s SenderCertificate property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                SenderCertificate = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // SenderCertificate property.\n            Console::WriteLine(&quot;Message.SenderCertificate: {0}&quot;, \n                orderMessage-&gt;SenderCertificate);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#25\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s SenderCertificate property.\n        queue.MessageReadPropertyFilter.SenderCertificate = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s SenderCertificate property.\n        Console.WriteLine(&quot;Message.SenderCertificate: {0}&quot;,\n            orderMessage.SenderCertificate);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_SenderId\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_SenderId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SenderId</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SenderId*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SenderId { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.SenderId*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SenderId_\" data-linktype=\"relative-path\">SenderId</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class is used primarily by the receiving queue manager when authenticating a message. The property is set by Message Queuing and is used by the queue manager to verify who sent the message and that the sender has access rights to the receiving queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the SenderId property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#26\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s SenderId property.\n            queue-&gt;MessageReadPropertyFilter-&gt;SenderId = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s SenderId property.\n            Console::WriteLine(&quot;Message.SenderId: {0}&quot;, \n                orderMessage-&gt;SenderId);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#26\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s SenderId property.\n        queue.MessageReadPropertyFilter.SenderId = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s SenderId property.\n        Console.WriteLine(&quot;Message.SenderId: {0}&quot;,\n            orderMessage.SenderId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_SenderVersion\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_SenderVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SenderVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SenderVersion*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SenderVersion { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.SenderVersion*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SenderVersion_\" data-linktype=\"relative-path\">SenderVersion</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the version of Message Queuing used to send the message. The property is important to be aware of when using features like transaction processing, which is only supported by Message Queuing version 2.0 and later, or digital signatures, which are used to authenticate messages sent by version 1.0.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SenderVersion_\" data-linktype=\"relative-path\">SenderVersion</a> is set by the sending queue manager when the message is sent.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the SenderVersion property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#27\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s SenderVersion property.\n            queue-&gt;MessageReadPropertyFilter-&gt;SenderVersion = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // SenderVersion property.\n            Console::WriteLine(&quot;Message.SenderVersion: {0}&quot;, \n                orderMessage-&gt;SenderVersion);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#27\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s SenderVersion property.\n        queue.MessageReadPropertyFilter.SenderVersion = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s SenderVersion property.\n        Console.WriteLine(&quot;Message.SenderVersion: {0}&quot;,\n            orderMessage.SenderVersion);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_SentTime\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_SentTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SentTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SentTime*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SentTime { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.SentTime*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SentTime_\" data-linktype=\"relative-path\">SentTime</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class indicates the sending machine&#39;s date and time when the message was sent by the source Queue Manager.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the SentTime property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#28\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s SentTime property.\n            queue-&gt;MessageReadPropertyFilter-&gt;SentTime = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s SentTime property.\n            Console::WriteLine(&quot;Message.SentTime: {0}&quot;, \n                orderMessage-&gt;SentTime);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#28\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s SentTime property.\n        queue.MessageReadPropertyFilter.SentTime = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s SentTime property.\n        Console.WriteLine(&quot;Message.SentTime: {0}&quot;,\n            orderMessage.SentTime);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_SourceMachine\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_SourceMachine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SourceMachine</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.SourceMachine*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SourceMachine { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.SourceMachine*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SourceMachine_\" data-linktype=\"relative-path\">SourceMachine</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the computer where the message originated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the SourceMachine property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#29\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s SourceMachine property.\n            queue-&gt;MessageReadPropertyFilter-&gt;SourceMachine = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // SourceMachine property.\n            Console::WriteLine(&quot;Message.SourceMachine: {0}&quot;, \n                orderMessage-&gt;SourceMachine);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#29\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s SourceMachine property.\n        queue.MessageReadPropertyFilter.SourceMachine = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s SourceMachine property.\n        Console.WriteLine(&quot;Message.SourceMachine: {0}&quot;,\n            orderMessage.SourceMachine);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_TimeToBeReceived\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_TimeToBeReceived_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeToBeReceived</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.TimeToBeReceived*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TimeToBeReceived { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.TimeToBeReceived*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_TimeToBeReceived_\" data-linktype=\"relative-path\">TimeToBeReceived</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies the total time in seconds for a sent message to be received from the destination queue. The time limit for the message to be retrieved from the target queue includes the time spent getting to the destination queue, plus the time spent waiting in the queue before the message is retrieved by an application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the TimeToBeReceived property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#30\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s TimeToBeReceived property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                TimeToBeReceived = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // TimeToBeReceived property.\n            Console::WriteLine(&quot;Message.TimeToBeReceived: {0}&quot;, \n                orderMessage-&gt;TimeToBeReceived);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#30\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s TimeToBeReceived property.\n        queue.MessageReadPropertyFilter.TimeToBeReceived = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s TimeToBeReceived property.\n        Console.WriteLine(&quot;Message.TimeToBeReceived: {0}&quot;,\n            orderMessage.TimeToBeReceived);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_TimeToReachQueue\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_TimeToReachQueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeToReachQueue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.TimeToReachQueue*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TimeToReachQueue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.TimeToReachQueue*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_TimeToReachQueue_\" data-linktype=\"relative-path\">TimeToReachQueue</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies a time limit in seconds from the time the message is sent for it to reach the destination queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the TimeToReachQueue property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#31\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s TimeToReachQueue property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                TimeToReachQueue = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // TimeToReachQueue property.\n            Console::WriteLine(&quot;Message.TimeToReachQueue: {0}&quot;, \n                orderMessage-&gt;TimeToReachQueue);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#31\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s TimeToReachQueue property.\n        queue.MessageReadPropertyFilter.TimeToReachQueue = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s TimeToReachQueue property.\n        Console.WriteLine(&quot;Message.TimeToReachQueue: {0}&quot;,\n            orderMessage.TimeToReachQueue);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_TransactionId\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_TransactionId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionId</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.TransactionId*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TransactionId { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.TransactionId*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_TransactionId_\" data-linktype=\"relative-path\">TransactionId</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class identifies the transaction that sent the message. Use this property within a receiving application to verify that a message was sent as part of a specific transaction.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the TransactionId property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#52\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s TransactionId property.\n            queue-&gt;MessageReadPropertyFilter-&gt;TransactionId = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // TransactionId property.\n            Console::WriteLine(&quot;Message.TransactionId: {0}&quot;, \n                orderMessage-&gt;TransactionId);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#52\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s TransactionId property.\n        queue.MessageReadPropertyFilter.TransactionId = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s TransactionId property.\n        Console.WriteLine(&quot;Message.TransactionId: {0}&quot;,\n            orderMessage.TransactionId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_TransactionStatusQueue\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_TransactionStatusQueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionStatusQueue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.TransactionStatusQueue*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TransactionStatusQueue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.TransactionStatusQueue*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_TransactionStatusQueue_\" data-linktype=\"relative-path\">TransactionStatusQueue</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class identifies the transaction status queue on the source computer. The property is used for sending acknowledgment messages back to the sending application. The transaction status queue is used by connector applications when receiving transactional messages sent to a foreign queue.  </p>\n<p> A foreign queue exists in a queuing system other than Microsoft Message Queuing. Microsoft Message Queuing communicates with such queues through a connector application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the TransactionStatusQueue property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#53\">            // Set the queue&#39;s MessageReadPropertyFilter property to \n            // enable the message&#39;s TransactionStatusQueue property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                TransactionStatusQueue = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // TransactionStatusqueue-&gt;QueueName property.\n            Console::WriteLine(\n                &quot;Message.TransactionStatusqueue-&gt;QueueName: {0}&quot;, \n                orderMessage-&gt;TransactionStatusQueue-&gt;QueueName);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#53\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s TransactionStatusQueue property.\n        queue.MessageReadPropertyFilter.TransactionStatusQueue = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s TransactionStatusQueue.QueueName\n        // property.\n        Console.WriteLine(&quot;Message.TransactionStatusQueue.QueueName: {0}&quot;,\n            orderMessage.TransactionStatusQueue.QueueName);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_UseAuthentication\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_UseAuthentication_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseAuthentication</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseAuthentication*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseAuthentication { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.UseAuthentication*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_UseAuthentication_\" data-linktype=\"relative-path\">UseAuthentication</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies whether the message needs to be authenticated.  </p>\n<p> It is not possible to look at the properties of a message and determine whether a message failed authentication. Messages that fail authentication are discarded and are not delivered to the queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the UseAuthentication property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#32\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s UseAuthentication property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                UseAuthentication = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // UseAuthentication property.\n            Console::WriteLine(&quot;Message.UseAuthentication: {0}&quot;, \n                orderMessage-&gt;UseAuthentication);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#32\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s UseAuthentication property.\n        queue.MessageReadPropertyFilter.UseAuthentication = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s UseAuthentication property.\n        Console.WriteLine(&quot;Message.UseAuthentication: {0}&quot;,\n            orderMessage.UseAuthentication);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_UseDeadLetterQueue\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_UseDeadLetterQueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseDeadLetterQueue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseDeadLetterQueue*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseDeadLetterQueue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.UseDeadLetterQueue*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_UseDeadLetterQueue_\" data-linktype=\"relative-path\">UseDeadLetterQueue</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies whether a copy of a message that could not be delivered should be sent to a dead-letter queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the UseDeadLetterQueue property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#33\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s UseDeadLetterQueue property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                UseDeadLetterQueue = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // UseDeadLetterQueue property.\n            Console::WriteLine(&quot;Message.UseDeadLetterQueue: {0}&quot;, \n                orderMessage-&gt;UseDeadLetterQueue);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#33\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s UseDeadLetterQueue property.\n        queue.MessageReadPropertyFilter.UseDeadLetterQueue = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s UseDeadLetterQueue property.\n        Console.WriteLine(&quot;Message.UseDeadLetterQueue: {0}&quot;,\n            orderMessage.UseDeadLetterQueue);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_UseEncryption\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_UseEncryption_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseEncryption</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseEncryption*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseEncryption { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.UseEncryption*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_UseEncryption_\" data-linktype=\"relative-path\">UseEncryption</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies whether to encrypt a message.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the UseEncryption property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#34\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s UseEncryption property.\n            queue-&gt;MessageReadPropertyFilter-&gt;UseEncryption = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // UseEncryption property.\n            Console::WriteLine(&quot;Message.UseEncryption: {0}&quot;, \n                orderMessage-&gt;UseEncryption);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#34\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s UseEncryption property.\n        queue.MessageReadPropertyFilter.UseEncryption = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s UseEncryption property.\n        Console.WriteLine(&quot;Message.UseEncryption: {0}&quot;,\n            orderMessage.UseEncryption);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_UseJournalQueue\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_UseJournalQueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseJournalQueue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseJournalQueue*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseJournalQueue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.UseJournalQueue*</span> information; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_UseJournalQueue_\" data-linktype=\"relative-path\">UseJournalQueue</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies whether a copy of the message should be kept in a machine journal on the originating computer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the UseJournalQueue property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#35\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s UseJournalQueue property.\n            queue-&gt;MessageReadPropertyFilter-&gt;\n                UseJournalQueue = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // UseJournalQueue property.\n            Console::WriteLine(&quot;Message.UseJournalQueue: {0}&quot;, \n                orderMessage-&gt;UseJournalQueue);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#35\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s UseJournalQueue property.\n        queue.MessageReadPropertyFilter.UseJournalQueue = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s UseJournalQueue property.\n        Console.WriteLine(&quot;Message.UseJournalQueue: {0}&quot;,\n            orderMessage.UseJournalQueue);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_UseTracing\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_UseTracing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseTracing</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to retrieve <span class=\"xref\">stem.Messaging.Message.UseTracing*</span> property information when receiving or peeking a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseTracing { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to receive <span class=\"xref\">stem.Messaging.Message.UseTracing*</span> information; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_UseTracing_\" data-linktype=\"relative-path\">UseTracing</a> property of the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> class specifies whether to track the route of a message as it moves toward its destination queue. If <code>true</code>, each time the original message passes through a Message Queuing routing server, a Message Queuing-generated report message is sent to the system report queue.  </p>\n<p> Using tracing involves setting up Active Directory and specifying a report queue for the Message Queuing enterprise. These settings are configured by the administrator.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the UseTracing property.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#36\">            // Set the queue&#39;s MessageReadPropertyFilter property \n            // to enable the message&#39;s UseTracing property.\n            queue-&gt;MessageReadPropertyFilter-&gt;UseTracing = true;\n            \n            // Peek at the message. Time out after ten seconds \n            // in case the message was not delivered.\n            orderMessage = queue-&gt;Peek(TimeSpan::FromSeconds(10.0));\n            \n            // Display the value of the message&#39;s \n            // UseTracing property.\n            Console::WriteLine(&quot;Message.UseTracing: {0}&quot;, \n                orderMessage-&gt;UseTracing);\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#36\">        // Set the queue&#39;s MessageReadPropertyFilter property to enable the\n        // message&#39;s UseTracing property.\n        queue.MessageReadPropertyFilter.UseTracing = true;\n\n        // Peek at the message. Time out after ten seconds in case the message\n        // was not delivered.\n        orderMessage = queue.Peek(TimeSpan.FromSeconds(10.0)); \n\n        // Display the value of the message&#39;s UseTracing property.\n        Console.WriteLine(&quot;Message.UseTracing: {0}&quot;,\n            orderMessage.UseTracing);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_ClearAll\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_ClearAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearAll()</div>        \r\n          </div>\r\n    \r\n            <p>Sets all Boolean filter values to <code>false</code>, so that no message properties are retrieved when receiving a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ClearAll ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use ClearAll to set all <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> Boolean properties to <code>false</code>. This causes no message properties to be retrieved when receiving messages. ClearAll does not affect the values for <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultBodySize_\" data-linktype=\"relative-path\">DefaultBodySize</a>, <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultExtensionSize_\" data-linktype=\"relative-path\">DefaultExtensionSize</a>, or <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultLabelSize_\" data-linktype=\"relative-path\">DefaultLabelSize</a>.  </p>\n<p> After calling ClearAll, it is necessary to set at least one filter property to <code>true</code> in order to receive data related to a message. You can either set individual properties to <code>true</code>, or you can call <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_SetDefaults_\" data-linktype=\"relative-path\">SetDefaults</a> or <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_SetAll_\" data-linktype=\"relative-path\">SetAll</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls the ClearAll method.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#37\">            // Set all of the queue&#39;s MessageReadPropertyFilter \n            // Boolean properties to false.\n            queue-&gt;MessageReadPropertyFilter-&gt;ClearAll();\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#37\">        // Set all of the queue&#39;s MessageReadPropertyFilter Boolean properties\n        // to false.\n        queue.MessageReadPropertyFilter.ClearAll();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_Clone\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents an instance of the <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_SetAll\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_SetAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAll()</div>        \r\n          </div>\r\n    \r\n            <p>Specifies to retrieve all message properties when receiving a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAll ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use SetAll to set all Boolean <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> properties to <code>true</code>. This causes all message properties to be retrieved when receiving messages. SetAll does not affect the values for <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultBodySize_\" data-linktype=\"relative-path\">DefaultBodySize</a>, <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultExtensionSize_\" data-linktype=\"relative-path\">DefaultExtensionSize</a>, or <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultLabelSize_\" data-linktype=\"relative-path\">DefaultLabelSize</a>.  </p>\n<p> After calling SetAll, you can set individual filter values to <code>false</code> in order to restrict the properties retrieved when the message is received.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls the SetAll method.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#39\">            // Set all of the queue&#39;s MessageReadPropertyFilter \n            // Boolean properties to true.\n            queue-&gt;MessageReadPropertyFilter-&gt;SetAll();\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#39\">        // Set all of the queue&#39;s MessageReadPropertyFilter Boolean properties\n        // to true.\n        queue.MessageReadPropertyFilter.SetAll();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessagePropertyFilter_SetDefaults\">\r\n    \r\n            <a id=\"System_Messaging_MessagePropertyFilter_SetDefaults_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetDefaults()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the filter values of common Message Queuing properties to <code>true</code> and the integer-valued properties to their default values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetDefaults ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use SetDefaults to set the following <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> Boolean-valued properties to <code>true</code>. These are the most common properties a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> will typically interact with the following:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_AcknowledgeType_\" data-linktype=\"relative-path\">AcknowledgeType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Acknowledgment_\" data-linktype=\"relative-path\">Acknowledgment</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_AdministrationQueue_\" data-linktype=\"relative-path\">AdministrationQueue</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Body_\" data-linktype=\"relative-path\">Body</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Id_\" data-linktype=\"relative-path\">Id</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Label_\" data-linktype=\"relative-path\">Label</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_LookupId_\" data-linktype=\"relative-path\">LookupId</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_MessageType_\" data-linktype=\"relative-path\">MessageType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_ResponseQueue_\" data-linktype=\"relative-path\">ResponseQueue</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_UseDeadLetterQueue_\" data-linktype=\"relative-path\">UseDeadLetterQueue</a>  \n</li>\n<li><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_UseJournalQueue_\" data-linktype=\"relative-path\">UseJournalQueue</a>  \n\n<p>SetDefaults sets the properties in the following table to their default values.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultBodySize_\" data-linktype=\"relative-path\">DefaultBodySize</a></td>\n<td>1024</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultExtensionSize_\" data-linktype=\"relative-path\">DefaultExtensionSize</a></td>\n<td>255</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultLabelSize_\" data-linktype=\"relative-path\">DefaultLabelSize</a></td>\n<td>255</td>\n</tr>\n</tbody>\n</table>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MessageReadPropertyFilter_\" data-linktype=\"relative-path\">MessageReadPropertyFilter</a> property represents a <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> on which SetDefaults has been called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls the SetDefaults method.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagePropertyFilter#38\">            // Set all of the queue&#39;s MessageReadPropertyFilter \n            // properties to their defaults.\n            queue-&gt;MessageReadPropertyFilter-&gt;SetDefaults();\n            \n</code></pre><pre><code class=\"lang-cs\" name=\"MessagePropertyFilter#38\">        // Set all of the queue&#39;s MessageReadPropertyFilter properties to their\n        // defaults.\n        queue.MessageReadPropertyFilter.SetDefaults();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Messaging.MessagePropertyFilter.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Messaging.MessagePropertyFilter.yml\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter..ctor\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.AcknowledgeType\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Acknowledgment\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.AdministrationQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.AppSpecific\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.ArrivedTime\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.AttachSenderId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Authenticated\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.AuthenticationProviderName\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.AuthenticationProviderType\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Body\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.ClearAll\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Clone\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.ConnectorType\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.CorrelationId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.DefaultBodySize\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.DefaultExtensionSize\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.DefaultLabelSize\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.DestinationQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.DestinationSymmetricKey\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.DigitalSignature\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.EncryptionAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Extension\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.HashAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Id\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.IsFirstInTransaction\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.IsLastInTransaction\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Label\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.LookupId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.MessageType\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Priority\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.Recoverable\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.ResponseQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.SenderCertificate\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.SenderId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.SenderVersion\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.SentTime\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.SetAll\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.SetDefaults\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.SourceMachine\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.TimeToBeReceived\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.TimeToReachQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.TransactionId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.TransactionStatusQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.UseAuthentication\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.UseDeadLetterQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.UseEncryption\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.UseJournalQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessagePropertyFilter.UseTracing\">\r\n<meta name=\"APILocation\" content=\"System.Messaging.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9e131dd9-c760-8f8e-8c04-9a151dc9dc00\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Controls and selects the properties that are retrieved when peeking or receiving messages from a message queue.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Messaging/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Messaging.MessagePropertyFilter\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Messaging.MessagePropertyFilter.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Messaging.MessagePropertyFilter.yml","open_to_public_contributors":true,"api_name":["System.Messaging.MessagePropertyFilter","System.Messaging.MessagePropertyFilter..ctor","System.Messaging.MessagePropertyFilter.AcknowledgeType","System.Messaging.MessagePropertyFilter.Acknowledgment","System.Messaging.MessagePropertyFilter.AdministrationQueue","System.Messaging.MessagePropertyFilter.AppSpecific","System.Messaging.MessagePropertyFilter.ArrivedTime","System.Messaging.MessagePropertyFilter.AttachSenderId","System.Messaging.MessagePropertyFilter.Authenticated","System.Messaging.MessagePropertyFilter.AuthenticationProviderName","System.Messaging.MessagePropertyFilter.AuthenticationProviderType","System.Messaging.MessagePropertyFilter.Body","System.Messaging.MessagePropertyFilter.ClearAll","System.Messaging.MessagePropertyFilter.Clone","System.Messaging.MessagePropertyFilter.ConnectorType","System.Messaging.MessagePropertyFilter.CorrelationId","System.Messaging.MessagePropertyFilter.DefaultBodySize","System.Messaging.MessagePropertyFilter.DefaultExtensionSize","System.Messaging.MessagePropertyFilter.DefaultLabelSize","System.Messaging.MessagePropertyFilter.DestinationQueue","System.Messaging.MessagePropertyFilter.DestinationSymmetricKey","System.Messaging.MessagePropertyFilter.DigitalSignature","System.Messaging.MessagePropertyFilter.EncryptionAlgorithm","System.Messaging.MessagePropertyFilter.Extension","System.Messaging.MessagePropertyFilter.HashAlgorithm","System.Messaging.MessagePropertyFilter.Id","System.Messaging.MessagePropertyFilter.IsFirstInTransaction","System.Messaging.MessagePropertyFilter.IsLastInTransaction","System.Messaging.MessagePropertyFilter.Label","System.Messaging.MessagePropertyFilter.LookupId","System.Messaging.MessagePropertyFilter.MessageType","System.Messaging.MessagePropertyFilter.Priority","System.Messaging.MessagePropertyFilter.Recoverable","System.Messaging.MessagePropertyFilter.ResponseQueue","System.Messaging.MessagePropertyFilter.SenderCertificate","System.Messaging.MessagePropertyFilter.SenderId","System.Messaging.MessagePropertyFilter.SenderVersion","System.Messaging.MessagePropertyFilter.SentTime","System.Messaging.MessagePropertyFilter.SetAll","System.Messaging.MessagePropertyFilter.SetDefaults","System.Messaging.MessagePropertyFilter.SourceMachine","System.Messaging.MessagePropertyFilter.TimeToBeReceived","System.Messaging.MessagePropertyFilter.TimeToReachQueue","System.Messaging.MessagePropertyFilter.TransactionId","System.Messaging.MessagePropertyFilter.TransactionStatusQueue","System.Messaging.MessagePropertyFilter.UseAuthentication","System.Messaging.MessagePropertyFilter.UseDeadLetterQueue","System.Messaging.MessagePropertyFilter.UseEncryption","System.Messaging.MessagePropertyFilter.UseJournalQueue","System.Messaging.MessagePropertyFilter.UseTracing"],"api_location":["System.Messaging.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Messaging.MessagePropertyFilter","System::Messaging::MessagePropertyFilter","System.Messaging.MessagePropertyFilter.#ctor","System::Messaging::MessagePropertyFilter::#ctor","System.Messaging.MessagePropertyFilter.AcknowledgeType","System::Messaging::MessagePropertyFilter::AcknowledgeType","System.Messaging.MessagePropertyFilter.Acknowledgment","System::Messaging::MessagePropertyFilter::Acknowledgment","System.Messaging.MessagePropertyFilter.AdministrationQueue","System::Messaging::MessagePropertyFilter::AdministrationQueue","System.Messaging.MessagePropertyFilter.AppSpecific","System::Messaging::MessagePropertyFilter::AppSpecific","System.Messaging.MessagePropertyFilter.ArrivedTime","System::Messaging::MessagePropertyFilter::ArrivedTime","System.Messaging.MessagePropertyFilter.AttachSenderId","System::Messaging::MessagePropertyFilter::AttachSenderId","System.Messaging.MessagePropertyFilter.Authenticated","System::Messaging::MessagePropertyFilter::Authenticated","System.Messaging.MessagePropertyFilter.AuthenticationProviderName","System::Messaging::MessagePropertyFilter::AuthenticationProviderName","System.Messaging.MessagePropertyFilter.AuthenticationProviderType","System::Messaging::MessagePropertyFilter::AuthenticationProviderType","System.Messaging.MessagePropertyFilter.Body","System::Messaging::MessagePropertyFilter::Body","System.Messaging.MessagePropertyFilter.ClearAll","System::Messaging::MessagePropertyFilter::ClearAll","System.Messaging.MessagePropertyFilter.Clone","System::Messaging::MessagePropertyFilter::Clone","System.Messaging.MessagePropertyFilter.ConnectorType","System::Messaging::MessagePropertyFilter::ConnectorType","System.Messaging.MessagePropertyFilter.CorrelationId","System::Messaging::MessagePropertyFilter::CorrelationId","System.Messaging.MessagePropertyFilter.DefaultBodySize","System::Messaging::MessagePropertyFilter::DefaultBodySize","System.Messaging.MessagePropertyFilter.DefaultExtensionSize","System::Messaging::MessagePropertyFilter::DefaultExtensionSize","System.Messaging.MessagePropertyFilter.DefaultLabelSize","System::Messaging::MessagePropertyFilter::DefaultLabelSize","System.Messaging.MessagePropertyFilter.DestinationQueue","System::Messaging::MessagePropertyFilter::DestinationQueue","System.Messaging.MessagePropertyFilter.DestinationSymmetricKey","System::Messaging::MessagePropertyFilter::DestinationSymmetricKey","System.Messaging.MessagePropertyFilter.DigitalSignature","System::Messaging::MessagePropertyFilter::DigitalSignature","System.Messaging.MessagePropertyFilter.EncryptionAlgorithm","System::Messaging::MessagePropertyFilter::EncryptionAlgorithm","System.Messaging.MessagePropertyFilter.Extension","System::Messaging::MessagePropertyFilter::Extension","System.Messaging.MessagePropertyFilter.HashAlgorithm","System::Messaging::MessagePropertyFilter::HashAlgorithm","System.Messaging.MessagePropertyFilter.Id","System::Messaging::MessagePropertyFilter::Id","System.Messaging.MessagePropertyFilter.IsFirstInTransaction","System::Messaging::MessagePropertyFilter::IsFirstInTransaction","System.Messaging.MessagePropertyFilter.IsLastInTransaction","System::Messaging::MessagePropertyFilter::IsLastInTransaction","System.Messaging.MessagePropertyFilter.Label","System::Messaging::MessagePropertyFilter::Label","System.Messaging.MessagePropertyFilter.LookupId","System::Messaging::MessagePropertyFilter::LookupId","System.Messaging.MessagePropertyFilter.MessageType","System::Messaging::MessagePropertyFilter::MessageType","System.Messaging.MessagePropertyFilter.Priority","System::Messaging::MessagePropertyFilter::Priority","System.Messaging.MessagePropertyFilter.Recoverable","System::Messaging::MessagePropertyFilter::Recoverable","System.Messaging.MessagePropertyFilter.ResponseQueue","System::Messaging::MessagePropertyFilter::ResponseQueue","System.Messaging.MessagePropertyFilter.SenderCertificate","System::Messaging::MessagePropertyFilter::SenderCertificate","System.Messaging.MessagePropertyFilter.SenderId","System::Messaging::MessagePropertyFilter::SenderId","System.Messaging.MessagePropertyFilter.SenderVersion","System::Messaging::MessagePropertyFilter::SenderVersion","System.Messaging.MessagePropertyFilter.SentTime","System::Messaging::MessagePropertyFilter::SentTime","System.Messaging.MessagePropertyFilter.SetAll","System::Messaging::MessagePropertyFilter::SetAll","System.Messaging.MessagePropertyFilter.SetDefaults","System::Messaging::MessagePropertyFilter::SetDefaults","System.Messaging.MessagePropertyFilter.SourceMachine","System::Messaging::MessagePropertyFilter::SourceMachine","System.Messaging.MessagePropertyFilter.TimeToBeReceived","System::Messaging::MessagePropertyFilter::TimeToBeReceived","System.Messaging.MessagePropertyFilter.TimeToReachQueue","System::Messaging::MessagePropertyFilter::TimeToReachQueue","System.Messaging.MessagePropertyFilter.TransactionId","System::Messaging::MessagePropertyFilter::TransactionId","System.Messaging.MessagePropertyFilter.TransactionStatusQueue","System::Messaging::MessagePropertyFilter::TransactionStatusQueue","System.Messaging.MessagePropertyFilter.UseAuthentication","System::Messaging::MessagePropertyFilter::UseAuthentication","System.Messaging.MessagePropertyFilter.UseDeadLetterQueue","System::Messaging::MessagePropertyFilter::UseDeadLetterQueue","System.Messaging.MessagePropertyFilter.UseEncryption","System::Messaging::MessagePropertyFilter::UseEncryption","System.Messaging.MessagePropertyFilter.UseJournalQueue","System::Messaging::MessagePropertyFilter::UseJournalQueue","System.Messaging.MessagePropertyFilter.UseTracing","System::Messaging::MessagePropertyFilter::UseTracing"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9e131dd9-c760-8f8e-8c04-9a151dc9dc00","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Messaging/MessagePropertyFilter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MessagePropertyFilter class | Microsoft Docs","_op_ogTitle":"MessagePropertyFilter class","description":"Controls and selects the properties that are retrieved when peeking or receiving messages from a message queue.\n","toc_asset_id":"_splitted/System.Messaging/toc.json","toc_rel":"_splitted/System.Messaging/toc.json","source_url":"","ms.assetid":"System.Messaging.MessagePropertyFilter","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.messaging.messagepropertyfilter","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.messaging.messagepropertyfilter","fileRelativePath":"System.Messaging.MessagePropertyFilter.html"},"themesRelativePathToOutputRoot":"_themes/"}