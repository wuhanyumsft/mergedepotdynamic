{"content":"    \r\n    <h1 id=\"System_CodeDom_Compiler_CompilerInfo\">\r\n      <span class=\"lang-csharp\">CompilerInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the configuration settings of a language provider. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class CompilerInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CompilerInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the CompilerInfo class to determine whether a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation is configured on the computer, or to examine the configuration and compiler settings for a specific language provider.  </p>\n<p> The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings. Each configured language provider has a corresponding compiler configuration element. Each element defines the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation type, supported language names, supported file name extensions, and compiler parameters.  </p>\n<p> The .NET Framework defines the initial compiler settings in the machine configuration file. Developers and compiler vendors can add configuration settings for a new <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation.  </p>\n<p> The CompilerInfo class provides read-only access to these settings in the machine configuration file. Use the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_GetLanguages_\" data-linktype=\"relative-path\">GetLanguages</a>, <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_GetExtensions_\" data-linktype=\"relative-path\">GetExtensions</a>, and <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType_\" data-linktype=\"relative-path\">CodeDomProviderType</a> members to examine the corresponding configuration attributes for a language provider. Use the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters_\" data-linktype=\"relative-path\">CreateDefaultCompilerParameters</a> method to obtain the compiler options and warning level attribute values for a language provider.  </p>\n<p> For more details on language provider settings in the configuration file, see <a href=\"../Topic/Compiler%20and%20Language%20Provider%20Settings%20Schema.md\" data-linktype=\"relative-path\">Compiler and Language Provider Settings Schema</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This class contains a link demand at the class level that applies to all members. A <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when the immediate caller does not have full-trust permission. For details about link demands, see <a href=\"../Topic/Link%20Demands.md\" data-linktype=\"relative-path\">Link Demands</a>.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType\" data-linktype=\"self-bookmark\">CodeDomProviderType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_IsCodeDomProviderTypeValid\" data-linktype=\"self-bookmark\">IsCodeDomProviderTypeValid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the language provider implementation is configured on the computer.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters\" data-linktype=\"self-bookmark\">CreateDefaultCompilerParameters()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the configured compiler settings for the language provider implementation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_CreateProvider\" data-linktype=\"self-bookmark\">CreateProvider()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_CreateProvider_System_Collections_Generic_IDictionary_System_String_System_String__\" data-linktype=\"self-bookmark\">CreateProvider(IDictionary&lt;String,String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings and specified options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object represents the same language provider and compiler settings as the current <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_GetExtensions\" data-linktype=\"self-bookmark\">GetExtensions()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the file name extensions supported by the language provider.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CompilerInfo_GetLanguages\" data-linktype=\"self-bookmark\">GetLanguages()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the language names supported by the language provider.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeDomProviderType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type CodeDomProviderType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> instance that represents the configured language provider type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">ConfigurationException</a></div>\r\n                  </div>\r\n                  <p>The language provider is not configured on this computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>Cannot locate the type because it is a <code>null</code> or empty string.  </p>\n<p> -or-  </p>\n<p> Cannot locate the type because the name for the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> cannot be found in the configuration file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The machine configuration file contains the fully qualified type name for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. The CodeDomProviderType property value is a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> instance that represents a configured language provider implementation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the input language has a configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. If there is a provider configured for the specified language, the example displays the language provider configuration settings. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#7\">         CodeDomProvider^ provider = nullptr;\n         CompilerInfo^ info = CodeDomProvider::GetCompilerInfo( configLanguage );\n         \n         // Check whether there is a provider configured for this language.\n         if ( info-&gt;IsCodeDomProviderTypeValid )\n         {\n            // Get a provider instance using the configured type information.\n            provider = dynamic_cast&lt;CodeDomProvider^&gt;(Activator::CreateInstance( info-&gt;CodeDomProviderType ));\n            if ( provider )\n            {\n               // Display information about this language provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Default file extension:  {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this language.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n         }\n\n         if ( provider == nullptr ) // Tell the user that the language provider was not found.\n            Console::WriteLine( &quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, configLanguage );\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#7\">         Dim info As CompilerInfo = CodeDomProvider.GetCompilerInfo(configLanguage)\n         \n         &#39; Check whether there is a provider configured for this language.\n         If info.IsCodeDomProviderTypeValid Then\n            &#39; Get a provider instance using the configured type information.\n            Dim provider As CodeDomProvider\n            provider = CType(Activator.CreateInstance(info.CodeDomProviderType), CodeDomProvider)\n            \n            &#39; Display information about this language provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this language.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no provider configured for input language &quot;&quot;{0}&quot;&quot;.&quot;, configLanguage)\n         End If\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#7\">            CompilerInfo info = CodeDomProvider.GetCompilerInfo(configLanguage);\n\n            // Check whether there is a provider configured for this language.\n            if (info.IsCodeDomProviderTypeValid)\n            {\n                // Get a provider instance using the configured type information.\n                CodeDomProvider provider;\n                provider = (CodeDomProvider)Activator.CreateInstance(info.CodeDomProviderType);\n\n                // Display information about this language provider.\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n\n                // Get the compiler settings for this language.\n\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n            }\n            else\n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, \n                    configLanguage);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_IsCodeDomProviderTypeValid\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_IsCodeDomProviderTypeValid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCodeDomProviderTypeValid</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the language provider implementation is configured on the computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsCodeDomProviderTypeValid { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the language provider implementation type is configured on the computer; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the IsCodeDomProviderTypeValid property to check the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation before accessing the provider properties or methods. For example, after you get the language provider settings from the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> method, use the IsCodeDomProviderTypeValid property to verify the provider type implementation before calling the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CreateProvider_\" data-linktype=\"relative-path\">CreateProvider</a> method or using the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType_\" data-linktype=\"relative-path\">CodeDomProviderType</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the input language has a configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. If there is a provider configured for the specified language, the example displays the language provider configuration settings. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#7\">         CodeDomProvider^ provider = nullptr;\n         CompilerInfo^ info = CodeDomProvider::GetCompilerInfo( configLanguage );\n         \n         // Check whether there is a provider configured for this language.\n         if ( info-&gt;IsCodeDomProviderTypeValid )\n         {\n            // Get a provider instance using the configured type information.\n            provider = dynamic_cast&lt;CodeDomProvider^&gt;(Activator::CreateInstance( info-&gt;CodeDomProviderType ));\n            if ( provider )\n            {\n               // Display information about this language provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Default file extension:  {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this language.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n         }\n\n         if ( provider == nullptr ) // Tell the user that the language provider was not found.\n            Console::WriteLine( &quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, configLanguage );\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#7\">         Dim info As CompilerInfo = CodeDomProvider.GetCompilerInfo(configLanguage)\n         \n         &#39; Check whether there is a provider configured for this language.\n         If info.IsCodeDomProviderTypeValid Then\n            &#39; Get a provider instance using the configured type information.\n            Dim provider As CodeDomProvider\n            provider = CType(Activator.CreateInstance(info.CodeDomProviderType), CodeDomProvider)\n            \n            &#39; Display information about this language provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this language.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no provider configured for input language &quot;&quot;{0}&quot;&quot;.&quot;, configLanguage)\n         End If\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#7\">            CompilerInfo info = CodeDomProvider.GetCompilerInfo(configLanguage);\n\n            // Check whether there is a provider configured for this language.\n            if (info.IsCodeDomProviderTypeValid)\n            {\n                // Get a provider instance using the configured type information.\n                CodeDomProvider provider;\n                provider = (CodeDomProvider)Activator.CreateInstance(info.CodeDomProviderType);\n\n                // Display information about this language provider.\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n\n                // Get the compiler settings for this language.\n\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n            }\n            else\n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, \n                    configLanguage);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDefaultCompilerParameters()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the configured compiler settings for the language provider implementation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.CodeDom.Compiler.CompilerParameters CreateDefaultCompilerParameters ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> instance that contains the compiler options and settings configured for the language provider.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the CreateDefaultCompilerParameters method to examine the compiler settings of the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instances returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> and <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> methods.  </p>\n<p> The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. Each language provider configuration element can contain optional <code>compilerOptions</code> and <code>warningLevel</code> attributes. These attributes define the default values for the <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_CompilerOptions_\" data-linktype=\"relative-path\">CompilerOptions</a> and <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_WarningLevel_\" data-linktype=\"relative-path\">WarningLevel</a> properties.  </p>\n<p> If the language provider configuration element does not define the <code>compilerOptions</code> attribute, the <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_CompilerOptions_\" data-linktype=\"relative-path\">CompilerOptions</a> property value is an empty string (&quot;&quot;). If the language provider configuration element does not define the <code>warningLevel</code> attribute, the <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_WarningLevel_\" data-linktype=\"relative-path\">WarningLevel</a> property value is –1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the input language has a configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. If there is a provider configured for the specified language, the example displays the language provider configuration settings. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#7\">         CodeDomProvider^ provider = nullptr;\n         CompilerInfo^ info = CodeDomProvider::GetCompilerInfo( configLanguage );\n         \n         // Check whether there is a provider configured for this language.\n         if ( info-&gt;IsCodeDomProviderTypeValid )\n         {\n            // Get a provider instance using the configured type information.\n            provider = dynamic_cast&lt;CodeDomProvider^&gt;(Activator::CreateInstance( info-&gt;CodeDomProviderType ));\n            if ( provider )\n            {\n               // Display information about this language provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Default file extension:  {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this language.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n         }\n\n         if ( provider == nullptr ) // Tell the user that the language provider was not found.\n            Console::WriteLine( &quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, configLanguage );\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#7\">         Dim info As CompilerInfo = CodeDomProvider.GetCompilerInfo(configLanguage)\n         \n         &#39; Check whether there is a provider configured for this language.\n         If info.IsCodeDomProviderTypeValid Then\n            &#39; Get a provider instance using the configured type information.\n            Dim provider As CodeDomProvider\n            provider = CType(Activator.CreateInstance(info.CodeDomProviderType), CodeDomProvider)\n            \n            &#39; Display information about this language provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this language.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no provider configured for input language &quot;&quot;{0}&quot;&quot;.&quot;, configLanguage)\n         End If\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#7\">            CompilerInfo info = CodeDomProvider.GetCompilerInfo(configLanguage);\n\n            // Check whether there is a provider configured for this language.\n            if (info.IsCodeDomProviderTypeValid)\n            {\n                // Get a provider instance using the configured type information.\n                CodeDomProvider provider;\n                provider = (CodeDomProvider)Activator.CreateInstance(info.CodeDomProviderType);\n\n                // Display information about this language provider.\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n\n                // Get the compiler settings for this language.\n\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n            }\n            else\n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, \n                    configLanguage);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_CreateProvider\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_CreateProvider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateProvider()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.CodeDom.Compiler.CodeDomProvider CreateProvider ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a></div>\r\n                  </div>\r\n                  <p>A CodeDOM provider associated with the language provider configuration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateProvider method returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings.  </p>\n<p> Use the CreateProvider method to get a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for a <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> or <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#8\">         array&lt;CompilerInfo^&gt;^allCompilerInfo = CodeDomProvider::GetAllCompilerInfo();\n         for ( int i = 0; i &lt; allCompilerInfo-&gt;Length; i++ )\n         {\n            String^ defaultLanguage;\n            String^ defaultExtension;\n            CompilerInfo^ info = allCompilerInfo[ i ];\n            CodeDomProvider^ provider = nullptr;\n            if ( info )\n               provider = info-&gt;CreateProvider();\n\n            if ( provider )\n            {\n               // Display information about this configured provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Supported file extension(s):&quot; );\n               array&lt;String^&gt;^extensions = info-&gt;GetExtensions();\n               for ( int i = 0; i &lt; extensions-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, extensions[ i ] );\n\n               defaultExtension = provider-&gt;FileExtension;\n               if (  !defaultExtension-&gt;StartsWith( &quot;.&quot; ) )\n                   defaultExtension = String::Concat( &quot;.&quot;, defaultExtension );\n\n               Console::WriteLine( &quot;  Default file extension:  {0}<br>&quot;, defaultExtension );\n               Console::WriteLine( &quot;  Supported language(s):&quot; );\n               array&lt;String^&gt;^languages = info-&gt;GetLanguages();\n               for ( int i = 0; i &lt; languages-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, languages[ i ] );\n\n               defaultLanguage = CodeDomProvider::GetLanguageFromExtension( defaultExtension );\n               Console::WriteLine(  &quot;  Default language:        {0}&quot;, defaultLanguage );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this provider.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#8\">         Dim allCompilerInfo As CompilerInfo() = CodeDomProvider.GetAllCompilerInfo()\n         Dim info As CompilerInfo\n         For Each info In  allCompilerInfo\n\n            Dim defaultLanguage As String\n            Dim defaultExtension As String\n\n            Dim provider As CodeDomProvider = info.CreateProvider()\n            \n            &#39; Display information about this configured provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported file extension(s):&quot;)\n            Dim extension As String\n            For Each extension In info.GetExtensions()\n               Console.WriteLine(&quot;    {0}&quot;, extension)\n            Next extension\n            \n            defaultExtension = provider.FileExtension\n            If Not defaultExtension.StartsWith(&quot;.&quot;) Then\n               defaultExtension = &quot;.&quot; + defaultExtension\n            End If\n \n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n              defaultExtension)\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported language(s):&quot;)\n            Dim language As String\n            For Each language In  info.GetLanguages()\n               Console.WriteLine(&quot;    {0}&quot;, language)\n            Next language\n            defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension)\n            Console.WriteLine(&quot;  Default language:        {0}&quot;, _\n               defaultLanguage)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this provider.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n            Console.WriteLine()\n         Next info\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#8\">            CompilerInfo [] allCompilerInfo = CodeDomProvider.GetAllCompilerInfo();\n            foreach (CompilerInfo info in allCompilerInfo)\n            {\n                String defaultLanguage;\n                String defaultExtension;\n\n                CodeDomProvider provider = info.CreateProvider();\n\n                // Display information about this configured provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n         \n                Console.WriteLine(&quot;  Supported file extension(s):&quot;);\n                foreach(String extension in info.GetExtensions())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, extension);\n                }\n   \n                defaultExtension = provider.FileExtension;\n                if (defaultExtension[0] != &#39;.&#39;)\n                {\n                    defaultExtension = &quot;.&quot; + defaultExtension;\n                }\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    defaultExtension);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;  Supported language(s):&quot;);\n                foreach(String language in info.GetLanguages())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, language);\n                }\n\n                defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension);\n                Console.WriteLine(&quot;  Default language:        {0}&quot;,\n                    defaultLanguage);\n                Console.WriteLine();\n\n                // Get the compiler settings for this provider.\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n                Console.WriteLine();\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_CreateProvider_System_Collections_Generic_IDictionary_System_String_System_String__\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_CreateProvider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateProvider(IDictionary&lt;String,String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings and specified options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.CodeDom.Compiler.CodeDomProvider CreateProvider (System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>providerOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection of provider options from the configuration file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a></div>\r\n                  </div>\r\n                  <p>A CodeDOM provider associated with the language provider configuration and specified options.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>providerOptions </code>is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The provider does not support options.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateProvider method returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the current language provider settings and the specified provider options. For information about supported provider options, see the specific CodeDOM provider documentation.  </p>\n<p> Use the CreateProvider method to get a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for a <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> or <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object represents the same language provider and compiler settings as the current <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>o</code> is a <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> object and its value is the same as this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> method.  </p>\n<p> The two instances are considered equal if the values of the following properties are equal:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CodeDomProviderType_\" data-linktype=\"relative-path\">CodeDomProviderType</a> property.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_WarningLevel_\" data-linktype=\"relative-path\">WarningLevel</a>, <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_CompilerOptions_\" data-linktype=\"relative-path\">CompilerOptions</a>, and <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters#System_CodeDom_Compiler_CompilerParameters_IncludeDebugInformation_\" data-linktype=\"relative-path\">IncludeDebugInformation</a> properties of the <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> instance returned by the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_CreateDefaultCompilerParameters_\" data-linktype=\"relative-path\">CreateDefaultCompilerParameters</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_GetExtensions\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_GetExtensions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExtensions()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the file name extensions supported by the language provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] GetExtensions ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of file name extensions supported by the language provider.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. Each configured language provider supports one or more file name extensions. For example, a <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider\" data-linktype=\"relative-path\">Microsoft.CSharp.CSharpCodeProvider</a> might support the file name extensions &quot;.cs&quot; and &quot;.c#&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#8\">         array&lt;CompilerInfo^&gt;^allCompilerInfo = CodeDomProvider::GetAllCompilerInfo();\n         for ( int i = 0; i &lt; allCompilerInfo-&gt;Length; i++ )\n         {\n            String^ defaultLanguage;\n            String^ defaultExtension;\n            CompilerInfo^ info = allCompilerInfo[ i ];\n            CodeDomProvider^ provider = nullptr;\n            if ( info )\n               provider = info-&gt;CreateProvider();\n\n            if ( provider )\n            {\n               // Display information about this configured provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Supported file extension(s):&quot; );\n               array&lt;String^&gt;^extensions = info-&gt;GetExtensions();\n               for ( int i = 0; i &lt; extensions-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, extensions[ i ] );\n\n               defaultExtension = provider-&gt;FileExtension;\n               if (  !defaultExtension-&gt;StartsWith( &quot;.&quot; ) )\n                   defaultExtension = String::Concat( &quot;.&quot;, defaultExtension );\n\n               Console::WriteLine( &quot;  Default file extension:  {0}<br>&quot;, defaultExtension );\n               Console::WriteLine( &quot;  Supported language(s):&quot; );\n               array&lt;String^&gt;^languages = info-&gt;GetLanguages();\n               for ( int i = 0; i &lt; languages-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, languages[ i ] );\n\n               defaultLanguage = CodeDomProvider::GetLanguageFromExtension( defaultExtension );\n               Console::WriteLine(  &quot;  Default language:        {0}&quot;, defaultLanguage );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this provider.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#8\">         Dim allCompilerInfo As CompilerInfo() = CodeDomProvider.GetAllCompilerInfo()\n         Dim info As CompilerInfo\n         For Each info In  allCompilerInfo\n\n            Dim defaultLanguage As String\n            Dim defaultExtension As String\n\n            Dim provider As CodeDomProvider = info.CreateProvider()\n            \n            &#39; Display information about this configured provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported file extension(s):&quot;)\n            Dim extension As String\n            For Each extension In info.GetExtensions()\n               Console.WriteLine(&quot;    {0}&quot;, extension)\n            Next extension\n            \n            defaultExtension = provider.FileExtension\n            If Not defaultExtension.StartsWith(&quot;.&quot;) Then\n               defaultExtension = &quot;.&quot; + defaultExtension\n            End If\n \n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n              defaultExtension)\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported language(s):&quot;)\n            Dim language As String\n            For Each language In  info.GetLanguages()\n               Console.WriteLine(&quot;    {0}&quot;, language)\n            Next language\n            defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension)\n            Console.WriteLine(&quot;  Default language:        {0}&quot;, _\n               defaultLanguage)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this provider.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n            Console.WriteLine()\n         Next info\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#8\">            CompilerInfo [] allCompilerInfo = CodeDomProvider.GetAllCompilerInfo();\n            foreach (CompilerInfo info in allCompilerInfo)\n            {\n                String defaultLanguage;\n                String defaultExtension;\n\n                CodeDomProvider provider = info.CreateProvider();\n\n                // Display information about this configured provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n         \n                Console.WriteLine(&quot;  Supported file extension(s):&quot;);\n                foreach(String extension in info.GetExtensions())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, extension);\n                }\n   \n                defaultExtension = provider.FileExtension;\n                if (defaultExtension[0] != &#39;.&#39;)\n                {\n                    defaultExtension = &quot;.&quot; + defaultExtension;\n                }\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    defaultExtension);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;  Supported language(s):&quot;);\n                foreach(String language in info.GetLanguages())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, language);\n                }\n\n                defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension);\n                Console.WriteLine(&quot;  Default language:        {0}&quot;,\n                    defaultLanguage);\n                Console.WriteLine();\n\n                // Get the compiler settings for this provider.\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n                Console.WriteLine();\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code for the current <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance, suitable for use in hashing algorithms and data structures such as a hash table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method.  </p>\n<p> This method generates the same hash code for two objects that are equal according to the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo#System_CodeDom_Compiler_CompilerInfo_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an instance of the <a class=\"xref\" href=\"microsoft.visualbasic.vbcodeprovider\" data-linktype=\"relative-path\">Microsoft.VisualBasic.VBCodeProvider</a> class. The example displays the provider name, hash code, and default file name extension for the new provider instance. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#3\">         // Get the provider for Microsoft.VisualBasic\n//         CodeDomProvider^ provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;);\n         CodeDomProvider^ provider = CodeDomProvider::CreateProvider(&quot;VisualBasic&quot;);\n         if ( provider ) // Display the Visual Basic language provider information.\n         {\n            Console::WriteLine( &quot;Visual Basic provider is {0}&quot;, provider-&gt;ToString() );\n            Console::WriteLine( &quot;  Provider hash code:     {0}&quot;, provider-&gt;GetHashCode().ToString() );\n            Console::WriteLine( &quot;  Default file extension: {0}&quot;, provider-&gt;FileExtension );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#3\">         &#39; Get the provider for Microsoft.VisualBasic\n            Dim provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;)\n         \n         &#39; Display the Visual Basic language provider information.\n         Console.WriteLine(&quot;Visual Basic provider is {0}&quot;, _\n            provider.ToString())\n         Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, _\n            provider.GetHashCode().ToString())\n         Console.WriteLine(&quot;  Default file extension: {0}&quot;, _\n            provider.FileExtension)\n         \n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#3\">            // Get the provider for Microsoft.VisualBasic\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;);\n\n            // Display the Visual Basic language provider information.\n            Console.WriteLine(&quot;Visual Basic provider is {0}&quot;, \n                provider.ToString());\n            Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, \n                provider.GetHashCode().ToString());\n            Console.WriteLine(&quot;  Default file extension: {0}&quot;, \n                provider.FileExtension);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CompilerInfo_GetLanguages\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CompilerInfo_GetLanguages_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLanguages()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the language names supported by the language provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] GetLanguages ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of language names supported by the language provider.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. Each configured language provider supports one or more language names. For example, the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> object for a <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider\" data-linktype=\"relative-path\">Microsoft.CSharp.CSharpCodeProvider</a> might return an array with the language names &quot;c#&quot;, &quot;cs&quot;, and &quot;csharp&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#8\">         array&lt;CompilerInfo^&gt;^allCompilerInfo = CodeDomProvider::GetAllCompilerInfo();\n         for ( int i = 0; i &lt; allCompilerInfo-&gt;Length; i++ )\n         {\n            String^ defaultLanguage;\n            String^ defaultExtension;\n            CompilerInfo^ info = allCompilerInfo[ i ];\n            CodeDomProvider^ provider = nullptr;\n            if ( info )\n               provider = info-&gt;CreateProvider();\n\n            if ( provider )\n            {\n               // Display information about this configured provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Supported file extension(s):&quot; );\n               array&lt;String^&gt;^extensions = info-&gt;GetExtensions();\n               for ( int i = 0; i &lt; extensions-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, extensions[ i ] );\n\n               defaultExtension = provider-&gt;FileExtension;\n               if (  !defaultExtension-&gt;StartsWith( &quot;.&quot; ) )\n                   defaultExtension = String::Concat( &quot;.&quot;, defaultExtension );\n\n               Console::WriteLine( &quot;  Default file extension:  {0}<br>&quot;, defaultExtension );\n               Console::WriteLine( &quot;  Supported language(s):&quot; );\n               array&lt;String^&gt;^languages = info-&gt;GetLanguages();\n               for ( int i = 0; i &lt; languages-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, languages[ i ] );\n\n               defaultLanguage = CodeDomProvider::GetLanguageFromExtension( defaultExtension );\n               Console::WriteLine(  &quot;  Default language:        {0}&quot;, defaultLanguage );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this provider.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#8\">         Dim allCompilerInfo As CompilerInfo() = CodeDomProvider.GetAllCompilerInfo()\n         Dim info As CompilerInfo\n         For Each info In  allCompilerInfo\n\n            Dim defaultLanguage As String\n            Dim defaultExtension As String\n\n            Dim provider As CodeDomProvider = info.CreateProvider()\n            \n            &#39; Display information about this configured provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported file extension(s):&quot;)\n            Dim extension As String\n            For Each extension In info.GetExtensions()\n               Console.WriteLine(&quot;    {0}&quot;, extension)\n            Next extension\n            \n            defaultExtension = provider.FileExtension\n            If Not defaultExtension.StartsWith(&quot;.&quot;) Then\n               defaultExtension = &quot;.&quot; + defaultExtension\n            End If\n \n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n              defaultExtension)\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported language(s):&quot;)\n            Dim language As String\n            For Each language In  info.GetLanguages()\n               Console.WriteLine(&quot;    {0}&quot;, language)\n            Next language\n            defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension)\n            Console.WriteLine(&quot;  Default language:        {0}&quot;, _\n               defaultLanguage)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this provider.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n            Console.WriteLine()\n         Next info\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#8\">            CompilerInfo [] allCompilerInfo = CodeDomProvider.GetAllCompilerInfo();\n            foreach (CompilerInfo info in allCompilerInfo)\n            {\n                String defaultLanguage;\n                String defaultExtension;\n\n                CodeDomProvider provider = info.CreateProvider();\n\n                // Display information about this configured provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n         \n                Console.WriteLine(&quot;  Supported file extension(s):&quot;);\n                foreach(String extension in info.GetExtensions())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, extension);\n                }\n   \n                defaultExtension = provider.FileExtension;\n                if (defaultExtension[0] != &#39;.&#39;)\n                {\n                    defaultExtension = &quot;.&quot; + defaultExtension;\n                }\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    defaultExtension);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;  Supported language(s):&quot;);\n                foreach(String language in info.GetLanguages())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, language);\n                }\n\n                defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension);\n                Console.WriteLine(&quot;  Default language:        {0}&quot;,\n                    defaultLanguage);\n                Console.WriteLine();\n\n                // Get the compiler settings for this provider.\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n                Console.WriteLine();\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.CodeDom.Compiler.CompilerInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.CodeDom.Compiler.CompilerInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.CreateProvider\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.GetExtensions\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.GetLanguages\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3d477ef2-6f22-bb0a-51d0-6bd9a74fd432\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the configuration settings of a language provider. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.CodeDom.Compiler/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CodeDom.Compiler.CompilerInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.CodeDom.Compiler.CompilerInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.CodeDom.Compiler.CompilerInfo.yml","open_to_public_contributors":true,"api_name":["System.CodeDom.Compiler.CompilerInfo","System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType","System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters","System.CodeDom.Compiler.CompilerInfo.CreateProvider","System.CodeDom.Compiler.CompilerInfo.Equals","System.CodeDom.Compiler.CompilerInfo.GetExtensions","System.CodeDom.Compiler.CompilerInfo.GetHashCode","System.CodeDom.Compiler.CompilerInfo.GetLanguages","System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CodeDom.Compiler.CompilerInfo","System::CodeDom::Compiler::CompilerInfo","System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType","System::CodeDom::Compiler::CompilerInfo::CodeDomProviderType","System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters","System::CodeDom::Compiler::CompilerInfo::CreateDefaultCompilerParameters","System.CodeDom.Compiler.CompilerInfo.CreateProvider","System::CodeDom::Compiler::CompilerInfo::CreateProvider","System.CodeDom.Compiler.CompilerInfo.Equals","System::CodeDom::Compiler::CompilerInfo::Equals","System.CodeDom.Compiler.CompilerInfo.GetExtensions","System::CodeDom::Compiler::CompilerInfo::GetExtensions","System.CodeDom.Compiler.CompilerInfo.GetHashCode","System::CodeDom::Compiler::CompilerInfo::GetHashCode","System.CodeDom.Compiler.CompilerInfo.GetLanguages","System::CodeDom::Compiler::CompilerInfo::GetLanguages","System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid","System::CodeDom::Compiler::CompilerInfo::IsCodeDomProviderTypeValid"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3d477ef2-6f22-bb0a-51d0-6bd9a74fd432","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.CodeDom.Compiler/CompilerInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CompilerInfo class | Microsoft Docs","_op_ogTitle":"CompilerInfo class","description":"Represents the configuration settings of a language provider. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.CodeDom.Compiler/toc.json","toc_rel":"_splitted/System.CodeDom.Compiler/toc.json","source_url":"","ms.assetid":"System.CodeDom.Compiler.CompilerInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.codedom.compiler.compilerinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.codedom.compiler.compilerinfo","fileRelativePath":"System.CodeDom.Compiler.CompilerInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}