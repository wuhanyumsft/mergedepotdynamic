{"content":"    \r\n    <h1 id=\"System_Runtime_Remoting_Channels_IChannelSender\">\r\n      <span class=\"lang-csharp\">IChannelSender</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides required functions and properties for the sender channels.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IChannelSender : System.Runtime.Remoting.Channels.IChannel</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The sending side of channels must expose the IChannelSender interface.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IChannelSender_CreateMessageSink_System_String_System_Object_System_String__\" data-linktype=\"self-bookmark\">CreateMessageSink(String,Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a channel message sink that delivers messages to the specified URL or channel data object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IChannelSender_CreateMessageSink_System_String_System_Object_System_String__\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IChannelSender_CreateMessageSink_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateMessageSink(String,Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a channel message sink that delivers messages to the specified URL or channel data object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink (string url, object remoteChannelData, out string objectURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL to which the new sink will deliver messages. Can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>remoteChannelData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The channel data object of the remote host to which the new sink will deliver messages. Can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>objectURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a></div>\r\n                  </div>\r\n                  <p>A channel message sink that delivers messages to the specified URL or channel data object, or <code>null</code> if the channel cannot connect to the given endpoint.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateMessageSink method returns a channel message sink that delivers messages to either the specified URL or the channel data object. If the <code>uri</code> parameter is <code>null</code>, the <code>remoteChannelData</code> parameter is used as a target for the sink. Either the <code>url</code> parameter or the <code>remoteChannelData</code> parameter can be <code>null</code>, but not both.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"IChannelSender#1\">using System;\nusing System.Collections;\nusing System.Runtime.Remoting;\nusing System.Runtime.Remoting.Channels;\nusing System.Runtime.Remoting.Messaging;\nusing System.Runtime.Remoting.Channels.Http;\nusing System.Security.Permissions;\n\npublic class MyClient\n{\n   [PermissionSet(SecurityAction.LinkDemand)]\n   public static void Main()\n   {\n      try\n      {\n         // Create the &#39;IDictionary&#39; to set the server object properties.\n         IDictionary myDictionary = new Hashtable();\n         myDictionary[&quot;name&quot;] = &quot;HttpClientChannel&quot;;\n         myDictionary[&quot;priority&quot;] = 2;\n         // Set the properties along with the constructor.\n         IChannelSender myIChannelSender = new HttpClientChannel(myDictionary,\n                                    new BinaryClientFormatterSinkProvider());\n         // Register the server channel.\n         ChannelServices.RegisterChannel(myIChannelSender);\n         MyHelloServer myHelloServer1 = (MyHelloServer)Activator.GetObject(\n                  typeof(MyHelloServer), &quot;http://localhost:8085/SayHello&quot;);\n         if (myHelloServer1 == null)\n         {\n            Console.WriteLine(&quot;Could not locate server&quot;);\n         }\n         else\n         {\n            Console.WriteLine(myHelloServer1.myHelloMethod(&quot;Client&quot;));\n            // Get the name of the channel.\n            Console.WriteLine(&quot;Channel Name :&quot; + myIChannelSender.ChannelName);\n            // Get the channel priority.\n            Console.WriteLine(&quot;ChannelPriority :&quot; + \n                        myIChannelSender.ChannelPriority.ToString());\n            string myString,myObjectURI1;\n            Console.WriteLine(&quot;Parse :&quot; + \n                myIChannelSender.Parse(&quot;http://localhost:8085/SayHello&quot;,out myString)\n                + myString);\n            // Get the channel message sink that delivers message to specified url.\n            IMessageSink myIMessageSink = \n                  myIChannelSender.CreateMessageSink(\n                  &quot;http://localhost:8085/NewEndPoint&quot;, null,out myObjectURI1);\n            Console.WriteLine(&quot;Channel message sink used :&quot; + myIMessageSink.ToString());\n            Console.WriteLine(&quot;URI of new channel message sink :&quot; + myObjectURI1);\n         }\n      }\n      catch(Exception ex)\n      {\n         Console.WriteLine(&quot;Following exception is raised on client side : &quot; + ex.Message);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IChannelSender#1\">Imports System\nImports System.Collections\nImports System.Runtime.Remoting\nImports System.Runtime.Remoting.Channels\nImports System.Runtime.Remoting.Messaging\nImports System.Runtime.Remoting.Channels.Http\nImports System.Security.Permissions\n\nPublic Class MyClient\n   &lt;PermissionSet(SecurityAction.LinkDemand)&gt; _\n   Public Shared Sub Main()\n      Try\n         &#39; Create the &#39;IDictionary&#39; to set the server object properties.\n         Dim myDictionary As New Hashtable()\n         myDictionary(&quot;name&quot;) = &quot;HttpClientChannel&quot;\n         myDictionary(&quot;priority&quot;) = 2\n         &#39; Set the properties along with the constructor.\n         Dim myIChannelSender As New HttpClientChannel(myDictionary, _\n                 New BinaryClientFormatterSinkProvider())\n         &#39; Register the server channel.\n         ChannelServices.RegisterChannel(myIChannelSender)\n         Dim myHelloServer1 As MyHelloServer = CType(Activator.GetObject(GetType(MyHelloServer), _\n                 &quot;http://localhost:8085/SayHello&quot;), MyHelloServer)\n         If myHelloServer1 Is Nothing Then\n            Console.WriteLine(&quot;Could not locate server&quot;)\n         Else\n            Console.WriteLine(myHelloServer1.myHelloMethod(&quot;Client&quot;))\n            &#39; Get the name of the channel.\n            Console.WriteLine(&quot;Channel Name :&quot; + myIChannelSender.ChannelName)\n            &#39; Get the channel priority.\n            Console.WriteLine(&quot;ChannelPriority :&quot; + myIChannelSender.ChannelPriority.ToString())\n            Dim myString As String = &quot;&quot;\n            Dim myObjectURI1 As String = &quot;&quot;\n            Console.WriteLine(&quot;Parse :&quot; + myIChannelSender.Parse(&quot;http://localhost:8085/SayHello&quot;, _\n                 myString) + myString)\n            &#39; Get the channel message sink that delivers message to specified url.\n            Dim myIMessageSink As IMessageSink = _\n                 myIChannelSender.CreateMessageSink(&quot;http://localhost:8085/NewEndPoint&quot;, _\n                 Nothing, myObjectURI1)\n            Console.WriteLine(&quot;Channel message sink used :&quot; + CType(myIMessageSink,Object).ToString())\n            Console.WriteLine(&quot;URI of new channel message sink :&quot; + myObjectURI1)\n         End If\n      Catch ex As Exception\n         Console.WriteLine(&quot;Following exception is raised on client side : &quot; + ex.Message)\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;MyClient\n</code></pre><pre><code class=\"lang-cpp\" name=\"IChannelSender#1\">#using &lt;System.Runtime.Remoting.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;IChannelSender_Share.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Runtime::Remoting;\nusing namespace System::Runtime::Remoting::Channels;\nusing namespace System::Runtime::Remoting::Messaging;\nusing namespace System::Runtime::Remoting::Channels::Http;\nint main()\n{\n   try\n   {\n      \n      // Create the &#39;IDictionary&#39; to set the server object properties.\n      IDictionary^ myDictionary = gcnew Hashtable;\n      myDictionary-&gt;default[ &quot;name&quot; ] = &quot;HttpClientChannel&quot;;\n      myDictionary-&gt;default[ &quot;priority&quot; ] = 2;\n      \n      // Set the properties along with the constructor.\n      IChannelSender^ myIChannelSender = gcnew HttpClientChannel( myDictionary,gcnew BinaryClientFormatterSinkProvider );\n      \n      // Register the server channel.\n      ChannelServices::RegisterChannel( myIChannelSender, false );\n\t  MyHelloServer ^ myHelloServer1 = dynamic_cast&lt;MyHelloServer^&gt;(Activator::GetObject( MyHelloServer::typeid, &quot;http://localhost:8085/SayHello&quot; ));\n      if ( myHelloServer1 == nullptr )\n      {\n         Console::WriteLine( &quot;Could not locate server&quot; );\n      }\n      else\n      {\n         Console::WriteLine( myHelloServer1-&gt;myHelloMethod( &quot;Client&quot; ) );\n         \n         // Get the name of the channel.\n         Console::WriteLine( &quot;Channel Name :{0}&quot;, myIChannelSender-&gt;ChannelName );\n         \n         // Get the channel priority.\n         Console::WriteLine( &quot;ChannelPriority :{0}&quot;, myIChannelSender-&gt;ChannelPriority );\n         String^ myString;\n         String^ myObjectURI1;\n         Console::WriteLine( &quot;Parse :{0}{1}&quot;, myIChannelSender-&gt;Parse( &quot;http://localhost:8085/SayHello&quot;,  myString ), myString );\n         \n         // Get the channel message sink that delivers message to specified url.\n         IMessageSink^ myIMessageSink = myIChannelSender-&gt;CreateMessageSink( &quot;http://localhost:8085/NewEndPoint&quot;, nullptr,  myObjectURI1 );\n         Console::WriteLine( &quot;Channel message sink used :{0}&quot;, myIMessageSink );\n         \n         Console::WriteLine( &quot;URI of new channel message sink :{0}&quot;, myObjectURI1 );\n      }\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;Following exception is raised on client side : {0}&quot;, ex-&gt;Message );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Channels.IChannelSender.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Channels.IChannelSender.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannelSender\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"564e69bc-3e97-3980-7d45-d7fcba14c8d1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides required functions and properties for the sender channels.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Remoting.Channels/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Channels.IChannelSender\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Channels.IChannelSender.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Channels.IChannelSender.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Remoting.Channels.IChannelSender","System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Channels.IChannelSender","System::Runtime::Remoting::Channels::IChannelSender","System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink","System::Runtime::Remoting::Channels::IChannelSender::CreateMessageSink"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"564e69bc-3e97-3980-7d45-d7fcba14c8d1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Remoting.Channels/IChannelSender.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IChannelSender interface | Microsoft Docs","_op_ogTitle":"IChannelSender interface","description":"Provides required functions and properties for the sender channels.\n","toc_asset_id":"_splitted/System.Runtime.Remoting.Channels/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Channels/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Channels.IChannelSender","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.channels.ichannelsender","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.channels.ichannelsender","fileRelativePath":"System.Runtime.Remoting.Channels.IChannelSender.html"},"themesRelativePathToOutputRoot":"_themes/"}