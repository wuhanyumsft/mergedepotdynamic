{"content":"    \r\n    <h1 id=\"System_Tuple_8\">\r\n      <span class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an <em>n</em>-tuple, where <em>n</em> is 8 or greater.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT1\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s first component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT2\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s second component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT3\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s third component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT4\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s fourth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT5\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s fifth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT6\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s sixth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT7\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s seventh component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTRest\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>Any generic <code>Tuple</code> object that defines the types of the tuple&#39;s remaining components.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents an <em>n</em>-tuple that has eight or more components.  </p>\n<p> You can instantiate a Tuple(T1, object with exactly eight components by calling the static &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method. The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20. Note that it uses type inference to determine the type of each component.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple.Create#17\">      Dim primes = Tuple.Create(2, 3, 5, 7, 11, 13, 17, 19)\n      Console.WriteLine(&quot;Prime numbers less than 20: &quot; + \n                        &quot;{0}, {1}, {2}, {3}, {4}, {5}, {6}, and {7}&quot;,\n                        primes.Item1, primes.Item2, primes.Item3, \n                        primes.Item4, primes.Item5, primes.Item6,\n                        primes.Item7, primes.Rest.Item1)\n      &#39; The example displays the following output:\n      &#39;     Prime numbers less than 20: 2, 3, 5, 7, 11, 13, 17, and 19\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple.Create#17\">      var primes = Tuple.Create(2, 3, 5, 7, 11, 13, 17, 19);\n      Console.WriteLine(&quot;Prime numbers less than 20: &quot; + \n                        &quot;{0}, {1}, {2}, {3}, {4}, {5}, {6}, and {7}&quot;,\n                        primes.Item1, primes.Item2, primes.Item3, \n                        primes.Item4, primes.Item5, primes.Item6,\n                        primes.Item7, primes.Rest.Item1);\n      // The example displays the following output:\n      //    Prime numbers less than 20: 2, 3, 5, 7, 11, 13, 17, and 19\n</code></pre><p> You can also instantiate an n-tuple object with eight or more components by calling the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> constructor. The following example uses the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`8.Class#1\">      var primes = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32,  \n                   Tuple&lt;Int32&gt;&gt; (2, 3, 5, 7, 11, 13, 17, new Tuple&lt;Int32&gt;(19));\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`8.Class#1\">      Dim primes = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, _ \n                   Tuple(Of Int32))(2, 3, 5, 7, 11, 13, 17, New Tuple(Of Int32)(19))\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> To create an n-tuple with nine or more components, you must call the  <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> constructor. The static factory methods of the <a class=\"xref\" href=\"system.tuple\" data-linktype=\"relative-path\">Tuple</a> class do not support the creation of <code>Tuple</code> objects with more than eight components.  </p>\n</div>\n<p> To instantiate an n-tuple that has eight or more components with the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> constructor, you supply a generic <code>Tuple</code> object as the <code>rest</code> parameter to define the eighth through <em>n</em>th components of the tuple. By nesting generic <code>Tuple</code> objects in this way, you can create a tuple that has no practical limitation on the number of its components.  </p>\n<p> The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000. The first component of the tuple is the city name. The second component is the start date of the data series, and the third component is the population at the start date. Each subsequent component provides the population at decade intervals. The 17-tuple is created by nesting a <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object inside a Tuple(T1, object. (That is, the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object is supplied as the value of the <code>rest</code> parameter in the Tuple(T1, class constructor.) This Tuple(T1, object is, in turn, nested in an outer Tuple(T1, object. (That is, the Tuple(T1, object is supplied as the value of the <code>rest</code> parameter in the outer Tuple(T1, object&#39;s class constructor.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#19\">        var from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#19\">        Dim from1980 = Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n</code></pre><p> You can retrieve the value of the tuple&#39;s first seven components by using the read-only <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item3_\" data-linktype=\"relative-path\">Item3</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item4_\" data-linktype=\"relative-path\">Item4</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item5_\" data-linktype=\"relative-path\">Item5</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item6_\" data-linktype=\"relative-path\">Item6</a>, and <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item7_\" data-linktype=\"relative-path\">Item7</a> instance properties. Any additional components are nested and can be retrieved from the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> property. In the previous example, the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a> through <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item7_\" data-linktype=\"relative-path\">Item7</a> properties retrieve the first through seventh components of the tuple. The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the <code>Rest.Item1</code> through <code>Rest.Item7</code> properties. The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the <code>Rest.Rest.Item1</code> though <code>Rest.Rest.Item3</code> properties.  </p>\n<p> Tuples are commonly used in four different ways:  </p>\n<ul>\n<li><p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  </p>\n</li>\n<li><p>To provide easy access to, and manipulation of, a data set.  </p>\n</li>\n<li><p>To return multiple values from a method without the use of <code>out</code> parameters (in C#) or <code>ByRef</code> parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the city name, in a <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n</li>\n<li><p>To pass multiple values to a method through a single parameter. For example, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">System.Threading.Thread.Start(Object)</a> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object as the method argument, you can supply the threadâ€™s startup routine with seven items of data.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8__ctor__0__1__2__3__4__5__6__7_\" data-linktype=\"self-bookmark\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;(T1,T2,T3,T4,T5,T6,T7,TRest)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`8</span> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Item1\" data-linktype=\"self-bookmark\">Item1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s first component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Item2\" data-linktype=\"self-bookmark\">Item2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s second component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Item3\" data-linktype=\"self-bookmark\">Item3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s third component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Item4\" data-linktype=\"self-bookmark\">Item4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fourth component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Item5\" data-linktype=\"self-bookmark\">Item5</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fifth component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Item6\" data-linktype=\"self-bookmark\">Item6</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s sixth component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Item7\" data-linktype=\"self-bookmark\">Item7</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s seventh component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Rest\" data-linktype=\"self-bookmark\">Rest</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s remaining components.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`8</span> object is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`8</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">IStructuralComparable.CompareTo(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`8</span> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`8</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.GetHashCode(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`8</span> object by using a specified computation method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_8_System_IComparable_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">IComparable.CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`8</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8__ctor__0__1__2__3__4__5__6__7_\">\r\n    \r\n            <a id=\"System_Tuple_8__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;(T1,T2,T3,T4,T5,T6,T7,TRest)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`8</span> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s first component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s second component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s third component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item4</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T4</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s fourth component</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item5</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T5</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s fifth component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item6</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T6</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s sixth component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item7</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T7</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s seventh component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rest</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TRest</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any generic <code>Tuple</code> object that contains the values of the tuple&#39;s remaining components.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rest</code> is not a generic <code>Tuple</code> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also use the static &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components. The following example uses the &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method to instantiate an 8-tuple object that contains prime numbers that are less than 20.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple.Create#17\">      Dim primes = Tuple.Create(2, 3, 5, 7, 11, 13, 17, 19)\n      Console.WriteLine(&quot;Prime numbers less than 20: &quot; + \n                        &quot;{0}, {1}, {2}, {3}, {4}, {5}, {6}, and {7}&quot;,\n                        primes.Item1, primes.Item2, primes.Item3, \n                        primes.Item4, primes.Item5, primes.Item6,\n                        primes.Item7, primes.Rest.Item1)\n      &#39; The example displays the following output:\n      &#39;     Prime numbers less than 20: 2, 3, 5, 7, 11, 13, 17, and 19\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple.Create#17\">      var primes = Tuple.Create(2, 3, 5, 7, 11, 13, 17, 19);\n      Console.WriteLine(&quot;Prime numbers less than 20: &quot; + \n                        &quot;{0}, {1}, {2}, {3}, {4}, {5}, {6}, and {7}&quot;,\n                        primes.Item1, primes.Item2, primes.Item3, \n                        primes.Item4, primes.Item5, primes.Item6,\n                        primes.Item7, primes.Rest.Item1);\n      // The example displays the following output:\n      //    Prime numbers less than 20: 2, 3, 5, 7, 11, 13, 17, and 19\n</code></pre><p> This is equivalent to the following call to the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> class constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`8.Class#1\">      var primes = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32,  \n                   Tuple&lt;Int32&gt;&gt; (2, 3, 5, 7, 11, 13, 17, new Tuple&lt;Int32&gt;(19));\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`8.Class#1\">      Dim primes = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, _ \n                   Tuple(Of Int32))(2, 3, 5, 7, 11, 13, 17, New Tuple(Of Int32)(19))\n</code></pre><p> However, the static &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method cannot be used to create a tuple object with more than eight components.  </p>\n<p> When using the Tuple(T1, constructor to create an n-tuple with eight or more components, you use the <code>rest</code> parameter to create a nested n-tuple that has from one to seven components. By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components. For example, to create a 25-tuple, you instantiate a <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object with three levels of nesting, as follows:  </p>\n<ul>\n<li><p>The outermost <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object contains the first through seventh components. Its <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> property provides access to an <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object at the first level of nesting.  </p>\n</li>\n<li><p>The outermost nested <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object contains the eighth through fourteenth components, and its <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> property provides access to an <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object at the second level of nesting.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> property provides access to an <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object at the third level of nesting.  </p>\n</li>\n<li><p>The innermost tuple is a <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object that contains the twenty-second through twenty-fifth components.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000. The first component of the tuple is the city name. The second component is the start date of the series of data, and the third component is the population at the start date. Each subsequent component provides the population at decade intervals. The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#19\">        var from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#19\">        Dim from1980 = Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Item1\">\r\n    \r\n            <a id=\"System_Tuple_8_Item1_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item1</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s first component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T1 Item1 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s first component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item1 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item1 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the first element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The first component of the 17-tuple is the city name. The example uses the Item1 property to display the city name in the table header before displaying the population data.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;)\n\n        Dim year As Integer = population.Item2\n        ShowPopulation(year, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item4, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item5, population.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Item6, population.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Item7, population.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2)\n    End Sub\n\n    Private Sub ShowPopulationChange(ByVal year As Integer, ByVal newPopulation As Integer, ByVal oldPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          (newPopulation - oldPopulation) / oldPopulation / 10)\n    End Sub\n\n    Private Sub ShowPopulation(ByVal year As Integer, ByVal newPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39;    Population of Detroit\n&#39;    Year      Population      Change\n&#39;    1860          45,619         n/a\n&#39;    1870          79,577      7.44 %\n&#39;    1880         116,340      4.62 %\n&#39;    1890         205,876      7.70 %\n&#39;    1900         285,704      3.88 %\n&#39;    1910         465,766      6.30 %\n&#39;    1920         993,078     11.32 %\n&#39;    1930       1,568,622      5.80 %\n&#39;    1940       1,623,452      0.35 %\n&#39;    1950       1,849,568      1.39 %\n&#39;    1960       1,670,144     -0.97 %\n&#39;    1970       1,511,462     -0.95 %\n&#39;    1980       1,203,339     -2.04 %\n&#39;    1990       1,027,974     -1.46 %\n&#39;    2000         951,270     -0.75 %\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Item1#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1);\n        Console.WriteLine();\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;);\n\n        int year = population.Item2;\n        ShowPopulation(year, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item4, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item5, population.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Item6, population.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Item7, population.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2);\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//\n//    Population of Detroit\n//    Year      Population      Change\n//    1860          45,619         n/a\n//    1870          79,577      7.44 %\n//    1880         116,340      4.62 %\n//    1890         205,876      7.70 %\n//    1900         285,704      3.88 %\n//    1910         465,766      6.30 %\n//    1920         993,078     11.32 %\n//    1930       1,568,622      5.80 %\n//    1940       1,623,452      0.35 %\n//    1950       1,849,568      1.39 %\n//    1960       1,670,144     -0.97 %\n//    1970       1,511,462     -0.95 %\n//    1980       1,203,339     -2.04 %\n//    1990       1,027,974     -1.46 %\n//    2000         951,270     -0.75 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Item2\">\r\n    \r\n            <a id=\"System_Tuple_8_Item2_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item2</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s second component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T2 Item2 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s second component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item2 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item2 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The second component of the 17-tuple is the first year of the data series. The example assigns the value of the Item2 property to a variable, and then uses that variable to represent the year whose data is displayed.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;)\n\n        Dim year As Integer = population.Item2\n        ShowPopulation(year, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item4, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item5, population.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Item6, population.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Item7, population.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2)\n    End Sub\n\n    Private Sub ShowPopulationChange(ByVal year As Integer, ByVal newPopulation As Integer, ByVal oldPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          (newPopulation - oldPopulation) / oldPopulation / 10)\n    End Sub\n\n    Private Sub ShowPopulation(ByVal year As Integer, ByVal newPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39;    Population of Detroit\n&#39;    Year      Population      Change\n&#39;    1860          45,619         n/a\n&#39;    1870          79,577      7.44 %\n&#39;    1880         116,340      4.62 %\n&#39;    1890         205,876      7.70 %\n&#39;    1900         285,704      3.88 %\n&#39;    1910         465,766      6.30 %\n&#39;    1920         993,078     11.32 %\n&#39;    1930       1,568,622      5.80 %\n&#39;    1940       1,623,452      0.35 %\n&#39;    1950       1,849,568      1.39 %\n&#39;    1960       1,670,144     -0.97 %\n&#39;    1970       1,511,462     -0.95 %\n&#39;    1980       1,203,339     -2.04 %\n&#39;    1990       1,027,974     -1.46 %\n&#39;    2000         951,270     -0.75 %\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Item1#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1);\n        Console.WriteLine();\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;);\n\n        int year = population.Item2;\n        ShowPopulation(year, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item4, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item5, population.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Item6, population.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Item7, population.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2);\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//\n//    Population of Detroit\n//    Year      Population      Change\n//    1860          45,619         n/a\n//    1870          79,577      7.44 %\n//    1880         116,340      4.62 %\n//    1890         205,876      7.70 %\n//    1900         285,704      3.88 %\n//    1910         465,766      6.30 %\n//    1920         993,078     11.32 %\n//    1930       1,568,622      5.80 %\n//    1940       1,623,452      0.35 %\n//    1950       1,849,568      1.39 %\n//    1960       1,670,144     -0.97 %\n//    1970       1,511,462     -0.95 %\n//    1980       1,203,339     -2.04 %\n//    1990       1,027,974     -1.46 %\n//    2000         951,270     -0.75 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Item3\">\r\n    \r\n            <a id=\"System_Tuple_8_Item3_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item3</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s third component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T3 Item3 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s third component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item3 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item3 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the third element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The third component of the 17-tuple is the population in 1860. The example uses the Item3 property to display the population value and to calculate the annual rate of population change between 1860 and 1870.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;)\n\n        Dim year As Integer = population.Item2\n        ShowPopulation(year, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item4, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item5, population.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Item6, population.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Item7, population.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2)\n    End Sub\n\n    Private Sub ShowPopulationChange(ByVal year As Integer, ByVal newPopulation As Integer, ByVal oldPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          (newPopulation - oldPopulation) / oldPopulation / 10)\n    End Sub\n\n    Private Sub ShowPopulation(ByVal year As Integer, ByVal newPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39;    Population of Detroit\n&#39;    Year      Population      Change\n&#39;    1860          45,619         n/a\n&#39;    1870          79,577      7.44 %\n&#39;    1880         116,340      4.62 %\n&#39;    1890         205,876      7.70 %\n&#39;    1900         285,704      3.88 %\n&#39;    1910         465,766      6.30 %\n&#39;    1920         993,078     11.32 %\n&#39;    1930       1,568,622      5.80 %\n&#39;    1940       1,623,452      0.35 %\n&#39;    1950       1,849,568      1.39 %\n&#39;    1960       1,670,144     -0.97 %\n&#39;    1970       1,511,462     -0.95 %\n&#39;    1980       1,203,339     -2.04 %\n&#39;    1990       1,027,974     -1.46 %\n&#39;    2000         951,270     -0.75 %\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Item1#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1);\n        Console.WriteLine();\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;);\n\n        int year = population.Item2;\n        ShowPopulation(year, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item4, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item5, population.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Item6, population.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Item7, population.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2);\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//\n//    Population of Detroit\n//    Year      Population      Change\n//    1860          45,619         n/a\n//    1870          79,577      7.44 %\n//    1880         116,340      4.62 %\n//    1890         205,876      7.70 %\n//    1900         285,704      3.88 %\n//    1910         465,766      6.30 %\n//    1920         993,078     11.32 %\n//    1930       1,568,622      5.80 %\n//    1940       1,623,452      0.35 %\n//    1950       1,849,568      1.39 %\n//    1960       1,670,144     -0.97 %\n//    1970       1,511,462     -0.95 %\n//    1980       1,203,339     -2.04 %\n//    1990       1,027,974     -1.46 %\n//    2000         951,270     -0.75 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Item4\">\r\n    \r\n            <a id=\"System_Tuple_8_Item4_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item4</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fourth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T4 Item4 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T4</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fourth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item4 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item4 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the fourth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The fourth component of the 17-tuple is the population in 1870. The example uses the Item4 property to display the population value and to calculate the annual rate of population change between 1870 and 1880.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;)\n\n        Dim year As Integer = population.Item2\n        ShowPopulation(year, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item4, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item5, population.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Item6, population.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Item7, population.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2)\n    End Sub\n\n    Private Sub ShowPopulationChange(ByVal year As Integer, ByVal newPopulation As Integer, ByVal oldPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          (newPopulation - oldPopulation) / oldPopulation / 10)\n    End Sub\n\n    Private Sub ShowPopulation(ByVal year As Integer, ByVal newPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39;    Population of Detroit\n&#39;    Year      Population      Change\n&#39;    1860          45,619         n/a\n&#39;    1870          79,577      7.44 %\n&#39;    1880         116,340      4.62 %\n&#39;    1890         205,876      7.70 %\n&#39;    1900         285,704      3.88 %\n&#39;    1910         465,766      6.30 %\n&#39;    1920         993,078     11.32 %\n&#39;    1930       1,568,622      5.80 %\n&#39;    1940       1,623,452      0.35 %\n&#39;    1950       1,849,568      1.39 %\n&#39;    1960       1,670,144     -0.97 %\n&#39;    1970       1,511,462     -0.95 %\n&#39;    1980       1,203,339     -2.04 %\n&#39;    1990       1,027,974     -1.46 %\n&#39;    2000         951,270     -0.75 %\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Item1#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1);\n        Console.WriteLine();\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;);\n\n        int year = population.Item2;\n        ShowPopulation(year, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item4, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item5, population.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Item6, population.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Item7, population.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2);\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//\n//    Population of Detroit\n//    Year      Population      Change\n//    1860          45,619         n/a\n//    1870          79,577      7.44 %\n//    1880         116,340      4.62 %\n//    1890         205,876      7.70 %\n//    1900         285,704      3.88 %\n//    1910         465,766      6.30 %\n//    1920         993,078     11.32 %\n//    1930       1,568,622      5.80 %\n//    1940       1,623,452      0.35 %\n//    1950       1,849,568      1.39 %\n//    1960       1,670,144     -0.97 %\n//    1970       1,511,462     -0.95 %\n//    1980       1,203,339     -2.04 %\n//    1990       1,027,974     -1.46 %\n//    2000         951,270     -0.75 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Item5\">\r\n    \r\n            <a id=\"System_Tuple_8_Item5_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item5</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fifth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T5 Item5 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T5</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fifth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item5 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item5 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the fifth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The fifth component of the 17-tuple is the population in 1880. The example uses the Item5 property to display the population value and to calculate the annual rate of population change between 1880 and 1890.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;)\n\n        Dim year As Integer = population.Item2\n        ShowPopulation(year, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item4, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item5, population.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Item6, population.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Item7, population.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2)\n    End Sub\n\n    Private Sub ShowPopulationChange(ByVal year As Integer, ByVal newPopulation As Integer, ByVal oldPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          (newPopulation - oldPopulation) / oldPopulation / 10)\n    End Sub\n\n    Private Sub ShowPopulation(ByVal year As Integer, ByVal newPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39;    Population of Detroit\n&#39;    Year      Population      Change\n&#39;    1860          45,619         n/a\n&#39;    1870          79,577      7.44 %\n&#39;    1880         116,340      4.62 %\n&#39;    1890         205,876      7.70 %\n&#39;    1900         285,704      3.88 %\n&#39;    1910         465,766      6.30 %\n&#39;    1920         993,078     11.32 %\n&#39;    1930       1,568,622      5.80 %\n&#39;    1940       1,623,452      0.35 %\n&#39;    1950       1,849,568      1.39 %\n&#39;    1960       1,670,144     -0.97 %\n&#39;    1970       1,511,462     -0.95 %\n&#39;    1980       1,203,339     -2.04 %\n&#39;    1990       1,027,974     -1.46 %\n&#39;    2000         951,270     -0.75 %\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Item1#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1);\n        Console.WriteLine();\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;);\n\n        int year = population.Item2;\n        ShowPopulation(year, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item4, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item5, population.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Item6, population.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Item7, population.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2);\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//\n//    Population of Detroit\n//    Year      Population      Change\n//    1860          45,619         n/a\n//    1870          79,577      7.44 %\n//    1880         116,340      4.62 %\n//    1890         205,876      7.70 %\n//    1900         285,704      3.88 %\n//    1910         465,766      6.30 %\n//    1920         993,078     11.32 %\n//    1930       1,568,622      5.80 %\n//    1940       1,623,452      0.35 %\n//    1950       1,849,568      1.39 %\n//    1960       1,670,144     -0.97 %\n//    1970       1,511,462     -0.95 %\n//    1980       1,203,339     -2.04 %\n//    1990       1,027,974     -1.46 %\n//    2000         951,270     -0.75 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Item6\">\r\n    \r\n            <a id=\"System_Tuple_8_Item6_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item6</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s sixth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T6 Item6 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T6</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s sixth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item6 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item6 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the sixth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The sixth component of the 17-tuple is the population in 1890. The example uses the Item6 property to display the population value and to calculate the annual rate of population change between 1890 and 1900.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;)\n\n        Dim year As Integer = population.Item2\n        ShowPopulation(year, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item4, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item5, population.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Item6, population.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Item7, population.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2)\n    End Sub\n\n    Private Sub ShowPopulationChange(ByVal year As Integer, ByVal newPopulation As Integer, ByVal oldPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          (newPopulation - oldPopulation) / oldPopulation / 10)\n    End Sub\n\n    Private Sub ShowPopulation(ByVal year As Integer, ByVal newPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39;    Population of Detroit\n&#39;    Year      Population      Change\n&#39;    1860          45,619         n/a\n&#39;    1870          79,577      7.44 %\n&#39;    1880         116,340      4.62 %\n&#39;    1890         205,876      7.70 %\n&#39;    1900         285,704      3.88 %\n&#39;    1910         465,766      6.30 %\n&#39;    1920         993,078     11.32 %\n&#39;    1930       1,568,622      5.80 %\n&#39;    1940       1,623,452      0.35 %\n&#39;    1950       1,849,568      1.39 %\n&#39;    1960       1,670,144     -0.97 %\n&#39;    1970       1,511,462     -0.95 %\n&#39;    1980       1,203,339     -2.04 %\n&#39;    1990       1,027,974     -1.46 %\n&#39;    2000         951,270     -0.75 %\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Item1#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1);\n        Console.WriteLine();\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;);\n\n        int year = population.Item2;\n        ShowPopulation(year, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item4, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item5, population.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Item6, population.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Item7, population.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2);\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//\n//    Population of Detroit\n//    Year      Population      Change\n//    1860          45,619         n/a\n//    1870          79,577      7.44 %\n//    1880         116,340      4.62 %\n//    1890         205,876      7.70 %\n//    1900         285,704      3.88 %\n//    1910         465,766      6.30 %\n//    1920         993,078     11.32 %\n//    1930       1,568,622      5.80 %\n//    1940       1,623,452      0.35 %\n//    1950       1,849,568      1.39 %\n//    1960       1,670,144     -0.97 %\n//    1970       1,511,462     -0.95 %\n//    1980       1,203,339     -2.04 %\n//    1990       1,027,974     -1.46 %\n//    2000         951,270     -0.75 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Item7\">\r\n    \r\n            <a id=\"System_Tuple_8_Item7_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item7</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s seventh component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T7 Item7 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T7</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s seventh component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item7 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item7 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the seventh element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The seventh component of the 17-tuple is the population in 1900. The example uses the Item7 property to display the population value and to calculate the annual rate of population change between 1900 and 1910.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;)\n\n        Dim year As Integer = population.Item2\n        ShowPopulation(year, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item4, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item5, population.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Item6, population.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Item7, population.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2)\n    End Sub\n\n    Private Sub ShowPopulationChange(ByVal year As Integer, ByVal newPopulation As Integer, ByVal oldPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          (newPopulation - oldPopulation) / oldPopulation / 10)\n    End Sub\n\n    Private Sub ShowPopulation(ByVal year As Integer, ByVal newPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39;    Population of Detroit\n&#39;    Year      Population      Change\n&#39;    1860          45,619         n/a\n&#39;    1870          79,577      7.44 %\n&#39;    1880         116,340      4.62 %\n&#39;    1890         205,876      7.70 %\n&#39;    1900         285,704      3.88 %\n&#39;    1910         465,766      6.30 %\n&#39;    1920         993,078     11.32 %\n&#39;    1930       1,568,622      5.80 %\n&#39;    1940       1,623,452      0.35 %\n&#39;    1950       1,849,568      1.39 %\n&#39;    1960       1,670,144     -0.97 %\n&#39;    1970       1,511,462     -0.95 %\n&#39;    1980       1,203,339     -2.04 %\n&#39;    1990       1,027,974     -1.46 %\n&#39;    2000         951,270     -0.75 %\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Item1#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1);\n        Console.WriteLine();\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;);\n\n        int year = population.Item2;\n        ShowPopulation(year, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item4, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item5, population.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Item6, population.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Item7, population.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2);\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//\n//    Population of Detroit\n//    Year      Population      Change\n//    1860          45,619         n/a\n//    1870          79,577      7.44 %\n//    1880         116,340      4.62 %\n//    1890         205,876      7.70 %\n//    1900         285,704      3.88 %\n//    1910         465,766      6.30 %\n//    1920         993,078     11.32 %\n//    1930       1,568,622      5.80 %\n//    1940       1,623,452      0.35 %\n//    1950       1,849,568      1.39 %\n//    1960       1,670,144     -0.97 %\n//    1970       1,511,462     -0.95 %\n//    1980       1,203,339     -2.04 %\n//    1990       1,027,974     -1.46 %\n//    2000         951,270     -0.75 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Rest\">\r\n    \r\n            <a id=\"System_Tuple_8_Rest_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rest</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s remaining components.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TRest Rest { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TRest</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s remaining components.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Rest property returns a nested <code>Tuple</code> object that allows access to the eighth though <em>n</em>th components of the tuple. Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested <code>Tuple</code> object&#39;s <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a> through <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item7_\" data-linktype=\"relative-path\">Item7</a> properties. You can then use the Rest property of a nested <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object to retrieve the <code>Tuple</code> object at the next level of nesting.  </p>\n<p> You can dynamically determine the number of components in a nested <code>Tuple</code> object that is returned by the Rest property by extracting the digit from its type name. The following example provides an illustration.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#2\">Imports System.Reflection\n\nModule Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n      \n        ShowComponentCount(population)\n   End Sub\n   \n   Private Sub ShowComponentCount(tuple As Object) \n      Static ctr As Integer = 0\n      Static totalComponents As Integer = 0\n      Dim components As Integer = 0\n      \n      ctr += 1\n      Dim name As String = tuple.GetType().Name\n      components += Int32.Parse(name.Substring(name.IndexOf(&quot;`&quot;) + 1))\n      If components = 8 Then\n         totalComponents += 7\n         Console.WriteLine(&quot;The tuple at level {0} has 7 components.&quot;, ctr)\n         ShowComponentCount(tuple.Rest)\n      Else\n         totalComponents += components\n         Console.WriteLine(&quot;The tuple at level {0} has {1} components.&quot;, \n                           ctr, components)\n         Console.WriteLine(&quot;Total components in tuple: {0}&quot;, totalComponents)\n      End If      \n   End Sub        \nEnd Module\n&#39; The example displays the following output:\n&#39;       The tuple at level 1 has 7 components.\n&#39;       The tuple at level 2 has 7 components.\n&#39;       The tuple at level 3 has 3 components.\n&#39;       Total components in tuple: 17\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000. The seventh component of the 17-tuple is the population in 1900. The example uses the Rest property to retrieve the values of the eighth through fourteenth components, and it uses the Rest property of the nested <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object to retrieve the values of the remaining components.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;)\n\n        Dim year As Integer = population.Item2\n        ShowPopulation(year, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item4, population.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Item5, population.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Item6, population.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Item7, population.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1)\n        year += 10\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2)\n    End Sub\n\n    Private Sub ShowPopulationChange(ByVal year As Integer, ByVal newPopulation As Integer, ByVal oldPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          (newPopulation - oldPopulation) / oldPopulation / 10)\n    End Sub\n\n    Private Sub ShowPopulation(ByVal year As Integer, ByVal newPopulation As Integer)\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;\n&#39;    Population of Detroit\n&#39;    Year      Population      Change\n&#39;    1860          45,619         n/a\n&#39;    1870          79,577      7.44 %\n&#39;    1880         116,340      4.62 %\n&#39;    1890         205,876      7.70 %\n&#39;    1900         285,704      3.88 %\n&#39;    1910         465,766      6.30 %\n&#39;    1920         993,078     11.32 %\n&#39;    1930       1,568,622      5.80 %\n&#39;    1940       1,623,452      0.35 %\n&#39;    1950       1,849,568      1.39 %\n&#39;    1960       1,670,144     -0.97 %\n&#39;    1970       1,511,462     -0.95 %\n&#39;    1980       1,203,339     -2.04 %\n&#39;    1990       1,027,974     -1.46 %\n&#39;    2000         951,270     -0.75 %\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Item1#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(&quot;Population of {0}&quot;, population.Item1);\n        Console.WriteLine();\n        Console.WriteLine(&quot;{0,5}  {1,14}  {2,10}&quot;, &quot;Year&quot;, &quot;Population&quot;, &quot;Change&quot;);\n\n        int year = population.Item2;\n        ShowPopulation(year, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item4, population.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Item5, population.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Item6, population.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Item7, population.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item1, population.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item2, population.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item3, population.Rest.Item2);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item4, population.Rest.Item3);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item5, population.Rest.Item4);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item6, population.Rest.Item5);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Item7, population.Rest.Item6);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item1, population.Rest.Item7);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item2, population.Rest.Rest.Item1);\n        year += 10;\n        ShowPopulationChange(year, population.Rest.Rest.Item3, population.Rest.Rest.Item2);\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//\n//    Population of Detroit\n//    Year      Population      Change\n//    1860          45,619         n/a\n//    1870          79,577      7.44 %\n//    1880         116,340      4.62 %\n//    1890         205,876      7.70 %\n//    1900         285,704      3.88 %\n//    1910         465,766      6.30 %\n//    1920         993,078     11.32 %\n//    1930       1,568,622      5.80 %\n//    1940       1,623,452      0.35 %\n//    1950       1,849,568      1.39 %\n//    1960       1,670,144     -0.97 %\n//    1970       1,511,462     -0.95 %\n//    1980       1,203,339     -2.04 %\n//    1990       1,027,974     -1.46 %\n//    2000         951,270     -0.75 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_8_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`8</span> object is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>obj</code> parameter is considered to be equal to the current instance if it meets all the following conditions:  </p>\n<ul>\n<li><p>It is a <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object.  </p>\n</li>\n<li><p>It has the same total number of components that are of the same types as the current instance.  </p>\n</li>\n<li><p>Its components (including its nested components) are equal to those of the current instance. Equality is determined by the default equality comparer for each component.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines five <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects that contain prime numbers. It then compares the first object with each of the remaining objects. As the output shows, only the first and the last <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects are equal, because they have an identical number of components with identical values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Equals#1\">Module Example\n   Public Sub Main()\n      &#39; Create five 8-tuple objects containing prime numbers.\n      Dim prime1 = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple(Of Int32)) (2, 3, 5, 7, 11, 13, 17, \n                           New Tuple(Of Int32)(19))\n      Dim prime2 = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple(Of Int32)) (23, 29, 31, 37, 41, 43, 47, \n                           New Tuple(Of Int32)(55)) \n      Dim prime3 = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple(Of Int32)) (3, 2, 5, 7, 11, 13, 17, \n                           New Tuple(Of Int32)(19)) \n      Dim prime4 = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple(Of Int32, Int32)) (2, 3, 5, 7, 11, 13, 17, \n                           New Tuple(Of Int32, Int32)(19, 23))\n      Dim prime5 = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple(Of Int32)) (2, 3, 5, 7, 11, 13, 17, \n                           New Tuple(Of Int32)(19))\n      Console.WriteLine(&quot;{0} = {1} : {2}&quot;, prime1, prime2, prime1.Equals(prime2))\n      Console.WriteLine(&quot;{0} = {1} : {2}&quot;, prime1, prime3, prime1.Equals(prime3))\n      Console.WriteLine(&quot;{0} = {1} : {2}&quot;, prime1, prime4, prime1.Equals(prime4))\n      Console.WriteLine(&quot;{0} = {1} : {2}&quot;, prime1, prime5, prime1.Equals(prime5))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    (2, 3, 5, 7, 11, 13, 17, 19) = (23, 29, 31, 37, 41, 43, 47, 55) : False\n&#39;    (2, 3, 5, 7, 11, 13, 17, 19) = (3, 2, 5, 7, 11, 13, 17, 19) : False\n&#39;    (2, 3, 5, 7, 11, 13, 17, 19) = (2, 3, 5, 7, 11, 13, 17, 19, 23) : False\n&#39;    (2, 3, 5, 7, 11, 13, 17, 19) = (2, 3, 5, 7, 11, 13, 17, 19) : True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.Equals#1\">using System;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create five 8-tuple objects containing prime numbers.\n      var prime1 = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple&lt;Int32&gt;&gt; (2, 3, 5, 7, 11, 13, 17, \n                           new Tuple&lt;Int32&gt;(19));\n      var prime2 = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple&lt;Int32&gt;&gt; (23, 29, 31, 37, 41, 43, 47, \n                           new Tuple&lt;Int32&gt;(55));\n      var prime3 = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple&lt;Int32&gt;&gt; (3, 2, 5, 7, 11, 13, 17, \n                           new Tuple&lt;Int32&gt;(19)); \n      var prime4 = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple&lt;Int32, Int32&gt;&gt; (2, 3, 5, 7, 11, 13, 17, \n                           new Tuple&lt;Int32, Int32&gt;(19, 23));\n      var prime5 = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple&lt;Int32&gt;&gt; (2, 3, 5, 7, 11, 13, 17, \n                           new Tuple&lt;Int32&gt;(19));\n      Console.WriteLine(&quot;{0} = {1} : {2}&quot;, prime1, prime2, prime1.Equals(prime2));\n      Console.WriteLine(&quot;{0} = {1} : {2}&quot;, prime1, prime3, prime1.Equals(prime3));\n      Console.WriteLine(&quot;{0} = {1} : {2}&quot;, prime1, prime4, prime1.Equals(prime4));\n      Console.WriteLine(&quot;{0} = {1} : {2}&quot;, prime1, prime5, prime1.Equals(prime5));\n   }\n}\n// The example displays the following output:\n//    (2, 3, 5, 7, 11, 13, 17, 19) = (23, 29, 31, 37, 41, 43, 47, 55) : False\n//    (2, 3, 5, 7, 11, 13, 17, 19) = (3, 2, 5, 7, 11, 13, 17, 19) : False\n//    (2, 3, 5, 7, 11, 13, 17, 19) = (2, 3, 5, 7, 11, 13, 17, 19, 23) : False\n//    (2, 3, 5, 7, 11, 13, 17, 19) = (2, 3, 5, 7, 11, 13, 17, 19) : True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_GetHashCode\">\r\n    \r\n            <a id=\"System_Tuple_8_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_ToString\">\r\n    \r\n            <a id=\"System_Tuple_8_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`8</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of this <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string returned by this method takes the form (<em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>, <code>Item5, Item6, Item7</code>, <em>Item8</em>â€¦), where <em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>, <em>Item5</em>, <em>Item6</em>, and <em>Item7</em> represent the values of the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item3_\" data-linktype=\"relative-path\">Item3</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item4_\" data-linktype=\"relative-path\">Item4</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item5_\" data-linktype=\"relative-path\">Item5</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item6_\" data-linktype=\"relative-path\">Item6</a>, and <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item7_\" data-linktype=\"relative-path\">Item7</a> properties. <em>Item8</em> represents the value of the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object&#39;s <code>Next.Item1</code> property. The value of any additional nested components follow <em>Item8</em>. If any of the property values is <code>null</code>, it is represented as <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900. It then uses the ToString method to display the tuple&#39;s data.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.ToString#1\">Module Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n\n        Console.WriteLine(population.ToString())      \n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   (Detroit, 1860, 45619, 79577, 116340, 205876, 285704, 465766, 993078, \n&#39;    1568622, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`8.ToString#1\">using System;\n\nclass Example\n{\n    static void Main(string[] args)\n    {\n        Tuple&lt;int, int, int&gt; from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n\n        Console.WriteLine(population.ToString());\n    }\n\n    private static void ShowPopulationChange(int year, int newPopulation, int oldPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation,\n                          ((double)(newPopulation - oldPopulation) / oldPopulation) / 10);\n    }\n\n    private static void ShowPopulation(int year, int newPopulation)\n    {\n        Console.WriteLine(&quot;{0,5}  {1,14:N0}  {2,10:P2}&quot;, year, newPopulation, &quot;n/a&quot;);\n    }\n}\n// The example displays the following output:\n//   (Detroit, 1860, 45619, 79577, 116340, 205876, 285704, 465766, 993078, \n//    1568622, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Tuple_8_System_Collections_IStructuralComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralComparable.CompareTo(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`8</span> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides custom rules for comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>other</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is not a <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralcomparable\" data-linktype=\"relative-path\">IStructuralComparable</a> interface.  </p>\n<p> This method lets you define customized comparisons of <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects. For example, you can use this method to order <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects based on the value of a specific component.  </p>\n<p> Although this method can be called directly, it is most commonly called by collection-sorting methods that include <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> parameters to order the members of a collection. For example, it is called by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method and the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a> method of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object that is instantiated by using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList__ctor_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Collections.SortedList.SortedList(IComparer)</a> constructor.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_System_Collections_IStructuralEquatable_Equals_\" data-linktype=\"relative-path\">System.Collections.IStructuralEquatable.Equals</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects that contains population data for four U.S. cities from 1940 to 2000. The octuple&#39;s first component is the city name. The remaining six components represent the population at 10-year intervals from 1940 to 2000.  </p>\n<p> The <code>PopulationComparer</code> class provides an <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation that allows the array of octuples to be sorted by any one of its components. Two values are provided to the <code>PopulationComparer</code> class in its constructor: The position of the component that defines the sort order, and a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the tuple objects should be sorted in ascending or descending order.  </p>\n<p> The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`8.CompareTo#2\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class PopulationComparer&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; : IComparer\n{\n   private int itemPosition;\n   private int multiplier = -1;\n\n   public PopulationComparer(int component) : this(component, true)\n   { }\n\n   public PopulationComparer(int component, bool descending)\n   {\n      if (! descending) multiplier = 1;\n\n      if (component &lt;= 0 || component &gt; 8)\n         throw new ArgumentException(&quot;The component argument is out of range.&quot;);\n\n      itemPosition = component;\n   }\n\n   public int Compare(object x, object y)\n   {\n      Tuple&lt;T1, T2, T3, T4, T5, T6, T7, Tuple&lt;T8&gt;&gt; tX = x as Tuple&lt;T1, T2, T3, T4, T5, T6, T7, Tuple&lt;T8&gt;&gt;;\n      if (tX == null)\n         return 0;\n\n      Tuple&lt;T1, T2, T3, T4, T5, T6, T7, Tuple&lt;T8&gt;&gt; tY = y as Tuple&lt;T1, T2, T3, T4, T5, T6, T7, Tuple&lt;T8&gt;&gt;;\n      switch (itemPosition)\n      {\n         case 1:\n            return Comparer&lt;T1&gt;.Default.Compare(tX.Item1, tY.Item1) * multiplier;\n         case 2:\n            return Comparer&lt;T2&gt;.Default.Compare(tX.Item2, tY.Item2) * multiplier;\n         case 3:\n            return Comparer&lt;T3&gt;.Default.Compare(tX.Item3, tY.Item3) * multiplier;\n         case 4:\n            return Comparer&lt;T4&gt;.Default.Compare(tX.Item4, tY.Item4) * multiplier;\n         case 5:\n            return Comparer&lt;T5&gt;.Default.Compare(tX.Item5, tY.Item5) * multiplier;\n         case 6:\n            return Comparer&lt;T6&gt;.Default.Compare(tX.Item6, tY.Item6) * multiplier;\n         case 7:\n            return Comparer&lt;T7&gt;.Default.Compare(tX.Item7, tY.Item7) * multiplier;\n         case 8:\n            return Comparer&lt;T8&gt;.Default.Compare(tX.Rest.Item1, tY.Rest.Item1) * multiplier;\n         default:\n            return Comparer&lt;T1&gt;.Default.Compare(tX.Item1, tY.Item1) * multiplier;\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create array of octuples with population data for three U.S. \n      // cities, 1940-2000.\n      Tuple&lt;string, int, int, int, int, int, int, Tuple&lt;int&gt;&gt;[] cities  = \n          { Tuple.Create(&quot;Los Angeles&quot;, 1504277, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n            Tuple.Create(&quot;New York&quot;, 7454995, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),  \n            Tuple.Create(&quot;Chicago&quot;, 3396808, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016),  \n            Tuple.Create(&quot;Detroit&quot;, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270) };\n      // Display array in unsorted order.\n      Console.WriteLine(&quot;In unsorted order:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n      Console.WriteLine();\n      \n      Array.Sort(cities, new PopulationComparer&lt;string, int, int, int, int, int, int, int&gt;(2)); \n                           \n      // Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 1950:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n      Console.WriteLine();\n      \n      Array.Sort(cities, new PopulationComparer&lt;string, int, int, int, int, int, int, int&gt;(8));\n                           \n      // Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 2000:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n   }\n}\n// The example displays the following output:\n//    In unsorted order:\n//    (Los Angeles, 1504277, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    (New York, 7454995, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Chicago, 3396808, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    (Detroit, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270)\n//    \n//    Sorted by population in 1950:\n//    (New York, 7454995, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Chicago, 3396808, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    (Detroit, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270)\n//    (Los Angeles, 1504277, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    \n//    Sorted by population in 2000:\n//    (New York, 7454995, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Los Angeles, 1504277, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    (Chicago, 3396808, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    (Detroit, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`8.CompareTo#2\">Imports System.Collections\nImports System.Collections.Generic\n\nPublic Class PopulationComparer(Of T1, T2, T3, T4, T5, T6, T7, T8) : Implements IComparer\n   Private itemPosition As Integer\n   Private multiplier As Integer = -1\n      \n   Public Sub New(component As Integer)\n      Me.New(component, True)\n   End Sub\n   \n   Public Sub New(component As Integer, descending As Boolean)\n      If Not descending Then multiplier = 1\n      \n      If component &lt;= 0 Or component &gt; 8 Then \n         Throw New ArgumentException(&quot;The component argument is out of range.&quot;)\n      End If\n      itemPosition = component\n   End Sub \n   \n   Public Function Compare(x As Object, y As Object) As Integer _\n                   Implements IComparer.Compare\n \n      Dim tX As Tuple(Of T1, T2, T3, T4, T5, T6, T7, Tuple(Of T8)) = TryCast(x, Tuple(Of T1, T2, T3, T4, T5, T6, T7, Tuple(Of T8)))\n      If tX Is Nothing Then\n         Return 0\n      Else\n         Dim tY As Tuple(Of T1, T2, T3, T4, T5, T6, T7, Tuple(Of T8)) = DirectCast(y, Tuple(Of T1, T2, T3, T4, T5, T6, T7, Tuple(Of T8)))\n         Select Case itemPosition\n            Case 1\n               Return Comparer(Of T1).Default.Compare(tX.Item1, tY.Item1) * multiplier\n            Case 2\n               Return Comparer(Of T2).Default.Compare(tX.Item2, tY.Item2) * multiplier\n            Case 3\n               Return Comparer(Of T3).Default.Compare(tX.Item3, tY.Item3) * multiplier\n            Case 4\n               Return Comparer(Of T4).Default.Compare(tX.Item4, tY.Item4) * multiplier\n            Case 5\n               Return Comparer(Of T5).Default.Compare(tX.Item5, tY.Item5) * multiplier\n            Case 6\n               Return Comparer(Of T6).Default.Compare(tX.Item6, tY.Item6) * multiplier\n            Case 7\n               Return Comparer(Of T7).Default.Compare(tX.Item7, tY.Item7) * multiplier\n            Case 8\n               Return Comparer(Of T8).Default.Compare(tX.Rest.Item1, tY.Rest.Item1) * multiplier\n         End Select      \n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      &#39; Create array of octuples with population data for three U.S. \n      &#39; cities, 1940-2000.\n      Dim cities()  = _\n          { Tuple.Create(&quot;Los Angeles&quot;, 1504277, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n            Tuple.Create(&quot;New York&quot;, 7454995, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),  \n            Tuple.Create(&quot;Chicago&quot;, 3396808, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016),  \n            Tuple.Create(&quot;Detroit&quot;, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270) }\n      &#39; Display array in unsorted order.\n      Console.WriteLine(&quot;In unsorted order:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n      Console.WriteLine()\n      \n      Array.Sort(cities, New PopulationComparer(Of String, Integer, Integer, Integer, Integer, Integer, Integer, Integer)(2)) \n                           \n      &#39; Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 1950:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n      Console.WriteLine()\n      \n      Array.Sort(cities, New PopulationComparer(Of String, Integer, Integer, Integer, Integer, Integer, Integer, Integer)(8))\n                           \n      &#39; Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 2000:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    In unsorted order:\n&#39;    (Los Angeles, 1504277, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    (New York, 7454995, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Chicago, 3396808, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    (Detroit, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270)\n&#39;    \n&#39;    Sorted by population in 1950:\n&#39;    (New York, 7454995, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Chicago, 3396808, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    (Detroit, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270)\n&#39;    (Los Angeles, 1504277, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    \n&#39;    Sorted by population in 2000:\n&#39;    (New York, 7454995, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Los Angeles, 1504277, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    (Chicago, 3396808, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    (Detroit, 1623452, 1849568, 1670144, 1511462, 1203339, 1027974, 951270)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_8_System_Collections_IStructuralEquatable_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.Equals(Object,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`8</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation is called only if <code>other</code> is not <code>null</code>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object that has the same total number of components (including those in nested <code>Tuple</code> objects) of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a> values of the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects to be compared to the <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation. If this method call returns <code>true</code>, the method is called again and passed the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item2_\" data-linktype=\"relative-path\">Item2</a> values of the two <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects. This continues until the method call returns <code>false</code> when it compares a specific pair of values, or the two <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> values are passed to the method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_8_System_Collections_IStructuralEquatable_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.GetHashCode(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`8</span> object by using a specified computation method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose <span class=\"xref\">stem.Collections.IEqualityComparer.GetHashCode*</span> method calculates the hash code of the current <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The method simply wraps a call to the <code>comparer</code> object&#39;s <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> implementation.  </p>\n<p> The algorithm used to compute the hash code should return the same hash code for two <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects that are considered to be equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_8_System_IComparable_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_8_System_IComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IComparable.CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`8</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IComparable.CompareTo (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>obj</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>obj</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>obj</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> This method provides the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> implementation for the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> class. Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> and <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a>, to order the members of a collection.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Equals_System_Object_\" data-linktype=\"relative-path\">System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Equals(Object)</a> method.  </p>\n</div>\n<p> This method uses the default object comparer to compare each component.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of octuples whose components are integers that contain a range of prime numbers. The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order. The output shows that the array has been sorted by <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a>, or the tuple&#39;s first component. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">Sort(Array)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`8.CompareTo#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create array of 8-tuple objects containing prime numbers.\n      Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, Tuple&lt;Int32&gt;&gt;[] primes = \n                     { new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple&lt;Int32&gt;&gt;(2, 3, 5, 7, 11, 13, 17, new Tuple&lt;Int32&gt;(19)),\n                       new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple&lt;Int32&gt;&gt;(23, 29, 31, 37, 41, 43, 47, new Tuple&lt;Int32&gt;(55)), \n                       new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple&lt;Int32&gt;&gt;(3, 2, 5, 7, 11, 13, 17, new Tuple&lt;Int32&gt;(19)) };\n      // Display 8-tuples in unsorted order.\n      foreach (var prime in primes)\n         Console.WriteLine(prime.ToString());\n      Console.WriteLine();\n      \n      // Sort the array and display its 8-tuples.\n      Array.Sort(primes);\n      foreach (var prime in primes)\n         Console.WriteLine(prime.ToString());\n   }\n}\n// The example displays the following output:\n//       (2, 3, 5, 7, 11, 13, 17, 19)\n//       (23, 29, 31, 37, 41, 43, 47, 55)\n//       (3, 2, 5, 7, 11, 13, 17, 19)\n//       \n//       (2, 3, 5, 7, 11, 13, 17, 19)\n//       (3, 2, 5, 7, 11, 13, 17, 19)\n//       (23, 29, 31, 37, 41, 43, 47, 55)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`8.CompareTo#1\">Module Example\n   Public Sub Main()\n      &#39; Create array of 8-tuple objects containing prime numbers.\n      Dim primes() = { New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple(Of Int32)) (2, 3, 5, 7, 11, 13, 17, \n                           New Tuple(Of Int32)(19)),\n                       New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple(Of Int32)) (23, 29, 31, 37, 41, 43, 47, \n                           New Tuple(Of Int32)(55)), \n                       New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, \n                           Tuple(Of Int32)) (3, 2, 5, 7, 11, 13, 17, \n                           New Tuple(Of Int32)(19)) }\n      &#39; Display 8-tuples in unsorted order.\n      For Each prime In primes\n         Console.WriteLine(prime.ToString())\n      Next\n      Console.WriteLine()\n      \n      &#39; Sort the array and display its 8-tuples.\n      Array.Sort(primes)\n      For Each prime In primes\n         Console.WriteLine(prime.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (2, 3, 5, 7, 11, 13, 17, 19)\n&#39;       (23, 29, 31, 37, 41, 43, 47, 55)\n&#39;       (3, 2, 5, 7, 11, 13, 17, 19)\n&#39;       \n&#39;       (2, 3, 5, 7, 11, 13, 17, 19)\n&#39;       (3, 2, 5, 7, 11, 13, 17, 19)\n&#39;       (23, 29, 31, 37, 41, 43, 47, 55)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-8.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-8.yml\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item1\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item2\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item3\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item4\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item5\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item6\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item7\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Rest\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.IStructuralComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.IStructuralEquatable.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.IStructuralEquatable.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.IComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e2ae004e-a2b3-18af-4853-43c29c711516\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Tuple`8.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an n-tuple, where n is 8 or greater.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Tuple`8\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-8.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-8.yml","open_to_public_contributors":true,"api_name":["System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>..ctor","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Equals","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.GetHashCode","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item1","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item2","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item3","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item4","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item5","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item6","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item7","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Rest","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.IStructuralComparable.CompareTo","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.IStructuralEquatable.Equals","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.IStructuralEquatable.GetHashCode","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.IComparable.CompareTo","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Tuple`8","System::Tuple`8","System.Tuple`8.#ctor","System::Tuple`8::#ctor","System.Tuple`8.Equals","System::Tuple`8::Equals","System.Tuple`8.GetHashCode","System::Tuple`8::GetHashCode","System.Tuple`8.Item1","System::Tuple`8::Item1","System.Tuple`8.Item2","System::Tuple`8::Item2","System.Tuple`8.Item3","System::Tuple`8::Item3","System.Tuple`8.Item4","System::Tuple`8::Item4","System.Tuple`8.Item5","System::Tuple`8::Item5","System.Tuple`8.Item6","System::Tuple`8::Item6","System.Tuple`8.Item7","System::Tuple`8::Item7","System.Tuple`8.Rest","System::Tuple`8::Rest","System.Tuple`8.System#Collections#IStructuralComparable#CompareTo","System::Tuple`8::System#Collections#IStructuralComparable#CompareTo","System.Tuple`8.System#Collections#IStructuralEquatable#Equals","System::Tuple`8::System#Collections#IStructuralEquatable#Equals","System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode","System::Tuple`8::System#Collections#IStructuralEquatable#GetHashCode","System.Tuple`8.System#IComparable#CompareTo","System::Tuple`8::System#IComparable#CompareTo","System.Tuple`8.ToString","System::Tuple`8::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e2ae004e-a2b3-18af-4853-43c29c711516","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Tuple`8.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Tuple`8.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Tuple<T1,T2,T3,T4,T5,T6,T7,TRest> class | Microsoft Docs","_op_ogTitle":"Tuple<T1,T2,T3,T4,T5,T6,T7,TRest> class","description":"Represents an n-tuple, where n is 8 or greater.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Tuple`8","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-8","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-8","fileRelativePath":"System.Tuple-8.html"},"themesRelativePathToOutputRoot":"_themes/"}