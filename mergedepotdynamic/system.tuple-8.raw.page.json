{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents an <em>n</em>-tuple, where <em>n</em> is 8 or greater.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T1</td>\r\n  \t\t\t<td><p>The type of the tuple&#39;s first component.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T2</td>\r\n  \t\t\t<td><p>The type of the tuple&#39;s second component.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T3</td>\r\n  \t\t\t<td><p>The type of the tuple&#39;s third component.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T4</td>\r\n  \t\t\t<td><p>The type of the tuple&#39;s fourth component.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T5</td>\r\n  \t\t\t<td><p>The type of the tuple&#39;s fifth component.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T6</td>\r\n  \t\t\t<td><p>The type of the tuple&#39;s sixth component.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T7</td>\r\n  \t\t\t<td><p>The type of the tuple&#39;s seventh component.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TRest</td>\r\n  \t\t\t<td><p>Any generic <code>Tuple</code> object that defines the types of the tuple&#39;s remaining components.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents an <em>n</em>-tuple that has eight or more components.  </p>\n<p> You can instantiate a Tuple(T1, object with exactly eight components by calling the static &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method. The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20. Note that it uses type inference to determine the type of each component.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple.Create#17\">      Dim primes = Tuple.Create(2, 3, 5, 7, 11, 13, 17, 19)\n      Console.WriteLine(&quot;Prime numbers less than 20: &quot; + \n                        &quot;{0}, {1}, {2}, {3}, {4}, {5}, {6}, and {7}&quot;,\n                        primes.Item1, primes.Item2, primes.Item3, \n                        primes.Item4, primes.Item5, primes.Item6,\n                        primes.Item7, primes.Rest.Item1)\n      &#39; The example displays the following output:\n      &#39;     Prime numbers less than 20: 2, 3, 5, 7, 11, 13, 17, and 19\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple.Create#17\">      var primes = Tuple.Create(2, 3, 5, 7, 11, 13, 17, 19);\n      Console.WriteLine(&quot;Prime numbers less than 20: &quot; + \n                        &quot;{0}, {1}, {2}, {3}, {4}, {5}, {6}, and {7}&quot;,\n                        primes.Item1, primes.Item2, primes.Item3, \n                        primes.Item4, primes.Item5, primes.Item6,\n                        primes.Item7, primes.Rest.Item1);\n      // The example displays the following output:\n      //    Prime numbers less than 20: 2, 3, 5, 7, 11, 13, 17, and 19\n</code></pre><p> You can also instantiate an n-tuple object with eight or more components by calling the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> constructor. The following example uses the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`8.Class#1\">      var primes = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32,  \n                   Tuple&lt;Int32&gt;&gt; (2, 3, 5, 7, 11, 13, 17, new Tuple&lt;Int32&gt;(19));\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`8.Class#1\">      Dim primes = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, _ \n                   Tuple(Of Int32))(2, 3, 5, 7, 11, 13, 17, New Tuple(Of Int32)(19))\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> To create an n-tuple with nine or more components, you must call the  <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> constructor. The static factory methods of the <a class=\"xref\" href=\"system.tuple\" data-linktype=\"relative-path\">Tuple</a> class do not support the creation of <code>Tuple</code> objects with more than eight components.  </p>\n</div>\n<p> To instantiate an n-tuple that has eight or more components with the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> constructor, you supply a generic <code>Tuple</code> object as the <code>rest</code> parameter to define the eighth through <em>n</em>th components of the tuple. By nesting generic <code>Tuple</code> objects in this way, you can create a tuple that has no practical limitation on the number of its components.  </p>\n<p> The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000. The first component of the tuple is the city name. The second component is the start date of the data series, and the third component is the population at the start date. Each subsequent component provides the population at decade intervals. The 17-tuple is created by nesting a <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object inside a Tuple(T1, object. (That is, the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object is supplied as the value of the <code>rest</code> parameter in the Tuple(T1, class constructor.) This Tuple(T1, object is, in turn, nested in an outer Tuple(T1, object. (That is, the Tuple(T1, object is supplied as the value of the <code>rest</code> parameter in the outer Tuple(T1, object&#39;s class constructor.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#19\">        var from1980 = Tuple.Create(1203339, 1027974, 951270);\n        var from1910 = new Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt; \n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980);\n        var population = new Tuple&lt;string, int, int, int, int, int, int,\n            Tuple&lt;int, int, int, int, int, int, int, Tuple&lt;int, int, int&gt;&gt;&gt; \n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#19\">        Dim from1980 = Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n</code></pre><p> You can retrieve the value of the tuple&#39;s first seven components by using the read-only <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item3_\" data-linktype=\"relative-path\">Item3</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item4_\" data-linktype=\"relative-path\">Item4</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item5_\" data-linktype=\"relative-path\">Item5</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item6_\" data-linktype=\"relative-path\">Item6</a>, and <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item7_\" data-linktype=\"relative-path\">Item7</a> instance properties. Any additional components are nested and can be retrieved from the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> property. In the previous example, the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a> through <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item7_\" data-linktype=\"relative-path\">Item7</a> properties retrieve the first through seventh components of the tuple. The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the <code>Rest.Item1</code> through <code>Rest.Item7</code> properties. The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the <code>Rest.Rest.Item1</code> though <code>Rest.Rest.Item3</code> properties.  </p>\n<p> Tuples are commonly used in four different ways:  </p>\n<ul>\n<li><p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  </p>\n</li>\n<li><p>To provide easy access to, and manipulation of, a data set.  </p>\n</li>\n<li><p>To return multiple values from a method without the use of <code>out</code> parameters (in C#) or <code>ByRef</code> parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the city name, in a <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n</li>\n<li><p>To pass multiple values to a method through a single parameter. For example, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">System.Threading.Thread.Start(Object)</a> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object as the method argument, you can supply the thread’s startup routine with seven items of data.</p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8__ctor__0__1__2__3__4__5__6__7_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;(T1,T2,T3,T4,T5,T6,T7,TRest)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`8</span> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T1</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the tuple&#39;s first component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T2</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the tuple&#39;s second component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item3</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T3</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the tuple&#39;s third component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item4</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T4</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the tuple&#39;s fourth component</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item5</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T5</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the tuple&#39;s fifth component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item6</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T6</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the tuple&#39;s sixth component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item7</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T7</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the tuple&#39;s seventh component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rest</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TRest</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Any generic <code>Tuple</code> object that contains the values of the tuple&#39;s remaining components.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>rest</code> is not a generic <code>Tuple</code> object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can also use the static &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components. The following example uses the &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method to instantiate an 8-tuple object that contains prime numbers that are less than 20.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple.Create#17\">      Dim primes = Tuple.Create(2, 3, 5, 7, 11, 13, 17, 19)\n      Console.WriteLine(&quot;Prime numbers less than 20: &quot; + \n                        &quot;{0}, {1}, {2}, {3}, {4}, {5}, {6}, and {7}&quot;,\n                        primes.Item1, primes.Item2, primes.Item3, \n                        primes.Item4, primes.Item5, primes.Item6,\n                        primes.Item7, primes.Rest.Item1)\n      &#39; The example displays the following output:\n      &#39;     Prime numbers less than 20: 2, 3, 5, 7, 11, 13, 17, and 19\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple.Create#17\">      var primes = Tuple.Create(2, 3, 5, 7, 11, 13, 17, 19);\n      Console.WriteLine(&quot;Prime numbers less than 20: &quot; + \n                        &quot;{0}, {1}, {2}, {3}, {4}, {5}, {6}, and {7}&quot;,\n                        primes.Item1, primes.Item2, primes.Item3, \n                        primes.Item4, primes.Item5, primes.Item6,\n                        primes.Item7, primes.Rest.Item1);\n      // The example displays the following output:\n      //    Prime numbers less than 20: 2, 3, 5, 7, 11, 13, 17, and 19\n</code></pre><p> This is equivalent to the following call to the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> class constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`8.Class#1\">      var primes = new Tuple&lt;Int32, Int32, Int32, Int32, Int32, Int32, Int32,  \n                   Tuple&lt;Int32&gt;&gt; (2, 3, 5, 7, 11, 13, 17, new Tuple&lt;Int32&gt;(19));\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`8.Class#1\">      Dim primes = New Tuple(Of Int32, Int32, Int32, Int32, Int32, Int32, Int32, _ \n                   Tuple(Of Int32))(2, 3, 5, 7, 11, 13, 17, New Tuple(Of Int32)(19))\n</code></pre><p> However, the static &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method cannot be used to create a tuple object with more than eight components.  </p>\n<p> When using the Tuple(T1, constructor to create an n-tuple with eight or more components, you use the <code>rest</code> parameter to create a nested n-tuple that has from one to seven components. By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components. For example, to create a 25-tuple, you instantiate a <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object with three levels of nesting, as follows:  </p>\n<ul>\n<li><p>The outermost <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object contains the first through seventh components. Its <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> property provides access to an <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object at the first level of nesting.  </p>\n</li>\n<li><p>The outermost nested <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object contains the eighth through fourteenth components, and its <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> property provides access to an <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object at the second level of nesting.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> property provides access to an <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object at the third level of nesting.  </p>\n</li>\n<li><p>The innermost tuple is a <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object that contains the twenty-second through twenty-fifth components.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Item1\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item1</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s first component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T1 Item1 { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T1</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s first component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can dynamically determine the type of the Item1 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item1 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the first element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Item2\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item2</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s second component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T2 Item2 { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T2</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s second component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can dynamically determine the type of the Item2 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item2 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Item3\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item3</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s third component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T3 Item3 { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T3</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s third component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can dynamically determine the type of the Item3 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item3 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the third element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Item4\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item4</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fourth component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T4 Item4 { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T4</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fourth component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can dynamically determine the type of the Item4 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item4 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the fourth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Item5\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item5</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fifth component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T5 Item5 { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T5</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s fifth component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can dynamically determine the type of the Item5 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item5 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the fifth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Item6\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item6</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s sixth component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T6 Item6 { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T6</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s sixth component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can dynamically determine the type of the Item6 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item6 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the sixth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Item7\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item7</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s seventh component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T7 Item7 { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T7</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s seventh component.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can dynamically determine the type of the Item7 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item7 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object, and retrieving the seventh element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Rest\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Rest</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s remaining components.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TRest Rest { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TRest</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <span class=\"xref\">stem.Tuple`8</span> object&#39;s remaining components.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Rest property returns a nested <code>Tuple</code> object that allows access to the eighth though <em>n</em>th components of the tuple. Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested <code>Tuple</code> object&#39;s <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a> through <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item7_\" data-linktype=\"relative-path\">Item7</a> properties. You can then use the Rest property of a nested <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object to retrieve the <code>Tuple</code> object at the next level of nesting.  </p>\n<p> You can dynamically determine the number of components in a nested <code>Tuple</code> object that is returned by the Rest property by extracting the digit from its type name. The following example provides an illustration.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`8.Item1#2\">Imports System.Reflection\n\nModule Example\n    Sub Main()\n        Dim from1980 As Tuple(Of Integer, Integer, Integer) =\n            Tuple.Create(1203339, 1027974, 951270)\n        Dim from1910 As New Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, _\n            Tuple(Of Integer, Integer, Integer)) _\n            (465766, 993078, 1568622, 1623452, 1849568, 1670144, 1511462, from1980)\n        Dim population As New Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer, _ \n            Tuple(Of Integer, Integer, Integer, Integer, Integer, Integer, Integer, Tuple(Of Integer, Integer, Integer))) _\n            (&quot;Detroit&quot;, 1860, 45619, 79577, 116340, 205876, 285704, from1910)\n      \n        ShowComponentCount(population)\n   End Sub\n   \n   Private Sub ShowComponentCount(tuple As Object) \n      Static ctr As Integer = 0\n      Static totalComponents As Integer = 0\n      Dim components As Integer = 0\n      \n      ctr += 1\n      Dim name As String = tuple.GetType().Name\n      components += Int32.Parse(name.Substring(name.IndexOf(&quot;`&quot;) + 1))\n      If components = 8 Then\n         totalComponents += 7\n         Console.WriteLine(&quot;The tuple at level {0} has 7 components.&quot;, ctr)\n         ShowComponentCount(tuple.Rest)\n      Else\n         totalComponents += components\n         Console.WriteLine(&quot;The tuple at level {0} has {1} components.&quot;, \n                           ctr, components)\n         Console.WriteLine(&quot;Total components in tuple: {0}&quot;, totalComponents)\n      End If      \n   End Sub        \nEnd Module\n&#39; The example displays the following output:\n&#39;       The tuple at level 1 has 7 components.\n&#39;       The tuple at level 2 has 7 components.\n&#39;       The tuple at level 3 has 3 components.\n&#39;       Total components in tuple: 17\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`8</span> object is equal to a specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare with this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>obj</code> parameter is considered to be equal to the current instance if it meets all the following conditions:  </p>\n<ul>\n<li><p>It is a <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object.  </p>\n</li>\n<li><p>It has the same total number of components that are of the same types as the current instance.  </p>\n</li>\n<li><p>Its components (including its nested components) are equal to those of the current instance. Equality is determined by the default equality comparer for each component.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`8</span> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string representation of this <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The string returned by this method takes the form (<em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>, <code>Item5, Item6, Item7</code>, <em>Item8</em>…), where <em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>, <em>Item5</em>, <em>Item6</em>, and <em>Item7</em> represent the values of the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item3_\" data-linktype=\"relative-path\">Item3</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item4_\" data-linktype=\"relative-path\">Item4</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item5_\" data-linktype=\"relative-path\">Item5</a>, <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item6_\" data-linktype=\"relative-path\">Item6</a>, and <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item7_\" data-linktype=\"relative-path\">Item7</a> properties. <em>Item8</em> represents the value of the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object&#39;s <code>Next.Item1</code> property. The value of any additional nested components follow <em>Item8</em>. If any of the property values is <code>null</code>, it is represented as <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IStructuralComparable.CompareTo(Object,IComparer)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares the current <span class=\"xref\">stem.Tuple`8</span> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object to compare with the current instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides custom rules for comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>other</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>other</code> is not a <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralcomparable\" data-linktype=\"relative-path\">IStructuralComparable</a> interface.  </p>\n<p> This method lets you define customized comparisons of <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects. For example, you can use this method to order <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects based on the value of a specific component.  </p>\n<p> Although this method can be called directly, it is most commonly called by collection-sorting methods that include <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> parameters to order the members of a collection. For example, it is called by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method and the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a> method of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object that is instantiated by using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList__ctor_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Collections.SortedList.SortedList(IComparer)</a> constructor.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_System_Collections_IStructuralEquatable_Equals_\" data-linktype=\"relative-path\">System.Collections.IStructuralEquatable.Equals</a> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IStructuralEquatable.Equals(Object,IEqualityComparer)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`8</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare with this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation is called only if <code>other</code> is not <code>null</code>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> object that has the same total number of components (including those in nested <code>Tuple</code> objects) of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item1_\" data-linktype=\"relative-path\">Item1</a> values of the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects to be compared to the <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation. If this method call returns <code>true</code>, the method is called again and passed the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Item2_\" data-linktype=\"relative-path\">Item2</a> values of the two <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects. This continues until the method call returns <code>false</code> when it compares a specific pair of values, or the two <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Rest_\" data-linktype=\"relative-path\">Rest</a> values are passed to the method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IStructuralEquatable.GetHashCode(IEqualityComparer)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`8</span> object by using a specified computation method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object whose <span class=\"xref\">stem.Collections.IEqualityComparer.GetHashCode*</span> method calculates the hash code of the current <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The method simply wraps a call to the <code>comparer</code> object&#39;s <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> implementation.  </p>\n<p> The algorithm used to compute the hash code should return the same hash code for two <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> objects that are considered to be equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Tuple_8_System_IComparable_CompareTo_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IComparable.CompareTo(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares the current <span class=\"xref\">stem.Tuple`8</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">int IComparable.CompareTo (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object to compare with the current instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>obj</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>obj</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>obj</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>obj</code> is not a <span class=\"xref\">stem.Tuple`8</span> object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> This method provides the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> implementation for the <a class=\"xref\" href=\"system.tuple-8\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;</a> class. Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> and <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a>, to order the members of a collection.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-8#System_Tuple_8_Equals_System_Object_\" data-linktype=\"relative-path\">System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Equals(Object)</a> method.  </p>\n</div>\n<p> This method uses the default object comparer to compare each component.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-8.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-8.yml\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item1\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item2\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item3\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item4\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item5\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item6\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Item7\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.Rest\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.IStructuralComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.IStructuralEquatable.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.IStructuralEquatable.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.IComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e2ae004e-a2b3-18af-4853-43c29c711516\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an n-tuple, where n is 8 or greater.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Tuple`8\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-8.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-8.yml","open_to_public_contributors":true,"api_name":["System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>..ctor","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Equals","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.GetHashCode","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item1","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item2","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item3","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item4","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item5","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item6","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Item7","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.Rest","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.IStructuralComparable.CompareTo","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.IStructuralEquatable.Equals","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.IStructuralEquatable.GetHashCode","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.IComparable.CompareTo","System.Tuple<T1,T2,T3,T4,T5,T6,T7,TRest>.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Tuple`8","System::Tuple`8","System.Tuple`8.#ctor","System::Tuple`8::#ctor","System.Tuple`8.Equals","System::Tuple`8::Equals","System.Tuple`8.GetHashCode","System::Tuple`8::GetHashCode","System.Tuple`8.Item1","System::Tuple`8::Item1","System.Tuple`8.Item2","System::Tuple`8::Item2","System.Tuple`8.Item3","System::Tuple`8::Item3","System.Tuple`8.Item4","System::Tuple`8::Item4","System.Tuple`8.Item5","System::Tuple`8::Item5","System.Tuple`8.Item6","System::Tuple`8::Item6","System.Tuple`8.Item7","System::Tuple`8::Item7","System.Tuple`8.Rest","System::Tuple`8::Rest","System.Tuple`8.System#Collections#IStructuralComparable#CompareTo","System::Tuple`8::System#Collections#IStructuralComparable#CompareTo","System.Tuple`8.System#Collections#IStructuralEquatable#Equals","System::Tuple`8::System#Collections#IStructuralEquatable#Equals","System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode","System::Tuple`8::System#Collections#IStructuralEquatable#GetHashCode","System.Tuple`8.System#IComparable#CompareTo","System::Tuple`8::System#IComparable#CompareTo","System.Tuple`8.ToString","System::Tuple`8::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e2ae004e-a2b3-18af-4853-43c29c711516","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Tuple`8.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Tuple<T1,T2,T3,T4,T5,T6,T7,TRest> class | Microsoft Docs","_op_ogTitle":"Tuple<T1,T2,T3,T4,T5,T6,T7,TRest> class","description":"Represents an n-tuple, where n is 8 or greater.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Tuple`8","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-8","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-8","fileRelativePath":"System.Tuple-8.html"},"themesRelativePathToOutputRoot":"_themes/"}