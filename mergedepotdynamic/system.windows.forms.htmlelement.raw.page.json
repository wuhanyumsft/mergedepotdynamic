{"content":"    \r\n    <h1 id=\"System_Windows_Forms_HtmlElement\">\r\n      <span class=\"lang-csharp\">HtmlElement</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an HTML element inside of a Web page.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class HtmlElement</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HtmlElement</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>HtmlElement represents any possible type of element in an HTML document, such as <code>BODY</code>, <code>TABLE</code>, and <code>FORM</code>, among others. The class exposes the most common properties you can expect to find on all elements.  </p>\n<p> Most elements can have <em>child elements</em>: other HTML elements that are placed underneath them. Use the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_CanHaveChildren_\" data-linktype=\"relative-path\">CanHaveChildren</a> property to test whether a given element has children, and the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Children_\" data-linktype=\"relative-path\">Children</a> collection to iterate through them. The <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Parent_\" data-linktype=\"relative-path\">Parent</a> property returns the HtmlElement in which the current element is nested.  </p>\n<p> You often need access to attributes, properties, and methods on the underlying element that are not directly exposed by HtmlElement, such as the <code>SRC</code> attribute on an <code>IMG</code> element or the <code>Submit</code> method on a <code>FORM</code>. The <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_GetAttribute_\" data-linktype=\"relative-path\">GetAttribute</a> and <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_SetAttribute_\" data-linktype=\"relative-path\">SetAttribute</a> methods enable you to retrieve and alter any attribute or property on a specific element, while <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InvokeMember_\" data-linktype=\"relative-path\">InvokeMember</a> provides access to any methods not exposed in the managed Document Object Model (DOM). If your application has unmanaged code permission, you can also access unexposed properties and methods with the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_DomElement_\" data-linktype=\"relative-path\">DomElement</a> attribute.  </p>\n<p> Use the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_TagName_\" data-linktype=\"relative-path\">TagName</a> property to test whether an element is of a specific type.  </p>\n<p> Any HTML document can be modified at run time. You can create new HtmlElement objects with the <a class=\"xref\" href=\"system.windows.forms.htmldocument#System_Windows_Forms_HtmlDocument_CreateElement_\" data-linktype=\"relative-path\">CreateElement</a> method of <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a>, and add them to another element using the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_AppendChild_\" data-linktype=\"relative-path\">AppendChild</a> or <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InsertAdjacentElement_\" data-linktype=\"relative-path\">InsertAdjacentElement</a> methods. You can also create the elements as HTML tags and assign them to an existing element&#39;s <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InnerHtml_\" data-linktype=\"relative-path\">InnerHtml</a> property.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_All\" data-linktype=\"self-bookmark\">All</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.windows.forms.htmlelementcollection\" data-linktype=\"relative-path\">HtmlElementCollection</a> of all elements underneath the current element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_CanHaveChildren\" data-linktype=\"self-bookmark\">CanHaveChildren</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this element can have child elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Children\" data-linktype=\"self-bookmark\">Children</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.windows.forms.htmlelementcollection\" data-linktype=\"relative-path\">HtmlElementCollection</a> of all children of the current element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_ClientRectangle\" data-linktype=\"self-bookmark\">ClientRectangle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the bounds of the client area of the element in the HTML document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Document\" data-linktype=\"self-bookmark\">Document</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> to which this element belongs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_DomElement\" data-linktype=\"self-bookmark\">DomElement</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an unmanaged interface pointer for this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Enabled\" data-linktype=\"self-bookmark\">Enabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets whether the user can input data into this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_FirstChild\" data-linktype=\"self-bookmark\">FirstChild</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the next element below this element in the document tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a label by which to identify the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_InnerHtml\" data-linktype=\"self-bookmark\">InnerHtml</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the HTML markup underneath this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_InnerText\" data-linktype=\"self-bookmark\">InnerText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text assigned to the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_NextSibling\" data-linktype=\"self-bookmark\">NextSibling</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the next element at the same level as this element in the document tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_OffsetParent\" data-linktype=\"self-bookmark\">OffsetParent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the element from which <span class=\"xref\">stem.Windows.Forms.HtmlElement.OffsetRectangle*</span> is calculated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_OffsetRectangle\" data-linktype=\"self-bookmark\">OffsetRectangle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the location of an element relative to its parent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_OuterHtml\" data-linktype=\"self-bookmark\">OuterHtml</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the current element&#39;s HTML code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_OuterText\" data-linktype=\"self-bookmark\">OuterText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the current element&#39;s text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Parent\" data-linktype=\"self-bookmark\">Parent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current element&#39;s parent element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_ScrollLeft\" data-linktype=\"self-bookmark\">ScrollLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the distance between the edge of the element and the left edge of its content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_ScrollRectangle\" data-linktype=\"self-bookmark\">ScrollRectangle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions of an element&#39;s scrollable region.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_ScrollTop\" data-linktype=\"self-bookmark\">ScrollTop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the distance between the edge of the element and the top edge of its content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Style\" data-linktype=\"self-bookmark\">Style</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a semicolon-delimited list of styles for the current element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_TabIndex\" data-linktype=\"self-bookmark\">TabIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the location of this element in the tab order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_TagName\" data-linktype=\"self-bookmark\">TagName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the HTML tag.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_AppendChild_System_Windows_Forms_HtmlElement_\" data-linktype=\"self-bookmark\">AppendChild(HtmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an element to another element&#39;s subtree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_AttachEventHandler_System_String_System_EventHandler_\" data-linktype=\"self-bookmark\">AttachEventHandler(String,EventHandler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an event handler for a named event on the HTML Document Object Model (DOM).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_DetachEventHandler_System_String_System_EventHandler_\" data-linktype=\"self-bookmark\">DetachEventHandler(String,EventHandler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes an event handler from a named event on the HTML Document Object Model (DOM).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tests if the supplied object is equal to the current element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Focus\" data-linktype=\"self-bookmark\">Focus()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Puts user input focus on the current element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_GetAttribute_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the value of the named attribute on the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_GetElementsByTagName_System_String_\" data-linktype=\"self-bookmark\">GetElementsByTagName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a collection of elements represented in HTML by the specified <code>HTML</code> tag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for a particular type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_InsertAdjacentElement_System_Windows_Forms_HtmlElementInsertionOrientation_System_Windows_Forms_HtmlElement_\" data-linktype=\"self-bookmark\">InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Insert a new element into the Document Object Model (DOM).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_InvokeMember_System_String_\" data-linktype=\"self-bookmark\">InvokeMember(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes an unexposed method on the underlying DOM element of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_InvokeMember_System_String_System_Object___\" data-linktype=\"self-bookmark\">InvokeMember(String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a function defined in the current HTML page by a scripting language.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_RaiseEvent_System_String_\" data-linktype=\"self-bookmark\">RaiseEvent(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes the named event to call all registered event handlers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_RemoveFocus\" data-linktype=\"self-bookmark\">RemoveFocus()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes focus from the current element, if that element has focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_ScrollIntoView_System_Boolean_\" data-linktype=\"self-bookmark\">ScrollIntoView(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Scrolls through the document containing this element until the top or bottom edge of this element is aligned with the document&#39;s window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_SetAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">SetAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of the named attribute on the element.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Click\" data-linktype=\"self-bookmark\">Click</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user clicks on the element with the left mouse button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_DoubleClick\" data-linktype=\"self-bookmark\">DoubleClick</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user clicks the left mouse button over an element twice, in rapid succession.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Drag\" data-linktype=\"self-bookmark\">Drag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user drags text to various locations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_DragEnd\" data-linktype=\"self-bookmark\">DragEnd</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a user finishes a drag operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_DragLeave\" data-linktype=\"self-bookmark\">DragLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user is no longer dragging an item over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_DragOver\" data-linktype=\"self-bookmark\">DragOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user drags text over the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_Focusing\" data-linktype=\"self-bookmark\">Focusing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the element first receives user input focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_GotFocus\" data-linktype=\"self-bookmark\">GotFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the element has received user input focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_KeyDown\" data-linktype=\"self-bookmark\">KeyDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user presses a key on the keyboard.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_KeyPress\" data-linktype=\"self-bookmark\">KeyPress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user presses and releases a key on the keyboard.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_KeyUp\" data-linktype=\"self-bookmark\">KeyUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user releases a key on the keyboard.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_LosingFocus\" data-linktype=\"self-bookmark\">LosingFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the element is losing user input focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_LostFocus\" data-linktype=\"self-bookmark\">LostFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the element has lost user input focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_MouseDown\" data-linktype=\"self-bookmark\">MouseDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user presses a mouse button.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_MouseEnter\" data-linktype=\"self-bookmark\">MouseEnter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user first moves the mouse cursor over the current element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_MouseLeave\" data-linktype=\"self-bookmark\">MouseLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user moves the mouse cursor off of the current element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_MouseMove\" data-linktype=\"self-bookmark\">MouseMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user moves the mouse cursor across the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_MouseOver\" data-linktype=\"self-bookmark\">MouseOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse cursor enters the bounds of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_MouseUp\" data-linktype=\"self-bookmark\">MouseUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user releases a mouse button.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_op_Equality_System_Windows_Forms_HtmlElement_System_Windows_Forms_HtmlElement_\" data-linktype=\"self-bookmark\">op_Equality(HtmlElement,HtmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two elements for equality.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_HtmlElement_op_Inequality_System_Windows_Forms_HtmlElement_System_Windows_Forms_HtmlElement_\" data-linktype=\"self-bookmark\">op_Inequality(HtmlElement,HtmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> objects for inequality.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_All\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_All_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">All</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.windows.forms.htmlelementcollection\" data-linktype=\"relative-path\">HtmlElementCollection</a> of all elements underneath the current element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElementCollection All { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelementcollection\" data-linktype=\"relative-path\">HtmlElementCollection</a></div>\r\n                  </div>\r\n                  <p>A collection of all elements that are direct or indirect children of the current element. If the current element is a <code>TABLE</code>, for example, All will return every <code>TH</code>, <code>TR</code>, and <code>TD</code> element within the table, as well as any other elements, such as <code>DIV</code> and <code>SPAN</code> elements, contained within the cells.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To access only those elements which have the current element as their direct parent, use the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Children_\" data-linktype=\"relative-path\">Children</a> collection instead.  </p>\n<p> Elements in this collection will not necessarily be returned in source order.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_CanHaveChildren\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_CanHaveChildren_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanHaveChildren</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this element can have child elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanHaveChildren { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if element can have child elements; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some elements, such as <code>IMG</code> and <code>SCRIPT</code>, cannot have any children. Use this property before you call <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_AppendChild_\" data-linktype=\"relative-path\">AppendChild</a> or <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InsertAdjacentElement_\" data-linktype=\"relative-path\">InsertAdjacentElement</a> on an arbitrary element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example handles the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Click\" data-linktype=\"relative-path\">Click</a> event on <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a>. If an element was not previous selected using a mouse click, the code assigns the element to a private class variable named <code>MoveElement</code>. If an element was selected, the code attempts to append it to the element that was just clicked. This code example requires that your application hosts a <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control named <code>WebBrowser1</code>, and that you have already added an event handler for the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Click\" data-linktype=\"relative-path\">Click</a> event on <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#2\">Dim WithEvents Doc As HtmlDocument\nDim MoveElement As HtmlElement\n\nPrivate Sub EnableElementMove()\n    If (WebBrowser1 IsNot Nothing) Then\n        Doc = WebBrowser1.Document\n    End If\nEnd Sub\n\nPrivate Sub Document_Click(ByVal sender As Object, ByVal args As HtmlElementEventArgs) Handles Doc.Click\n    If (MoveElement Is Nothing) Then\n        MoveElement = WebBrowser1.Document.GetElementFromPoint(args.ClientMousePosition)\n    Else\n        With WebBrowser1.Document\n            Dim TargetElement As HtmlElement = .GetElementFromPoint(args.ClientMousePosition)\n            If (TargetElement.CanHaveChildren) Then\n\n                TargetElement.AppendChild(MoveElement)\n                MoveElement = Nothing\n            End If\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#2\">HtmlDocument doc;\nHtmlElement moveElement;\n\nprivate void EnableElementMove()\n{\n\tif (webBrowser1 != null)\n\t{\n\t\tdoc = webBrowser1.Document;\n\t\tdoc.Click += new HtmlElementEventHandler(doc_Click);\n\t}\n}\n\nvoid doc_Click(object sender, HtmlElementEventArgs e)\n{\n\tif (moveElement == null)\n\t{\n\t\tmoveElement = webBrowser1.Document.GetElementFromPoint(e.ClientMousePosition);\n\t}\n\telse\n\t{\n\t\tHtmlElement targetElement = webBrowser1.Document.GetElementFromPoint(e.ClientMousePosition);\n\t\tif (targetElement.CanHaveChildren)\n\t\t{\n\t\t\ttargetElement.AppendChild(moveElement);\n\t\t\tmoveElement = null;\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Children\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Children_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Children</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.windows.forms.htmlelementcollection\" data-linktype=\"relative-path\">HtmlElementCollection</a> of all children of the current element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElementCollection Children { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelementcollection\" data-linktype=\"relative-path\">HtmlElementCollection</a></div>\r\n                  </div>\r\n                  <p>A collection of all <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> objects that have the current element as a parent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Many of the elements inside of an HTML file can have other HTML elements underneath them. The Children collection provides a simple mechanism for exploring the tree structure of a document.  </p>\n<p> Children only exposes elements whose direct parent is the current element. If you have an <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> for a <code>TABLE</code> element, Children will give you all of the <code>TR</code> (row) elements inside of the <code>TABLE</code>. To retrieve the <code>TD</code> (cell) elements contained inside of the <code>TR</code> elements, you will need to use either the Children collection on each individual <code>TR</code> element, or use the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_All_\" data-linktype=\"relative-path\">All</a> collection on <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a>.  </p>\n<p> Elements in this collection are not guaranteed to be in source order.  </p>\n<p> If <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_CanHaveChildren_\" data-linktype=\"relative-path\">CanHaveChildren</a> is <code>false</code>, <code>Children</code> will always be empty.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example examines an arbitrary HTML document and derive a string describing the elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. It does this by searching the <code>Children</code> collection of all elements recursively, starting with the HTML element at the top of the document. This code example requires that your application has a <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control named <code>WebBrowser1</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#1\">Private Sub PrintDomBegin()\n    If (WebBrowser1.Document IsNot Nothing) Then\n        Dim ElemColl As HtmlElementCollection\n\n        Dim Doc As HtmlDocument = WebBrowser1.Document\n        If (Not (Doc Is Nothing)) Then\n            ElemColl = Doc.GetElementsByTagName(&quot;HTML&quot;)\n            Dim Str As String = PrintDom(ElemColl, New System.Text.StringBuilder(), 0)\n\n            WebBrowser1.DocumentText = Str\n        End If\n    End If\nEnd Sub\n\nPrivate Function PrintDom(ByVal ElemColl As HtmlElementCollection, ByRef ReturnStr As System.Text.StringBuilder, ByVal Depth As Integer) As String\n    Dim Str As New System.Text.StringBuilder()\n\n    For Each Elem As HtmlElement In ElemColl\n        Dim ElemName As String\n\n        ElemName = Elem.GetAttribute(&quot;ID&quot;)\n        If (ElemName Is Nothing Or ElemName.Length = 0) Then\n            ElemName = Elem.GetAttribute(&quot;name&quot;)\n            If (ElemName Is Nothing Or ElemName.Length = 0) Then\n                ElemName = &quot;&lt;no name&gt;&quot;\n            End If\n        End If\n\n        Str.Append(CChar(&quot; &quot;), Depth * 4)\n        Str.Append(ElemName &amp; &quot;: &quot; &amp; Elem.TagName &amp; &quot;(Level &quot; &amp; Depth &amp; &quot;)&quot;)\n        ReturnStr.AppendLine(Str.ToString())\n\n        If (Elem.CanHaveChildren) Then\n            PrintDom(Elem.Children, ReturnStr, Depth + 1)\n        End If\n\n        Str.Remove(0, Str.Length)\n    Next\n\n    PrintDom = ReturnStr.ToString()\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#1\">private void PrintDomBegin()\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tHtmlElementCollection elemColl = null;\n\t\tHtmlDocument doc = webBrowser1.Document;\n\t\tif (doc != null)\n\t\t{\n\t\t\telemColl = doc.GetElementsByTagName(&quot;HTML&quot;);\n\t\t\tString str = PrintDom(elemColl, new System.Text.StringBuilder(), 0);\n\t\t\twebBrowser1.DocumentText = str;\n\t\t}\n\t}\n}\n\nprivate string PrintDom(HtmlElementCollection elemColl, System.Text.StringBuilder returnStr, Int32 depth)\n{\n\tSystem.Text.StringBuilder str = new System.Text.StringBuilder();\n\n\tforeach (HtmlElement elem in elemColl)\n\t{\n\t\tstring elemName;\n\n\t\telemName = elem.GetAttribute(&quot;ID&quot;);\n\t\tif (elemName == null || elemName.Length == 0)\n\t\t{\n\t\t\telemName = elem.GetAttribute(&quot;name&quot;);\n\t\t\tif (elemName == null || elemName.Length == 0)\n\t\t\t{\n\t\t\t\telemName = &quot;&lt;no name&gt;&quot;;\n\t\t\t}\n\t\t}\n\n\t\tstr.Append(&#39; &#39;, depth * 4);\n\t\tstr.Append(elemName + &quot;: &quot; + elem.TagName + &quot;(Level &quot; + depth + &quot;)&quot;);\n\t\treturnStr.AppendLine(str.ToString());\n\n\t\tif (elem.CanHaveChildren)\n\t\t{\n\t\t\tPrintDom(elem.Children, returnStr, depth + 1);\n\t\t}\n\n\t\tstr.Remove(0, str.Length);\n\t}\n\n\treturn(returnStr.ToString());\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_ClientRectangle\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_ClientRectangle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientRectangle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the bounds of the client area of the element in the HTML document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle ClientRectangle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>The client area occupied by the element, minus any area taken by borders and scroll bars. To obtain the position and dimensions of the element inclusive of its adornments, use <span class=\"xref\">stem.Windows.Forms.HtmlElement.OffsetRectangle*</span> instead.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ClientRectangle will return position data only for elements that have been assigned an explicit height and width, or elements that use absolute positioning. A document is absolutely positioned if its position style is set to <code>absolute</code>, after which it can be positioned at any coordinate on the HTML page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Assume you have loaded the following HTML page into a hosted instance of the <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control.  </p>\n<pre><code>&lt;HTML&gt;  \n\n    &lt;BODY&gt;  \n\n        &lt;DIV id=&quot;div1&quot; style=&quot;position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;&quot;&gt;  \n            Edit this text.  \n        &lt;/DIV&gt;  \n\n    &lt;/BODY&gt;  \n\n&lt;/HTML&gt;  \n</code></pre><p> The following code example demonstrates retrieving this element and expanding its dimensions if the client area is less than 400 pixels wide by 50 pixels high, and also sets the <code>DIV</code> to the <code>contentEditable</code> state so that the user can input text.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#3\">Private Sub EnableEditing()\n    Dim Elem As HtmlElement = WebBrowser1.Document.GetElementById(&quot;div1&quot;)\n    If (Not Elem Is Nothing) Then\n        If (Elem.ClientRectangle.Width &lt; 200) Then\n            Elem.SetAttribute(&quot;width&quot;, &quot;200px&quot;)\n        End If\n\n        If (Elem.ClientRectangle.Height &lt; 50) Then\n            Elem.SetAttribute(&quot;height&quot;, &quot;50px&quot;)\n        End If\n\n        Elem.SetAttribute(&quot;contentEditable&quot;, &quot;true&quot;)\n        Elem.Focus()\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#3\">private void EnableEditing()\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tHtmlElement elem = webBrowser1.Document.GetElementById(&quot;div1&quot;);\n\t\tif (elem != null)\n\t\t{\n\t\t\tif (elem.ClientRectangle.Width &lt; 200)\n\t\t\t{\n\t\t\t\telem.SetAttribute(&quot;width&quot;, &quot;200px&quot;);\n\t\t\t}\n\n\t\t\tif (elem.ClientRectangle.Height &lt; 50)\n\t\t\t{\n\t\t\t\telem.SetAttribute(&quot;height&quot;, &quot;50px&quot;);\n\t\t\t}\n\n\t\t\telem.SetAttribute(&quot;contentEditable&quot;, &quot;true&quot;);\n\t\t\t//elem.SetFocus();\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Document\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Document_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Document</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> to which this element belongs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlDocument Document { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a></div>\r\n                  </div>\r\n                  <p>The parent document of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some HTML pages can host frames using the <code>FRAMESET</code> tags. In this case, each individual <code>FRAME</code> element will contain its own instance of <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a>. This property is most useful when you have received a reference to an element in an event handler from the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a>, and need to perform some action on the document in which the element resides.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_DomElement\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_DomElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DomElement</div>        \r\n          </div>\r\n    \r\n            <p>Gets an unmanaged interface pointer for this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object DomElement { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The COM <code>IUnknown</code> pointer for the element, which you can cast to one of the HTML element interfaces, such as <code>IHTMLElement</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> is a wrapper for the Internet Explorer Document Object Model (DOM), which is written using the Component Object Model (COM). If you need to access unexposed properties or methods on the underlying COM interfaces, such as <code>IHTMLElement</code>, you can use this object to query for them.  </p>\n<p> In order to use the unmanaged interfaces, you will need to import the MSHTML library (mshtml.dll) into your application. However, you can also execute unexposed properties and methods using the <code>Invoke</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses unmanaged interfaces to take the currently selected text and convert it into a hyperlink, with the URL chosen by the user. This code was written under the assumption that your form has a <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control named <code>WebBrowser1</code>, and that you have added the unmanaged MSHTML library as a reference to your project.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#4\">Private Sub CreateHyperlinkFromSelection()\n    If (WebBrowser1.Document IsNot Nothing) Then\n        Dim IDoc As mshtml.IHTMLDocument2 = WebBrowser1.Document.DomDocument\n\n        If (Not (IDoc Is Nothing)) Then\n            Dim ISelect As mshtml.IHTMLSelectionObject = IDoc.selection\n            If (ISelect Is Nothing) Then\n                MsgBox(&quot;Please select some text before using this command.&quot;)\n                Exit Sub\n            End If\n\n            Dim TxtRange As mshtml.IHTMLTxtRange = ISelect.createRange()\n\n            &#39; Create the link.\n            If (TxtRange.queryCommandEnabled(&quot;CreateLink&quot;)) Then\n                TxtRange.execCommand(&quot;CreateLink&quot;, True)\n            End If\n        End If\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#4\">private void CreateHyperlinkFromSelection()\n{\n\tif (webBrowser1.Document != null)\n\t{\n\n\t\tmshtml.IHTMLDocument2 iDoc = (mshtml.IHTMLDocument2)webBrowser1.Document.DomDocument;\n\n\t\tif (iDoc != null) \n\t\t{\n\t\t\tmshtml.IHTMLSelectionObject iSelect = iDoc.selection;\n\t\t\tif (iSelect == null)\n\t\t\t{\n\t\t\t\tMessageBox.Show(&quot;Please select some text before using this command.&quot;);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmshtml.IHTMLTxtRange txtRange = (mshtml.IHTMLTxtRange)iSelect.createRange();\n\n\t\t\t// Create the link.\n\t\t\tif (txtRange.queryCommandEnabled(&quot;CreateLink&quot;))\n\t\t\t{\n\t\t\t\tObject o = null;\n\t\t\t\ttxtRange.execCommand(&quot;CreateLink&quot;, true, o);\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Enabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Enabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets whether the user can input data into this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Enabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element allows user input; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For <code>FORM</code> elements such as text boxes and radio buttons, setting Enabled to <code>false</code> will prevent the user from using these form fields. For other elements, such as <code>DIV</code> or <code>SPAN</code>, setting Enabled to <code>false</code> will cause all text within the element to appear shaded; however, the text will still be selectable. To cancel selection, add an event handler for the unexposed <code>onselectstart</code> event using the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_AttachEventHandler_\" data-linktype=\"relative-path\">AttachEventHandler</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_FirstChild\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_FirstChild_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstChild</div>        \r\n          </div>\r\n    \r\n            <p>Gets the next element below this element in the document tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElement FirstChild { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> representing the first element contained underneath the current element, in source order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use FirstChild in conjunction with <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_NextSibling_\" data-linktype=\"relative-path\">NextSibling</a> to walk the document tree for an HTML document.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Id\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a label by which to identify the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Id { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The unique identifier for the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Id must be unique; you cannot have two elements with the same Id inside of the same document. Use the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Name_\" data-linktype=\"relative-path\">Name</a> property to give the same identifier to a group of logically related elements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_InnerHtml\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_InnerHtml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerHtml</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the HTML markup underneath this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string InnerHtml { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The HTML markup that defines the child elements of the current element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Creating child elements on this element is not allowed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There are several ways to add new elements to an existing HTML page, such as the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_AppendChild_\" data-linktype=\"relative-path\">AppendChild</a> and <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InsertAdjacentElement_\" data-linktype=\"relative-path\">InsertAdjacentElement</a> methods. Using InnerHtml is often the fastest way to add new content when you have to set many attributes or styles on your new elements.  </p>\n<p> InnerHtml differs from <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_OuterHtml_\" data-linktype=\"relative-path\">OuterHtml</a> in that InnerHtml will not include the HTML that represents the object you are calling. See <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_OuterHtml_\" data-linktype=\"relative-path\">OuterHtml</a> for more information about the difference between these two properties.  </p>\n<p> Setting InnerHtml destroys any children previously appended to the element. If you retrieve an element from the DOM and then assign new HTML to its parents&#39; InnerHtml property, your reference to that element will be useless, and its behavior when it calls its properties and methods is undefined.  </p>\n<p> For some elements, setting InnerHtml is not a valid operation. Some HTML tags have no closing tag, such as the <code>IMG</code> tag, and therefore cannot contain nested elements. Some tags, such as the <code>SCRIPT</code> tag, can only contain text content; setting InnerHtml will result in an error. For both types of tags, the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_CanHaveChildren_\" data-linktype=\"relative-path\">CanHaveChildren</a> property will return <code>false</code>. However, you also cannot set InnerHtml on <code>TABLE</code> and <code>TR</code> elements, as assigning malformed HTML to these elements could corrupt the rendering of the document. Use <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_AppendChild_\" data-linktype=\"relative-path\">AppendChild</a> or the <code>insertRow</code> and <code>insertCell</code> methods on the unmanaged <code>IHTMLTable</code> interface to add rows and cells to a <code>TABLE</code>.  </p>\n<p> If you need only to assign text to an element and not HTML markup, use the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InnerText_\" data-linktype=\"relative-path\">InnerText</a> property instead.  </p>\n<p> Assigning a value to InnerHtml will destroy any text values previously assigned using <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InnerText_\" data-linktype=\"relative-path\">InnerText</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_InnerText\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_InnerText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text assigned to the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string InnerText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The element&#39;s text, absent any HTML markup. If the element contains child elements, only the text in those child elements will be preserved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The specified element cannot contain text (for example, an <code>IMG</code> element).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you attempt to assign HTML to an element with InnerText, the HTML code will display as literals in the document, just as if you were viewing HTML within a text file. If you assign HTML to an element using the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InnerHtml_\" data-linktype=\"relative-path\">InnerHtml</a> property, InnerText will return all of the text in that HTML with the markup removed.  </p>\n<p> Assigning a value to InnerText will destroy any child elements that belong to the element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code creates a new hyperlink using <a class=\"xref\" href=\"system.windows.forms.htmldocument#System_Windows_Forms_HtmlDocument_CreateElement_\" data-linktype=\"relative-path\">CreateElement</a>, and assigns text to the link using the InnerText property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#8\">Private Sub AddLinkToPage(ByVal url As String)\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            Dim Elem As HtmlElement = .CreateElement(&quot;A&quot;)\n            Elem.SetAttribute(&quot;HREF&quot;, url)\n            Elem.InnerText = &quot;Visit our web site for more details.&quot;\n\n            .Body.AppendChild(Elem)\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#8\">private void AddUrlToTooltip(string url)\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tHtmlElement elem = webBrowser1.Document.CreateElement(&quot;A&quot;);\n\t\telem.SetAttribute(&quot;HREF&quot;, url);\n\t\telem.InnerText = &quot;Visit our Web site for more details.&quot;;\n\n\t\twebBrowser1.Document.Body.AppendChild(elem);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Name\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representing the element&#39;s name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Name property to retrieve elements from a document using the <a class=\"xref\" href=\"system.windows.forms.htmlelementcollection#System_Windows_Forms_HtmlElementCollection_GetElementsByName_\" data-linktype=\"relative-path\">GetElementsByName</a> method on the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_All_\" data-linktype=\"relative-path\">All</a> property of <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a>.  </p>\n<p> When applied to <code>INPUT</code> elements, Name defines the variable name for that element&#39;s data when its form is submitted to the server.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_NextSibling\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_NextSibling_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextSibling</div>        \r\n          </div>\r\n    \r\n            <p>Gets the next element at the same level as this element in the document tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElement NextSibling { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> representing the element to the right of the current element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use NextSibling in conjunction with <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_FirstChild_\" data-linktype=\"relative-path\">FirstChild</a> to walk the document tree for an HTML element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_OffsetParent\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_OffsetParent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OffsetParent</div>        \r\n          </div>\r\n    \r\n            <p>Gets the element from which <span class=\"xref\">stem.Windows.Forms.HtmlElement.OffsetRectangle*</span> is calculated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElement OffsetParent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </div>\r\n                  <p>The element from which the offsets are calculated.  </p>\n<p> If an element&#39;s parent or another element in the element&#39;s hierarchy uses relative or absolute positioning, <code>OffsetParent</code> will be the first relatively or absolutely positioned element in which the current element is nested. If none of the elements above the current element are absolutely or relatively positioned, <code>OffsetParent</code> will be the <code>BODY</code> tag of the document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Elements can be positioned on an HTML page in one of three ways: default flow positioning; relative positioning, in which the element is offset by a fixed amount relative to its parent; and absolute positioning, in which the element is given a fixed coordinate position relative to the upper-left corner of the document.  </p>\n<p> When a document&#39;s elements use relative or absolute positioning, you can use <code>OffsetParent</code> to calculate an element&#39;s coordinate position in the client area.  </p>\n<p> For more information about element positioning in HTML, see <a href=\"http://msdn.microsoft.com/library/ms533005.aspx\" data-linktype=\"external\">About Element Positioning</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how OffsetParent and <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_OffsetRectangle_\" data-linktype=\"relative-path\">OffsetRectangle</a> differ for <code>span1</code>, <code>span2</code> and <code>span3</code>:  </p>\n<pre><code>&lt;HTML&gt;  \n    &lt;BODY id=&quot;documentBody&quot;&gt;  \n\n        &lt;DIV id=&quot;div1&quot;&gt;  \n            &lt;SPAN id=&quot;span1&quot;&gt;Placeholder text 1.&lt;/SPAN&gt;  \n        &lt;/DIV&gt;  \n\n        &lt;DIV id=&quot;div2&quot; style=&quot;position:relative;top:100px;left:100px;&quot;&gt;  \n            &lt;SPAN id=&quot;span2&quot;&gt;Placeholder text 2.&lt;/SPAN&gt;  \n        &lt;/DIV&gt;  \n\n        &lt;DIV id=&quot;div3&quot; style=&quot;position:absolute;top:200px;left:200px;&quot;&gt;  \n            &lt;DIV id=&quot;div4&quot; style=&quot;position:relative;top:100px;left:100px;&quot;&gt;  \n                &lt;SPAN id=&quot;span3&quot;&gt;Placeholder text 3.&lt;/SPAN&gt;  \n            &lt;/DIV&gt;  \n        &lt;/DIV&gt;  \n\n    &lt;/BODY&gt;  \n&lt;/HTML&gt;  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#6\">Private Sub GetOffsets()\n    Dim Str As String = &quot;&quot;\n    Dim Doc As HtmlDocument = WebBrowser1.Document\n\n    For Each Elem As HtmlElement In Doc.GetElementsByTagName(&quot;SPAN&quot;)\n        Str &amp;= &quot;OffsetParent for &quot; &amp; Elem.Id &amp; &quot; is &quot; &amp; Elem.OffsetParent.Id\n        Str &amp;= &quot;; OffsetRectangle is &quot; &amp; Elem.OffsetRectangle.ToString() &amp; vbCrLf\n    Next\n\n    MessageBox.Show(Str)\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#6\">private void GetOffsets()\n{\n\tString str = &quot;&quot;;\n\tHtmlDocument doc = webBrowser1.Document;\n\n\tforeach (HtmlElement elem in doc.GetElementsByTagName(&quot;SPAN&quot;))\n\t{\n\t\tstr += &quot;OffsetParent for &quot; + elem.Id + &quot; is &quot; + elem.OffsetParent.Id;\n\t\tstr += &quot;; OffsetRectangle is &quot; + elem.OffsetRectangle.ToString() + &quot;<br>&quot;;\n\t}\n\n\tMessageBox.Show(str);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_OffsetRectangle\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_OffsetRectangle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OffsetRectangle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the location of an element relative to its parent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle OffsetRectangle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>The x- and y-coordinate positions of the element, and its width and its height, in relation to its parent.  </p>\n<p> If an element&#39;s parent is relatively or absolutely positioned, OffsetRectangle will return the offset of the parent element. If the element itself is relatively positioned with respect to its parent, OffsetRectangle will return the offset from its parent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Elements can be positioned on an HTML page in one of three ways:  </p>\n<ul>\n<li><p>Default flow positioning.  </p>\n</li>\n<li><p>Relative positioning, in which the element is offset by a fixed amount relative to its parent.  </p>\n</li>\n<li><p>Absolute positioning, in which the element is given a fixed coordinate position relative to the upper-left corner of the document.  </p>\n<p>For more information about element positioning in HTML, see <a href=\"http://msdn.microsoft.com/library/ms533005.aspx\" data-linktype=\"external\">About Element Positioning</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_OffsetParent_\" data-linktype=\"relative-path\">OffsetParent</a> and OffsetRectangle differ for <code>span1</code>, <code>span2</code> and <code>span3</code>:  </p>\n<pre><code>&lt;HTML&gt;  \n    &lt;BODY id=&quot;documentBody&quot;&gt;  \n\n        &lt;DIV id=&quot;div1&quot;&gt;  \n            &lt;SPAN id=&quot;span1&quot;&gt;Placeholder text 1.&lt;/SPAN&gt;  \n        &lt;/DIV&gt;  \n\n        &lt;DIV id=&quot;div2&quot; style=&quot;position:relative;top:100px;left:100px;&quot;&gt;  \n            &lt;SPAN id=&quot;span2&quot;&gt;Placeholder text 2.&lt;/SPAN&gt;  \n        &lt;/DIV&gt;  \n\n        &lt;DIV id=&quot;div3&quot; style=&quot;position:absolute;top:200px;left:200px;&quot;&gt;  \n            &lt;DIV id=&quot;div4&quot; style=&quot;position:relative;top:100px;left:100px;&quot;&gt;  \n                &lt;SPAN id=&quot;span3&quot;&gt;Placeholder text 3.&lt;/SPAN&gt;  \n            &lt;/DIV&gt;  \n        &lt;/DIV&gt;  \n\n    &lt;/BODY&gt;  \n&lt;/HTML&gt;  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#6\">Private Sub GetOffsets()\n    Dim Str As String = &quot;&quot;\n    Dim Doc As HtmlDocument = WebBrowser1.Document\n\n    For Each Elem As HtmlElement In Doc.GetElementsByTagName(&quot;SPAN&quot;)\n        Str &amp;= &quot;OffsetParent for &quot; &amp; Elem.Id &amp; &quot; is &quot; &amp; Elem.OffsetParent.Id\n        Str &amp;= &quot;; OffsetRectangle is &quot; &amp; Elem.OffsetRectangle.ToString() &amp; vbCrLf\n    Next\n\n    MessageBox.Show(Str)\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#6\">private void GetOffsets()\n{\n\tString str = &quot;&quot;;\n\tHtmlDocument doc = webBrowser1.Document;\n\n\tforeach (HtmlElement elem in doc.GetElementsByTagName(&quot;SPAN&quot;))\n\t{\n\t\tstr += &quot;OffsetParent for &quot; + elem.Id + &quot; is &quot; + elem.OffsetParent.Id;\n\t\tstr += &quot;; OffsetRectangle is &quot; + elem.OffsetRectangle.ToString() + &quot;<br>&quot;;\n\t}\n\n\tMessageBox.Show(str);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_OuterHtml\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_OuterHtml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OuterHtml</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the current element&#39;s HTML code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string OuterHtml { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The HTML code for the current element and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Whereas <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InnerHtml_\" data-linktype=\"relative-path\">InnerHtml</a> will return all HTML contained in the current element excluding the current element&#39;s surrounding tags, OuterHtml includes the current element&#39;s tag as well as the HTML that tag contains, for example:  </p>\n<p> <code>&lt;HTML&gt;</code>  </p>\n<p> <code>&lt;BODY&gt;</code>  </p>\n<p> <code>&lt;DIV id=&quot;div1&quot;&gt;</code>  </p>\n<p> <code>Hello</code>  </p>\n<p> <code>&lt;DIV id=&quot;div2&quot;&gt;</code>  </p>\n<p> <code>World</code>  </p>\n<p> <code>&lt;DIV id=&quot;div3&quot;&gt;</code>  </p>\n<p> <code>How are you?</code>  </p>\n<p> <code>&lt;/DIV&gt;</code>  </p>\n<p> <code>&lt;/DIV&gt;</code>  </p>\n<p> <code>&lt;/DIV&gt;</code>  </p>\n<p> <code>&lt;/BODY&gt;</code>  </p>\n<p> <code>&lt;/HTML&gt;</code>  </p>\n<p> In this example, calling OuterHtml on <code>div2</code> will return:  </p>\n<p> <code>&lt;DIV id=&quot;div2&quot;&gt;</code>  </p>\n<p> <code>World</code>  </p>\n<p> <code>&lt;DIV id=&quot;div3&quot;&gt;</code>  </p>\n<p> <code>How are you?</code>  </p>\n<p> <code>&lt;/DIV&gt;</code>  </p>\n<p> <code>&lt;/DIV&gt;</code>  </p>\n<p> Calling <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InnerHtml_\" data-linktype=\"relative-path\">InnerHtml</a> will return:  </p>\n<p> <code>World</code>  </p>\n<p> <code>&lt;DIV id=&quot;div3&quot;&gt;</code>  </p>\n<p> <code>How are you?</code>  </p>\n<p> <code>&lt;/DIV&gt;</code>  </p>\n<p> If you assign a new value to OuterHtml, the current element reference will become invalid; it will not reflect the name, properties and child content of the HTML you have just assigned.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_OuterText\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_OuterText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OuterText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the current element&#39;s text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string OuterText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text inside the current element, and in the element&#39;s children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You cannot set text outside of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you attempt to assign HTML to an element with OuterText, the HTML code will display as literals in the document, just as if you were viewing HTML within a text file. If you assign HTML to an element using the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InnerHtml_\" data-linktype=\"relative-path\">InnerHtml</a> property, OuterText will return all of the text in that HTML with the markup removed.  </p>\n<p> Assigning a value to OuterText will destroy any child elements that belong to the element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Parent\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Parent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parent</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current element&#39;s parent element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElement Parent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </div>\r\n                  <p>The element above the current element in the HTML document&#39;s hierarchy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Parent property enables discovery of an element&#39;s context. It is most useful inside of event handlers such as <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Click\" data-linktype=\"relative-path\">Click</a>, which can fire for any element anywhere in the document&#39;s object hierarchy.  </p>\n<p> The Parent property of the HTML element (the top of an HTML document) points back to itself. If you call Parent inside a loop, verify that the loop&#39;s break condition compares the type of the current element and the type of the <code>Parent</code> property, or else your code may execute an infinite loop.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example finds all of the <code>IMG</code> tags in a document, and uses the Parent property to test whether the <code>IMG</code> is hyperlinked to another page; if it is, the code assigns the URL to the <code>ALT</code> attribute of the <code>IMG</code> tag, so that users can mouse over the image to see where it will take them.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#7\">Private Sub AddUrlToTooltip()\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            For Each Elem As HtmlElement In .GetElementsByTagName(&quot;IMG&quot;)\n                If (Elem.Parent.TagName.Equals(&quot;A&quot;)) Then\n                    Dim AltStr As String = Elem.GetAttribute(&quot;ALT&quot;)\n                    If (Not (AltStr Is Nothing) And (AltStr.Length &lt;&gt; 0)) Then\n                        Elem.SetAttribute(&quot;ALT&quot;, AltStr &amp; &quot; - points to &quot; &amp; Elem.Parent.GetAttribute(&quot;HREF&quot;))\n                    Else\n                        Elem.SetAttribute(&quot;ALT&quot;, &quot;Points to &quot; &amp; Elem.Parent.GetAttribute(&quot;HREF&quot;))\n                    End If\n                End If\n            Next\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#7\">private void AddUrlToTooltip()\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tforeach (HtmlElement elem in webBrowser1.Document.GetElementsByTagName(&quot;IMG&quot;))\n\t\t{\n\t\t\tif (elem.Parent.TagName.Equals(&quot;A&quot;))\n\t\t\t{\n\t\t\t\tString altStr = elem.GetAttribute(&quot;ALT&quot;);\n\t\t\t\tif (!(altStr == null) &amp;&amp; (altStr.Length != 0))\n\t\t\t\t{\n\t\t\t\t\telem.SetAttribute(&quot;ALT&quot;, altStr + &quot; - points to &quot; + elem.Parent.GetAttribute(&quot;HREF&quot;));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\telem.SetAttribute(&quot;ALT&quot;, &quot;Points to &quot; + elem.Parent.GetAttribute(&quot;HREF&quot;));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_ScrollLeft\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_ScrollLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScrollLeft</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the distance between the edge of the element and the left edge of its content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ScrollLeft { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The distance, in pixels, between the left edge of the element and the left edge of its content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The full dimensions of the scroll area are available using <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_ScrollRectangle_\" data-linktype=\"relative-path\">ScrollRectangle</a>; <code>ScrollLeft</code> and <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_ScrollTop_\" data-linktype=\"relative-path\">ScrollTop</a> are exposed independently because these are the only two properties of the scroll area that developers can set.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_ScrollRectangle\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_ScrollRectangle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScrollRectangle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions of an element&#39;s scrollable region.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle ScrollRectangle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>The size and coordinate location of the scrollable area of an element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An element will have a scrollable region if its content exceeds the size of its dimensions, unless the overflow style on the element forbids rendering scrollbars.  </p>\n<p> You cannot modify the size of the scroll area directly, but you can modify the distance between the edges of the scroll area and the edges of the element. Use the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_ScrollLeft_\" data-linktype=\"relative-path\">ScrollLeft</a> and <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_ScrollTop_\" data-linktype=\"relative-path\">ScrollTop</a> properties to achieve this.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_ScrollTop\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_ScrollTop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScrollTop</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the distance between the edge of the element and the top edge of its content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ScrollTop { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The distance, in pixels, between the top edge of the element and the top edge of its content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The full dimensions of the scroll area are available using <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_ScrollRectangle_\" data-linktype=\"relative-path\">ScrollRectangle</a>; <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_ScrollLeft_\" data-linktype=\"relative-path\">ScrollLeft</a> and <code>ScrollTop</code> are exposed independently because these are the only two properties of the scroll area that developers can set.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Style\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Style_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Style</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a semicolon-delimited list of styles for the current element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Style { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string consisting of all of the element&#39;s styles</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HTML Document Object Model (DOM) uses styles as defined in the World Wide Web Consortiums Cascading Style Sheets specification to control the display of an element. Styles in the Style property take the form of colon-delimited name-value pairs, with each pair separated by a semicolon, as follows:  </p>\n<p> <code>style-name1:value1;...;[style-nameN:valueN;]</code>  </p>\n<p> To set the font for a <code>DIV</code> element to 14-point Times New Roman bold, for example, you would assign the following string:  </p>\n<p> <code>font-face:Times New Roman;font-size:14px;font-weight:bold;</code>  </p>\n<p> For a full list of all available styles in the HTML DOM, see <a href=\"http://msdn.microsoft.com/library/ms534651.aspx\" data-linktype=\"external\">STYLE Attribute</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_TabIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_TabIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TabIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the location of this element in the tab order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public short TabIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The numeric index of the element in the tab order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>TabIndex determines which element in an HTML document will next receive focus when the user presses the TAB key. By default, the only elements included in the tab order are <code>INPUT</code> elements, the <code>SELECT</code> control, and any element whose <code>contentEditable</code> property is set to <code>true</code>. You can include any HTML element in the tab order, such as a <code>DIV</code>, by assigning it an explicit TabIndex.  </p>\n<p> Valid values for TabIndex range from -32767 to 32767.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_TagName\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_TagName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TagName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the HTML tag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TagName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name used to create this element using HTML markup.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Many elements in the HTML Document Object Model have attributes, properties, and methods that are unique to those elements; such as the <code>HREF</code> attribute on the <code>A</code> element, or the <code>Submit</code> method on <code>FORM</code>. Use TagName when you have an element of a potentially arbitrary type, and need to perform a type-specific operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example finds all of the <code>IMG</code> tags in a document, and uses the <code>TagName</code> property to test whether the <code>IMG</code> is hyperlinked to another page; if it is, the code assigns the URL to the <code>ALT</code> attribute of the <code>IMG</code> tag, so that users can mouse over the image to see where it will take them.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#7\">Private Sub AddUrlToTooltip()\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            For Each Elem As HtmlElement In .GetElementsByTagName(&quot;IMG&quot;)\n                If (Elem.Parent.TagName.Equals(&quot;A&quot;)) Then\n                    Dim AltStr As String = Elem.GetAttribute(&quot;ALT&quot;)\n                    If (Not (AltStr Is Nothing) And (AltStr.Length &lt;&gt; 0)) Then\n                        Elem.SetAttribute(&quot;ALT&quot;, AltStr &amp; &quot; - points to &quot; &amp; Elem.Parent.GetAttribute(&quot;HREF&quot;))\n                    Else\n                        Elem.SetAttribute(&quot;ALT&quot;, &quot;Points to &quot; &amp; Elem.Parent.GetAttribute(&quot;HREF&quot;))\n                    End If\n                End If\n            Next\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#7\">private void AddUrlToTooltip()\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tforeach (HtmlElement elem in webBrowser1.Document.GetElementsByTagName(&quot;IMG&quot;))\n\t\t{\n\t\t\tif (elem.Parent.TagName.Equals(&quot;A&quot;))\n\t\t\t{\n\t\t\t\tString altStr = elem.GetAttribute(&quot;ALT&quot;);\n\t\t\t\tif (!(altStr == null) &amp;&amp; (altStr.Length != 0))\n\t\t\t\t{\n\t\t\t\t\telem.SetAttribute(&quot;ALT&quot;, altStr + &quot; - points to &quot; + elem.Parent.GetAttribute(&quot;HREF&quot;));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\telem.SetAttribute(&quot;ALT&quot;, &quot;Points to &quot; + elem.Parent.GetAttribute(&quot;HREF&quot;));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_AppendChild_System_Windows_Forms_HtmlElement_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_AppendChild_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendChild(HtmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an element to another element&#39;s subtree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newElement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> to append to this location in the tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </div>\r\n                  <p>The element after it has been added to the tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HTML Document Object Model (DOM) enables you to alter the run-time contents of an HTML file in a number of ways. Use AppendChild to add new elements to an existing document, or to move an element on the page.  </p>\n<p> If an element has already been parented, appending an element to another element will automatically remove that element from its previous parent.  </p>\n<p> Any additions made to a document at run-time using AppendChild will not be persisted when you call the <a class=\"xref\" href=\"system.windows.forms.webbrowser#System_Windows_Forms_WebBrowser_ShowSaveAsDialog_\" data-linktype=\"relative-path\">ShowSaveAsDialog</a> method on the <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new hyperlink using the <a class=\"xref\" href=\"system.windows.forms.htmldocument#System_Windows_Forms_HtmlDocument_CreateElement_\" data-linktype=\"relative-path\">CreateElement</a> method and adds it to end of a page using <code>AppendChild</code> on the <code>BODY</code> element. The example requires that your application contains a <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control named <code>WebBrowser1</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#8\">Private Sub AddLinkToPage(ByVal url As String)\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            Dim Elem As HtmlElement = .CreateElement(&quot;A&quot;)\n            Elem.SetAttribute(&quot;HREF&quot;, url)\n            Elem.InnerText = &quot;Visit our web site for more details.&quot;\n\n            .Body.AppendChild(Elem)\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#8\">private void AddUrlToTooltip(string url)\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tHtmlElement elem = webBrowser1.Document.CreateElement(&quot;A&quot;);\n\t\telem.SetAttribute(&quot;HREF&quot;, url);\n\t\telem.InnerText = &quot;Visit our Web site for more details.&quot;;\n\n\t\twebBrowser1.Document.Body.AppendChild(elem);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_AttachEventHandler_System_String_System_EventHandler_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_AttachEventHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AttachEventHandler(String,EventHandler)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an event handler for a named event on the HTML Document Object Model (DOM).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AttachEventHandler (string eventName, EventHandler eventHandler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>eventName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the event you want to handle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>eventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed code that handles the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Managed Document Object Model (DOM) exposes only a select number of events. Most of the unexposed events are only defined for specific types of elements; such as the <code>submit</code> event, which is valid only on <code>FORM</code> elements. Use AttachEventHandler to add an event handler to these unexposed events.  </p>\n<p> You should not attach an event to the document or one of its objects until the document has completed loading. The earliest you should call this method is in the <a class=\"xref\" href=\"system.windows.forms.webbrowser#System_Windows_Forms_WebBrowser_DocumentCompleted\" data-linktype=\"relative-path\">DocumentCompleted</a> event of the <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control.  </p>\n<p> For more information about the available unmanaged events, see <a href=\"../Topic/Accessing%20Unexposed%20Members%20on%20the%20Managed%20HTML%20Document%20Object%20Model.md\" data-linktype=\"relative-path\">Accessing Unexposed Members on the Managed HTML Document Object Model</a> and the IHTMLElement interfaces: <a href=\"http://go.microsoft.com/fwlink/?LinkId=104876\" data-linktype=\"external\">IHTMLElement</a>, <a href=\"http://go.microsoft.com/fwlink/?LinkId=104877\" data-linktype=\"external\">IHTMLElement2</a>, <a href=\"http://go.microsoft.com/fwlink/?LinkId=104878\" data-linktype=\"external\">IHTMLElement3</a>, <a href=\"http://go.microsoft.com/fwlink/?LinkId=104879\" data-linktype=\"external\">IHTMLElement4</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_DetachEventHandler_System_String_System_EventHandler_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_DetachEventHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DetachEventHandler(String,EventHandler)</div>        \r\n          </div>\r\n    \r\n            <p>Removes an event handler from a named event on the HTML Document Object Model (DOM).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DetachEventHandler (string eventName, EventHandler eventHandler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>eventName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the event you want to handle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>eventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed code that handles the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Tests if the supplied object is equal to the current element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to test for equality.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is an <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Focus\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_Focus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Focus()</div>        \r\n          </div>\r\n    \r\n            <p>Puts user input focus on the current element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Focus ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting the focus on an element both gives that element focus and makes it the active element; for example, the element that has focus will be returned by the <a class=\"xref\" href=\"system.windows.forms.htmldocument#System_Windows_Forms_HtmlDocument_ActiveElement_\" data-linktype=\"relative-path\">ActiveElement</a> property of <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a>.  </p>\n<p> Any key strokes entered by a user after Focus has been called will be sent to that element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_GetAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the value of the named attribute on the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetAttribute (string attributeName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute. This argument is case-insensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of this attribute on the element, as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value. If the specified attribute does not exist on this element, returns an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An attribute in HTML is any valid name/value pair for that element. <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> exposes only those attributes that are common to all elements, leaving out those that only apply to certain types of elements; <code>SRC</code> is a predefined attribute for the <code>IMG</code> tag, for example, but not for the <code>DIV</code> tag. Use GetAttribute and <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_SetAttribute_\" data-linktype=\"relative-path\">SetAttribute</a> to manipulate attributes not exposed on the managed Document Object Model (DOM).  </p>\n<p> GetAttribute and <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_SetAttribute_\" data-linktype=\"relative-path\">SetAttribute</a> are case-insensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves all of the <code>META</code> tags within an HTML document, using GetAttribute to find the <code>META</code> tag with the name <code>Description</code>. The example requires that your application has a <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control named <code>WebBrowser1</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlDocument#6\">Private Sub DisplayMetaDescription()\n    If (WebBrowser1.Document IsNot Nothing) Then\n        Dim Elems As HtmlElementCollection \n        Dim WebOC as WebBrowser = WebBrowser1\n\n Elems = WebOC.Document.GetElementsByTagName(&quot;META&quot;)\n\n        For Each elem As HtmlElement In Elems\n            Dim NameStr As String = elem.GetAttribute(&quot;name&quot;)\n\n            If ((NameStr IsNot Nothing) And (NameStr.Length &lt;&gt; 0)) Then\n                If NameStr.ToLower().Equals(&quot;description&quot;) Then\n                    Dim ContentStr As String = elem.GetAttribute(&quot;content&quot;)\n                    MessageBox.Show(&quot;Document: &quot; &amp; WebOC.Url.ToString() &amp; vbCrLf &amp; &quot;Description: &quot; &amp; ContentStr)\n                End If\n            End If\n        Next\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlDocument#6\">private void DisplayMetaDescription()\n{\n    if (webBrowser1.Document != null)\n    {\n        HtmlElementCollection elems = webBrowser1.Document.GetElementsByTagName(&quot;META&quot;);\n        foreach (HtmlElement elem in elems)\n        {\n            String nameStr = elem.GetAttribute(&quot;name&quot;);\n            if (nameStr != null &amp;&amp; nameStr.Length != 0)\n            {\n                String contentStr = elem.GetAttribute(&quot;content&quot;);\n                MessageBox.Show(&quot;Document: &quot; + webBrowser1.Url.ToString() + &quot;<br>Description: &quot; + contentStr);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_GetElementsByTagName_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_GetElementsByTagName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementsByTagName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a collection of elements represented in HTML by the specified <code>HTML</code> tag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tagName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the tag whose <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> objects you wish to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelementcollection\" data-linktype=\"relative-path\">HtmlElementCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.htmlelementcollection\" data-linktype=\"relative-path\">HtmlElementCollection</a> containing all elements whose <code>HTML</code> tag name is equal to <code>tagName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_GetHashCode\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for a particular type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_InsertAdjacentElement_System_Windows_Forms_HtmlElementInsertionOrientation_System_Windows_Forms_HtmlElement_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_InsertAdjacentElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Insert a new element into the Document Object Model (DOM).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>orient</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelementinsertionorientation\" data-linktype=\"relative-path\">HtmlElementInsertionOrientation</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Where to insert this element in relation to the current element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newElement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new element to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> that was just inserted. If insertion failed, this will return <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not call this method until after the <a class=\"xref\" href=\"system.windows.forms.webbrowser#System_Windows_Forms_WebBrowser_DocumentCompleted\" data-linktype=\"relative-path\">DocumentCompleted</a> event on the <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control has occurred. Calling this method before then can result in an exception, as the document will not have finished loading.  </p>\n<p> Whether a value of <a class=\"xref\" href=\"system.windows.forms.htmlelementinsertionorientation\" data-linktype=\"relative-path\">HtmlElementInsertionOrientation</a> is valid will depend on the type of the element. For example, <a class=\"xref\" href=\"system.windows.forms.htmlelementinsertionorientation\" data-linktype=\"relative-path\">HtmlElementInsertionOrientation</a> is valid if the element is a <code>DIV</code>, but not if it is a <code>SCRIPT</code> or <code>IMG</code> element, neither of which can contain child elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example inserts a <code>DIV</code> element into the top of every page that users view outside of the ADatum.com server. The example requires that your form contains a <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control named <code>WebBrowser1</code>. Your sample must also import the namespace <a class=\"xref\" href=\"system.text.regularexpressions\" data-linktype=\"relative-path\">System.Text.RegularExpressions</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#9\">Private Sub AddDivMessage()\n    Dim CurrentUri As New Uri(WebBrowser1.Url.ToString())\n    Dim HostName As String\n\n    &#39; Ensure we have a host name, and not just an IP, against which to test.\n    If (Not CurrentUri.HostNameType = UriHostNameType.Dns) Then\n        Dim Permit As New DnsPermission(System.Security.Permissions.PermissionState.Unrestricted)\n        Permit.Assert()\n\n        Dim HostEntry As IPHostEntry = System.Net.Dns.GetHostEntry(CurrentUri.Host)\n        HostName = HostEntry.HostName\n    Else\n        HostName = CurrentUri.Host\n    End If\n\n    If (Not HostName.Contains(&quot;adatum.com&quot;)) Then\n        AddTopPageMessage(&quot;You are viewing a web site other than ADatum.com. &quot; &amp; _\n            &quot;Please exercise caution, and ensure your web surfing complies with all &quot; &amp; _\n            &quot;corporate regulations as laid out in the company handbook.&quot;)\n    End If\nEnd Sub\n\nPrivate Sub AddTopPageMessage(ByVal Message As String)\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            &#39; Do not insert the warning again if it already exists. \n            Dim ReturnedElems As HtmlElementCollection = .All.GetElementsByName(&quot;ADatumWarningDiv&quot;)\n            If (Not (ReturnedElems Is Nothing) And (ReturnedElems.Count &gt; 0)) Then\n                Exit Sub\n            End If\n\n            Dim DivElem As HtmlElement = .CreateElement(&quot;DIV&quot;)\n            DivElem.Name = &quot;ADatumWarningDiv&quot;\n            DivElem.Style = &quot;background-color:black;color:white;font-weight:bold;width:100%;&quot;\n            DivElem.InnerText = Message\n\n            DivElem = .Body.InsertAdjacentElement(HtmlElementInsertionOrientation.AfterBegin, DivElem)\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#9\">public void AddDivMessage()\n{\n\tUri currentUri = new Uri(webBrowser1.Url.ToString());\n\tString hostName = null;\n\n\t// Ensure we have a host name, and not just an IP, against which to test.\n\tif (!(currentUri.HostNameType == UriHostNameType.Dns))\n\t{\n\t\tDnsPermission permit = new DnsPermission(System.Security.Permissions.PermissionState.Unrestricted);\n\t\tpermit.Assert();\n\n\t\tIPHostEntry hostEntry = System.Net.Dns.GetHostEntry(currentUri.Host);\n\t\thostName = hostEntry.HostName;\n\t} else {\n\t\thostName = currentUri.Host;\n\t}\n\n\tif (!hostName.Contains(&quot;adatum.com&quot;))\n\t{\n\t\tAddTopPageMessage(&quot;You are viewing a web site other than ADatum.com. &quot; +\n\t\t\t&quot;Please exercise caution, and ensure your Web surfing complies with all &quot; +\n\t\t\t&quot;corporate regulations as laid out in the company handbook.&quot;);\n\t}\n}\n\nprivate void AddTopPageMessage(String message)\n{\n\tif (webBrowser1.Document != null) \n\t{\n\t\tHtmlDocument doc = webBrowser1.Document;\n\n              // Do not insert the warning again if it already exists. \n              HtmlElementCollection returnedElems = doc.All.GetElementsByName(&quot;ADatumWarningDiv&quot;);\n              if ((returnedElems != null) &amp;&amp; (returnedElems.Count &gt; 0)) \n\t\t{\n                  return;\n\t\t}\n\n              HtmlElement divElem = doc.CreateElement(&quot;DIV&quot;);\n              divElem.Name = &quot;ADatumWarningDiv&quot;;\n              divElem.Style = &quot;background-color:black;color:white;font-weight:bold;width:100%;&quot;;\n              divElem.InnerText = message;\n\n              divElem = doc.Body.InsertAdjacentElement(HtmlElementInsertionOrientation.AfterBegin, divElem);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_InvokeMember_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_InvokeMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeMember(String)</div>        \r\n          </div>\r\n    \r\n            <p>Executes an unexposed method on the underlying DOM element of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object InvokeMember (string methodName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the property or method to invoke.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element returned by this method, represented as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. If this <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is another HTML element, and you have a reference to the unmanaged MSHTML library added to your project, you can cast it to its appropriate unmanaged interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to call methods from the Document Object Model (DOM) that do not have equivalents in managed code. Use this version of InvokeMember to execute unexposed methods that take no arguments. For an example, see <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_InvokeMember_\" data-linktype=\"relative-path\">InvokeMember</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_InvokeMember_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_InvokeMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeMember(String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes a function defined in the current HTML page by a scripting language.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object InvokeMember (string methodName, object[] parameter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the property or method to invoke.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A list of parameters to pass.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element returned by the function, represented as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. If this <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is another HTML element, and you have a reference to the unmanaged MSHTML library added to your project, you can cast it to its appropriate unmanaged interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to call methods from the Document Object Model (DOM) that do not have equivalents in managed code. All arguments supplied to InvokeMember will be converted to Win32 <code>VARIANT</code> data types before they are passed to the named scripting function.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets a <code>TABLE</code> called <code>dataTable</code> and uses the unexposed <code>moveRow</code> method to move a row from the end of the table to the beginning.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#11\">Private Sub ShiftRows(ByVal TableName As String)\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            Dim Elems As HtmlElementCollection = .All.GetElementsByName(TableName)\n            If (Not Elems Is Nothing And Elems.Count &gt; 0) Then\n                Dim Elem As HtmlElement = Elems(0)\n\n                &#39; Prepare the arguments.\n                Dim Args(2) As Object\n                Args(0) = CObj(&quot;-1&quot;)\n                Args(1) = CObj(&quot;0&quot;)\n\n                Elem.InvokeMember(&quot;moveRow&quot;, Args)\n            End If\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#11\">private void ShiftRows(String tableName)\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tHtmlDocument doc = webBrowser1.Document;\n\t\tHtmlElementCollection elems = doc.All.GetElementsByName(tableName);\n\t\tif (elems != null &amp;&amp; elems.Count &gt; 0)\n\t\t{\n\t\t\tHtmlElement elem = elems[0];\n\n\t\t\t// Prepare the arguments.\n\t\t\tObject[] args = new Object[2];\n\t\t\targs[0] = (Object)&quot;-1&quot;;\n\t\t\targs[1] = (Object)&quot;0&quot;;\n\n\t\t\telem.InvokeMember(&quot;moveRow&quot;, args);\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_RaiseEvent_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_RaiseEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaiseEvent(String)</div>        \r\n          </div>\r\n    \r\n            <p>Causes the named event to call all registered event handlers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RaiseEvent (string eventName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>eventName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the event to raise.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used to access HTML Document Object Model (DOM) events. It directly calls the <a href=\"http://go.microsoft.com/fwlink/?LinkId=103189\" data-linktype=\"external\">IHTMLElement3::fireEvent</a> method. For more information about how to use the DOM through the <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> class, see <a href=\"../Topic/Accessing%20Unexposed%20Members%20on%20the%20Managed%20HTML%20Document%20Object%20Model.md\" data-linktype=\"relative-path\">Accessing Unexposed Members on the Managed HTML Document Object Model</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_RemoveFocus\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_RemoveFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveFocus()</div>        \r\n          </div>\r\n    \r\n            <p>Removes focus from the current element, if that element has focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveFocus ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method raises the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> event for the element.  </p>\n<p> When focus is cleared from an element using this method, it is given to the document containing the element, not to the next element in the tab order.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_ScrollIntoView_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_ScrollIntoView_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScrollIntoView(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Scrolls through the document containing this element until the top or bottom edge of this element is aligned with the document&#39;s window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ScrollIntoView (bool alignWithTop);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>alignWithTop</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, the top of the object will be displayed at the top of the window. If <code>false</code>, the bottom of the object will be displayed at the bottom of the window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example finds an element by name and scrolls through the page so that the top of the element is aligned with the top of the visible page.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#12\">Private Sub ScrollToElement(ByVal ElemName As String)\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            Dim Elems As HtmlElementCollection = .All.GetElementsByName(ElemName)\n            If (Not Elems Is Nothing And Elems.Count &gt; 0) Then\n                Dim Elem As HtmlElement = Elems(0)\n\n                Elem.ScrollIntoView(True)\n            End If\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#12\">private void ScrollToElement(String elemName)\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tHtmlDocument doc = webBrowser1.Document;\n              HtmlElementCollection elems = doc.All.GetElementsByName(elemName);\n              if (elems != null &amp;&amp; elems.Count &gt; 0) \n\t\t{\n                  HtmlElement elem = elems[0];\n\n                  elem.ScrollIntoView(true);\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_SetAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_SetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of the named attribute on the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAttribute (string attributeName, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value of this attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An attribute in HTML is any valid name-value pair for that element. <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> exposes only those attributes that are common to all elements, leaving out those that only apply to certain types of elements; <code>SRC</code> is a predefined attribute for the <code>IMG</code> tag, for example, but not for the <code>DIV</code> tag. Use <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_GetAttribute_\" data-linktype=\"relative-path\">GetAttribute</a> and SetAttribute to manipulate attributes not exposed on the managed Document Object Model (DOM).  </p>\n<p> If <code>attributeName</code> is not a defined attribute on an element, SetAttribute will define it on the element as a new attribute.  </p>\n<p> <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_GetAttribute_\" data-linktype=\"relative-path\">GetAttribute</a> and SetAttribute are case-insensitive.  </p>\n<p> To set the <code>class</code> attribute on an <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> , you must refer to the attribute as <code>className</code> when specifying the first argument to SetAttribute</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds a new <code>IMG</code> element to the current document, using SetAttribute to set the <code>SRC</code> attribute for the image.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#13\">Private Sub InsertImageFooter()\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            Dim Elem As HtmlElement = .CreateElement(&quot;IMG&quot;)\n            Elem.SetAttribute(&quot;SRC&quot;, &quot;http://www.adatum.com/images/footer-banner.jpg&quot;)\n\n            .Body.AppendChild(Elem)\n        End With\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#13\">private void InsertImageFooter()\n{\n\tif (webBrowser1.Document != null)\n\t{\n\t\tHtmlDocument doc = webBrowser1.Document;\n\t\tHtmlElement elem = doc.CreateElement(&quot;IMG&quot;);\n\t\telem.SetAttribute(&quot;SRC&quot;, &quot;http://www.adatum.com/images/footer-banner.jpg&quot;);\n\n\t\tdoc.Body.AppendChild(elem);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Click\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Click</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user clicks on the element with the left mouse button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler Click;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can cancel the default action for a Click event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A Click event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> If the user clicks on an element that does not currently have input focus, the Click event will occur after the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Focusing\" data-linktype=\"relative-path\">Focusing</a> event, but before the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> event for that element.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Click event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the Click event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#432\">private void HtmlElement1_Click(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;Click Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#432\">Private Sub HtmlElement1_Click(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.Click\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;Click Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_DoubleClick\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoubleClick</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user clicks the left mouse button over an element twice, in rapid succession.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A double-click is determined by the mouse settings of the user&#39;s operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.  </p>\n<p> You can cancel the default action for a DoubleClick event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A DoubleClick event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the DoubleClick event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#433\">private void HtmlElement1_DoubleClick(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;DoubleClick Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#433\">Private Sub HtmlElement1_DoubleClick(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.DoubleClick\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;DoubleClick Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Drag\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Drag</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user drags text to various locations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler Drag;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event occurs when text is dragged to the following locations:  </p>\n<ul>\n<li><p>Within or between HTML pages hosted in the <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control or Internet Explorer  </p>\n</li>\n<li><p>To another application  </p>\n</li>\n<li><p>To the Windows desktop  </p>\n<p>You can cancel the default action for a Drag event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p>A Drag event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Drag event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the Drag event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#434\">private void HtmlElement1_Drag(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;Drag Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#434\">Private Sub HtmlElement1_Drag(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.Drag\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;Drag Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_DragEnd\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragEnd</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a user finishes a drag operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler DragEnd;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can cancel the default action for a DragEnd event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A DragEnd event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragEnd event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the DragEnd event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#435\">private void HtmlElement1_DragEnd(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;DragEnd Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#435\">Private Sub HtmlElement1_DragEnd(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.DragEnd\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;DragEnd Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_DragLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user is no longer dragging an item over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler DragLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the DragLeave event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#436\">private void HtmlElement1_DragLeave(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;DragLeave Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#436\">Private Sub HtmlElement1_DragLeave(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.DragLeave\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;DragLeave Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_DragOver\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragOver</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user drags text over the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler DragOver;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can cancel the default action for a DragOver event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A DragOver event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the DragOver event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#437\">private void HtmlElement1_DragOver(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;DragOver Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#437\">Private Sub HtmlElement1_DragOver(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.DragOver\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;DragOver Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_Focusing\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Focusing</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the element first receives user input focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler Focusing;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An element that had focus before the user switched to another application using the taskbar or the ALT+TAB keys will receive the Focusing and <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> events again when the user switches back to your application.  </p>\n<p> You cannot cancel the default behavior of this event. To remove focus from an element, call <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Focus_\" data-linktype=\"relative-path\">Focus</a> on a different element from within the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> event.  </p>\n<p> A Focusing event on an element will also occur on that element&#39;s parents and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Focusing event. This report helps you to learn when the event occurs and can assist you in debugging.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the Focusing event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#438\">private void HtmlElement1_Focusing(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;Focusing Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#438\">Private Sub HtmlElement1_Focusing(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.Focusing\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;Focusing Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_GotFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the element has received user input focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler GotFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can neither cancel this event&#39;s default behavior, nor prevent it from bubbling. To remove focus from an element, call <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Focus_\" data-linktype=\"relative-path\">Focus</a> on a different element from within the GotFocus event.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Save the following HTML code into a file, and load the file into a <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control in a Windows Forms project.  </p>\n<pre><code>&lt;HTML&gt;  \n    &lt;BODY&gt;  \n        &lt;FORM name=&quot;form1&quot;&gt;  \n            &lt;INPUT type=&quot;text&quot; size=20 name=&quot;text1&quot;&gt;  \n            &lt;INPUT type=&quot;text&quot; size=20 name=&quot;text2&quot;&gt;  \n            &lt;INPUT type=&quot;text&quot; size=20 name=&quot;text3&quot;&gt;  \n        &lt;/FORM&gt;  \n    &lt;/BODY&gt;  \n&lt;/HTML&gt;  \n</code></pre><p> The following code example prevents the next <code>INPUT</code> element in the tab order from receiving user input focus if the previous element contains less than five characters. The example requires that the previously mentioned HTML file is loaded into an instance of the <a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a> control named <code>WebBrowser1</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HtmlElement#15\">Dim WithEvents TargetFormElement As HtmlElement\n\nPrivate Sub HandleFormFocus()\n    If (WebBrowser1.Document IsNot Nothing) Then\n        With WebBrowser1.Document\n            If (.Forms.Count &gt; 0) Then\n                Dim TargetForm As HtmlElement = .Forms(0)\n                Dim SearchCollection As HtmlElementCollection = TargetForm.All.GetElementsByName(&quot;text1&quot;)\n                If (SearchCollection.Count = 1) Then\n                    TargetFormElement = SearchCollection(0)\n                End If\n            End If\n        End With\n    End If\nEnd Sub\n\nPrivate Sub TargetFormElement_Focus(ByVal sender As Object, ByVal e As HtmlElementEventArgs)\n    Dim TextElement As HtmlElement = e.FromElement\n    Dim ElementText As String = TextElement.GetAttribute(&quot;value&quot;)\n\n    &#39; Check that this value is at least five characters long.\n    If (ElementText.Length &lt; 5) Then\n        e.ReturnValue = True\n        MessageBox.Show(&quot;The entry in the current field must be at least five characters long.&quot;)\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HtmlElement#15\">HtmlElement targetFormElement;\n\nprivate void HandleFormFocus()\n{\n\tif (webBrowser1.Document != null) \n\t{\n\t\tHtmlDocument doc = webBrowser1.Document;\n\t\tif (doc.Forms.Count &gt; 0) \n\t\t{\n\t\t\tHtmlElement targetForm = doc.Forms[0];\n\t\t\tHtmlElementCollection searchCollection = targetForm.All.GetElementsByName(&quot;text1&quot;);\n\t\t\tif (searchCollection.Count == 1) \n\t\t\t{\n                      targetFormElement = searchCollection[0];\n\t\t\t}\n\t\t}\n\t}\n}\n\nprivate void TargetFormElement_Focus(Object sender, HtmlElementEventArgs e)\n{\n\tHtmlElement textElement = e.FromElement;\n\tString elementText = textElement.GetAttribute(&quot;value&quot;);\n\n\t// Check that this value is at least five characters long.\n\tif (elementText.Length &lt; 5)\n\t{\n\t\te.ReturnValue = true;\n\t\tMessageBox.Show(&quot;The entry in the current field must be at least five characters long.&quot;);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_KeyDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user presses a key on the keyboard.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler KeyDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>KeyDown occurs before <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_KeyPress\" data-linktype=\"relative-path\">KeyPress</a>, which in turns occurs before <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a>.  </p>\n<p> You can cancel the default action for a KeyDown event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A KeyDown event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the KeyDown event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#442\">private void HtmlElement1_KeyDown(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;KeyDown Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#442\">Private Sub HtmlElement1_KeyDown(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.KeyDown\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;KeyDown Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_KeyPress\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyPress</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user presses and releases a key on the keyboard.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler KeyPress;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>KeyPress occurs after <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> and before <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a>.  </p>\n<p> You can cancel the default action for a KeyPress event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A KeyPress event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyPress event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the KeyPress event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#443\">private void HtmlElement1_KeyPress(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;KeyPress Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#443\">Private Sub HtmlElement1_KeyPress(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.KeyPress\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;KeyPress Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_KeyUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user releases a key on the keyboard.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler KeyUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>KeyUp occurs after <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_KeyPress\" data-linktype=\"relative-path\">KeyPress</a>, which occurs after <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a>.  </p>\n<p> You cannot cancel this event.  </p>\n<p> A KeyUp event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the KeyUp event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#444\">private void HtmlElement1_KeyUp(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;KeyUp Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#444\">Private Sub HtmlElement1_KeyUp(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.KeyUp\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;KeyUp Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_LosingFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LosingFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the element is losing user input focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LosingFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the LosingFocus event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#440\">private void HtmlElement1_LosingFocus(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;LosingFocus Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#440\">Private Sub HtmlElement1_LosingFocus(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.LosingFocus\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;LosingFocus Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_LostFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the element has lost user input focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler LostFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An element will no longer receive key stroke events after LostFocus occurs until it is given focus again, either by the user selecting it on the page or by the application calling the <a class=\"xref\" href=\"system.windows.forms.htmlelement#System_Windows_Forms_HtmlElement_Focus_\" data-linktype=\"relative-path\">Focus</a> method on that element.  </p>\n<p> You cannot cancel this event.  </p>\n<p> An LostFocus event on an element will also occur on that element&#39;s parents and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LostFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the LostFocus event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#441\">private void HtmlElement1_LostFocus(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;LostFocus Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#441\">Private Sub HtmlElement1_LostFocus(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.LostFocus\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;LostFocus Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_MouseDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user presses a mouse button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler MouseDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can cancel the default action for a MouseDown event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A MouseDown event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the MouseDown event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#446\">private void HtmlElement1_MouseDown(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;MouseDown Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#446\">Private Sub HtmlElement1_MouseDown(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.MouseDown\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;MouseDown Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_MouseEnter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseEnter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user first moves the mouse cursor over the current element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseEnter event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the MouseEnter event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#449\">private void HtmlElement1_MouseEnter(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;MouseEnter Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#449\">Private Sub HtmlElement1_MouseEnter(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.MouseEnter\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;MouseEnter Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_MouseLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user moves the mouse cursor off of the current element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the MouseLeave event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#450\">private void HtmlElement1_MouseLeave(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;MouseLeave Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#450\">Private Sub HtmlElement1_MouseLeave(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.MouseLeave\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;MouseLeave Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_MouseMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user moves the mouse cursor across the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler MouseMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot cancel this event.  </p>\n<p> A MouseMove event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the MouseMove event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#445\">private void HtmlElement1_MouseMove(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;MouseMove Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#445\">Private Sub HtmlElement1_MouseMove(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.MouseMove\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;MouseMove Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_MouseOver\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseOver</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse cursor enters the bounds of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler MouseOver;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can cancel the default action for a MouseOver event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A MouseOver event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the MouseOver event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#447\">private void HtmlElement1_MouseOver(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;MouseOver Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#447\">Private Sub HtmlElement1_MouseOver(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.MouseOver\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;MouseOver Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_MouseUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user releases a mouse button.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HtmlElementEventHandler MouseUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can cancel the default action for a MouseUp event on an element by setting the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_ReturnValue_\" data-linktype=\"relative-path\">ReturnValue</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> A MouseUp event on an element will also occur on that element&#39;s parent elements and on the <a class=\"xref\" href=\"system.windows.forms.htmldocument\" data-linktype=\"relative-path\">HtmlDocument</a> class itself, unless you set the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs#System_Windows_Forms_HtmlElementEventArgs_BubbleEvent_\" data-linktype=\"relative-path\">BubbleEvent</a> property of the <a class=\"xref\" href=\"system.windows.forms.htmlelementeventargs\" data-linktype=\"relative-path\">HtmlElementEventArgs</a> class to <code>true</code>.  </p>\n<p> For more information about the difference between canceling event bubbling and canceling the default action on an event, see <a href=\"http://msdn.microsoft.com/library/ms533022.aspx\" data-linktype=\"external\">About the DHTML Object Model</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> named <code>HtmlElement1</code>. Then ensure that the event handler is associated with the MouseUp event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#448\">private void HtmlElement1_MouseUp(Object sender, HtmlElementEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;MouseUp Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#448\">Private Sub HtmlElement1_MouseUp(sender as Object, e as HtmlElementEventArgs) _ \n     Handles HtmlElement1.MouseUp\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MouseButtonsPressed&quot;, e.MouseButtonsPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ClientMousePosition&quot;, e.ClientMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;OffsetMousePosition&quot;, e.OffsetMousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;MousePosition&quot;, e.MousePosition)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;BubbleEvent&quot;, e.BubbleEvent)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyPressedCode&quot;, e.KeyPressedCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;AltKeyPressed&quot;, e.AltKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;CtrlKeyPressed&quot;, e.CtrlKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShiftKeyPressed&quot;, e.ShiftKeyPressed)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;EventType&quot;, e.EventType)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ReturnValue&quot;, e.ReturnValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;FromElement&quot;, e.FromElement)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ToElement&quot;, e.ToElement)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;MouseUp Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_op_Equality_System_Windows_Forms_HtmlElement_System_Windows_Forms_HtmlElement_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(HtmlElement,HtmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two elements for equality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if both parameters are <code>null</code>, or if both elements have the same underlying COM interface; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The equality operator tests the <code>IUnknown</code> pointers of the underlying COM objects wrapped by the supplied <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> classes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_HtmlElement_op_Inequality_System_Windows_Forms_HtmlElement_System_Windows_Forms_HtmlElement_\">\r\n    \r\n            <a id=\"System_Windows_Forms_HtmlElement_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(HtmlElement,HtmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a> objects for inequality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.windows.forms.htmlelement\" data-linktype=\"relative-path\">HtmlElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> is only one element is <code>null</code>, or the two objects are not equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.HtmlElement.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.HtmlElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.All\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.AppendChild\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.AttachEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.CanHaveChildren\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Children\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Click\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_Click\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_Click\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.ClientRectangle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.DetachEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Document\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.DomElement\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.DoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_DoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_DoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Drag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_Drag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_Drag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.DragEnd\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_DragEnd\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_DragEnd\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Enabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Equals\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.FirstChild\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Focus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Focusing\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_Focusing\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_Focusing\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.GetAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.GetElementsByTagName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Id\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.InnerHtml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.InnerText\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.InsertAdjacentElement\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.InvokeMember\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.KeyPress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_KeyPress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_KeyPress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.LosingFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_LosingFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_LosingFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.MouseOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_MouseOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_MouseOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.add_MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.remove_MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Name\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.NextSibling\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.OffsetParent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.OffsetRectangle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.OuterHtml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.OuterText\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Parent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.RaiseEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.RemoveFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.ScrollIntoView\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.ScrollLeft\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.ScrollRectangle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.ScrollTop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.SetAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.Style\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.TabIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.HtmlElement.TagName\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9ce586c0-a09b-cb88-b9d6-6b613d97747d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an HTML element inside of a Web page.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.HtmlElement\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.HtmlElement.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.HtmlElement.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.HtmlElement","System.Windows.Forms.HtmlElement.All","System.Windows.Forms.HtmlElement.AppendChild","System.Windows.Forms.HtmlElement.AttachEventHandler","System.Windows.Forms.HtmlElement.CanHaveChildren","System.Windows.Forms.HtmlElement.Children","System.Windows.Forms.HtmlElement.Click","System.Windows.Forms.HtmlElement.add_Click","System.Windows.Forms.HtmlElement.remove_Click","System.Windows.Forms.HtmlElement.ClientRectangle","System.Windows.Forms.HtmlElement.DetachEventHandler","System.Windows.Forms.HtmlElement.Document","System.Windows.Forms.HtmlElement.DomElement","System.Windows.Forms.HtmlElement.DoubleClick","System.Windows.Forms.HtmlElement.add_DoubleClick","System.Windows.Forms.HtmlElement.remove_DoubleClick","System.Windows.Forms.HtmlElement.Drag","System.Windows.Forms.HtmlElement.add_Drag","System.Windows.Forms.HtmlElement.remove_Drag","System.Windows.Forms.HtmlElement.DragEnd","System.Windows.Forms.HtmlElement.add_DragEnd","System.Windows.Forms.HtmlElement.remove_DragEnd","System.Windows.Forms.HtmlElement.DragLeave","System.Windows.Forms.HtmlElement.add_DragLeave","System.Windows.Forms.HtmlElement.remove_DragLeave","System.Windows.Forms.HtmlElement.DragOver","System.Windows.Forms.HtmlElement.add_DragOver","System.Windows.Forms.HtmlElement.remove_DragOver","System.Windows.Forms.HtmlElement.Enabled","System.Windows.Forms.HtmlElement.Equals","System.Windows.Forms.HtmlElement.FirstChild","System.Windows.Forms.HtmlElement.Focus","System.Windows.Forms.HtmlElement.Focusing","System.Windows.Forms.HtmlElement.add_Focusing","System.Windows.Forms.HtmlElement.remove_Focusing","System.Windows.Forms.HtmlElement.GetAttribute","System.Windows.Forms.HtmlElement.GetElementsByTagName","System.Windows.Forms.HtmlElement.GetHashCode","System.Windows.Forms.HtmlElement.GotFocus","System.Windows.Forms.HtmlElement.add_GotFocus","System.Windows.Forms.HtmlElement.remove_GotFocus","System.Windows.Forms.HtmlElement.Id","System.Windows.Forms.HtmlElement.InnerHtml","System.Windows.Forms.HtmlElement.InnerText","System.Windows.Forms.HtmlElement.InsertAdjacentElement","System.Windows.Forms.HtmlElement.InvokeMember","System.Windows.Forms.HtmlElement.KeyDown","System.Windows.Forms.HtmlElement.add_KeyDown","System.Windows.Forms.HtmlElement.remove_KeyDown","System.Windows.Forms.HtmlElement.KeyPress","System.Windows.Forms.HtmlElement.add_KeyPress","System.Windows.Forms.HtmlElement.remove_KeyPress","System.Windows.Forms.HtmlElement.KeyUp","System.Windows.Forms.HtmlElement.add_KeyUp","System.Windows.Forms.HtmlElement.remove_KeyUp","System.Windows.Forms.HtmlElement.LosingFocus","System.Windows.Forms.HtmlElement.add_LosingFocus","System.Windows.Forms.HtmlElement.remove_LosingFocus","System.Windows.Forms.HtmlElement.LostFocus","System.Windows.Forms.HtmlElement.add_LostFocus","System.Windows.Forms.HtmlElement.remove_LostFocus","System.Windows.Forms.HtmlElement.MouseDown","System.Windows.Forms.HtmlElement.add_MouseDown","System.Windows.Forms.HtmlElement.remove_MouseDown","System.Windows.Forms.HtmlElement.MouseEnter","System.Windows.Forms.HtmlElement.add_MouseEnter","System.Windows.Forms.HtmlElement.remove_MouseEnter","System.Windows.Forms.HtmlElement.MouseLeave","System.Windows.Forms.HtmlElement.add_MouseLeave","System.Windows.Forms.HtmlElement.remove_MouseLeave","System.Windows.Forms.HtmlElement.MouseMove","System.Windows.Forms.HtmlElement.add_MouseMove","System.Windows.Forms.HtmlElement.remove_MouseMove","System.Windows.Forms.HtmlElement.MouseOver","System.Windows.Forms.HtmlElement.add_MouseOver","System.Windows.Forms.HtmlElement.remove_MouseOver","System.Windows.Forms.HtmlElement.MouseUp","System.Windows.Forms.HtmlElement.add_MouseUp","System.Windows.Forms.HtmlElement.remove_MouseUp","System.Windows.Forms.HtmlElement.Name","System.Windows.Forms.HtmlElement.NextSibling","System.Windows.Forms.HtmlElement.OffsetParent","System.Windows.Forms.HtmlElement.OffsetRectangle","System.Windows.Forms.HtmlElement.op_Equality","System.Windows.Forms.HtmlElement.op_op_Equality","System.Windows.Forms.HtmlElement.op_Inequality","System.Windows.Forms.HtmlElement.op_op_Inequality","System.Windows.Forms.HtmlElement.OuterHtml","System.Windows.Forms.HtmlElement.OuterText","System.Windows.Forms.HtmlElement.Parent","System.Windows.Forms.HtmlElement.RaiseEvent","System.Windows.Forms.HtmlElement.RemoveFocus","System.Windows.Forms.HtmlElement.ScrollIntoView","System.Windows.Forms.HtmlElement.ScrollLeft","System.Windows.Forms.HtmlElement.ScrollRectangle","System.Windows.Forms.HtmlElement.ScrollTop","System.Windows.Forms.HtmlElement.SetAttribute","System.Windows.Forms.HtmlElement.Style","System.Windows.Forms.HtmlElement.TabIndex","System.Windows.Forms.HtmlElement.TagName"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.HtmlElement","System::Windows::Forms::HtmlElement","System.Windows.Forms.HtmlElement.All","System::Windows::Forms::HtmlElement::All","System.Windows.Forms.HtmlElement.AppendChild","System::Windows::Forms::HtmlElement::AppendChild","System.Windows.Forms.HtmlElement.AttachEventHandler","System::Windows::Forms::HtmlElement::AttachEventHandler","System.Windows.Forms.HtmlElement.CanHaveChildren","System::Windows::Forms::HtmlElement::CanHaveChildren","System.Windows.Forms.HtmlElement.Children","System::Windows::Forms::HtmlElement::Children","System.Windows.Forms.HtmlElement.Click","System::Windows::Forms::HtmlElement::Click","System.Windows.Forms.HtmlElement.ClientRectangle","System::Windows::Forms::HtmlElement::ClientRectangle","System.Windows.Forms.HtmlElement.DetachEventHandler","System::Windows::Forms::HtmlElement::DetachEventHandler","System.Windows.Forms.HtmlElement.Document","System::Windows::Forms::HtmlElement::Document","System.Windows.Forms.HtmlElement.DomElement","System::Windows::Forms::HtmlElement::DomElement","System.Windows.Forms.HtmlElement.DoubleClick","System::Windows::Forms::HtmlElement::DoubleClick","System.Windows.Forms.HtmlElement.Drag","System::Windows::Forms::HtmlElement::Drag","System.Windows.Forms.HtmlElement.DragEnd","System::Windows::Forms::HtmlElement::DragEnd","System.Windows.Forms.HtmlElement.DragLeave","System::Windows::Forms::HtmlElement::DragLeave","System.Windows.Forms.HtmlElement.DragOver","System::Windows::Forms::HtmlElement::DragOver","System.Windows.Forms.HtmlElement.Enabled","System::Windows::Forms::HtmlElement::Enabled","System.Windows.Forms.HtmlElement.Equals","System::Windows::Forms::HtmlElement::Equals","System.Windows.Forms.HtmlElement.FirstChild","System::Windows::Forms::HtmlElement::FirstChild","System.Windows.Forms.HtmlElement.Focus","System::Windows::Forms::HtmlElement::Focus","System.Windows.Forms.HtmlElement.Focusing","System::Windows::Forms::HtmlElement::Focusing","System.Windows.Forms.HtmlElement.GetAttribute","System::Windows::Forms::HtmlElement::GetAttribute","System.Windows.Forms.HtmlElement.GetElementsByTagName","System::Windows::Forms::HtmlElement::GetElementsByTagName","System.Windows.Forms.HtmlElement.GetHashCode","System::Windows::Forms::HtmlElement::GetHashCode","System.Windows.Forms.HtmlElement.GotFocus","System::Windows::Forms::HtmlElement::GotFocus","System.Windows.Forms.HtmlElement.Id","System::Windows::Forms::HtmlElement::Id","System.Windows.Forms.HtmlElement.InnerHtml","System::Windows::Forms::HtmlElement::InnerHtml","System.Windows.Forms.HtmlElement.InnerText","System::Windows::Forms::HtmlElement::InnerText","System.Windows.Forms.HtmlElement.InsertAdjacentElement","System::Windows::Forms::HtmlElement::InsertAdjacentElement","System.Windows.Forms.HtmlElement.InvokeMember","System::Windows::Forms::HtmlElement::InvokeMember","System.Windows.Forms.HtmlElement.KeyDown","System::Windows::Forms::HtmlElement::KeyDown","System.Windows.Forms.HtmlElement.KeyPress","System::Windows::Forms::HtmlElement::KeyPress","System.Windows.Forms.HtmlElement.KeyUp","System::Windows::Forms::HtmlElement::KeyUp","System.Windows.Forms.HtmlElement.LosingFocus","System::Windows::Forms::HtmlElement::LosingFocus","System.Windows.Forms.HtmlElement.LostFocus","System::Windows::Forms::HtmlElement::LostFocus","System.Windows.Forms.HtmlElement.MouseDown","System::Windows::Forms::HtmlElement::MouseDown","System.Windows.Forms.HtmlElement.MouseEnter","System::Windows::Forms::HtmlElement::MouseEnter","System.Windows.Forms.HtmlElement.MouseLeave","System::Windows::Forms::HtmlElement::MouseLeave","System.Windows.Forms.HtmlElement.MouseMove","System::Windows::Forms::HtmlElement::MouseMove","System.Windows.Forms.HtmlElement.MouseOver","System::Windows::Forms::HtmlElement::MouseOver","System.Windows.Forms.HtmlElement.MouseUp","System::Windows::Forms::HtmlElement::MouseUp","System.Windows.Forms.HtmlElement.Name","System::Windows::Forms::HtmlElement::Name","System.Windows.Forms.HtmlElement.NextSibling","System::Windows::Forms::HtmlElement::NextSibling","System.Windows.Forms.HtmlElement.OffsetParent","System::Windows::Forms::HtmlElement::OffsetParent","System.Windows.Forms.HtmlElement.OffsetRectangle","System::Windows::Forms::HtmlElement::OffsetRectangle","System.Windows.Forms.HtmlElement.op_Equality","System::Windows::Forms::HtmlElement::op_Equality","System.Windows.Forms.HtmlElement.op_Inequality","System::Windows::Forms::HtmlElement::op_Inequality","System.Windows.Forms.HtmlElement.OuterHtml","System::Windows::Forms::HtmlElement::OuterHtml","System.Windows.Forms.HtmlElement.OuterText","System::Windows::Forms::HtmlElement::OuterText","System.Windows.Forms.HtmlElement.Parent","System::Windows::Forms::HtmlElement::Parent","System.Windows.Forms.HtmlElement.RaiseEvent","System::Windows::Forms::HtmlElement::RaiseEvent","System.Windows.Forms.HtmlElement.RemoveFocus","System::Windows::Forms::HtmlElement::RemoveFocus","System.Windows.Forms.HtmlElement.ScrollIntoView","System::Windows::Forms::HtmlElement::ScrollIntoView","System.Windows.Forms.HtmlElement.ScrollLeft","System::Windows::Forms::HtmlElement::ScrollLeft","System.Windows.Forms.HtmlElement.ScrollRectangle","System::Windows::Forms::HtmlElement::ScrollRectangle","System.Windows.Forms.HtmlElement.ScrollTop","System::Windows::Forms::HtmlElement::ScrollTop","System.Windows.Forms.HtmlElement.SetAttribute","System::Windows::Forms::HtmlElement::SetAttribute","System.Windows.Forms.HtmlElement.Style","System::Windows::Forms::HtmlElement::Style","System.Windows.Forms.HtmlElement.TabIndex","System::Windows::Forms::HtmlElement::TabIndex","System.Windows.Forms.HtmlElement.TagName","System::Windows::Forms::HtmlElement::TagName"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9ce586c0-a09b-cb88-b9d6-6b613d97747d","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/HtmlElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HtmlElement class | Microsoft Docs","_op_ogTitle":"HtmlElement class","description":"Represents an HTML element inside of a Web page.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.HtmlElement","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.htmlelement","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.htmlelement","fileRelativePath":"System.Windows.Forms.HtmlElement.html"},"themesRelativePathToOutputRoot":"_themes/"}