{"content":"    \r\n    <h1 id=\"System_Diagnostics_Contracts_Contract\">\r\n      <span class=\"lang-csharp\">Contract</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Contract</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Contract</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Code contract classes let you specify preconditions, postconditions, and object invariants in your code. Preconditions are requirements that must be met when entering a method or property. Postconditions describe expectations at the time the method or property code exits. Object invariants describe the expected state for a class that has no condition problems. For more information about preconditions, postconditions, and object invariants, see <a href=\"../Topic/Code%20Contracts.md\" data-linktype=\"relative-path\">Code Contracts</a>.  </p>\n<p> For tools and detailed instructions for using code contracts, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=152461\" data-linktype=\"external\">Code Contracts</a> on the MSDN DevLabs Web site.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You must use a binary rewriter to insert run-time enforcement of contracts. Otherwise, contracts such as the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Ensures_\" data-linktype=\"relative-path\">Ensures</a> method can only be tested statically and will not throw exceptions during run time if a contract is violated. You can download the binary rewriter CCRewrite from <a href=\"http://go.microsoft.com/fwlink/?LinkId=152461\" data-linktype=\"external\">Code Contracts</a> on the MSDN DevLabs Web site. CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project <strong>Properties</strong> page. The binary rewriter and the Visual Studio add-in do not ship with <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vs-dev10-long-md.md&quot; -->Visual Studio 2010<!--END INCLUDE --> or the Windows SDK.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Assert_System_Boolean_\" data-linktype=\"self-bookmark\">Assert(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks for a condition; if the condition is <code>false</code>, follows the escalation policy set for the analyzer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Assert_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">Assert(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks for a condition; if the condition is <code>false</code>, follows the escalation policy set by the analyzer and displays the specified message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Assume_System_Boolean_\" data-linktype=\"self-bookmark\">Assume(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Instructs code analysis tools to assume that the specified condition is <code>true</code>, even if it cannot be statically proven to always be <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Assume_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">Assume(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Instructs code analysis tools to assume that a condition is <code>true</code>, even if it cannot be statically proven to always be <code>true</code>, and displays a message if the assumption fails.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_EndContractBlock\" data-linktype=\"self-bookmark\">EndContractBlock()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Marks the end of the contract section when a method&#39;s contracts contain only preconditions in the <code>if</code>-<code>then</code>-<code>throw</code> form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Ensures_System_Boolean_\" data-linktype=\"self-bookmark\">Ensures(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a postcondition contract for the enclosing method or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Ensures_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">Ensures(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <code>false</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_EnsuresOnThrow__1_System_Boolean_\" data-linktype=\"self-bookmark\">EnsuresOnThrow&lt;TException&gt;(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_EnsuresOnThrow__1_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">EnsuresOnThrow&lt;TException&gt;(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a postcondition contract and a message to display if the condition is <code>false</code> for the enclosing method or property, based on the provided exception and condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Exists_System_Int32_System_Int32_System_Predicate_System_Int32__\" data-linktype=\"self-bookmark\">Exists(Int32,Int32,Predicate&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a specified test is true for any integer within a range of integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Exists__1_System_Collections_Generic_IEnumerable___0__System_Predicate___0__\" data-linktype=\"self-bookmark\">Exists&lt;T&gt;(IEnumerable&lt;T&gt;,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an element within a collection of elements exists within a function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_ForAll_System_Int32_System_Int32_System_Predicate_System_Int32__\" data-linktype=\"self-bookmark\">ForAll(Int32,Int32,Predicate&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a particular condition is valid for all integers in a specified range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_ForAll__1_System_Collections_Generic_IEnumerable___0__System_Predicate___0__\" data-linktype=\"self-bookmark\">ForAll&lt;T&gt;(IEnumerable&lt;T&gt;,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether all the elements in a collection exist within a function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Invariant_System_Boolean_\" data-linktype=\"self-bookmark\">Invariant(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies an invariant contract for the enclosing method or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Invariant_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">Invariant(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_OldValue__1___0_\" data-linktype=\"self-bookmark\">OldValue&lt;T&gt;(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents values as they were at the start of a method or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Requires_System_Boolean_\" data-linktype=\"self-bookmark\">Requires(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a precondition contract for the enclosing method or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Requires_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">Requires(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Requires__1_System_Boolean_\" data-linktype=\"self-bookmark\">Requires&lt;TException&gt;(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Requires__1_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">Requires&lt;TException&gt;(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_Result__1\" data-linktype=\"self-bookmark\">Result&lt;T&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the return value of a method or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_ValueAtReturn__1___0__\" data-linktype=\"self-bookmark\">ValueAtReturn&lt;T&gt;(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the final (output) value of an <code>out</code> parameter when returning from a method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Contracts_Contract_ContractFailed\" data-linktype=\"self-bookmark\">ContractFailed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a contract fails.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Assert_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Assert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assert(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Checks for a condition; if the condition is <code>false</code>, follows the escalation policy set for the analyzer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Assert (bool condition);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default escalation policy is to notify the attached debugger about a contract failure or to display an <strong>Assert</strong> dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Assert_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Assert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assert(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks for a condition; if the condition is <code>false</code>, follows the escalation policy set by the analyzer and displays the specified message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Assert (bool condition, string userMessage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to display if the condition is not met.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default escalation policy is to notify the attached debugger about a contract failure or to display an <strong>Assert</strong> dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception. The <code>userMessage</code> parameter is passed to the debugger output. If <code>userMessage</code> is not a constant string literal, tools may not be able to read it.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Assume_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Assume_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assume(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Instructs code analysis tools to assume that the specified condition is <code>true</code>, even if it cannot be statically proven to always be <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Assume (bool condition);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to assume <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>At run time, using this method is equivalent to using the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Assert_System_Boolean_\" data-linktype=\"relative-path\">Assert(Boolean)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Assume_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Assume_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assume(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Instructs code analysis tools to assume that a condition is <code>true</code>, even if it cannot be statically proven to always be <code>true</code>, and displays a message if the assumption fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Assume (bool condition, string userMessage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to assume <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to post if the assumption fails.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>userMessage</code> is not a constant string literal, the contract may not be understood by tools.  </p>\n<p> At run time, using this method is equivalent to using the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Assert_System_Boolean_System_String_\" data-linktype=\"relative-path\">Assert(Boolean,String)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_EndContractBlock\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_EndContractBlock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndContractBlock()</div>        \r\n          </div>\r\n    \r\n            <p>Marks the end of the contract section when a method&#39;s contracts contain only preconditions in the <code>if</code>-<code>then</code>-<code>throw</code> form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void EndContractBlock ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Most code already contains some parameter validation in the form of <code>if</code>-<code>then</code>-<code>throw</code> code. The contract tools recognize <code>if</code>-<code>then</code>-<code>throw</code> statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <a class=\"xref\" href=\"system.diagnostics.contracts.contract\" data-linktype=\"relative-path\">Contract</a> method call, such as a <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Requires_\" data-linktype=\"relative-path\">Requires</a>, <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Ensures_\" data-linktype=\"relative-path\">Ensures</a>, &lt;xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A&gt;, or EndContractBlock.  </p>\n<p> When <code>if</code>-<code>then</code>-<code>throw</code> statements appear in this form, the contract tools recognize them as legacy-require statements. The EndContractBlock form is used only if no other contracts follow the <code>if</code>-<code>then</code>-<code>throw</code> sequences, but they should still be tagged as legacy-requires.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Ensures_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Ensures_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ensures(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a postcondition contract for the enclosing method or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Ensures (bool condition);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test. The expression may include <span class=\"xref\">stem.Diagnostics.Contracts.Contract.OldValue*</span>, <span class=\"xref\">stem.Diagnostics.Contracts.Contract.ValueAtReturn*</span>, and <span class=\"xref\">stem.Diagnostics.Contracts.Contract.Result*</span> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>condition</code> parameter specifies a postcondition that is expected to be <code>true</code> when the enclosing method or property returns normally.  </p>\n<ul>\n<li><p>This method call must be at the beginning of a method or property, before any other code.  </p>\n</li>\n<li><p>You must use the binary rewriter (available at <a href=\"http://go.microsoft.com/fwlink/?LinkId=152461\" data-linktype=\"external\">Code Contracts</a> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Ensures method to ensure that an expected value is returned. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.contracts.contractclassattribute\" data-linktype=\"relative-path\">ContractClassAttribute</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"ContractExample#3\">    Function Add(ByVal value As Object) As Integer Implements IArray.Add\n        &#39; Returns the index in which an item was inserted.\n        Contract.Ensures(Contract.Result(Of Integer)() &gt;= -1) &#39;\n        Contract.Ensures(Contract.Result(Of Integer)() &lt; CType(Me, IArray).Count) &#39;\n        Return 0\n        \n    End Function &#39;IArray.Add\n</code></pre><pre><code class=\"lang-cs\" name=\"ContractExample#3\">    int IArray.Add(Object value)\n    {\n        // Returns the index in which an item was inserted.\n        Contract.Ensures(Contract.Result&lt;int&gt;() &gt;= -1);\n        Contract.Ensures(Contract.Result&lt;int&gt;() &lt; ((IArray)this).Count);\n        return default(int);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Ensures_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Ensures_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ensures(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <code>false</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Ensures (bool condition, string userMessage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test. The expression may include <span class=\"xref\">stem.Diagnostics.Contracts.Contract.OldValue*</span> and <span class=\"xref\">stem.Diagnostics.Contracts.Contract.Result*</span> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to display if the expression is not <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>condition</code> parameter specifies a postcondition that is expected to be <code>true</code> when the enclosing method or property returns normally.  </p>\n<ul>\n<li><p>This method call must be at the beginning of a method or property, before any other code.  </p>\n</li>\n<li><p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  </p>\n</li>\n<li><p>You must use the binary rewriter (available at <a href=\"http://go.microsoft.com/fwlink/?LinkId=152461\" data-linktype=\"external\">Code Contracts</a> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.  </p>\n</li>\n<li><p>If <code>userMessage</code> is not a constant string literal, the contract may not be understood by tools.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_EnsuresOnThrow__1_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_EnsuresOnThrow_TException__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnsuresOnThrow&lt;TException&gt;(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void EnsuresOnThrow&lt;TException&gt; (bool condition) where TException : Exception;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>condition</code> parameter specifies a postcondition that is expected to be <code>true</code> when the enclosing method or property terminates abnormally and an exception of type <code>TException</code> is thrown.  </p>\n<ul>\n<li><p>This method call must be at the beginning of a method or property, before any other code.  </p>\n</li>\n<li><p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  </p>\n</li>\n<li><p>You must use the binary rewriter for run-time enforcement of this postcondition.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_EnsuresOnThrow__1_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_EnsuresOnThrow_TException__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnsuresOnThrow&lt;TException&gt;(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a postcondition contract and a message to display if the condition is <code>false</code> for the enclosing method or property, based on the provided exception and condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void EnsuresOnThrow&lt;TException&gt; (bool condition, string userMessage) where TException : Exception;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to display if the expression is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>condition</code> parameter specifies a postcondition that is expected to be <code>true</code> when the enclosing method or property terminates abnormally and an exception of type <code>TException</code> is thrown. The <code>message</code> parameter specifies a message to display if the condition is <code>false</code>.  </p>\n<ul>\n<li><p>This method call must be at the beginning of a method or property, before any other code.  </p>\n</li>\n<li><p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  </p>\n</li>\n<li><p>You must use the binary rewriter for run-time enforcement of this postcondition.  </p>\n</li>\n<li><p>If <code>userMessage</code> is not a constant string literal, the contract may not be understood by tools.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Exists_System_Int32_System_Int32_System_Predicate_System_Int32__\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Exists_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists(Int32,Int32,Predicate&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a specified test is true for any integer within a range of integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Exists (int fromInclusive, int toExclusive, Predicate&lt;int&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first integer to pass to <code>predicate</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One more than the last integer to pass to <code>predicate</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function to evaluate for any value of the integer in the specified range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>predicate</code> returns <code>true</code> for any integer starting from <code>fromInclusive</code> to <code>toExclusive</code> - 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>toExclusive </code>is less than <code>fromInclusive</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>toExclusive</code> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Exists__1_System_Collections_Generic_IEnumerable___0__System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Exists_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists&lt;T&gt;(IEnumerable&lt;T&gt;,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an element within a collection of elements exists within a function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Exists&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; collection, Predicate&lt;T&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection from which elements of type <code>T</code> will be drawn to pass to <code>predicate</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function to evaluate for an element in <code>collection</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if and only if <code>predicate</code> returns <code>true</code> for any element of type <code>T</code> in <code>collection</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>collection</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_ForAll_System_Int32_System_Int32_System_Predicate_System_Int32__\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_ForAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForAll(Int32,Int32,Predicate&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a particular condition is valid for all integers in a specified range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ForAll (int fromInclusive, int toExclusive, Predicate&lt;int&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first integer to pass to <code>predicate</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One more than the last integer to pass to <code>predicate</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function to evaluate for the existence of the integers in the specified range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>predicate</code> returns <code>true</code> for all integers starting from <code>fromInclusive</code> to <code>toExclusive</code> - 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>toExclusive </code>is less than <code>fromInclusive</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>toExclusive</code> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ForAll method to determine whether an array has a null element.  </p>\n<pre><code class=\"lang-vb\" name=\"Contract.ForAllExample#1\">Imports System\nImports System.Diagnostics.Contracts\nImports System.Collections.Generic\n\n\nClass Program\n\n    &#39; Start application with at least two arguments.\n    Shared Sub Main(ByVal args() As String)\n        args(1) = Nothing\n        Contract.Requires(Not (args Is Nothing) AndAlso Contract.ForAll(args, Function(s) s Is Nothing))\n        &#39; test the ForAll method.  This is only for purpose of demonstrating how ForAll works.\n        CheckIndexes(args)\n        Dim numbers As New Stack(Of String)\n        numbers.Push(&quot;one&quot;)\n        numbers.Push(&quot;two&quot;)\n        numbers.Push(&quot;three&quot;)\n        numbers.Push(&quot;four&quot;)\n        numbers.Push(&quot;five&quot;)\n\n        Contract.Requires(Not (numbers Is Nothing) AndAlso Not Contract.ForAll(numbers, Function(s) s Is Nothing))\n        &#39; test the ForAll generic overload. This is only for purpose of demonstrating how ForAll works.\n        CheckTypeArray(numbers)\n\n    End Sub &#39;Main\n\n\n    Private Shared Function CheckIndexes(ByVal args() As String) As Boolean\n        Try\n            If Not (args Is Nothing) AndAlso Not Contract.ForAll(0, args.Length, Function(i) args(i) Is Nothing) Then\n                Throw New ArgumentException(&quot;The parameter array has a null element&quot;, &quot;args&quot;)\n            End If\n            Return True\n        Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n            Return False\n        End Try\n\n    End Function &#39;CheckIndexes\n\n    Private Shared Function CheckTypeArray(ByVal xs As Stack(Of String)) As Boolean\n\n        Try\n            If Not (xs Is Nothing) AndAlso Not Contract.ForAll(xs, Function(s) s Is Nothing) Then\n\n                Throw New ArgumentException(&quot;The parameter array has a null element&quot;, &quot;Stack&quot;)\n            End If\n            Return True\n\n        Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n            Return False\n        End Try\n\n    End Function &#39;CheckTypeArray\nEnd Class &#39;Program\n</code></pre><pre><code class=\"lang-cs\" name=\"Contract.ForAllExample#1\">using System;\nusing System.Diagnostics.Contracts;\nusing System.Collections.Generic;\nnamespace AssumeEx\n{\n    class Program\n    {\n        // Start application with at least two arguments\n        static void Main(string[] args)\n        {\n            args[1] = null;\n            Contract.Requires(args != null &amp;&amp; Contract.ForAll(0, args.Length, i =&gt; args[i] != null));\n            // test the ForAll method.  This is only for purpose of demonstrating how ForAll works.\n            CheckIndexes(args);\n            Stack&lt;string&gt; numbers = new Stack&lt;string&gt;();\n            numbers.Push(&quot;one&quot;);\n            numbers.Push(&quot;two&quot;);\n            numbers.Push(null);\n            numbers.Push(&quot;four&quot;);\n            numbers.Push(&quot;five&quot;);\n            Contract.Requires(numbers != null &amp;&amp; !Contract.ForAll(numbers, (String x) =&gt; x != null));\n            // test the ForAll generic overload.  This is only for purpose of demonstrating how ForAll works.\n            CheckTypeArray(numbers);\n        }\n\n        private static bool CheckIndexes(string[] args)\n        {\n            try\n            {\n                if (args != null &amp;&amp; !Contract.ForAll(0, args.Length, i =&gt; args[i] != null))\n                    throw new ArgumentException(&quot;The parameter array has a null element&quot;, &quot;args&quot;);\n                return true;\n            }\n            catch (ArgumentException e)\n            {\n                Console.WriteLine(e.Message);\n                return false;\n            }\n        }\n        private static bool CheckTypeArray(IEnumerable&lt;String&gt; xs)\n        {\n            try\n            {\n                if (xs != null &amp;&amp; !Contract.ForAll(xs, (String x) =&gt; x != null))\n                    throw new ArgumentException(&quot;The parameter array has a null element&quot;, &quot;indexes&quot;);\n                return true;\n            }\n            catch (ArgumentException e)\n            {\n                Console.WriteLine(e.Message);\n                return false;\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_ForAll__1_System_Collections_Generic_IEnumerable___0__System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_ForAll_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForAll&lt;T&gt;(IEnumerable&lt;T&gt;,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether all the elements in a collection exist within a function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ForAll&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; collection, Predicate&lt;T&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection from which elements of type <code>T</code> will be drawn to pass to <code>predicate</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function to evaluate for the existence of all the elements in <code>collection</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if and only if <code>predicate</code> returns <code>true</code> for all elements of type <code>T</code> in <code>collection</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>collection</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ForAll(T) method to determine whether a collection has a null element.  </p>\n<pre><code class=\"lang-vb\" name=\"Contract.ForAllExample#1\">Imports System\nImports System.Diagnostics.Contracts\nImports System.Collections.Generic\n\n\nClass Program\n\n    &#39; Start application with at least two arguments.\n    Shared Sub Main(ByVal args() As String)\n        args(1) = Nothing\n        Contract.Requires(Not (args Is Nothing) AndAlso Contract.ForAll(args, Function(s) s Is Nothing))\n        &#39; test the ForAll method.  This is only for purpose of demonstrating how ForAll works.\n        CheckIndexes(args)\n        Dim numbers As New Stack(Of String)\n        numbers.Push(&quot;one&quot;)\n        numbers.Push(&quot;two&quot;)\n        numbers.Push(&quot;three&quot;)\n        numbers.Push(&quot;four&quot;)\n        numbers.Push(&quot;five&quot;)\n\n        Contract.Requires(Not (numbers Is Nothing) AndAlso Not Contract.ForAll(numbers, Function(s) s Is Nothing))\n        &#39; test the ForAll generic overload. This is only for purpose of demonstrating how ForAll works.\n        CheckTypeArray(numbers)\n\n    End Sub &#39;Main\n\n\n    Private Shared Function CheckIndexes(ByVal args() As String) As Boolean\n        Try\n            If Not (args Is Nothing) AndAlso Not Contract.ForAll(0, args.Length, Function(i) args(i) Is Nothing) Then\n                Throw New ArgumentException(&quot;The parameter array has a null element&quot;, &quot;args&quot;)\n            End If\n            Return True\n        Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n            Return False\n        End Try\n\n    End Function &#39;CheckIndexes\n\n    Private Shared Function CheckTypeArray(ByVal xs As Stack(Of String)) As Boolean\n\n        Try\n            If Not (xs Is Nothing) AndAlso Not Contract.ForAll(xs, Function(s) s Is Nothing) Then\n\n                Throw New ArgumentException(&quot;The parameter array has a null element&quot;, &quot;Stack&quot;)\n            End If\n            Return True\n\n        Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n            Return False\n        End Try\n\n    End Function &#39;CheckTypeArray\nEnd Class &#39;Program\n</code></pre><pre><code class=\"lang-cs\" name=\"Contract.ForAllExample#1\">using System;\nusing System.Diagnostics.Contracts;\nusing System.Collections.Generic;\nnamespace AssumeEx\n{\n    class Program\n    {\n        // Start application with at least two arguments\n        static void Main(string[] args)\n        {\n            args[1] = null;\n            Contract.Requires(args != null &amp;&amp; Contract.ForAll(0, args.Length, i =&gt; args[i] != null));\n            // test the ForAll method.  This is only for purpose of demonstrating how ForAll works.\n            CheckIndexes(args);\n            Stack&lt;string&gt; numbers = new Stack&lt;string&gt;();\n            numbers.Push(&quot;one&quot;);\n            numbers.Push(&quot;two&quot;);\n            numbers.Push(null);\n            numbers.Push(&quot;four&quot;);\n            numbers.Push(&quot;five&quot;);\n            Contract.Requires(numbers != null &amp;&amp; !Contract.ForAll(numbers, (String x) =&gt; x != null));\n            // test the ForAll generic overload.  This is only for purpose of demonstrating how ForAll works.\n            CheckTypeArray(numbers);\n        }\n\n        private static bool CheckIndexes(string[] args)\n        {\n            try\n            {\n                if (args != null &amp;&amp; !Contract.ForAll(0, args.Length, i =&gt; args[i] != null))\n                    throw new ArgumentException(&quot;The parameter array has a null element&quot;, &quot;args&quot;);\n                return true;\n            }\n            catch (ArgumentException e)\n            {\n                Console.WriteLine(e.Message);\n                return false;\n            }\n        }\n        private static bool CheckTypeArray(IEnumerable&lt;String&gt; xs)\n        {\n            try\n            {\n                if (xs != null &amp;&amp; !Contract.ForAll(xs, (String x) =&gt; x != null))\n                    throw new ArgumentException(&quot;The parameter array has a null element&quot;, &quot;indexes&quot;);\n                return true;\n            }\n            catch (ArgumentException e)\n            {\n                Console.WriteLine(e.Message);\n                return false;\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Invariant_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Invariant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invariant(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies an invariant contract for the enclosing method or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Invariant (bool condition);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Invariant contracts are contained within a method that is identified by the <a class=\"xref\" href=\"system.diagnostics.contracts.contractinvariantmethodattribute\" data-linktype=\"relative-path\">ContractInvariantMethodAttribute</a> attribute; typically, the method is named <code>ObjectInvariant</code>.  </p>\n<ul>\n<li><p>This contract can be specified only in a dedicated invariant method that is declared on a class. If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.  </p>\n</li>\n<li><p>This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.  </p>\n</li>\n<li><p>You must use the binary rewriter for run-time enforcement of this invariant.  </p>\n</li>\n<li><p>Invariants are conditionally defined based on the presence of the <code>CONTRACTS FULL</code> symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Invariant_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Invariant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invariant(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Invariant (bool condition, string userMessage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to display if the condition is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Invariant contracts are contained within a method that is identified by the <a class=\"xref\" href=\"system.diagnostics.contracts.contractinvariantmethodattribute\" data-linktype=\"relative-path\">ContractInvariantMethodAttribute</a> attribute; typically, the method is named <code>ObjectInvariant</code>.  </p>\n<ul>\n<li><p>This contract can be specified only in a dedicated invariant method that is declared on a class.  </p>\n</li>\n<li><p>This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.  </p>\n</li>\n<li><p>You must use the binary rewriter for run-time enforcement of this invariant.  </p>\n</li>\n<li><p>Invariants are conditionally defined on the <code>CONTRACTS FULL</code> symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_OldValue__1___0_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_OldValue_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OldValue&lt;T&gt;(T)</div>        \r\n          </div>\r\n    \r\n            <p>Represents values as they were at the start of a method or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T OldValue&lt;T&gt; (T value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to represent (field or parameter).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The value of the parameter or field at the start of a method or property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used only in the conditional expression for the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Ensures_\" data-linktype=\"relative-path\">Ensures</a> contract.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of the OldValue(T) method to ensure that a count has been updated. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.contracts.contractclassattribute\" data-linktype=\"relative-path\">ContractClassAttribute</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"ContractExample#5\">    Sub Insert(ByVal index As Integer, ByVal value As [Object]) Implements IArray.Insert\n        Contract.Requires(index &gt;= 0)\n        Contract.Requires(index &lt;= CType(Me, IArray).Count) &#39; For inserting immediately after the end.\n        Contract.Ensures(CType(Me, IArray).Count = Contract.OldValue(CType(Me, IArray).Count) + 1)\n\n    End Sub &#39;IArray.Insert\n</code></pre><pre><code class=\"lang-cs\" name=\"ContractExample#5\">    void IArray.Insert(int index, Object value)\n    {\n        Contract.Requires(index &gt;= 0);\n        Contract.Requires(index &lt;= ((IArray)this).Count);  // For inserting immediately after the end.\n        Contract.Ensures(((IArray)this).Count == Contract.OldValue(((IArray)this).Count) + 1);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Requires_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Requires_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Requires(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a precondition contract for the enclosing method or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Requires (bool condition);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <ul>\n<li><p>This method call must be at the beginning of a method or property, before any other code.  </p>\n</li>\n<li><p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  </p>\n</li>\n<li><p>Use this method instead of the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Requires__1_System_Boolean_\" data-linktype=\"relative-path\">System.Diagnostics.Contracts.Contract.Requires&lt;TException&gt;(Boolean)</a> method when backward compatibility does not force you to throw a particular exception.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Requires_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Requires_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Requires(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Requires (bool condition, string userMessage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to display if the condition is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <ul>\n<li><p>This method call must be at the beginning of a method or property, before any other code.  </p>\n</li>\n<li><p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  </p>\n</li>\n<li><p>Use this method instead of the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Requires__1_System_Boolean_System_String_\" data-linktype=\"relative-path\">System.Diagnostics.Contracts.Contract.Requires&lt;TException&gt;(Boolean,String)</a> method when backward compatibility does not force you to throw a particular exception.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Requires__1_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Requires_TException__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Requires&lt;TException&gt;(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Requires&lt;TException&gt; (bool condition) where TException : Exception;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> You must turn on run-time checking to use the Requires(TException) method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=152461\" data-linktype=\"external\">Code Contracts</a> on the MSDN DevLabs Web site.  </p>\n</div>\n<ul>\n<li><p>This method call must be at the beginning of a method or property, before any other code.  </p>\n</li>\n<li><p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  </p>\n</li>\n<li><p>Use this method instead of the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Requires_System_Boolean_\" data-linktype=\"relative-path\">System.Diagnostics.Contracts.Contract.Requires(Boolean)</a> method when you want to throw an exception if the precondition fails.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Requires__1_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Requires_TException__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Requires&lt;TException&gt;(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Requires&lt;TException&gt; (bool condition, string userMessage) where TException : Exception;</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to test.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to display if the condition is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <ul>\n<li><div class=\"IMPORTANT\"><h5>Important</h5><p> You must turn on run-time checking to use the Requires(TException) method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=152461\" data-linktype=\"external\">Code Contracts</a> on the MSDN DevLabs Web site.  </p>\n</div>\n<p> This method call must be at the beginning of a method or property, before any other code.  </p>\n</li>\n<li><p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  </p>\n</li>\n<li><p>Use this method instead of the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Requires_System_Boolean_System_String_\" data-linktype=\"relative-path\">System.Diagnostics.Contracts.Contract.Requires(Boolean,String)</a> method when you want to throw an exception if the precondition fails.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_Result__1\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_Result_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Result&lt;T&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Represents the return value of a method or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T Result&lt;T&gt; ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>Return value of the enclosing method or property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used only in the conditional expression for the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Ensures_\" data-linktype=\"relative-path\">Ensures</a> contract.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Result(T) method to specify an expected return value. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.contracts.contractclassattribute\" data-linktype=\"relative-path\">ContractClassAttribute</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"ContractExample#3\">    Function Add(ByVal value As Object) As Integer Implements IArray.Add\n        &#39; Returns the index in which an item was inserted.\n        Contract.Ensures(Contract.Result(Of Integer)() &gt;= -1) &#39;\n        Contract.Ensures(Contract.Result(Of Integer)() &lt; CType(Me, IArray).Count) &#39;\n        Return 0\n        \n    End Function &#39;IArray.Add\n</code></pre><pre><code class=\"lang-cs\" name=\"ContractExample#3\">    int IArray.Add(Object value)\n    {\n        // Returns the index in which an item was inserted.\n        Contract.Ensures(Contract.Result&lt;int&gt;() &gt;= -1);\n        Contract.Ensures(Contract.Result&lt;int&gt;() &lt; ((IArray)this).Count);\n        return default(int);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_ValueAtReturn__1___0__\">\r\n    \r\n            <a id=\"System_Diagnostics_Contracts_Contract_ValueAtReturn_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValueAtReturn&lt;T&gt;(T)</div>        \r\n          </div>\r\n    \r\n            <p>Represents the final (output) value of an <code>out</code> parameter when returning from a method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T ValueAtReturn&lt;T&gt; (out T value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>out</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The output value of the <code>out</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used only in the conditional expression for the <a class=\"xref\" href=\"system.diagnostics.contracts.contract#System_Diagnostics_Contracts_Contract_Ensures_\" data-linktype=\"relative-path\">Ensures</a> contract. As with the &lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt; method, you can omit the generic type parameter whenever the compiler is able to infer its type. The contract rewriter replaces the method call with the value of the <code>out</code> parameter. The ValueAtReturn(T) method may appear only in postconditions. The argument to the method must be an <code>out</code> parameter or a field of a structure <code>out</code> parameter. The latter is also useful when referring to fields in the postcondition of a structure constructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Contracts_Contract_ContractFailed\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContractFailed</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a contract fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static event EventHandler&lt;System.Diagnostics.Contracts.ContractFailedEventArgs&gt; ContractFailed;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The event information for this event is supplied by the <a class=\"xref\" href=\"system.diagnostics.contracts.contractfailedeventargs\" data-linktype=\"relative-path\">System.Diagnostics.Contracts.ContractFailedEventArgs</a> object that is passed to the event handler. This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed. Before doing so, it will raise an event that an application can handle as it sees fit. For example, if code is being run in a testing framework, you can log a test failure and then end the test.  </p>\n<p> The default implementation of the <a class=\"xref\" href=\"system.diagnostics.contracts.internal.contracthelper#System_Diagnostics_Contracts_Internal_ContractHelper_RaiseContractFailedEvent_\" data-linktype=\"relative-path\">RaiseContractFailedEvent</a> method in the .NET Framework class library is to call each handler that is registered with the ContractFailed event. Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <a class=\"xref\" href=\"system.diagnostics.contracts.contractfailedeventargs#System_Diagnostics_Contracts_ContractFailedEventArgs_SetHandled_\" data-linktype=\"relative-path\">SetHandled</a> method for the event arguments. If any handler sets the failure as handled, the method returns <code>null</code> and no further action is taken. Alternatively, handlers can call the <a class=\"xref\" href=\"system.diagnostics.contracts.contractfailedeventargs#System_Diagnostics_Contracts_ContractFailedEventArgs_SetUnwind_\" data-linktype=\"relative-path\">SetUnwind</a> method to instruct the code to unwind. In that case, an exception is thrown after all handlers have executed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.Contracts.Contract.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.Contracts.Contract.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Assert\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Assume\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.ContractFailed\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.add_ContractFailed\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.remove_ContractFailed\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.EndContractBlock\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Ensures\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.EnsuresOnThrow&lt;TException&gt;\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Exists\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Exists&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.ForAll\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.ForAll&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Invariant\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.OldValue&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Requires\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Requires&lt;TException&gt;\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.Result&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Contracts.Contract.ValueAtReturn&lt;T&gt;\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0628c955-98a0-e92f-bca0-d04f962d8bfd\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics.Contracts\\Contract.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics.Contracts/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.Contracts.Contract\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.Contracts.Contract.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.Contracts.Contract.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.Contracts.Contract","System.Diagnostics.Contracts.Contract.Assert","System.Diagnostics.Contracts.Contract.Assume","System.Diagnostics.Contracts.Contract.ContractFailed","System.Diagnostics.Contracts.Contract.add_ContractFailed","System.Diagnostics.Contracts.Contract.remove_ContractFailed","System.Diagnostics.Contracts.Contract.EndContractBlock","System.Diagnostics.Contracts.Contract.Ensures","System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>","System.Diagnostics.Contracts.Contract.Exists","System.Diagnostics.Contracts.Contract.Exists<T>","System.Diagnostics.Contracts.Contract.ForAll","System.Diagnostics.Contracts.Contract.ForAll<T>","System.Diagnostics.Contracts.Contract.Invariant","System.Diagnostics.Contracts.Contract.OldValue<T>","System.Diagnostics.Contracts.Contract.Requires","System.Diagnostics.Contracts.Contract.Requires<TException>","System.Diagnostics.Contracts.Contract.Result<T>","System.Diagnostics.Contracts.Contract.ValueAtReturn<T>"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.Contracts.Contract","System::Diagnostics::Contracts::Contract","System.Diagnostics.Contracts.Contract.Assert","System::Diagnostics::Contracts::Contract::Assert","System.Diagnostics.Contracts.Contract.Assume","System::Diagnostics::Contracts::Contract::Assume","System.Diagnostics.Contracts.Contract.ContractFailed","System::Diagnostics::Contracts::Contract::ContractFailed","System.Diagnostics.Contracts.Contract.EndContractBlock","System::Diagnostics::Contracts::Contract::EndContractBlock","System.Diagnostics.Contracts.Contract.Ensures","System::Diagnostics::Contracts::Contract::Ensures","System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1","System::Diagnostics::Contracts::Contract::EnsuresOnThrow``1","System.Diagnostics.Contracts.Contract.Exists","System::Diagnostics::Contracts::Contract::Exists","System.Diagnostics.Contracts.Contract.Exists``1","System::Diagnostics::Contracts::Contract::Exists``1","System.Diagnostics.Contracts.Contract.ForAll","System::Diagnostics::Contracts::Contract::ForAll","System.Diagnostics.Contracts.Contract.ForAll``1","System::Diagnostics::Contracts::Contract::ForAll``1","System.Diagnostics.Contracts.Contract.Invariant","System::Diagnostics::Contracts::Contract::Invariant","System.Diagnostics.Contracts.Contract.OldValue``1","System::Diagnostics::Contracts::Contract::OldValue``1","System.Diagnostics.Contracts.Contract.Requires","System::Diagnostics::Contracts::Contract::Requires","System.Diagnostics.Contracts.Contract.Requires``1","System::Diagnostics::Contracts::Contract::Requires``1","System.Diagnostics.Contracts.Contract.Result``1","System::Diagnostics::Contracts::Contract::Result``1","System.Diagnostics.Contracts.Contract.ValueAtReturn``1","System::Diagnostics::Contracts::Contract::ValueAtReturn``1"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0628c955-98a0-e92f-bca0-d04f962d8bfd","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics.Contracts\\Contract.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics.Contracts/Contract.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Contract class | Microsoft Docs","_op_ogTitle":"Contract class","description":"Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.\n","toc_asset_id":"_splitted/System.Diagnostics.Contracts/toc.json","toc_rel":"_splitted/System.Diagnostics.Contracts/toc.json","source_url":"","ms.assetid":"System.Diagnostics.Contracts.Contract","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.contracts.contract","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.contracts.contract","fileRelativePath":"System.Diagnostics.Contracts.Contract.html"},"themesRelativePathToOutputRoot":"_themes/"}