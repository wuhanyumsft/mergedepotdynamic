{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_AsymmetricAlgorithm\">\r\n      <span class=\"lang-csharp\">AsymmetricAlgorithm</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class AsymmetricAlgorithm : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AsymmetricAlgorithm</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Asymmetric cryptographic algorithms, also known as public-key algorithms, require that both sender and receiver maintain a pair of related keys: a private key and a public key. Both keys are unique to the entity. The public key can be made available to anyone; this key is used for encoding data that is sent to a receiver. The private key must be kept private by the receiver; this key is used for decoding messages encoded using the receiver&#39;s public key. The <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class is an implementation of a public-key algorithm. For an in-depth discussion of public-key encryption and algorithms, see the &quot;Public-Key Encryption&quot; section in <a href=\"../Topic/Cryptographic%20Services.md\" data-linktype=\"relative-path\">Cryptographic Services</a>. For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see <a href=\"../Topic/How%20to:%20Create%20a%20Public-Private%20Key%20Pair.md\" data-linktype=\"relative-path\">How to: Create a Public-Private Key Pair</a>.  </p>\n<p> You can use public-key systems to form digital signatures. Digital signatures are used to help to protect the integrity of data. For example, to use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender&#39;s private key to create the sender&#39;s personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender&#39;s public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that anyone can verify a signature, because the sender&#39;s public key is common knowledge. This technique does not retain the secrecy of the message; for the message to be secret, it must also be encrypted.  </p>\n<p> The .NET Framework provides the following classes that implement digital signature algorithms: <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a>, <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a>, <a class=\"xref\" href=\"system.security.cryptography.ecdsa\" data-linktype=\"relative-path\">ECDsa</a> (base class), and <a class=\"xref\" href=\"system.security.cryptography.ecdsacng\" data-linktype=\"relative-path\">ECDsaCng</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography\" data-linktype=\"relative-path\">System.Security.Cryptography</a> namespace provides concrete classes for <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> and <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> only.  </p>\n<p> To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:  </p>\n<ul>\n<li><p><a href=\"../Topic/How%20to:%20Encrypt%20XML%20Elements%20with%20Asymmetric%20Keys.md\" data-linktype=\"relative-path\">How to: Encrypt XML Elements with Asymmetric Keys</a>  </p>\n</li>\n<li><p><a href=\"../Topic/How%20to:%20Decrypt%20XML%20Elements%20with%20Asymmetric%20Keys.md\" data-linktype=\"relative-path\">How to: Decrypt XML Elements with Asymmetric Keys</a>  </p>\n</li>\n<li><p><a href=\"../Topic/How%20to:%20Sign%20XML%20Documents%20with%20Digital%20Signatures.md\" data-linktype=\"relative-path\">How to: Sign XML Documents with Digital Signatures</a>  </p>\n</li>\n<li><p><a href=\"../Topic/How%20to:%20Verify%20the%20Digital%20Signatures%20of%20XML%20Documents.md\" data-linktype=\"relative-path\">How to: Verify the Digital Signatures of XML Documents</a></p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm__ctor\" data-linktype=\"self-bookmark\">AsymmetricAlgorithm()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_KeySizeValue\" data-linktype=\"self-bookmark\">KeySizeValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizesValue\" data-linktype=\"self-bookmark\">LegalKeySizesValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the key sizes that are supported by the asymmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_KeyExchangeAlgorithm\" data-linktype=\"self-bookmark\">KeyExchangeAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the name of the key exchange algorithm. Otherwise, throws an <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_KeySize\" data-linktype=\"self-bookmark\">KeySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes\" data-linktype=\"self-bookmark\">LegalKeySizes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the key sizes that are supported by the asymmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_SignatureAlgorithm\" data-linktype=\"self-bookmark\">SignatureAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented in a derived class, gets the name of the signature algorithm. Otherwise, always throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_Create\" data-linktype=\"self-bookmark\">Create()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a default cryptographic object used to perform the asymmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_Create_System_String_\" data-linktype=\"self-bookmark\">Create(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of the specified implementation of an asymmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_FromXmlString_System_String_\" data-linktype=\"self-bookmark\">FromXmlString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, reconstructs an <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object from an XML string. Otherwise, throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_AsymmetricAlgorithm_ToXmlString_System_Boolean_\" data-linktype=\"self-bookmark\">ToXmlString(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates and returns an XML string representation of the current <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object. Otherwise, throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsymmetricAlgorithm()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected AsymmetricAlgorithm ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The implementation of the derived class is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot create an instance of an abstract class. Application code creates a new instance of a derived class. The <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> and <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a> classes are the only currently supported implementations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_KeySizeValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeySizeValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int KeySizeValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_KeySize_\" data-linktype=\"relative-path\">KeySize</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizesValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LegalKeySizesValue</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the key sizes that are supported by the asymmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asymmetric algorithm supports only key sizes that match an entry in this array.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_KeyExchangeAlgorithm\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_KeyExchangeAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyExchangeAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the name of the key exchange algorithm. Otherwise, throws an <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string KeyExchangeAlgorithm { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the key exchange algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to override the KeyExchangeAlgorithm property to return the name for the key exchange algorithm. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#6\">        public override string KeyExchangeAlgorithm\n        {\n            get {return &quot;RSA-PKCS1-KeyEx&quot;;}\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#6\">        public:\n            property String^ KeyExchangeAlgorithm \n            {\n                virtual String^ get() override\n                {\n                    return &quot;RSA-PKCS1-KeyEx&quot;;\n                }\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#6\">        Public Overrides ReadOnly Property KeyExchangeAlgorithm() As String\n            Get\n                Return &quot;RSA-PKCS1-KeyEx&quot;\n            End Get\n        End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_KeySize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_KeySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int KeySize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The key modulus size is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to override the KeySize property to verify that it falls within the range identified in the local <code>keySizes</code> member variable. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#9\">        public override int KeySize \n        {\n            get { return KeySizeValue; }\n            set\n            {\n                for (int i=0; i &lt; keySizes.Length; i++)\n                {\n                    if (keySizes[i].SkipSize == 0) \n                    {\n                        if (keySizes[i].MinSize == value)\n                        {\n                            KeySizeValue = value;\n                            return;\n                        }\n                    }\n                    else\n                    {\n                        for (int j = keySizes[i].MinSize;\n                            j &lt;= keySizes[i].MaxSize;\n                            j += keySizes[i].SkipSize)\n                        {\n                            if (j == value)\n                            {\n                                KeySizeValue = value;\n                                return;\n                            }\n                        }\n                    }\n                }\n\n                // If the key does not fall within the range identified \n                // in the keySizes member variable, throw an exception.\n                throw new CryptographicException(&quot;Invalid key size.&quot;);\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#9\">        public:\n            property int KeySize\n            {\n                virtual int get() override\n                {\n                    return KeySizeValue;\n                }\n\n                virtual void set(int value) override\n                {\n                    for (int i = 0; i &lt; customValidKeySizes-&gt;Length; i++)\n                    {\n                        if (customValidKeySizes[i]-&gt;SkipSize == 0)\n                        {\n                            if (customValidKeySizes[i]-&gt;MinSize == value)\n                            {\n                                KeySizeValue = value;\n                                return;\n                            }\n                        }\n                        else\n                        {\n                            for (int j = customValidKeySizes[i]-&gt;MinSize;\n                                j &lt;= customValidKeySizes[i]-&gt;MaxSize;\n                                j += customValidKeySizes[i]-&gt;SkipSize)\n                            {\n                                if (j == value)\n                                {\n                                    KeySizeValue = value;\n                                    return;\n                                }\n                            }\n                        }\n                    }\n\n                    // If the key does not fall within the range identified\n                    // in the keySizes member variable, throw an exception.\n                    throw gcnew CryptographicException(&quot;Invalid key size.&quot;);\n                }\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#9\">        Public Overrides Property KeySize() As Integer\n            Get\n                Return KeySizeValue\n            End Get\n            Set(ByVal Value As Integer)\n                For i As Int16 = 0 To keySizes.Length - 1 Step i\n                    If (keySizes(i).SkipSize.Equals(0)) Then\n                        If (keySizes(i).MinSize.Equals(Value)) Then\n                            KeySizeValue = Value\n                            Return\n                        End If\n                    Else\n                        For j As Integer = keySizes(i).MinSize _\n                            To keySizes(i).MaxSize _\n                            Step keySizes(i).SkipSize\n                            If (j.Equals(Value)) Then\n                                KeySizeValue = Value\n                                Return\n                            End If\n                        Next\n                    End If\n                Next\n                &#39; If the key does not fall within the range identified \n                &#39; in the keySizes member variable, throw an exception.\n                Throw New CryptographicException(&quot;Invalid key size.&quot;)\n            End Set\n        End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LegalKeySizes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the key sizes that are supported by the asymmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keysizes\" data-linktype=\"relative-path\">KeySizes</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the key sizes supported by the asymmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asymmetric algorithm supports only key sizes that match an entry in this array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call the LegalKeySizes property to retrieve the <a class=\"xref\" href=\"system.security.cryptography.keysizes#System_Security_Cryptography_KeySizes_MinSize_\" data-linktype=\"relative-path\">MinSize</a>, <a class=\"xref\" href=\"system.security.cryptography.keysizes#System_Security_Cryptography_KeySizes_MaxSize_\" data-linktype=\"relative-path\">MaxSize</a>, and <a class=\"xref\" href=\"system.security.cryptography.keysizes#System_Security_Cryptography_KeySizes_SkipSize_\" data-linktype=\"relative-path\">SkipSize</a> properties. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#10\">                KeySizes[] legalKeySizes = customCrypto.LegalKeySizes;\n                if (legalKeySizes.Length &gt; 0)\n                {\n                    for (int i=0; i &lt; legalKeySizes.Length; i++)\n                    {\n                        Console.Write(&quot;Keysize&quot; + i + &quot; min, max, step: &quot;);\n                        Console.Write(legalKeySizes[i].MinSize + &quot;, &quot;);\n                        Console.Write(legalKeySizes[i].MaxSize + &quot;, &quot;);\n                        Console.WriteLine(legalKeySizes[i].SkipSize + &quot;, &quot;);\n                    }\n                }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#10\">                Dim legalKeySizes() As KeySizes = customCrypto.LegalKeySizes\n                If (legalKeySizes.Length &gt; 0) Then\n                    For i As Integer = 0 To legalKeySizes.Length - 1 Step 1\n                        Write(&quot;Keysize&quot; + i.ToString() + &quot; min, max, step: &quot;)\n                        Write(legalKeySizes(i).MinSize.ToString() + &quot;, &quot;)\n                        Write(legalKeySizes(i).MaxSize.ToString() + &quot;, &quot;)\n                        Write(legalKeySizes(i).SkipSize.ToString() + &quot;, &quot;)\n                        WriteLine(&quot;&quot;)\n                    Next\n                End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#10\">    array&lt;KeySizes^&gt;^ legalKeySizes = customCryptoAlgorithm-&gt;LegalKeySizes;\n    for (int i = 0; i &lt; legalKeySizes-&gt;Length; i++)\n    {\n        Console::WriteLine(\n            &quot;Keysize{0} min, max, step: {1}, {2}, {3}, &quot;, i,\n            legalKeySizes[i]-&gt;MinSize,\n            legalKeySizes[i]-&gt;MaxSize,\n            legalKeySizes[i]-&gt;SkipSize);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_SignatureAlgorithm\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_SignatureAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignatureAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>When implemented in a derived class, gets the name of the signature algorithm. Otherwise, always throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string SignatureAlgorithm { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the signature algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to override the SignatureAlgorithm property to return the name of the signature algorithm. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#7\">        public override string SignatureAlgorithm \n        {\n            get {return &quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;;}\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#7\">        public:\n            property String^ SignatureAlgorithm\n            {\n                virtual String^ get() override\n                {\n                    return &quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;;\n                }\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#7\">        Public Overrides ReadOnly Property SignatureAlgorithm() As String\n            Get\n                Return &quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;\n            End Get\n        End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Clear\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a simple call to the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method.  </p>\n<p> Calling <code>Dispose</code> allows the resources used by the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class to be reallocated for other purposes. For more information about <code>Dispose</code>, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call the Clear method to release the resources of the current <code>customCrypto</code> object. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#1\">            customCrypto.Clear();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#1\">            customCrypto.Clear()\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#1\">    customCryptoAlgorithm-&gt;Clear();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Create\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a default cryptographic object used to perform the asymmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.AsymmetricAlgorithm Create ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> instance, unless the default settings have been changed with the <a href=\"../Topic/%3CcryptoClass%3E%20Element.md\" data-linktype=\"relative-path\"><cryptoclass> element</cryptoclass></a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#11\">        // The create function attempts to create a CustomCrypto object using\n        // the assembly name. This functionality requires modification of the\n        // machine.config file. Add the following section to the configuration\n        // element and modify the values of the cryptoClass to reflect what is\n        // installed in your machines GAC.\n        //&lt;mscorlib&gt;\n        //  &lt;cryptographySettings&gt;\n        //    &lt;cryptoNameMapping&gt;\n        //      &lt;cryptoClasses&gt;\n        //        &lt;cryptoClass CustomCrypto=&quot;Contoso.CustomCrypto, \n        //          CustomCrypto, \n        //          Culture=neutral, \n        //          PublicKeyToken=fdb9f9c4851028bf, \n        //          Version=1.0.1448.27640&quot; /&gt;\n        //      &lt;/cryptoClasses&gt;\n        //      &lt;nameEntry name=&quot;Contoso.CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n        //      &lt;nameEntry name=&quot;CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n        //    &lt;/cryptoNameMapping&gt;\n        //  &lt;/cryptographySettings&gt;\n        //&lt;/mscorlib&gt;\n        new static public CustomCrypto Create() \n        {\n            return Create(&quot;CustomCrypto&quot;);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#11\">            // The create function attempts to create a CustomCrypto \n            // object using the assembly name. This functionality requires \n            // modification of the machine.config file. Add the following \n            // section to the configuration element and modify the values \n            // of the cryptoClass to reflect what isinstalled \n            // in your machines GAC.\n            //&lt;mscorlib&gt;\n            //  &lt;cryptographySettings&gt;\n            //    &lt;cryptoNameMapping&gt;\n            //      &lt;cryptoClasses&gt;\n            //        &lt;cryptoClass CustomCrypto=&quot;Contoso.CustomCrypto,\n            //          CustomCrypto,\n            //          Culture=neutral,\n            //          PublicKeyToken=fdb9f9c4851028bf,\n            //          Version=1.0.1448.27640&quot; /&gt;\n            //      &lt;/cryptoClasses&gt;\n            //      &lt;nameEntry name=&quot;Contoso.CustomCrypto&quot; \n            //         class=&quot;CustomCrypto&quot; /&gt;\n            //      &lt;nameEntry name=&quot;CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n            //    &lt;/cryptoNameMapping&gt;\n            //  &lt;/cryptographySettings&gt;\n            //&lt;/mscorlib&gt;\n\n        public:\n            static CustomCrypto^ Create() \n            {\n                return Create(&quot;CustomCrypto&quot;);\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#11\">        &#39; The create function attempts to create a vbCustomCrypto object using\n        &#39; the assembly name. This functionality requires modification of the\n        &#39; machine.config file. Add the following section to the configuration\n        &#39; element and modify the values of the cryptoClass to reflect what is\n        &#39; installed in your machines GAC.\n        &#39;&lt;mscorlib&gt;\n        &#39;    &lt;cryptographySettings&gt;\n        &#39;      &lt;cryptoNameMapping&gt;\n        &#39;        &lt;cryptoClasses&gt;\n        &#39;          &lt;cryptoClass vbCustomCrypto=&quot;Contoso.vbCustomCrypto, \n        &#39;            vbCustomCrypto, \n        &#39;            Culture=neutral, \n        &#39;            PublicKeyToken=fdb9f9c4851028bf, \n        &#39;            Version=1.0.1448.27640&quot; /&gt;\n        &#39;        &lt;/cryptoClasses&gt;\n        &#39;        &lt;nameEntry name=&quot;Contoso.vbCustomCrypto&quot; \n        &#39;                   class=&quot;vbCustomCrypto&quot; /&gt;\n        &#39;        &lt;nameEntry name=&quot;vbCustomCrypto&quot; class=&quot;vbCustomCrypto&quot; /&gt;\n        &#39;      &lt;/cryptoNameMapping&gt;\n        &#39;    &lt;/cryptographySettings&gt;\n        &#39;&lt;/mscorlib&gt;\n        Public Shadows Function Create() As vbCustomCrypto\n            Return Create(&quot;vbCustomCrypto&quot;)\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Create_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of the specified implementation of an asymmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.AsymmetricAlgorithm Create (string algName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>algName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The asymmetric algorithm implementation to use. The following table shows the valid values for the <code>algName</code> parameter and the algorithms they map to.  </p>\n <table><thead><tr><th> Parameter value<br>\n </th><th> Implements<br>\n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.AsymmetricAlgorithm<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></td></tr><tr><td> RSA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a></td></tr><tr><td> System.Security.Cryptography.RSA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a></td></tr><tr><td> DSA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a></td></tr><tr><td> System.Security.Cryptography.DSA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a></td></tr><tr><td> ECDsa<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdsa\" data-linktype=\"relative-path\">ECDsa</a></td></tr><tr><td> ECDsaCng<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdsacng\" data-linktype=\"relative-path\">ECDsaCng</a></td></tr><tr><td> System.Security.Cryptography.ECDsaCng<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdsacng\" data-linktype=\"relative-path\">ECDsaCng</a></td></tr><tr><td> ECDH<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a></td></tr><tr><td> ECDiffieHellman<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a></td></tr><tr><td> ECDiffieHellmanCng<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a></td></tr><tr><td> System.Security.Cryptography.ECDiffieHellmanCng<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a></td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></div>\r\n                  </div>\r\n                  <p>A new instance of the specified asymmetric algorithm implementation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#12\">        // The create function attempts to create a CustomCrypto object using\n        // the assembly name. This functionality requires modification of the\n        // machine.config file. Add the following section to the configuration\n        // element and modify the values of the cryptoClass to reflect what is\n        // installed in your machines GAC.\n        //&lt;mscorlib&gt;\n        // &lt;cryptographySettings&gt;\n        //   &lt;cryptoNameMapping&gt;\n        //     &lt;cryptoClasses&gt;\n        //       &lt;cryptoClass CustomCrypto=&quot;Contoso.CustomCrypto, \n        //         CustomCrypto, \n        //         Culture=neutral, \n        //         PublicKeyToken=fdb9f9c4851028bf, \n        //         Version=1.0.1448.27640&quot; /&gt;\n        //     &lt;/cryptoClasses&gt;\n        //     &lt;nameEntry name=&quot;Contoso.CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n        //     &lt;nameEntry name=&quot;CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n        //    &lt;/cryptoNameMapping&gt;\n        //  &lt;/cryptographySettings&gt;\n        //&lt;/mscorlib&gt;\n        new static public CustomCrypto Create(String algorithmName) \n        {\n            return (CustomCrypto) CryptoConfig.CreateFromName(algorithmName);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#12\">            // The create function attempts to create a CustomCrypto object \n            // using the assembly name. This functionality requires \n            // modification of the machine.config file. Add the following \n            // section to the configuration element and modify the values \n            // of the cryptoClass to reflect what is installed \n            // in your machines GAC.\n            //&lt;mscorlib&gt;\n            // &lt;cryptographySettings&gt;\n            //   &lt;cryptoNameMapping&gt;\n            //     &lt;cryptoClasses&gt;\n            //       &lt;cryptoClass CustomCrypto=&quot;Contoso.CustomCrypto,\n            //         CustomCrypto,\n            //         Culture=neutral,\n            //         PublicKeyToken=fdb9f9c4851028bf,\n            //         Version=1.0.1448.27640&quot; /&gt;\n            //     &lt;/cryptoClasses&gt;\n            //     &lt;nameEntry name=&quot;Contoso.CustomCrypto&quot; \n            //        class=&quot;CustomCrypto&quot; /&gt;\n            //     &lt;nameEntry name=&quot;CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n            //    &lt;/cryptoNameMapping&gt;\n            //  &lt;/cryptographySettings&gt;\n            //&lt;/mscorlib&gt;\n\n        public:\n            static CustomCrypto^ Create(String^ algorithmName) \n            {\n                return (CustomCrypto^) \n                    CryptoConfig::CreateFromName(algorithmName);\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#12\">        &#39; The create function attempts to create a vbCustomCrypto object using\n        &#39; the assembly name. This functionality requires modification of the\n        &#39; machine.config file. Add the following section to the configuration\n        &#39; element and modify the values of the cryptoClass to reflect what is\n        &#39; installed in your machines GAC.\n        &#39;&lt;mscorlib&gt;\n        &#39;    &lt;cryptographySettings&gt;\n        &#39;      &lt;cryptoNameMapping&gt;\n        &#39;        &lt;cryptoClasses&gt;\n        &#39;          &lt;cryptoClass vbCustomCrypto=&quot;Contoso.vbCustomCrypto, \n        &#39;            vbCustomCrypto, \n        &#39;            Culture=neutral, \n        &#39;            PublicKeyToken=fdb9f9c4851028bf, \n        &#39;            Version=1.0.1448.27640&quot; /&gt;\n        &#39;        &lt;/cryptoClasses&gt;\n        &#39;        &lt;nameEntry name=&quot;Contoso.vbCustomCrypto&quot; \n        &#39;                   class=&quot;vbCustomCrypto&quot; /&gt;\n        &#39;        &lt;nameEntry name=&quot;vbCustomCrypto&quot; class=&quot;vbCustomCrypto&quot; /&gt;\n        &#39;      &lt;/cryptoNameMapping&gt;\n        &#39;    &lt;/cryptographySettings&gt;\n        &#39;&lt;/mscorlib&gt;\n        Public Shadows Function Create( _\n            ByVal algorithmName As String) As vbCustomCrypto\n\n            Return CType( _\n                CryptoConfig.CreateFromName(algorithmName), _\n                vbCustomCrypto)\n\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Dispose\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code> method and the <code>Finalize</code> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <code>Finalize</code> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_FromXmlString_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_FromXmlString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXmlString(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, reconstructs an <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object from an XML string. Otherwise, throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void FromXmlString (string xmlString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xmlString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML string to use to reconstruct the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the FromXmlString method to parse the specified XML string to populate the current <a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a> object. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#4\">        // Expected XML schema:\n        //  &lt;CustomCryptoKeyValue&gt;\n        //      &lt;ProviderName&gt;&lt;/ProviderName&gt;\n        //      &lt;KeyContainerName&gt;&lt;/KeyContainerName&gt;\n        //      &lt;KeyNumber&gt;&lt;/KeyNumber&gt;\n        //      &lt;ProviderType&gt;&lt;/ProviderType&gt;\n        //  &lt;/CustomCryptoKeyValue&gt;\n        public override void FromXmlString(string xmlString)\n        {\n            if (xmlString != null)\n            {\n                XmlDocument doc = new XmlDocument();\n                doc.LoadXml(xmlString);\n                XmlNode firstNode = doc.FirstChild;\n                XmlNodeList nodeList;\n\n                // Assemble parameters from values in each XML element.\n                cspParameters = new CspParameters();\n\n                // KeyContainerName is optional.\n                nodeList = doc.GetElementsByTagName(&quot;KeyContainerName&quot;);\n                string keyName = nodeList.Item(0).InnerText;\n                if (keyName != null) \n                {\n                    cspParameters.KeyContainerName = keyName;\n                }\n\n                // KeyNumber is optional.\n                nodeList = doc.GetElementsByTagName(&quot;KeyNumber&quot;);\n                string keyNumber = nodeList.Item(0).InnerText;\n                if (keyNumber != null) \n                {\n                    cspParameters.KeyNumber = Int32.Parse(keyNumber);\n                }\n\n                // ProviderName is optional.\n                nodeList = doc.GetElementsByTagName(&quot;ProviderName&quot;);\n                string providerName = nodeList.Item(0).InnerText;\n                if (providerName != null) \n                {\n                    cspParameters.ProviderName = providerName;\n                }\n\n                // ProviderType is optional.\n                nodeList = doc.GetElementsByTagName(&quot;ProviderType&quot;);\n                string providerType = nodeList.Item(0).InnerText;\n                if (providerType != null) \n                {\n                    cspParameters.ProviderType = Int32.Parse(providerType);\n                }\n            }\n            else\n            {\n                throw new ArgumentNullException(&quot;xmlString&quot;);\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#4\">            // Expected XML schema:\n            //  &lt;CustomCryptoKeyValue&gt;\n            //      &lt;ProviderName&gt;&lt;/ProviderName&gt;\n            //      &lt;KeyContainerName&gt;&lt;/KeyContainerName&gt;\n            //      &lt;KeyNumber&gt;&lt;/KeyNumber&gt;\n            //      &lt;ProviderType&gt;&lt;/ProviderType&gt;\n            //  &lt;/CustomCryptoKeyValue&gt;\n        public:\n            virtual void FromXmlString(String^ xmlString) override \n            {\n                if (xmlString != nullptr)\n                {\n                    XmlDocument^ document = gcnew XmlDocument();\n                    document-&gt;LoadXml(xmlString);\n                    XmlNode^ firstNode = document-&gt;FirstChild;\n                    XmlNodeList^ nodeList;\n\n                    // Assemble parameters from values in each XML element.\n                    cryptoServiceParameters = gcnew CspParameters();\n\n                    // KeyContainerName is optional.\n                    nodeList = \n                        document-&gt;GetElementsByTagName(&quot;KeyContainerName&quot;);\n                    if (nodeList-&gt;Count &gt; 0)\n                    {\n                        cryptoServiceParameters-&gt;KeyContainerName =\n                            nodeList-&gt;Item(0)-&gt;InnerText;\n                    }\n\n                    // KeyNumber is optional.\n                    nodeList = document-&gt;GetElementsByTagName(&quot;KeyNumber&quot;);\n                    if (nodeList-&gt;Count &gt; 0)\n                    {\n                        cryptoServiceParameters-&gt;KeyNumber =\n                            Int32::Parse(nodeList-&gt;Item(0)-&gt;InnerText);\n                    }\n\n                    // ProviderName is optional.\n                    nodeList = document-&gt;GetElementsByTagName(&quot;ProviderName&quot;);\n                    if (nodeList-&gt;Count &gt; 0)\n                    {\n                        cryptoServiceParameters-&gt;ProviderName =\n                            nodeList-&gt;Item(0)-&gt;InnerText;\n                    }\n\n                    // ProviderType is optional.\n                    nodeList = document-&gt;GetElementsByTagName(&quot;ProviderType&quot;);\n                    if (nodeList-&gt;Count &gt; 0)\n                    {\n                        cryptoServiceParameters-&gt;ProviderType =\n                            Int32::Parse(nodeList-&gt;Item(0)-&gt;InnerText);\n                    }\n                }\n                else\n                {\n                    throw gcnew ArgumentNullException(&quot;xmlString&quot;);\n                }\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#4\">        &#39; Expected XML schema:\n        &#39;  &lt;CustomCryptoKeyValue&gt;\n        &#39;      &lt;ProviderName&gt;&lt;/ProviderName&gt;\n        &#39;      &lt;KeyContainerName&gt;&lt;/KeyContainerName&gt;\n        &#39;      &lt;KeyNumber&gt;&lt;/KeyNumber&gt;\n        &#39;      &lt;ProviderType&gt;&lt;/ProviderType&gt;\n        &#39;  &lt;/CustomCryptoKeyValue&gt;\n        Public Overrides Sub FromXmlString(ByVal xmlString As String)\n            If Not xmlString Is Nothing Then\n                Dim doc As New XmlDocument\n                doc.LoadXml(xmlString)\n                Dim firstNode As XmlNode = doc.FirstChild\n                Dim nodeList As XmlNodeList\n\n                &#39; Assemble parameters from values in each XML element.\n                cspParameters = New CspParameters\n\n                &#39; KeyContainerName is optional.\n                nodeList = doc.GetElementsByTagName(&quot;KeyContainerName&quot;)\n                Dim keyName As String = nodeList.Item(0).InnerText\n                If Not keyName Is Nothing Then\n                    cspParameters.KeyContainerName = keyName\n                End If\n\n                &#39; KeyNumber is optional.\n                nodeList = doc.GetElementsByTagName(&quot;KeyNumber&quot;)\n                Dim keyNumber As String = nodeList.Item(0).InnerText\n                If Not keyNumber Is Nothing Then\n                    cspParameters.KeyNumber = Int32.Parse(keyNumber)\n                End If\n\n                &#39; ProviderName is optional.\n                nodeList = doc.GetElementsByTagName(&quot;ProviderName&quot;)\n                Dim providerName As String = nodeList.Item(0).InnerText\n                If Not providerName Is Nothing Then\n                    cspParameters.ProviderName = providerName\n                End If\n\n                &#39; ProviderType is optional.\n                nodeList = doc.GetElementsByTagName(&quot;ProviderType&quot;)\n                Dim providerType As String = nodeList.Item(0).InnerText\n                If Not providerType Is Nothing Then\n                    cspParameters.ProviderType = Int32.Parse(providerType)\n                End If\n            Else\n                Throw New ArgumentNullException(&quot;xmlString&quot;)\n            End If\n        End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_ToXmlString_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_AsymmetricAlgorithm_ToXmlString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXmlString(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates and returns an XML string representation of the current <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object. Otherwise, throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ToXmlString (bool includePrivateParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includePrivateParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include private parameters; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>An XML string encoding of the current <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call the ToXmlString method to create an XML representation of the parameters in the current <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#5\">        public override string ToXmlString(bool includePrivateParameters)\n        {\n            string keyContainerName = &quot;&quot;;\n            string keyNumber = &quot;&quot;;\n            string providerName = &quot;&quot;;\n            string providerType = &quot;&quot;;\n\n            if (cspParameters != null)\n            {\n                keyContainerName = cspParameters.KeyContainerName;\n                keyNumber = cspParameters.KeyNumber.ToString();\n                providerName = cspParameters.ProviderName;\n                providerType = cspParameters.ProviderType.ToString();\n            }\n\n            StringBuilder sb = new StringBuilder();\n            sb.Append(&quot;&lt;CustomCryptoKeyValue&gt;&quot;);\n\n            sb.Append(&quot;&lt;KeyContainerName&gt;&quot;);\n            sb.Append(keyContainerName);\n            sb.Append(&quot;&lt;/KeyContainerName&gt;&quot;);\n\n            sb.Append(&quot;&lt;KeyNumber&gt;&quot;);\n            sb.Append(keyNumber);\n            sb.Append(&quot;&lt;/KeyNumber&gt;&quot;);\n\n            sb.Append(&quot;&lt;ProviderName&gt;&quot;);\n            sb.Append(providerName);\n            sb.Append(&quot;&lt;/ProviderName&gt;&quot;);\n\n            sb.Append(&quot;&lt;ProviderType&gt;&quot;);\n            sb.Append(providerType);\n            sb.Append(&quot;&lt;/ProviderType&gt;&quot;);\n\n            sb.Append(&quot;&lt;/CustomCryptoKeyValue&gt;&quot;);\n            return(sb.ToString());\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#5\">        public:\n            virtual String^ ToXmlString(bool includePrivateParameters) override\n            {\n                String^ keyContainerName = &quot;&quot;;\n                String^ keyNumber = &quot;&quot;;\n                String^ providerName = &quot;&quot;;\n                String^ providerType = &quot;&quot;;\n\n                if (cryptoServiceParameters != nullptr)\n                {\n                    keyContainerName = \n                        cryptoServiceParameters-&gt;KeyContainerName;\n                    keyNumber = cryptoServiceParameters-&gt;KeyNumber.ToString();\n                    providerName = cryptoServiceParameters-&gt;ProviderName;\n                    providerType = \n                        cryptoServiceParameters-&gt;ProviderType.ToString();\n                }\n\n                StringBuilder^ sb = gcnew StringBuilder();\n                sb-&gt;Append(&quot;&lt;CustomCryptoKeyValue&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;KeyContainerName&gt;&quot;);\n                sb-&gt;Append(keyContainerName);\n                sb-&gt;Append(&quot;&lt;/KeyContainerName&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;KeyNumber&gt;&quot;);\n                sb-&gt;Append(keyNumber);\n                sb-&gt;Append(&quot;&lt;/KeyNumber&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;ProviderName&gt;&quot;);\n                sb-&gt;Append(providerName);\n                sb-&gt;Append(&quot;&lt;/ProviderName&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;ProviderType&gt;&quot;);\n                sb-&gt;Append(providerType);\n                sb-&gt;Append(&quot;&lt;/ProviderType&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;/CustomCryptoKeyValue&gt;&quot;);\n                return(sb-&gt;ToString());\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#5\">        Public Overrides Function ToXmlString( _\n            ByVal includePrivateParameters As Boolean) As String\n\n            Dim keyContainerName As String = &quot;&quot;\n            Dim keyNumber As String = &quot;&quot;\n            Dim providerName As String = &quot;&quot;\n            Dim providerType As String = &quot;&quot;\n\n            If Not cspParameters Is Nothing Then\n                keyContainerName = cspParameters.KeyContainerName\n                keyNumber = cspParameters.KeyNumber.ToString()\n                providerName = cspParameters.ProviderName\n                providerType = cspParameters.ProviderType.ToString()\n            End If\n\n            Dim xmlBuilder As New StringBuilder\n            xmlBuilder.Append(&quot;&lt;CustomCryptoKeyValue&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;KeyContainerName&gt;&quot;)\n            xmlBuilder.Append(keyContainerName)\n            xmlBuilder.Append(&quot;&lt;/KeyContainerName&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;KeyNumber&gt;&quot;)\n            xmlBuilder.Append(keyNumber)\n            xmlBuilder.Append(&quot;&lt;/KeyNumber&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;ProviderName&gt;&quot;)\n            xmlBuilder.Append(providerName)\n            xmlBuilder.Append(&quot;&lt;/ProviderName&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;ProviderType&gt;&quot;)\n            xmlBuilder.Append(providerType)\n            xmlBuilder.Append(&quot;&lt;/ProviderType&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;/CustomCryptoKeyValue&gt;&quot;)\n            Return (xmlBuilder.ToString())\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.AsymmetricAlgorithm.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.AsymmetricAlgorithm.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.Clear\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.Create\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.KeySize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5a6f5b2b-bf82-d816-0305-cfb0666f0f40\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Security.Cryptography\\AsymmetricAlgorithm.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.AsymmetricAlgorithm\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.AsymmetricAlgorithm.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.AsymmetricAlgorithm.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.AsymmetricAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm..ctor","System.Security.Cryptography.AsymmetricAlgorithm.Clear","System.Security.Cryptography.AsymmetricAlgorithm.Create","System.Security.Cryptography.AsymmetricAlgorithm.Dispose","System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString","System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.KeySize","System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue","System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes","System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue","System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.AsymmetricAlgorithm","System::Security::Cryptography::AsymmetricAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.#ctor","System::Security::Cryptography::AsymmetricAlgorithm::#ctor","System.Security.Cryptography.AsymmetricAlgorithm.Clear","System::Security::Cryptography::AsymmetricAlgorithm::Clear","System.Security.Cryptography.AsymmetricAlgorithm.Create","System::Security::Cryptography::AsymmetricAlgorithm::Create","System.Security.Cryptography.AsymmetricAlgorithm.Dispose","System::Security::Cryptography::AsymmetricAlgorithm::Dispose","System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString","System::Security::Cryptography::AsymmetricAlgorithm::FromXmlString","System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm","System::Security::Cryptography::AsymmetricAlgorithm::KeyExchangeAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.KeySize","System::Security::Cryptography::AsymmetricAlgorithm::KeySize","System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue","System::Security::Cryptography::AsymmetricAlgorithm::KeySizeValue","System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes","System::Security::Cryptography::AsymmetricAlgorithm::LegalKeySizes","System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue","System::Security::Cryptography::AsymmetricAlgorithm::LegalKeySizesValue","System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm","System::Security::Cryptography::AsymmetricAlgorithm::SignatureAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString","System::Security::Cryptography::AsymmetricAlgorithm::ToXmlString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5a6f5b2b-bf82-d816-0305-cfb0666f0f40","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Security.Cryptography\\AsymmetricAlgorithm.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/AsymmetricAlgorithm.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsymmetricAlgorithm class | Microsoft Docs","_op_ogTitle":"AsymmetricAlgorithm class","description":"Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.AsymmetricAlgorithm","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.asymmetricalgorithm","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.asymmetricalgorithm","fileRelativePath":"System.Security.Cryptography.AsymmetricAlgorithm.html"},"themesRelativePathToOutputRoot":"_themes/"}