{"content":"    \r\n    <h1 id=\"System_ComponentModel_AsyncCompletedEventArgs\">\r\n      <span class=\"lang-csharp\">AsyncCompletedEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <em>MethodName</em><code>Completed</code> event.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class AsyncCompletedEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AsyncCompletedEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>If you are using a class that implements the <a href=\"../Topic/Event-based%20Asynchronous%20Pattern%20Overview.md\" data-linktype=\"relative-path\">Event-based Asynchronous Pattern Overview</a>, the class will provide a <em>MethodName</em><code>Completed</code> event. If you add an instance of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventhandler\" data-linktype=\"relative-path\">System.ComponentModel.AsyncCompletedEventHandler</a> delegate to the event, you will receive information about the outcome of asynchronous operations in the AsyncCompletedEventArgs parameter of the corresponding event-handler method.  </p>\n<p> The client application&#39;s event-handler delegate can check the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> property to determine if the asynchronous task was cancelled.  </p>\n<p> The client application&#39;s event-handler delegate can check the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property to determine if an exception occurred during execution of the asynchronous task.  </p>\n<p> If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the <em>MethodName</em><code>Completed</code> event by checking the value of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_UserState_\" data-linktype=\"relative-path\">UserState</a> property. Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncCompletedEventArgs__ctor\" data-linktype=\"self-bookmark\">AsyncCompletedEventArgs()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncCompletedEventArgs__ctor_System_Exception_System_Boolean_System_Object_\" data-linktype=\"self-bookmark\">AsyncCompletedEventArgs(Exception,Boolean,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncCompletedEventArgs_Cancelled\" data-linktype=\"self-bookmark\">Cancelled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether an asynchronous operation has been canceled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncCompletedEventArgs_Error\" data-linktype=\"self-bookmark\">Error</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating which error occurred during an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncCompletedEventArgs_UserState\" data-linktype=\"self-bookmark\">UserState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the unique identifier for the asynchronous task.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncCompletedEventArgs_RaiseExceptionIfNecessary\" data-linktype=\"self-bookmark\">RaiseExceptionIfNecessary()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises a user-supplied exception if an asynchronous operation failed.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncCompletedEventArgs__ctor\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncCompletedEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncCompletedEventArgs()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AsyncCompletedEventArgs ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncCompletedEventArgs__ctor_System_Exception_System_Boolean_System_Object_\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncCompletedEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncCompletedEventArgs(Exception,Boolean,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AsyncCompletedEventArgs (Exception error, bool cancelled, object userState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>error</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any error that occurred during the asynchronous operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancelled</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value indicating whether the asynchronous operation was canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The optional user-supplied state object passed to the <span class=\"xref\">stem.ComponentModel.BackgroundWorker.RunWorkerAsync*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncCompletedEventArgs_Cancelled\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cancelled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether an asynchronous operation has been canceled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Cancelled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the background operation has been canceled; otherwise <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the Cancelled property is <code>true</code>, the asynchronous operation was interrupted.  </p>\n<p> The client application&#39;s event-handler delegate should check the Cancelled property before accessing any properties in a class derived from <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a>; otherwise, the property will raise an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> if the asynchronous operation was interrupted.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the using an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperationManager</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#11\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.ComponentModel\nImports System.Drawing\nImports System.Globalization\nImports System.Threading\nImports System.Windows.Forms\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#11\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Globalization;\nusing System.Threading;\nusing System.Windows.Forms;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#12\">    &#39; This event handler updates the ListView control when the\n    &#39; PrimeNumberCalculator raises the CalculatePrimeCompleted\n    &#39; event. The ListView item is updated with the appropriate\n    &#39; outcome of the calculation: Canceled, Error, or result.\n    Private Sub primeNumberCalculator1_CalculatePrimeCompleted( _\n        ByVal sender As Object, _\n        ByVal e As CalculatePrimeCompletedEventArgs) _\n        Handles primeNumberCalculator1.CalculatePrimeCompleted\n\n        Dim taskId As Guid = CType(e.UserState, Guid)\n\n        If e.Cancelled Then\n            Dim result As String = &quot;Canceled&quot;\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, _\n                result)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.Pink\n                lvi.Tag = Nothing\n            End If\n\n        ElseIf e.Error IsNot Nothing Then\n\n            Dim result As String = &quot;Error&quot;\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, result)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.Red\n                lvi.ForeColor = Color.White\n                lvi.Tag = Nothing\n            End If\n        Else\n            Dim result As Boolean = e.IsPrime\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, _\n                result, _\n                e.FirstDivisor)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.LightGray\n                lvi.Tag = Nothing\n            End If\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#12\">        // This event handler updates the ListView control when the\n        // PrimeNumberCalculator raises the CalculatePrimeCompleted\n        // event. The ListView item is updated with the appropriate\n        // outcome of the calculation: Canceled, Error, or result.\n        private void primeNumberCalculator1_CalculatePrimeCompleted(\n            object sender, \n            CalculatePrimeCompletedEventArgs e)\n        {\n            Guid taskId = (Guid)e.UserState;\n\n            if (e.Cancelled)\n            {   \n                string result = &quot;Canceled&quot;;\n\n                ListViewItem lvi = UpdateListViewItem(taskId, result);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.Pink;\n                    lvi.Tag = null;\n                }\n            }\n            else if (e.Error != null)\n            {\n                string result = &quot;Error&quot;;\n\n                ListViewItem lvi = UpdateListViewItem(taskId, result);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.Red;\n                    lvi.ForeColor = Color.White;\n                    lvi.Tag = null;\n                }\n            }\n            else\n            {   \n                bool result = e.IsPrime;\n\n                ListViewItem lvi = UpdateListViewItem(\n                    taskId, \n                    result, \n                    e.FirstDivisor);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.LightGray;\n                    lvi.Tag = null;\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncCompletedEventArgs_Error\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncCompletedEventArgs_Error_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Error</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating which error occurred during an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Exception Error { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instance, if an error occurred during an asynchronous operation; otherwise <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an exception is raised during an asynchronous operation, the class will assign the exception to the Error property. The client application&#39;s event-handler delegate should check the Error property before accessing any properties in a class derived from <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a>; otherwise, the property will raise a <a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a> with its <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property holding a reference to Error.  </p>\n<p> The value of the Error property is <code>null</code> if the operation was canceled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperationManager</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#11\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.ComponentModel\nImports System.Drawing\nImports System.Globalization\nImports System.Threading\nImports System.Windows.Forms\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#11\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Globalization;\nusing System.Threading;\nusing System.Windows.Forms;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#12\">    &#39; This event handler updates the ListView control when the\n    &#39; PrimeNumberCalculator raises the CalculatePrimeCompleted\n    &#39; event. The ListView item is updated with the appropriate\n    &#39; outcome of the calculation: Canceled, Error, or result.\n    Private Sub primeNumberCalculator1_CalculatePrimeCompleted( _\n        ByVal sender As Object, _\n        ByVal e As CalculatePrimeCompletedEventArgs) _\n        Handles primeNumberCalculator1.CalculatePrimeCompleted\n\n        Dim taskId As Guid = CType(e.UserState, Guid)\n\n        If e.Cancelled Then\n            Dim result As String = &quot;Canceled&quot;\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, _\n                result)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.Pink\n                lvi.Tag = Nothing\n            End If\n\n        ElseIf e.Error IsNot Nothing Then\n\n            Dim result As String = &quot;Error&quot;\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, result)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.Red\n                lvi.ForeColor = Color.White\n                lvi.Tag = Nothing\n            End If\n        Else\n            Dim result As Boolean = e.IsPrime\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, _\n                result, _\n                e.FirstDivisor)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.LightGray\n                lvi.Tag = Nothing\n            End If\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#12\">        // This event handler updates the ListView control when the\n        // PrimeNumberCalculator raises the CalculatePrimeCompleted\n        // event. The ListView item is updated with the appropriate\n        // outcome of the calculation: Canceled, Error, or result.\n        private void primeNumberCalculator1_CalculatePrimeCompleted(\n            object sender, \n            CalculatePrimeCompletedEventArgs e)\n        {\n            Guid taskId = (Guid)e.UserState;\n\n            if (e.Cancelled)\n            {   \n                string result = &quot;Canceled&quot;;\n\n                ListViewItem lvi = UpdateListViewItem(taskId, result);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.Pink;\n                    lvi.Tag = null;\n                }\n            }\n            else if (e.Error != null)\n            {\n                string result = &quot;Error&quot;;\n\n                ListViewItem lvi = UpdateListViewItem(taskId, result);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.Red;\n                    lvi.ForeColor = Color.White;\n                    lvi.Tag = null;\n                }\n            }\n            else\n            {   \n                bool result = e.IsPrime;\n\n                ListViewItem lvi = UpdateListViewItem(\n                    taskId, \n                    result, \n                    e.FirstDivisor);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.LightGray;\n                    lvi.Tag = null;\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncCompletedEventArgs_UserState\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncCompletedEventArgs_UserState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the unique identifier for the asynchronous task.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object UserState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An object reference that uniquely identifies the asynchronous task; otherwise, <code>null</code> if no value has been set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the <em>MethodName</em><code>Completed</code> event by checking the value of the UserState property. Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.  </p>\n<p> The value of this property is set during the original call to the asynchronous method that started the task.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperationManager</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#11\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.ComponentModel\nImports System.Drawing\nImports System.Globalization\nImports System.Threading\nImports System.Windows.Forms\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#11\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Globalization;\nusing System.Threading;\nusing System.Windows.Forms;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#12\">    &#39; This event handler updates the ListView control when the\n    &#39; PrimeNumberCalculator raises the CalculatePrimeCompleted\n    &#39; event. The ListView item is updated with the appropriate\n    &#39; outcome of the calculation: Canceled, Error, or result.\n    Private Sub primeNumberCalculator1_CalculatePrimeCompleted( _\n        ByVal sender As Object, _\n        ByVal e As CalculatePrimeCompletedEventArgs) _\n        Handles primeNumberCalculator1.CalculatePrimeCompleted\n\n        Dim taskId As Guid = CType(e.UserState, Guid)\n\n        If e.Cancelled Then\n            Dim result As String = &quot;Canceled&quot;\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, _\n                result)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.Pink\n                lvi.Tag = Nothing\n            End If\n\n        ElseIf e.Error IsNot Nothing Then\n\n            Dim result As String = &quot;Error&quot;\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, result)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.Red\n                lvi.ForeColor = Color.White\n                lvi.Tag = Nothing\n            End If\n        Else\n            Dim result As Boolean = e.IsPrime\n\n            Dim lvi As ListViewItem = UpdateListViewItem( _\n                taskId, _\n                result, _\n                e.FirstDivisor)\n\n            If (lvi IsNot Nothing) Then\n                lvi.BackColor = Color.LightGray\n                lvi.Tag = Nothing\n            End If\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#12\">        // This event handler updates the ListView control when the\n        // PrimeNumberCalculator raises the CalculatePrimeCompleted\n        // event. The ListView item is updated with the appropriate\n        // outcome of the calculation: Canceled, Error, or result.\n        private void primeNumberCalculator1_CalculatePrimeCompleted(\n            object sender, \n            CalculatePrimeCompletedEventArgs e)\n        {\n            Guid taskId = (Guid)e.UserState;\n\n            if (e.Cancelled)\n            {   \n                string result = &quot;Canceled&quot;;\n\n                ListViewItem lvi = UpdateListViewItem(taskId, result);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.Pink;\n                    lvi.Tag = null;\n                }\n            }\n            else if (e.Error != null)\n            {\n                string result = &quot;Error&quot;;\n\n                ListViewItem lvi = UpdateListViewItem(taskId, result);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.Red;\n                    lvi.ForeColor = Color.White;\n                    lvi.Tag = null;\n                }\n            }\n            else\n            {   \n                bool result = e.IsPrime;\n\n                ListViewItem lvi = UpdateListViewItem(\n                    taskId, \n                    result, \n                    e.FirstDivisor);\n\n                if (lvi != null)\n                {\n                    lvi.BackColor = Color.LightGray;\n                    lvi.Tag = null;\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncCompletedEventArgs_RaiseExceptionIfNecessary\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncCompletedEventArgs_RaiseExceptionIfNecessary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaiseExceptionIfNecessary()</div>        \r\n          </div>\r\n    \r\n            <p>Raises a user-supplied exception if an asynchronous operation failed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void RaiseExceptionIfNecessary ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.ComponentModel.AsyncCompletedEventArgs.Cancelled*</span> property is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.ComponentModel.AsyncCompletedEventArgs.Error*</span> property has been set by the asynchronous operation. The <span class=\"xref\">stem.Exception.InnerException*</span> property holds a reference to <span class=\"xref\">stem.ComponentModel.AsyncCompletedEventArgs.Error*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using RaiseExceptionIfNecessary in derived class properties.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#6\">Public Class CalculatePrimeCompletedEventArgs\n    Inherits AsyncCompletedEventArgs\n    Private numberToTestValue As Integer = 0\n    Private firstDivisorValue As Integer = 1\n    Private isPrimeValue As Boolean\n\n\n    Public Sub New( _\n    ByVal numberToTest As Integer, _\n    ByVal firstDivisor As Integer, _\n    ByVal isPrime As Boolean, _\n    ByVal e As Exception, _\n    ByVal canceled As Boolean, _\n    ByVal state As Object)\n\n        MyBase.New(e, canceled, state)\n        Me.numberToTestValue = numberToTest\n        Me.firstDivisorValue = firstDivisor\n        Me.isPrimeValue = isPrime\n\n    End Sub\n\n\n    Public ReadOnly Property NumberToTest() As Integer\n        Get\n            &#39; Raise an exception if the operation failed \n            &#39; or was canceled.\n            RaiseExceptionIfNecessary()\n\n            &#39; If the operation was successful, return \n            &#39; the property value.\n            Return numberToTestValue\n        End Get\n    End Property\n\n\n    Public ReadOnly Property FirstDivisor() As Integer\n        Get\n            &#39; Raise an exception if the operation failed \n            &#39; or was canceled.\n            RaiseExceptionIfNecessary()\n\n            &#39; If the operation was successful, return \n            &#39; the property value.\n            Return firstDivisorValue\n        End Get\n    End Property\n\n\n    Public ReadOnly Property IsPrime() As Boolean\n        Get\n            &#39; Raise an exception if the operation failed \n            &#39; or was canceled.\n            RaiseExceptionIfNecessary()\n\n            &#39; If the operation was successful, return \n            &#39; the property value.\n            Return isPrimeValue\n        End Get\n    End Property\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#6\">    public class CalculatePrimeCompletedEventArgs :\n        AsyncCompletedEventArgs\n    {\n        private int numberToTestValue = 0;\n        private int firstDivisorValue = 1;\n        private bool isPrimeValue;\n\n        public CalculatePrimeCompletedEventArgs(\n            int numberToTest,\n            int firstDivisor,\n            bool isPrime,\n            Exception e,\n            bool canceled,\n            object state) : base(e, canceled, state)\n        {\n            this.numberToTestValue = numberToTest;\n            this.firstDivisorValue = firstDivisor;\n            this.isPrimeValue = isPrime;\n        }\n\n        public int NumberToTest\n        {\n            get\n            {\n                // Raise an exception if the operation failed or \n                // was canceled.\n                RaiseExceptionIfNecessary();\n\n                // If the operation was successful, return the \n                // property value.\n                return numberToTestValue;\n            }\n        }\n\n        public int FirstDivisor\n        {\n            get\n            {\n                // Raise an exception if the operation failed or \n                // was canceled.\n                RaiseExceptionIfNecessary();\n\n                // If the operation was successful, return the \n                // property value.\n                return firstDivisorValue;\n            }\n        }\n\n        public bool IsPrime\n        {\n            get\n            {\n                // Raise an exception if the operation failed or \n                // was canceled.\n                RaiseExceptionIfNecessary();\n\n                // If the operation was successful, return the \n                // property value.\n                return isPrimeValue;\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.AsyncCompletedEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.AsyncCompletedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncCompletedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncCompletedEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncCompletedEventArgs.Error\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncCompletedEventArgs.UserState\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a9d6716b-0573-6166-5120-f0f8abc16310\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the MethodNameCompleted event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.ComponentModel/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.AsyncCompletedEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.AsyncCompletedEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.AsyncCompletedEventArgs.yml","open_to_public_contributors":true,"api_name":["System.ComponentModel.AsyncCompletedEventArgs","System.ComponentModel.AsyncCompletedEventArgs..ctor","System.ComponentModel.AsyncCompletedEventArgs.Cancelled","System.ComponentModel.AsyncCompletedEventArgs.Error","System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary","System.ComponentModel.AsyncCompletedEventArgs.UserState"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.AsyncCompletedEventArgs","System::ComponentModel::AsyncCompletedEventArgs","System.ComponentModel.AsyncCompletedEventArgs.#ctor","System::ComponentModel::AsyncCompletedEventArgs::#ctor","System.ComponentModel.AsyncCompletedEventArgs.Cancelled","System::ComponentModel::AsyncCompletedEventArgs::Cancelled","System.ComponentModel.AsyncCompletedEventArgs.Error","System::ComponentModel::AsyncCompletedEventArgs::Error","System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary","System::ComponentModel::AsyncCompletedEventArgs::RaiseExceptionIfNecessary","System.ComponentModel.AsyncCompletedEventArgs.UserState","System::ComponentModel::AsyncCompletedEventArgs::UserState"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a9d6716b-0573-6166-5120-f0f8abc16310","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.ComponentModel/AsyncCompletedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsyncCompletedEventArgs class | Microsoft Docs","_op_ogTitle":"AsyncCompletedEventArgs class","description":"Provides data for the MethodNameCompleted event.\n","toc_asset_id":"_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.AsyncCompletedEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.asynccompletedeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.asynccompletedeventargs","fileRelativePath":"System.ComponentModel.AsyncCompletedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}