{"content":"    \r\n    <h1 id=\"System_Collections_IComparer\">\r\n      <span class=\"lang-csharp\">IComparer</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Exposes a method that compares two objects.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IComparer</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This interface is used in conjunction with the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> and <a class=\"xref\" href=\"system.array#System_Array_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> methods. It provides a way to customize the sort order of a collection. See the <a class=\"xref\" href=\"system.collections.icomparer#System_Collections_IComparer_Compare_\" data-linktype=\"relative-path\">Compare</a> method for notes on parameters and return value.  </p>\n<p> The default implementation of this interface is the <a class=\"xref\" href=\"system.collections.comparer\" data-linktype=\"relative-path\">Comparer</a> class. For the generic version of this interface, see <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">System.Collections.Generic.IComparer&lt;T&gt;</a>.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IComparer_Compare_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Compare(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IComparer_Compare_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IComparer_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Compare (object x, object y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>x</code> is less than <code>y</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>x</code> equals <code>y</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>x</code> is greater than <code>y</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Neither <code>x</code> nor <code>y</code> implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> -or-  </p>\n<p> <code>x</code> and <code>y</code> are of different types and neither one can handle comparisons with the other.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The preferred implementation is to use the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method of one of the parameters.  </p>\n<p> Comparing <code>null</code> with any type is allowed and does not generate an exception when using <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>. When sorting, <code>null</code> is considered to be less than any other object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface to sort an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> object. In this example, the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface is implemented using the <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a>class to reverse the order of the contents of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ArrayList.Sort_2#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nref class myReverserClass: public IComparer\n{\nprivate:\n\n   // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n   virtual int Compare( Object^ x, Object^ y ) sealed = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare( y, x ));\n   }\n\n};\n\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Sorts the values of the ArrayList using the default comparer.\n   myAL-&gt;Sort();\n   Console::WriteLine( &quot;After sorting with the default comparer:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n   IComparer^ myComparer = gcnew myReverserClass;\n   myAL-&gt;Sort( myComparer );\n   Console::WriteLine( &quot;After sorting with the reverse case-insensitive comparer:&quot; );\n   PrintIndexAndValues( myAL );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\nThe ArrayList initially contains the following values:\n        [0]:    The\n        [1]:    quick\n        [2]:    brown\n        [3]:    fox\n        [4]:    jumps\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nAfter sorting with the default comparer:\n        [0]:    brown\n        [1]:    dog\n        [2]:    fox\n        [3]:    jumps\n        [4]:    lazy\n        [5]:    over\n        [6]:    quick\n        [7]:    the\n        [8]:    The\n\nAfter sorting with the reverse case-insensitive comparer:\n        [0]:    the\n        [1]:    The\n        [2]:    quick\n        [3]:    over\n        [4]:    lazy\n        [5]:    jumps\n        [6]:    fox\n        [7]:    dog\n        [8]:    brown \n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ArrayList.Sort_2#1\">using System;\nusing System.Collections;\n\npublic class SamplesArrayList  {\n \n   public class myReverserClass : IComparer  {\n\n      // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      int IComparer.Compare( Object x, Object y )  {\n          return( (new CaseInsensitiveComparer()).Compare( y, x ) );\n      }\n\n   }\n\n   public static void Main()  {\n \n      // Creates and initializes a new ArrayList.\n      ArrayList myAL = new ArrayList();\n      myAL.Add( &quot;The&quot; );\n      myAL.Add( &quot;quick&quot; );\n      myAL.Add( &quot;brown&quot; );\n      myAL.Add( &quot;fox&quot; );\n      myAL.Add( &quot;jumps&quot; );\n      myAL.Add( &quot;over&quot; );\n      myAL.Add( &quot;the&quot; );\n      myAL.Add( &quot;lazy&quot; );\n      myAL.Add( &quot;dog&quot; );\n \n      // Displays the values of the ArrayList.\n      Console.WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n      PrintIndexAndValues( myAL );\n \n      // Sorts the values of the ArrayList using the default comparer.\n      myAL.Sort();\n      Console.WriteLine( &quot;After sorting with the default comparer:&quot; );\n      PrintIndexAndValues( myAL );\n\n      // Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n      IComparer myComparer = new myReverserClass();\n      myAL.Sort( myComparer );\n      Console.WriteLine( &quot;After sorting with the reverse case-insensitive comparer:&quot; );\n      PrintIndexAndValues( myAL );\n\n   }\n \n   public static void PrintIndexAndValues( IEnumerable myList )  {\n      int i = 0;\n      foreach ( Object obj in myList )\n         Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, obj );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\nThe ArrayList initially contains the following values:\n        [0]:    The\n        [1]:    quick\n        [2]:    brown\n        [3]:    fox\n        [4]:    jumps\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nAfter sorting with the default comparer:\n        [0]:    brown\n        [1]:    dog\n        [2]:    fox\n        [3]:    jumps\n        [4]:    lazy\n        [5]:    over\n        [6]:    quick\n        [7]:    the\n        [8]:    The\n\nAfter sorting with the reverse case-insensitive comparer:\n        [0]:    the\n        [1]:    The\n        [2]:    quick\n        [3]:    over\n        [4]:    lazy\n        [5]:    jumps\n        [6]:    fox\n        [7]:    dog\n        [8]:    brown \n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ArrayList.Sort_2#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n\n   Public Class myReverserClass\n      Implements IComparer\n\n      &#39; Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      Public Function Compare( ByVal x As Object, ByVal y As Object) As Integer _\n         Implements IComparer.Compare\n         Return New CaseInsensitiveComparer().Compare(y, x)\n      End Function &#39;IComparer.Compare\n\n   End Class &#39;myReverserClass\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new ArrayList.\n      Dim myAL As New ArrayList()\n      myAL.Add(&quot;The&quot;)\n      myAL.Add(&quot;quick&quot;)\n      myAL.Add(&quot;brown&quot;)\n      myAL.Add(&quot;fox&quot;)\n      myAL.Add(&quot;jumps&quot;)\n      myAL.Add(&quot;over&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;lazy&quot;)\n      myAL.Add(&quot;dog&quot;)\n\n      &#39; Displays the values of the ArrayList.\n      Console.WriteLine(&quot;The ArrayList initially contains the following values:&quot;)\n      PrintIndexAndValues(myAL)\n\n      &#39; Sorts the values of the ArrayList using the default comparer.\n      myAL.Sort()\n      Console.WriteLine(&quot;After sorting with the default comparer:&quot;)\n      PrintIndexAndValues(myAL)\n\n      &#39; Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n      Dim myComparer = New myReverserClass()\n      myAL.Sort(myComparer)\n      Console.WriteLine(&quot;After sorting with the reverse case-insensitive comparer:&quot;)\n      PrintIndexAndValues(myAL)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintIndexAndValues(myList As IEnumerable)\n      Dim i As Integer = 0\n      Dim obj As [Object]\n      For Each obj In  myList\n         Console.WriteLine(vbTab + &quot;[{0}]:&quot; + vbTab + &quot;{1}&quot;, i, obj)\n         i = i + 1\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n\n&#39;This code produces the following output.\n&#39;The ArrayList initially contains the following values:\n&#39;        [0]:    The\n&#39;        [1]:    quick\n&#39;        [2]:    brown\n&#39;        [3]:    fox\n&#39;        [4]:    jumps\n&#39;        [5]:    over\n&#39;        [6]:    the\n&#39;        [7]:    lazy\n&#39;        [8]:    dog\n&#39;\n&#39;After sorting with the default comparer:\n&#39;        [0]:    brown\n&#39;        [1]:    dog\n&#39;        [2]:    fox\n&#39;        [3]:    jumps\n&#39;        [4]:    lazy\n&#39;        [5]:    over\n&#39;        [6]:    quick\n&#39;        [7]:    the\n&#39;        [8]:    The\n&#39;\n&#39;After sorting with the reverse case-insensitive comparer:\n&#39;        [0]:    the\n&#39;        [1]:    The\n&#39;        [2]:    quick\n&#39;        [3]:    over\n&#39;        [4]:    lazy\n&#39;        [5]:    jumps\n&#39;        [6]:    fox\n&#39;        [7]:    dog\n&#39;        [8]:    brown\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IComparer.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IComparer.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.IComparer\">\r\n<meta name=\"APIName\" content=\"System.Collections.IComparer.Compare\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e32abd27-1215-c9ba-49e6-6bc4ba5a1999\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections\\IComparer.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Exposes a method that compares two objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.IComparer\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IComparer.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IComparer.yml","open_to_public_contributors":true,"api_name":["System.Collections.IComparer","System.Collections.IComparer.Compare"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.IComparer","System::Collections::IComparer","System.Collections.IComparer.Compare","System::Collections::IComparer::Compare"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e32abd27-1215-c9ba-49e6-6bc4ba5a1999","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections\\IComparer.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/IComparer.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IComparer interface | Microsoft Docs","_op_ogTitle":"IComparer interface","description":"Exposes a method that compares two objects.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.IComparer","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.icomparer","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.icomparer","fileRelativePath":"System.Collections.IComparer.html"},"themesRelativePathToOutputRoot":"_themes/"}