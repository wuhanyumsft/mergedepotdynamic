{"content":"    \r\n    <h1 id=\"System_Windows_Forms_ControlEventArgs\">\r\n      <span class=\"lang-csharp\">ControlEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlAdded\" data-linktype=\"relative-path\">ControlAdded</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlRemoved\" data-linktype=\"relative-path\">ControlRemoved</a> events.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class ControlEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ControlEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ControlEventArgs__ctor_System_Windows_Forms_Control_\" data-linktype=\"self-bookmark\">ControlEventArgs(Control)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.controleventargs\" data-linktype=\"relative-path\">ControlEventArgs</a> class for the specified control.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_ControlEventArgs_Control\" data-linktype=\"self-bookmark\">Control</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the control object used by this event.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ControlEventArgs__ctor_System_Windows_Forms_Control_\">\r\n    \r\n            <a id=\"System_Windows_Forms_ControlEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ControlEventArgs(Control)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.controleventargs\" data-linktype=\"relative-path\">ControlEventArgs</a> class for the specified control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ControlEventArgs (System.Windows.Forms.Control control);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to store in this event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlAdded\" data-linktype=\"relative-path\">ControlAdded</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlRemoved\" data-linktype=\"relative-path\">ControlRemoved</a> events. The example requires that two <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls are added to the form and connected to the <code>addControl_Click</code> and <code>removeControl_Click</code> event handling methods.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.ControlRemoved#1\">   // This example demonstrates the use of the ControlAdded and\n   // ControlRemoved events. This example assumes that two Button controls\n   // are added to the form and connected to the addControl_Click and\n   // removeControl_Click event-handler methods.\nprivate:\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Connect the ControlRemoved and ControlAdded event handlers\n      // to the event-handler methods.\n      // ControlRemoved and ControlAdded are not available at design time.\n      this-&gt;ControlRemoved += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Removed );\n      this-&gt;ControlAdded += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Added );\n   }\n\n   void Control_Added( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been added to the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   void Control_Removed( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been removed from the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   // Click event handler for a Button control. Adds a TextBox to the form.\n   void addControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Create a new TextBox control and add it to the form.\n      TextBox^ textBox1 = gcnew TextBox;\n      textBox1-&gt;Size = System::Drawing::Size( 100, 10 );\n      textBox1-&gt;Location = Point(10,10);\n\n      // Name the control in order to remove it later. The name must be specified\n      // if a control is added at run time.\n      textBox1-&gt;Name = &quot;textBox1&quot;;\n\n      // Add the control to the form&#39;s control collection.\n      this-&gt;Controls-&gt;Add( textBox1 );\n   }\n\n   // Click event handler for a Button control.\n   // Removes the previously added TextBox from the form.\n   void removeControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Loop through all controls in the form&#39;s control collection.\n      IEnumerator^ myEnum = this-&gt;Controls-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Control^ tempCtrl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n         \n         // Determine whether the control is textBox1,\n         // and if it is, remove it.\n         if ( tempCtrl-&gt;Name-&gt;Equals( &quot;textBox1&quot; ) )\n         {\n            this-&gt;Controls-&gt;Remove( tempCtrl );\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.ControlRemoved#1\">    &#39; This example demonstrates the use of the ControlAdded and\n    &#39; ControlRemoved events. This example assumes that two Button controls \n    &#39; are added to the form and connected to the addControl_Click and \n    &#39; removeControl_Click event-handler methods.\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Connect the ControlRemoved and ControlAdded event handlers to the event-handler methods.\n        &#39; ControlRemoved and ControlAdded are not available at design time.\n        AddHandler Me.ControlRemoved, AddressOf Me.Control_Removed\n        AddHandler Me.ControlAdded, AddressOf Me.Control_Added\n    End Sub &#39;Form1_Load\n\n\n    Private Sub Control_Added(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;))\n    End Sub\n\n\n    Private Sub Control_Removed(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;))\n    End Sub\n\n\n    &#39; Click event handler for a Button control. Adds a TextBox to the form.\n    Private Sub addControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n        &#39; Create a new TextBox control and add it to the form.\n        Dim textBox1 As New TextBox()\n        textBox1.Size = New Size(100, 10)\n        textBox1.Location = New Point(10, 10)\n        &#39; Name the control in order to remove it later. \n        &#39; The name must be specified if a control is added at run time.\n        textBox1.Name = &quot;textBox1&quot;\n\n        &#39; Add the control to the form&#39;s control collection.\n        Me.Controls.Add(textBox1)\n    End Sub\n\n\n    &#39; Click event handler for a Button control.\n    &#39; Removes the previously added TextBox from the form.\n    Private Sub removeControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n        &#39; Loop through all controls in the form&#39;s control collection.\n        Dim tempCtrl As Control\n        For Each tempCtrl In Me.Controls\n            &#39; Determine whether the control is textBox1,\n            &#39; and if it is, remove it.\n            If tempCtrl.Name = &quot;textBox1&quot; Then\n                Me.Controls.Remove(tempCtrl)\n            End If\n        Next tempCtrl\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.ControlRemoved#1\">        // This example demonstrates the use of the ControlAdded and\n        // ControlRemoved events. This example assumes that two Button controls\n        // are added to the form and connected to the addControl_Click and\n        // removeControl_Click event-handler methods.\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Connect the ControlRemoved and ControlAdded event handlers\n            // to the event-handler methods.\n            // ControlRemoved and ControlAdded are not available at design time.\n            this.ControlRemoved += new System.Windows.Forms.ControlEventHandler(this.Control_Removed);\n            this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_Added);\n        }\n\n        private void Control_Added(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;);\n        }\n\n        private void Control_Removed(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;);\n        }\n\n        // Click event handler for a Button control. Adds a TextBox to the form.\n        private void addControl_Click(object sender, System.EventArgs e)\n        {\n            // Create a new TextBox control and add it to the form.\n            TextBox textBox1 = new TextBox();\n            textBox1.Size = new Size(100,10);\n            textBox1.Location = new Point(10,10);\n            // Name the control in order to remove it later. The name must be specified\n            // if a control is added at run time.\n            textBox1.Name = &quot;textBox1&quot;;\n\n            // Add the control to the form&#39;s control collection.\n            this.Controls.Add(textBox1);\n        }\n\n        // Click event handler for a Button control.\n        // Removes the previously added TextBox from the form.\n        private void removeControl_Click(object sender, System.EventArgs e)\n        {\n            // Loop through all controls in the form&#39;s control collection.\n            foreach (Control tempCtrl in this.Controls)\n            {\n                // Determine whether the control is textBox1,\n                // and if it is, remove it.\n                if (tempCtrl.Name == &quot;textBox1&quot;)\n                {\n                    this.Controls.Remove(tempCtrl);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_ControlEventArgs_Control\">\r\n    \r\n            <a id=\"System_Windows_Forms_ControlEventArgs_Control_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Control</div>        \r\n          </div>\r\n    \r\n            <p>Gets the control object used by this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Control Control { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> used by this event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlAdded\" data-linktype=\"relative-path\">ControlAdded</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlRemoved\" data-linktype=\"relative-path\">ControlRemoved</a> events. The example requires that two <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls are added to the form and connected to the <code>addControl_Click</code> and <code>removeControl_Click</code> event handling methods.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.ControlRemoved#1\">   // This example demonstrates the use of the ControlAdded and\n   // ControlRemoved events. This example assumes that two Button controls\n   // are added to the form and connected to the addControl_Click and\n   // removeControl_Click event-handler methods.\nprivate:\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Connect the ControlRemoved and ControlAdded event handlers\n      // to the event-handler methods.\n      // ControlRemoved and ControlAdded are not available at design time.\n      this-&gt;ControlRemoved += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Removed );\n      this-&gt;ControlAdded += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Added );\n   }\n\n   void Control_Added( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been added to the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   void Control_Removed( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been removed from the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   // Click event handler for a Button control. Adds a TextBox to the form.\n   void addControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Create a new TextBox control and add it to the form.\n      TextBox^ textBox1 = gcnew TextBox;\n      textBox1-&gt;Size = System::Drawing::Size( 100, 10 );\n      textBox1-&gt;Location = Point(10,10);\n\n      // Name the control in order to remove it later. The name must be specified\n      // if a control is added at run time.\n      textBox1-&gt;Name = &quot;textBox1&quot;;\n\n      // Add the control to the form&#39;s control collection.\n      this-&gt;Controls-&gt;Add( textBox1 );\n   }\n\n   // Click event handler for a Button control.\n   // Removes the previously added TextBox from the form.\n   void removeControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Loop through all controls in the form&#39;s control collection.\n      IEnumerator^ myEnum = this-&gt;Controls-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Control^ tempCtrl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n         \n         // Determine whether the control is textBox1,\n         // and if it is, remove it.\n         if ( tempCtrl-&gt;Name-&gt;Equals( &quot;textBox1&quot; ) )\n         {\n            this-&gt;Controls-&gt;Remove( tempCtrl );\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.ControlRemoved#1\">    &#39; This example demonstrates the use of the ControlAdded and\n    &#39; ControlRemoved events. This example assumes that two Button controls \n    &#39; are added to the form and connected to the addControl_Click and \n    &#39; removeControl_Click event-handler methods.\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Connect the ControlRemoved and ControlAdded event handlers to the event-handler methods.\n        &#39; ControlRemoved and ControlAdded are not available at design time.\n        AddHandler Me.ControlRemoved, AddressOf Me.Control_Removed\n        AddHandler Me.ControlAdded, AddressOf Me.Control_Added\n    End Sub &#39;Form1_Load\n\n\n    Private Sub Control_Added(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;))\n    End Sub\n\n\n    Private Sub Control_Removed(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;))\n    End Sub\n\n\n    &#39; Click event handler for a Button control. Adds a TextBox to the form.\n    Private Sub addControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n        &#39; Create a new TextBox control and add it to the form.\n        Dim textBox1 As New TextBox()\n        textBox1.Size = New Size(100, 10)\n        textBox1.Location = New Point(10, 10)\n        &#39; Name the control in order to remove it later. \n        &#39; The name must be specified if a control is added at run time.\n        textBox1.Name = &quot;textBox1&quot;\n\n        &#39; Add the control to the form&#39;s control collection.\n        Me.Controls.Add(textBox1)\n    End Sub\n\n\n    &#39; Click event handler for a Button control.\n    &#39; Removes the previously added TextBox from the form.\n    Private Sub removeControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n        &#39; Loop through all controls in the form&#39;s control collection.\n        Dim tempCtrl As Control\n        For Each tempCtrl In Me.Controls\n            &#39; Determine whether the control is textBox1,\n            &#39; and if it is, remove it.\n            If tempCtrl.Name = &quot;textBox1&quot; Then\n                Me.Controls.Remove(tempCtrl)\n            End If\n        Next tempCtrl\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.ControlRemoved#1\">        // This example demonstrates the use of the ControlAdded and\n        // ControlRemoved events. This example assumes that two Button controls\n        // are added to the form and connected to the addControl_Click and\n        // removeControl_Click event-handler methods.\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Connect the ControlRemoved and ControlAdded event handlers\n            // to the event-handler methods.\n            // ControlRemoved and ControlAdded are not available at design time.\n            this.ControlRemoved += new System.Windows.Forms.ControlEventHandler(this.Control_Removed);\n            this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_Added);\n        }\n\n        private void Control_Added(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;);\n        }\n\n        private void Control_Removed(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;);\n        }\n\n        // Click event handler for a Button control. Adds a TextBox to the form.\n        private void addControl_Click(object sender, System.EventArgs e)\n        {\n            // Create a new TextBox control and add it to the form.\n            TextBox textBox1 = new TextBox();\n            textBox1.Size = new Size(100,10);\n            textBox1.Location = new Point(10,10);\n            // Name the control in order to remove it later. The name must be specified\n            // if a control is added at run time.\n            textBox1.Name = &quot;textBox1&quot;;\n\n            // Add the control to the form&#39;s control collection.\n            this.Controls.Add(textBox1);\n        }\n\n        // Click event handler for a Button control.\n        // Removes the previously added TextBox from the form.\n        private void removeControl_Click(object sender, System.EventArgs e)\n        {\n            // Loop through all controls in the form&#39;s control collection.\n            foreach (Control tempCtrl in this.Controls)\n            {\n                // Determine whether the control is textBox1,\n                // and if it is, remove it.\n                if (tempCtrl.Name == &quot;textBox1&quot;)\n                {\n                    this.Controls.Remove(tempCtrl);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.ControlEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.ControlEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ControlEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ControlEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ControlEventArgs.Control\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"98944138-84f5-3ae8-14e9-a86bea324d68\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  and  events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.ControlEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.ControlEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.ControlEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.ControlEventArgs","System.Windows.Forms.ControlEventArgs..ctor","System.Windows.Forms.ControlEventArgs.Control"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.ControlEventArgs","System::Windows::Forms::ControlEventArgs","System.Windows.Forms.ControlEventArgs.#ctor","System::Windows::Forms::ControlEventArgs::#ctor","System.Windows.Forms.ControlEventArgs.Control","System::Windows::Forms::ControlEventArgs::Control"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"98944138-84f5-3ae8-14e9-a86bea324d68","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/ControlEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ControlEventArgs class | Microsoft Docs","_op_ogTitle":"ControlEventArgs class","description":"Provides data for the  and  events.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.ControlEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.controleventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.controleventargs","fileRelativePath":"System.Windows.Forms.ControlEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}