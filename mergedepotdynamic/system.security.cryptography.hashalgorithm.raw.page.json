{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_HashAlgorithm\">\r\n      <span class=\"lang-csharp\">HashAlgorithm</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the base class from which all implementations of cryptographic hash algorithms must derive.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HashAlgorithm</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Hash functions are fundamental to modern cryptography. These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Hash functions are commonly used with digital signatures and for data integrity.  </p>\n<p> The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm__ctor\" data-linktype=\"self-bookmark\">HashAlgorithm()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_HashSizeValue\" data-linktype=\"self-bookmark\">HashSizeValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the size, in bits, of the computed hash code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_HashValue\" data-linktype=\"self-bookmark\">HashValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the value of the computed hash code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_State\" data-linktype=\"self-bookmark\">State</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the state of the hash computation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_CanReuseTransform\" data-linktype=\"self-bookmark\">CanReuseTransform</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current transform can be reused.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_CanTransformMultipleBlocks\" data-linktype=\"self-bookmark\">CanTransformMultipleBlocks</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_Hash\" data-linktype=\"self-bookmark\">Hash</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the computed hash code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_HashSize\" data-linktype=\"self-bookmark\">HashSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size, in bits, of the computed hash code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_InputBlockSize\" data-linktype=\"self-bookmark\">InputBlockSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the input block size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_OutputBlockSize\" data-linktype=\"self-bookmark\">OutputBlockSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the output block size.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_Byte___\" data-linktype=\"self-bookmark\">ComputeHash(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the hash value for the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_IO_Stream_\" data-linktype=\"self-bookmark\">ComputeHash(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the hash value for the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ComputeHash(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the hash value for the specified region of the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_Create\" data-linktype=\"self-bookmark\">Create()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of the default implementation of a hash algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_Create_System_String_\" data-linktype=\"self-bookmark\">Create(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of the specified implementation of a hash algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_HashCore_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">HashCore(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_HashFinal\" data-linktype=\"self-bookmark\">HashFinal()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_Initialize\" data-linktype=\"self-bookmark\">Initialize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes an implementation of the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_TransformBlock_System_Byte___System_Int32_System_Int32_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">TransformBlock(Byte[],Int32,Int32,Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_HashAlgorithm_TransformFinalBlock_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">TransformFinalBlock(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the hash value for the specified region of the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashAlgorithm()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected HashAlgorithm ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_HashSizeValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashSizeValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the size, in bits, of the computed hash code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int HashSizeValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The hash algorithm specifies the size of the hash code. For example, <a class=\"xref\" href=\"system.security.cryptography.sha1\" data-linktype=\"relative-path\">SHA1</a> uses a hash size of 160 bits.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashSize_\" data-linktype=\"relative-path\">HashSize</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_HashValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the value of the computed hash code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected byte[] HashValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Hash_\" data-linktype=\"relative-path\">Hash</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_State\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">State</div>        \r\n          </div>\r\n    \r\n            <p>Represents the state of the hash computation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int State;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is used to prevent users from changing the key of a keyed hash algorithm during a hash operation. When a key change is legitimate, the value of this field is zero both before and after a hash operation. When a key change is not legitimate, the value of this field is nonzero.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_CanReuseTransform\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_CanReuseTransform_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanReuseTransform</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current transform can be reused.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CanReuseTransform { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Always <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_CanTransformMultipleBlocks\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_CanTransformMultipleBlocks_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanTransformMultipleBlocks</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CanTransformMultipleBlocks { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if multiple blocks can be transformed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_Hash\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_Hash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hash</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the computed hash code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] Hash { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The current value of the computed hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicunexpectedoperationexception\" data-linktype=\"relative-path\">CryptographicUnexpectedOperationException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashValue\" data-linktype=\"relative-path\">HashValue</a> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Hash property is a byte array; the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashSize_\" data-linktype=\"relative-path\">HashSize</a> property is a value that represent bits. Therefore, the number of elements in Hash is one-eighth the size of <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashSize_\" data-linktype=\"relative-path\">HashSize</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_HashSize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_HashSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size, in bits, of the computed hash code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int HashSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size, in bits, of the computed hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_InputBlockSize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_InputBlockSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputBlockSize</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the input block size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int InputBlockSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The input block size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unless overridden, this property returns the value 1.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_OutputBlockSize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_OutputBlockSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutputBlockSize</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the output block size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int OutputBlockSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The output block size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unless overridden, this property returns the value 1.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_Clear\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is a simple call to the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method.  </p>\n<p> Calling <code>Dispose</code> allows the resources used by the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class to be reallocated for other purposes. For more information about <code>Dispose</code>, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_ComputeHash_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_ComputeHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ComputeHash(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Computes the hash value for the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] ComputeHash (byte[] buffer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input to compute the hash code for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The computed hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example computes the <a class=\"xref\" href=\"system.security.cryptography.md5\" data-linktype=\"relative-path\">MD5</a> hash value of a string and returns the hash as a 32-character, hexadecimal-formatted string.  The hash string created by this code example is compatible with any MD5 hash function (on any platform) that creates a 32-character, hexadecimal-formatted hash string.  </p>\n<pre><code class=\"lang-vb\" name=\"Security.Cryptography.MD5#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\n\nClass Program\n\n    Shared Sub Main(ByVal args() As String)\n        Dim [source] As String = &quot;Hello World!&quot;\n        Using md5Hash As MD5 = MD5.Create()\n\n            Dim hash As String = GetMd5Hash(md5Hash, source)\n\n            Console.WriteLine(&quot;The MD5 hash of &quot; + source + &quot; is: &quot; + hash + &quot;.&quot;)\n\n            Console.WriteLine(&quot;Verifying the hash...&quot;)\n\n            If VerifyMd5Hash(md5Hash, [source], hash) Then\n                Console.WriteLine(&quot;The hashes are the same.&quot;)\n            Else\n                Console.WriteLine(&quot;The hashes are not same.&quot;)\n            End If\n        End Using\n    End Sub &#39;Main\n\n\n\n    Shared Function GetMd5Hash(ByVal md5Hash As MD5, ByVal input As String) As String\n\n        &#39; Convert the input string to a byte array and compute the hash.\n        Dim data As Byte() = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input))\n\n        &#39; Create a new Stringbuilder to collect the bytes\n        &#39; and create a string.\n        Dim sBuilder As New StringBuilder()\n\n        &#39; Loop through each byte of the hashed data \n        &#39; and format each one as a hexadecimal string.\n        Dim i As Integer\n        For i = 0 To data.Length - 1\n            sBuilder.Append(data(i).ToString(&quot;x2&quot;))\n        Next i\n\n        &#39; Return the hexadecimal string.\n        Return sBuilder.ToString()\n\n    End Function &#39;GetMd5Hash\n\n\n    &#39; Verify a hash against a string.\n    Shared Function VerifyMd5Hash(ByVal md5Hash As MD5, ByVal input As String, ByVal hash As String) As Boolean\n        &#39; Hash the input.\n        Dim hashOfInput As String = GetMd5Hash(md5Hash, input)\n\n        &#39; Create a StringComparer an compare the hashes.\n        Dim comparer As StringComparer = StringComparer.OrdinalIgnoreCase\n\n        If 0 = comparer.Compare(hashOfInput, hash) Then\n            Return True\n        Else\n            Return False\n        End If\n\n    End Function &#39;VerifyMd5Hash\nEnd Class &#39;Program \n&#39; This code example produces the following output:\n&#39;\n&#39; The MD5 hash of Hello World! is: ed076287532e86365e841e92bfc50d8c.\n&#39; Verifying the hash...\n&#39; The hashes are the same.\n</code></pre><pre><code class=\"lang-cs\" name=\"Security.Cryptography.MD5#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace MD5Sample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string source = &quot;Hello World!&quot;;\n            using (MD5 md5Hash = MD5.Create())\n            {\n                string hash = GetMd5Hash(md5Hash, source);\n\n                Console.WriteLine(&quot;The MD5 hash of &quot; + source + &quot; is: &quot; + hash + &quot;.&quot;);\n\n                Console.WriteLine(&quot;Verifying the hash...&quot;);\n\n                if (VerifyMd5Hash(md5Hash, source, hash))\n                {\n                    Console.WriteLine(&quot;The hashes are the same.&quot;);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The hashes are not same.&quot;);\n                }\n            }\n\n\n\n        }\n        static string GetMd5Hash(MD5 md5Hash, string input)\n        {\n\n            // Convert the input string to a byte array and compute the hash.\n            byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));\n\n            // Create a new Stringbuilder to collect the bytes\n            // and create a string.\n            StringBuilder sBuilder = new StringBuilder();\n\n            // Loop through each byte of the hashed data \n            // and format each one as a hexadecimal string.\n            for (int i = 0; i &lt; data.Length; i++)\n            {\n                sBuilder.Append(data[i].ToString(&quot;x2&quot;));\n            }\n\n            // Return the hexadecimal string.\n            return sBuilder.ToString();\n        }\n\n        // Verify a hash against a string.\n        static bool VerifyMd5Hash(MD5 md5Hash, string input, string hash)\n        {\n            // Hash the input.\n            string hashOfInput = GetMd5Hash(md5Hash, input);\n\n            // Create a StringComparer an compare the hashes.\n            StringComparer comparer = StringComparer.OrdinalIgnoreCase;\n\n            if (0 == comparer.Compare(hashOfInput, hash))\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n    }\n}\n\n// This code example produces the following output:\n//\n// The MD5 hash of Hello World! is: ed076287532e86365e841e92bfc50d8c.\n// Verifying the hash...\n// The hashes are the same.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_ComputeHash_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_ComputeHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ComputeHash(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the hash value for the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] ComputeHash (System.IO.Stream inputStream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input to compute the hash code for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The computed hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calculates the <a class=\"xref\" href=\"system.security.cryptography.ripemd160\" data-linktype=\"relative-path\">RIPEMD160</a> hash for all files in a directory.  </p>\n<pre><code class=\"lang-cpp\" name=\"RIPEMD160#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\n\n// Print the byte array in a readable format.\nvoid PrintByteArray( array&lt;Byte&gt;^array )\n{\n   int i;\n   for ( i = 0; i &lt; array-&gt;Length; i++ )\n   {\n      Console::Write( String::Format( &quot;{0:X2}&quot;, array[ i ] ) );\n      if ( (i % 4) == 3 )\n            Console::Write( &quot; &quot; );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: hashdir &lt;directory&gt;&quot; );\n      return 0;\n   }\n\n   try\n   {\n      \n      // Create a DirectoryInfo object representing the specified directory.\n      DirectoryInfo^ dir = gcnew DirectoryInfo( args[ 1 ] );\n      \n      // Get the FileInfo objects for every file in the directory.\n      array&lt;FileInfo^&gt;^files = dir-&gt;GetFiles();\n      \n      // Initialize a RIPE160 hash object.\n      RIPEMD160 ^ myRIPEMD160 = RIPEMD160Managed::Create();\n      array&lt;Byte&gt;^hashValue;\n      \n      // Compute and print the hash values for each file in directory.\n      System::Collections::IEnumerator^ myEnum = files-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         FileInfo^ fInfo = safe_cast&lt;FileInfo^&gt;(myEnum-&gt;Current);\n         \n         // Create a fileStream for the file.\n         FileStream^ fileStream = fInfo-&gt;Open( FileMode::Open );\n         \n         // Compute the hash of the fileStream.\n         hashValue = myRIPEMD160-&gt;ComputeHash( fileStream );\n         \n         // Write the name of the file to the Console.\n         Console::Write( &quot;{0}: &quot;, fInfo-&gt;Name );\n         \n         // Write the hash value to the Console.\n         PrintByteArray( hashValue );\n         \n         // Close the file.\n         fileStream-&gt;Close();\n      }\n      return 0;\n   }\n   catch ( DirectoryNotFoundException^ ) \n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ ) \n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RIPEMD160#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\nImports System.Windows.Forms\n\nPublic Class HashDirectory\n\n    Public Shared Sub Main(ByVal args() As String)\n        Dim directory As String\n        If args.Length &lt; 1 Then\n            Dim fdb As New FolderBrowserDialog\n            Dim dr As DialogResult = fdb.ShowDialog()\n            If (dr = DialogResult.OK) Then\n                directory = fdb.SelectedPath\n            Else\n                Console.WriteLine(&quot;No directory selected&quot;)\n                Return\n            End If\n        Else\n            directory = args(0)\n        End If\n        Try\n            &#39; Create a DirectoryInfo object representing the specified directory.\n            Dim dir As New DirectoryInfo(directory)\n            &#39; Get the FileInfo objects for every file in the directory.\n            Dim files As FileInfo() = dir.GetFiles()\n            &#39; Initialize a RIPE160 hash object.\n            Dim myRIPEMD160 As RIPEMD160 = RIPEMD160Managed.Create()\n            Dim hashValue() As Byte\n            &#39; Compute and print the hash values for each file in directory.\n            Dim fInfo As FileInfo\n            For Each fInfo In files\n                &#39; Create a fileStream for the file.\n                Dim fileStream As FileStream = fInfo.Open(FileMode.Open)\n                &#39; Be sure it&#39;s positioned to the beginning of the stream.\n                fileStream.Position = 0\n                &#39; Compute the hash of the fileStream.\n                hashValue = myRIPEMD160.ComputeHash(fileStream)\n                &#39; Write the name of the file to the Console.\n                Console.Write(fInfo.Name + &quot;: &quot;)\n                &#39; Write the hash value to the Console.\n                PrintByteArray(hashValue)\n                &#39; Close the file.\n                fileStream.Close()\n            Next fInfo\n            Return\n        Catch DExc As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch IOExc As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        End Try\n\n    End Sub\n\n    &#39; Print the byte array in a readable format.\n    Public Shared Sub PrintByteArray(ByVal array() As Byte)\n        Dim i As Integer\n        For i = 0 To array.Length - 1\n            Console.Write(String.Format(&quot;{0:X2}&quot;, array(i)))\n            If i Mod 4 = 3 Then\n                Console.Write(&quot; &quot;)\n            End If\n        Next i\n        Console.WriteLine()\n\n    End Sub &#39;PrintByteArray\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"RIPEMD160#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Windows.Forms;\n\npublic class HashDirectory\n{\n\n    [STAThreadAttribute]\n    public static void Main(String[] args)\n    {\n        string directory = &quot;&quot;;\n        if (args.Length &lt; 1)\n        {\n            FolderBrowserDialog fbd = new FolderBrowserDialog();\n            DialogResult dr = fbd.ShowDialog();\n            if (dr == DialogResult.OK)\n                directory = fbd.SelectedPath;\n            else\n            {\n                Console.WriteLine(&quot;No directory selected.&quot;);\n                return;\n            }\n        }\n        else\n            directory = args[0];\n        try\n        {\n            // Create a DirectoryInfo object representing the specified directory.\n            DirectoryInfo dir = new DirectoryInfo(directory);\n            // Get the FileInfo objects for every file in the directory.\n            FileInfo[] files = dir.GetFiles();\n            // Initialize a RIPE160 hash object.\n            RIPEMD160 myRIPEMD160 = RIPEMD160Managed.Create();\n            byte[] hashValue;\n            // Compute and print the hash values for each file in directory.\n            foreach (FileInfo fInfo in files)\n            {\n                // Create a fileStream for the file.\n                FileStream fileStream = fInfo.Open(FileMode.Open);\n                // Be sure it&#39;s positioned to the beginning of the stream.\n                fileStream.Position = 0;\n                // Compute the hash of the fileStream.\n                hashValue = myRIPEMD160.ComputeHash(fileStream);\n                // Write the name of the file to the Console.\n                Console.Write(fInfo.Name + &quot;: &quot;);\n                // Write the hash value to the Console.\n                PrintByteArray(hashValue);\n                // Close the file.\n                fileStream.Close();\n            }\n            return;\n        }\n        catch (DirectoryNotFoundException)\n        {\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n        }\n        catch (IOException)\n        {\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n        }\n    }\n    // Print the byte array in a readable format.\n    public static void PrintByteArray(byte[] array)\n    {\n        int i;\n        for (i = 0; i &lt; array.Length; i++)\n        {\n            Console.Write(String.Format(&quot;{0:X2}&quot;, array[i]));\n            if ((i % 4) == 3) Console.Write(&quot; &quot;);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_ComputeHash_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_ComputeHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ComputeHash(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the hash value for the specified region of the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] ComputeHash (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input to compute the hash code for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the byte array from which to begin using data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the array to use as data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The computed hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is an invalid value.  </p>\n<p> -or-  </p>\n<p> <code>buffer</code> length is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> is out of range. This parameter requires a non-negative number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_Create\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of the default implementation of a hash algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.HashAlgorithm Create ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.security.cryptography.sha1cryptoserviceprovider\" data-linktype=\"relative-path\">SHA1CryptoServiceProvider</a> instance, unless the default settings have been changed using the .</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, this overload uses the <a class=\"xref\" href=\"system.security.cryptography.sha1cryptoserviceprovider\" data-linktype=\"relative-path\">SHA1CryptoServiceProvider</a> implementation of a hash algorithm. If you want to specify a different implementation, use the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_Create_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of the specified implementation of a hash algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.HashAlgorithm Create (string hashName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm implementation to use. The following table shows the valid values for the <code>hashName</code> parameter and the algorithms they map to.  </p>\n <table><thead><tr><th> Parameter value<br>\n </th><th> Implements<br>\n </th></tr></thead><tbody><tr><td> SHA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha1cryptoserviceprovider\" data-linktype=\"relative-path\">SHA1CryptoServiceProvider</a></td></tr><tr><td> SHA1<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha1cryptoserviceprovider\" data-linktype=\"relative-path\">SHA1CryptoServiceProvider</a></td></tr><tr><td> System.Security.Cryptography.SHA1<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha1cryptoserviceprovider\" data-linktype=\"relative-path\">SHA1CryptoServiceProvider</a></td></tr><tr><td> System.Security.Cryptography.HashAlgorithm<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha1cryptoserviceprovider\" data-linktype=\"relative-path\">SHA1CryptoServiceProvider</a></td></tr><tr><td> MD5<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.md5cryptoserviceprovider\" data-linktype=\"relative-path\">MD5CryptoServiceProvider</a></td></tr><tr><td> System.Security.Cryptography.MD5<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.md5cryptoserviceprovider\" data-linktype=\"relative-path\">MD5CryptoServiceProvider</a></td></tr><tr><td> SHA256<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha256managed\" data-linktype=\"relative-path\">SHA256Managed</a></td></tr><tr><td> SHA-256<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha256managed\" data-linktype=\"relative-path\">SHA256Managed</a></td></tr><tr><td> System.Security.Cryptography.SHA256<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha256managed\" data-linktype=\"relative-path\">SHA256Managed</a></td></tr><tr><td> SHA384<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha384managed\" data-linktype=\"relative-path\">SHA384Managed</a></td></tr><tr><td> SHA-384<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha384managed\" data-linktype=\"relative-path\">SHA384Managed</a></td></tr><tr><td> System.Security.Cryptography.SHA384<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha384managed\" data-linktype=\"relative-path\">SHA384Managed</a></td></tr><tr><td> SHA512<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha512managed\" data-linktype=\"relative-path\">SHA512Managed</a></td></tr><tr><td> SHA-512<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha512managed\" data-linktype=\"relative-path\">SHA512Managed</a></td></tr><tr><td> System.Security.Cryptography.SHA512<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.sha512managed\" data-linktype=\"relative-path\">SHA512Managed</a></td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a></div>\r\n                  </div>\r\n                  <p>A new instance of the specified hash algorithm, or <code>null</code> if <code>hashName</code> is not a valid hash algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_Dispose\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code> method and the <code>Finalize</code> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <code>Finalize</code> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_HashCore_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_HashCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashCore(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected abstract void HashCore (byte[] array, int ibStart, int cbSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input to compute the hash code for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ibStart</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the byte array from which to begin using data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cbSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the byte array to use as data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not called by application code.  </p>\n<p> This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_HashFinal\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_HashFinal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashFinal()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected abstract byte[] HashFinal ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The computed hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method finalizes any partial computation and returns the correct hash value for the data stream.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_Initialize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_Initialize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initialize()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes an implementation of the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void Initialize ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_TransformBlock_System_Byte___System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_TransformBlock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransformBlock(Byte[],Int32,Int32,Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputBuffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input to compute the hash code for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputOffset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the input byte array from which to begin using data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the input byte array to use as data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outputBuffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A copy of the part of the input array used to compute the hash code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outputOffset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the output byte array from which to begin writing data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>inputCount</code> uses an invalid value.  </p>\n<p> -or-  </p>\n<p> <code>inputBuffer</code> has an invalid length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inputBuffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>inputOffset</code> is out of range. This parameter requires a non-negative number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must call the TransformBlock method before calling the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformFinalBlock_\" data-linktype=\"relative-path\">TransformFinalBlock</a> method. You must call both methods before you retrieve the final hash value.  </p>\n<p> To retrieve the final hash value after calling the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformFinalBlock_\" data-linktype=\"relative-path\">TransformFinalBlock</a> method, get the byte array contained within the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Hash_\" data-linktype=\"relative-path\">Hash</a> property.  </p>\n<p> Calling the TransformBlock method with different input and output arrays results in an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code examples use the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformFinalBlock_\" data-linktype=\"relative-path\">TransformFinalBlock</a> method with the TransformBlock method to hash a string.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.HashAlgorithm.TransformFinalBlock#1\">\nImports System\nImports System.Text\nImports System.Security.Cryptography\n\nClass Program\n\n\tPublic Shared Sub Main()\n\t\tDim rnd As RandomNumberGenerator = RandomNumberGenerator.Create\n\t\tDim input() As Byte = New Byte((20) - 1) {}\n\t\trnd.GetBytes(input)\n\t\tConsole.WriteLine(&quot;Input        : {0}&quot;&amp; vbLf, BytesToStr(input))\n\t\tPrintHash(input)\n\t\tPrintHashOneBlock(input)\n\t\tPrintHashMultiBlock(input, 1)\n\t\tPrintHashMultiBlock(input, 2)\n\t\tPrintHashMultiBlock(input, 3)\n\t\tPrintHashMultiBlock(input, 5)\n\t\tPrintHashMultiBlock(input, 10)\n\t\tPrintHashMultiBlock(input, 11)\n\t\tPrintHashMultiBlock(input, 19)\n\t\tPrintHashMultiBlock(input, 20)\n\t\tPrintHashMultiBlock(input, 21)\n\tEnd Sub\n\n\tPublic Shared Function BytesToStr(ByVal bytes() As Byte) As String\n\t\tDim str As StringBuilder = New StringBuilder\n\t\tDim i As Integer = 0\n\t\tDo While (i &lt; bytes.Length)\n\t\tstr.AppendFormat(&quot;{0:X2}&quot;, bytes(i))\n\t\ti = (i + 1)\n\t\tLoop\n\t\tReturn str.ToString\n\tEnd Function\n\n\tPublic Shared Sub PrintHash(ByVal input() As Byte)\n\t\tDim sha As SHA256Managed = New SHA256Managed\n\t\tConsole.WriteLine(&quot;ComputeHash  : {0}&quot;, BytesToStr(sha.ComputeHash(input)))\n\tEnd Sub\n\n\tPublic Shared Sub PrintHashOneBlock(ByVal input() As Byte)\n\t\tDim sha As SHA256Managed = New SHA256Managed\n\t\tsha.TransformFinalBlock(input, 0, input.Length)\n\t\tConsole.WriteLine(&quot;FinalBlock   : {0}&quot;, BytesToStr(sha.Hash))\n\tEnd Sub\n\n\tPublic Shared Sub PrintHashMultiBlock(ByVal input() As Byte, ByVal size As Integer)\n\t\tDim sha As SHA256Managed = New SHA256Managed\n\t\tDim offset As Integer = 0\n\n\t\tWhile ((input.Length - offset)  _\n\t\t\t&gt;= size)\n\t\toffset = (offset + sha.TransformBlock(input, offset, size, input, offset))\n\n\t\tEnd While\n\t\tsha.TransformFinalBlock(input, offset, (input.Length - offset))\n\t\tConsole.WriteLine(&quot;MultiBlock {0:00}: {1}&quot;, size, BytesToStr(sha.Hash))\n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.HashAlgorithm.TransformFinalBlock#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass MainClass\n{\n\tpublic static void Main()\n\t{\n\t\tRandomNumberGenerator rnd = RandomNumberGenerator.Create();\n\n\t\tbyte[] input = new byte[20];\n\t\trnd.GetBytes(input);\n\n\t\tConsole.WriteLine(&quot;Input        : {0}<br>&quot;, BytesToStr(input));\n\t\tPrintHash(input);\n\t\tPrintHashOneBlock(input);\n\t\tPrintHashMultiBlock(input, 1);\n\t\tPrintHashMultiBlock(input, 2);\n\t\tPrintHashMultiBlock(input, 3);\n\t\tPrintHashMultiBlock(input, 5);\n\t\tPrintHashMultiBlock(input, 10);\n\t\tPrintHashMultiBlock(input, 11);\n\t\tPrintHashMultiBlock(input, 19);\n\t\tPrintHashMultiBlock(input, 20);\n\t\tPrintHashMultiBlock(input, 21);\n\t}\n\n\tpublic static string BytesToStr(byte[] bytes)\n\t{\n\t\tStringBuilder str = new StringBuilder();\n\n\t\tfor (int i = 0; i &lt; bytes.Length; i++)\n\t\t\tstr.AppendFormat(&quot;{0:X2}&quot;, bytes[i]);\n\n\t\treturn str.ToString();\n\t}\n\n\tpublic static void PrintHash(byte[] input)\n\t{\n\t\tSHA256Managed sha = new SHA256Managed();\n\t\tConsole.WriteLine(&quot;ComputeHash  : {0}&quot;, BytesToStr(sha.ComputeHash(input)));\n\t}\n\n\tpublic static void PrintHashOneBlock(byte[] input)\n\t{\n\t\tSHA256Managed sha = new SHA256Managed();\n\t\tsha.TransformFinalBlock(input, 0, input.Length);\n\t\tConsole.WriteLine(&quot;FinalBlock   : {0}&quot;, BytesToStr(sha.Hash));\n\t}\n\n\tpublic static void PrintHashMultiBlock(byte[] input, int size)\n\t{\n\t\tSHA256Managed sha = new SHA256Managed();\n\t\tint offset = 0;\n\n\t\twhile (input.Length - offset &gt;= size)\n\t\t\toffset += sha.TransformBlock(input, offset, size, input, offset);\n\n\t\tsha.TransformFinalBlock(input, offset, input.Length - offset);\n\t\tConsole.WriteLine(&quot;MultiBlock {0:00}: {1}&quot;, size, BytesToStr(sha.Hash));\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_HashAlgorithm_TransformFinalBlock_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_HashAlgorithm_TransformFinalBlock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransformFinalBlock(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the hash value for the specified region of the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputBuffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input to compute the hash code for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputOffset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the byte array from which to begin using data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the byte array to use as data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array that is a copy of the part of the input that is hashed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>inputCount</code> uses an invalid value.  </p>\n<p> -or-  </p>\n<p> <code>inputBuffer</code> has an invalid offset length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inputBuffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>inputOffset</code> is out of range. This parameter requires a non-negative number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must call the TransformFinalBlock method after calling the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformBlock_\" data-linktype=\"relative-path\">TransformBlock</a> method but before you retrieve the final hash value.  </p>\n<p> Note that the return value of this method is not the hash value, but only a copy of the hashed part of the input data.  To retrieve the final hashed value after calling the TransformFinalBlock method, get the byte array contained in the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Hash_\" data-linktype=\"relative-path\">Hash</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code examples use the TransformFinalBlock method with the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformBlock_\" data-linktype=\"relative-path\">TransformBlock</a> method to hash a string.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.HashAlgorithm.TransformFinalBlock#1\">\nImports System\nImports System.Text\nImports System.Security.Cryptography\n\nClass Program\n\n\tPublic Shared Sub Main()\n\t\tDim rnd As RandomNumberGenerator = RandomNumberGenerator.Create\n\t\tDim input() As Byte = New Byte((20) - 1) {}\n\t\trnd.GetBytes(input)\n\t\tConsole.WriteLine(&quot;Input        : {0}&quot;&amp; vbLf, BytesToStr(input))\n\t\tPrintHash(input)\n\t\tPrintHashOneBlock(input)\n\t\tPrintHashMultiBlock(input, 1)\n\t\tPrintHashMultiBlock(input, 2)\n\t\tPrintHashMultiBlock(input, 3)\n\t\tPrintHashMultiBlock(input, 5)\n\t\tPrintHashMultiBlock(input, 10)\n\t\tPrintHashMultiBlock(input, 11)\n\t\tPrintHashMultiBlock(input, 19)\n\t\tPrintHashMultiBlock(input, 20)\n\t\tPrintHashMultiBlock(input, 21)\n\tEnd Sub\n\n\tPublic Shared Function BytesToStr(ByVal bytes() As Byte) As String\n\t\tDim str As StringBuilder = New StringBuilder\n\t\tDim i As Integer = 0\n\t\tDo While (i &lt; bytes.Length)\n\t\tstr.AppendFormat(&quot;{0:X2}&quot;, bytes(i))\n\t\ti = (i + 1)\n\t\tLoop\n\t\tReturn str.ToString\n\tEnd Function\n\n\tPublic Shared Sub PrintHash(ByVal input() As Byte)\n\t\tDim sha As SHA256Managed = New SHA256Managed\n\t\tConsole.WriteLine(&quot;ComputeHash  : {0}&quot;, BytesToStr(sha.ComputeHash(input)))\n\tEnd Sub\n\n\tPublic Shared Sub PrintHashOneBlock(ByVal input() As Byte)\n\t\tDim sha As SHA256Managed = New SHA256Managed\n\t\tsha.TransformFinalBlock(input, 0, input.Length)\n\t\tConsole.WriteLine(&quot;FinalBlock   : {0}&quot;, BytesToStr(sha.Hash))\n\tEnd Sub\n\n\tPublic Shared Sub PrintHashMultiBlock(ByVal input() As Byte, ByVal size As Integer)\n\t\tDim sha As SHA256Managed = New SHA256Managed\n\t\tDim offset As Integer = 0\n\n\t\tWhile ((input.Length - offset)  _\n\t\t\t&gt;= size)\n\t\toffset = (offset + sha.TransformBlock(input, offset, size, input, offset))\n\n\t\tEnd While\n\t\tsha.TransformFinalBlock(input, offset, (input.Length - offset))\n\t\tConsole.WriteLine(&quot;MultiBlock {0:00}: {1}&quot;, size, BytesToStr(sha.Hash))\n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.HashAlgorithm.TransformFinalBlock#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass MainClass\n{\n\tpublic static void Main()\n\t{\n\t\tRandomNumberGenerator rnd = RandomNumberGenerator.Create();\n\n\t\tbyte[] input = new byte[20];\n\t\trnd.GetBytes(input);\n\n\t\tConsole.WriteLine(&quot;Input        : {0}<br>&quot;, BytesToStr(input));\n\t\tPrintHash(input);\n\t\tPrintHashOneBlock(input);\n\t\tPrintHashMultiBlock(input, 1);\n\t\tPrintHashMultiBlock(input, 2);\n\t\tPrintHashMultiBlock(input, 3);\n\t\tPrintHashMultiBlock(input, 5);\n\t\tPrintHashMultiBlock(input, 10);\n\t\tPrintHashMultiBlock(input, 11);\n\t\tPrintHashMultiBlock(input, 19);\n\t\tPrintHashMultiBlock(input, 20);\n\t\tPrintHashMultiBlock(input, 21);\n\t}\n\n\tpublic static string BytesToStr(byte[] bytes)\n\t{\n\t\tStringBuilder str = new StringBuilder();\n\n\t\tfor (int i = 0; i &lt; bytes.Length; i++)\n\t\t\tstr.AppendFormat(&quot;{0:X2}&quot;, bytes[i]);\n\n\t\treturn str.ToString();\n\t}\n\n\tpublic static void PrintHash(byte[] input)\n\t{\n\t\tSHA256Managed sha = new SHA256Managed();\n\t\tConsole.WriteLine(&quot;ComputeHash  : {0}&quot;, BytesToStr(sha.ComputeHash(input)));\n\t}\n\n\tpublic static void PrintHashOneBlock(byte[] input)\n\t{\n\t\tSHA256Managed sha = new SHA256Managed();\n\t\tsha.TransformFinalBlock(input, 0, input.Length);\n\t\tConsole.WriteLine(&quot;FinalBlock   : {0}&quot;, BytesToStr(sha.Hash));\n\t}\n\n\tpublic static void PrintHashMultiBlock(byte[] input, int size)\n\t{\n\t\tSHA256Managed sha = new SHA256Managed();\n\t\tint offset = 0;\n\n\t\twhile (input.Length - offset &gt;= size)\n\t\t\toffset += sha.TransformBlock(input, offset, size, input, offset);\n\n\t\tsha.TransformFinalBlock(input, offset, input.Length - offset);\n\t\tConsole.WriteLine(&quot;MultiBlock {0:00}: {1}&quot;, size, BytesToStr(sha.Hash));\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.HashAlgorithm.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.HashAlgorithm.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.CanReuseTransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.Clear\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.ComputeHash\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.Create\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.Hash\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.HashCore\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.HashFinal\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.HashSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.HashSizeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.HashValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.Initialize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.InputBlockSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.OutputBlockSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.State\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.TransformBlock\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3fc71c51-5602-8882-d69e-183117f65956\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the base class from which all implementations of cryptographic hash algorithms must derive.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.HashAlgorithm\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.HashAlgorithm.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.HashAlgorithm.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.HashAlgorithm","System.Security.Cryptography.HashAlgorithm..ctor","System.Security.Cryptography.HashAlgorithm.CanReuseTransform","System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks","System.Security.Cryptography.HashAlgorithm.Clear","System.Security.Cryptography.HashAlgorithm.ComputeHash","System.Security.Cryptography.HashAlgorithm.Create","System.Security.Cryptography.HashAlgorithm.Dispose","System.Security.Cryptography.HashAlgorithm.Hash","System.Security.Cryptography.HashAlgorithm.HashCore","System.Security.Cryptography.HashAlgorithm.HashFinal","System.Security.Cryptography.HashAlgorithm.HashSize","System.Security.Cryptography.HashAlgorithm.HashSizeValue","System.Security.Cryptography.HashAlgorithm.HashValue","System.Security.Cryptography.HashAlgorithm.Initialize","System.Security.Cryptography.HashAlgorithm.InputBlockSize","System.Security.Cryptography.HashAlgorithm.OutputBlockSize","System.Security.Cryptography.HashAlgorithm.State","System.Security.Cryptography.HashAlgorithm.TransformBlock","System.Security.Cryptography.HashAlgorithm.TransformFinalBlock"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.HashAlgorithm","System::Security::Cryptography::HashAlgorithm","System.Security.Cryptography.HashAlgorithm.#ctor","System::Security::Cryptography::HashAlgorithm::#ctor","System.Security.Cryptography.HashAlgorithm.CanReuseTransform","System::Security::Cryptography::HashAlgorithm::CanReuseTransform","System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks","System::Security::Cryptography::HashAlgorithm::CanTransformMultipleBlocks","System.Security.Cryptography.HashAlgorithm.Clear","System::Security::Cryptography::HashAlgorithm::Clear","System.Security.Cryptography.HashAlgorithm.ComputeHash","System::Security::Cryptography::HashAlgorithm::ComputeHash","System.Security.Cryptography.HashAlgorithm.Create","System::Security::Cryptography::HashAlgorithm::Create","System.Security.Cryptography.HashAlgorithm.Dispose","System::Security::Cryptography::HashAlgorithm::Dispose","System.Security.Cryptography.HashAlgorithm.Hash","System::Security::Cryptography::HashAlgorithm::Hash","System.Security.Cryptography.HashAlgorithm.HashCore","System::Security::Cryptography::HashAlgorithm::HashCore","System.Security.Cryptography.HashAlgorithm.HashFinal","System::Security::Cryptography::HashAlgorithm::HashFinal","System.Security.Cryptography.HashAlgorithm.HashSize","System::Security::Cryptography::HashAlgorithm::HashSize","System.Security.Cryptography.HashAlgorithm.HashSizeValue","System::Security::Cryptography::HashAlgorithm::HashSizeValue","System.Security.Cryptography.HashAlgorithm.HashValue","System::Security::Cryptography::HashAlgorithm::HashValue","System.Security.Cryptography.HashAlgorithm.Initialize","System::Security::Cryptography::HashAlgorithm::Initialize","System.Security.Cryptography.HashAlgorithm.InputBlockSize","System::Security::Cryptography::HashAlgorithm::InputBlockSize","System.Security.Cryptography.HashAlgorithm.OutputBlockSize","System::Security::Cryptography::HashAlgorithm::OutputBlockSize","System.Security.Cryptography.HashAlgorithm.State","System::Security::Cryptography::HashAlgorithm::State","System.Security.Cryptography.HashAlgorithm.TransformBlock","System::Security::Cryptography::HashAlgorithm::TransformBlock","System.Security.Cryptography.HashAlgorithm.TransformFinalBlock","System::Security::Cryptography::HashAlgorithm::TransformFinalBlock"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3fc71c51-5602-8882-d69e-183117f65956","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/HashAlgorithm.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HashAlgorithm class | Microsoft Docs","_op_ogTitle":"HashAlgorithm class","description":"Represents the base class from which all implementations of cryptographic hash algorithms must derive.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.HashAlgorithm","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.hashalgorithm","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.hashalgorithm","fileRelativePath":"System.Security.Cryptography.HashAlgorithm.html"},"themesRelativePathToOutputRoot":"_themes/"}