{"content":"    \r\n    <h1 id=\"System_Windows_Forms_SystemInformation\">\r\n      <span class=\"lang-csharp\">SystemInformation</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about the current system environment.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class SystemInformation</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SystemInformation</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The SystemInformation class provides <code>static</code> properties that can be used to get information about the current system environment. The class provides access to information such as Windows display element sizes, operating system settings, network availability, and the capabilities of hardware installed on the system. This class cannot be instantiated.  </p>\n<p> For more information about system-wide parameters, see &quot;SystemParametersInfo&quot; in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com\" data-linktype=\"external\">http://msdn.microsoft.com</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_ActiveWindowTrackingDelay\" data-linktype=\"self-bookmark\">ActiveWindowTrackingDelay</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the active window tracking delay.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_ArrangeDirection\" data-linktype=\"self-bookmark\">ArrangeDirection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates the direction in which the operating system arranges minimized windows.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_ArrangeStartingPosition\" data-linktype=\"self-bookmark\">ArrangeStartingPosition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.windows.forms.arrangestartingposition\" data-linktype=\"relative-path\">ArrangeStartingPosition</a> value that indicates the starting position from which the operating system arranges minimized windows.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_BootMode\" data-linktype=\"self-bookmark\">BootMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.windows.forms.bootmode\" data-linktype=\"relative-path\">BootMode</a> value that indicates the boot mode the system was started in.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_Border3DSize\" data-linktype=\"self-bookmark\">Border3DSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thickness, in pixels, of a three-dimensional (3-D) style window or system control border.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_BorderMultiplierFactor\" data-linktype=\"self-bookmark\">BorderMultiplierFactor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the border multiplier factor that is used when determining the thickness of a window&#39;s sizing border.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_BorderSize\" data-linktype=\"self-bookmark\">BorderSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thickness, in pixels, of a flat-style window or system control border.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_CaptionButtonSize\" data-linktype=\"self-bookmark\">CaptionButtonSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the standard size, in pixels, of a button in a window&#39;s title bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_CaptionHeight\" data-linktype=\"self-bookmark\">CaptionHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the height, in pixels, of the standard title bar area of a window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_CaretBlinkTime\" data-linktype=\"self-bookmark\">CaretBlinkTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the caret blink time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_CaretWidth\" data-linktype=\"self-bookmark\">CaretWidth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the width, in pixels, of the caret in edit controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_ComputerName\" data-linktype=\"self-bookmark\">ComputerName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the NetBIOS computer name of the local computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_CursorSize\" data-linktype=\"self-bookmark\">CursorSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum size, in pixels, that a cursor can occupy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_DbcsEnabled\" data-linktype=\"self-bookmark\">DbcsEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the operating system is capable of handling double-byte character set (DBCS) characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_DebugOS\" data-linktype=\"self-bookmark\">DebugOS</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the debug version of USER.EXE is installed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_DoubleClickSize\" data-linktype=\"self-bookmark\">DoubleClickSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of the area within which the user must click twice for the operating system to consider the two clicks a double-click.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_DoubleClickTime\" data-linktype=\"self-bookmark\">DoubleClickTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum number of milliseconds that can elapse between a first click and a second click for the OS to consider the mouse action a double-click.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_DragFullWindows\" data-linktype=\"self-bookmark\">DragFullWindows</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the user has enabled full window drag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_DragSize\" data-linktype=\"self-bookmark\">DragSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the width and height of a rectangle centered on the point the mouse button was pressed, within which a drag operation will not begin.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_FixedFrameBorderSize\" data-linktype=\"self-bookmark\">FixedFrameBorderSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thickness, in pixels, of the frame border of a window that has a caption and is not resizable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_FontSmoothingContrast\" data-linktype=\"self-bookmark\">FontSmoothingContrast</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the font smoothing contrast value used in ClearType smoothing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_FontSmoothingType\" data-linktype=\"self-bookmark\">FontSmoothingType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current type of font smoothing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_FrameBorderSize\" data-linktype=\"self-bookmark\">FrameBorderSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thickness, in pixels, of the resizing border that is drawn around the perimeter of a window that is being drag resized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_HighContrast\" data-linktype=\"self-bookmark\">HighContrast</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the user has enabled the high-contrast mode accessibility feature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_HorizontalFocusThickness\" data-linktype=\"self-bookmark\">HorizontalFocusThickness</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thickness of the left and right edges of the system focus rectangle, in pixels.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_HorizontalResizeBorderThickness\" data-linktype=\"self-bookmark\">HorizontalResizeBorderThickness</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thickness of the left and right edges of the sizing border around the perimeter of a window being resized, in pixels.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_HorizontalScrollBarArrowWidth\" data-linktype=\"self-bookmark\">HorizontalScrollBarArrowWidth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the width, in pixels, of the arrow bitmap on the horizontal scroll bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_HorizontalScrollBarHeight\" data-linktype=\"self-bookmark\">HorizontalScrollBarHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default height, in pixels, of the horizontal scroll bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_HorizontalScrollBarThumbWidth\" data-linktype=\"self-bookmark\">HorizontalScrollBarThumbWidth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the width, in pixels, of the scroll box in a horizontal scroll bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IconHorizontalSpacing\" data-linktype=\"self-bookmark\">IconHorizontalSpacing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the width, in pixels, of an icon arrangement cell in large icon view.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IconSize\" data-linktype=\"self-bookmark\">IconSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of the Windows default program icon size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IconSpacingSize\" data-linktype=\"self-bookmark\">IconSpacingSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size, in pixels, of the grid square used to arrange icons in a large-icon view.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IconVerticalSpacing\" data-linktype=\"self-bookmark\">IconVerticalSpacing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the height, in pixels, of an icon arrangement cell in large icon view.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsActiveWindowTrackingEnabled\" data-linktype=\"self-bookmark\">IsActiveWindowTrackingEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether active window tracking is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsComboBoxAnimationEnabled\" data-linktype=\"self-bookmark\">IsComboBoxAnimationEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the slide-open effect for combo boxes is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsDropShadowEnabled\" data-linktype=\"self-bookmark\">IsDropShadowEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the drop shadow effect is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsFlatMenuEnabled\" data-linktype=\"self-bookmark\">IsFlatMenuEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether native user menus have a flat menu appearance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsFontSmoothingEnabled\" data-linktype=\"self-bookmark\">IsFontSmoothingEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether font smoothing is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsHotTrackingEnabled\" data-linktype=\"self-bookmark\">IsHotTrackingEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether hot tracking of user-interface elements, such as menu names on menu bars, is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsIconTitleWrappingEnabled\" data-linktype=\"self-bookmark\">IsIconTitleWrappingEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether icon-title wrapping is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsKeyboardPreferred\" data-linktype=\"self-bookmark\">IsKeyboardPreferred</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the user relies on the keyboard instead of the mouse, and prefers applications to display keyboard interfaces that would otherwise be hidden.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsListBoxSmoothScrollingEnabled\" data-linktype=\"self-bookmark\">IsListBoxSmoothScrollingEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the smooth-scrolling effect for list boxes is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsMenuAnimationEnabled\" data-linktype=\"self-bookmark\">IsMenuAnimationEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether menu fade or slide animation features are enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsMenuFadeEnabled\" data-linktype=\"self-bookmark\">IsMenuFadeEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether menu fade animation is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsMinimizeRestoreAnimationEnabled\" data-linktype=\"self-bookmark\">IsMinimizeRestoreAnimationEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether window minimize and restore animation is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsSelectionFadeEnabled\" data-linktype=\"self-bookmark\">IsSelectionFadeEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the selection fade effect is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsSnapToDefaultEnabled\" data-linktype=\"self-bookmark\">IsSnapToDefaultEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the snap-to-default-button feature is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsTitleBarGradientEnabled\" data-linktype=\"self-bookmark\">IsTitleBarGradientEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the gradient effect for window title bars is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_IsToolTipAnimationEnabled\" data-linktype=\"self-bookmark\">IsToolTipAnimationEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> animation is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_KanjiWindowHeight\" data-linktype=\"self-bookmark\">KanjiWindowHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the height, in pixels, of the Kanji window at the bottom of the screen for double-byte character set (DBCS) versions of Windows.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_KeyboardDelay\" data-linktype=\"self-bookmark\">KeyboardDelay</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keyboard repeat-delay setting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_KeyboardSpeed\" data-linktype=\"self-bookmark\">KeyboardSpeed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keyboard repeat-speed setting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MaxWindowTrackSize\" data-linktype=\"self-bookmark\">MaxWindowTrackSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default maximum dimensions, in pixels, of a window that has a caption and sizing borders.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MenuAccessKeysUnderlined\" data-linktype=\"self-bookmark\">MenuAccessKeysUnderlined</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether menu access keys are always underlined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MenuBarButtonSize\" data-linktype=\"self-bookmark\">MenuBarButtonSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default width, in pixels, for menu-bar buttons and the height, in pixels, of a menu bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MenuButtonSize\" data-linktype=\"self-bookmark\">MenuButtonSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default dimensions, in pixels, of menu-bar buttons.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MenuCheckSize\" data-linktype=\"self-bookmark\">MenuCheckSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of the default size of a menu check mark area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MenuFont\" data-linktype=\"self-bookmark\">MenuFont</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the font used to display text on menus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MenuHeight\" data-linktype=\"self-bookmark\">MenuHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the height, in pixels, of one line of a menu.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MenuShowDelay\" data-linktype=\"self-bookmark\">MenuShowDelay</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the time, in milliseconds, that the system waits before displaying a cascaded shortcut menu when the mouse cursor is over a submenu item.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MidEastEnabled\" data-linktype=\"self-bookmark\">MidEastEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the operating system is enabled for the Hebrew and Arabic languages.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MinimizedWindowSize\" data-linktype=\"self-bookmark\">MinimizedWindowSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of a normal minimized window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MinimizedWindowSpacingSize\" data-linktype=\"self-bookmark\">MinimizedWindowSpacingSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of the area each minimized window is allocated when arranged.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MinimumWindowSize\" data-linktype=\"self-bookmark\">MinimumWindowSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the minimum width and height for a window, in pixels.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MinWindowTrackSize\" data-linktype=\"self-bookmark\">MinWindowTrackSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default minimum dimensions, in pixels, that a window may occupy during a drag resize.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MonitorCount\" data-linktype=\"self-bookmark\">MonitorCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of display monitors on the desktop.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MonitorsSameDisplayFormat\" data-linktype=\"self-bookmark\">MonitorsSameDisplayFormat</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether all the display monitors are using the same pixel color format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MouseButtons\" data-linktype=\"self-bookmark\">MouseButtons</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of buttons on the mouse.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MouseButtonsSwapped\" data-linktype=\"self-bookmark\">MouseButtonsSwapped</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the functions of the left and right mouse buttons have been swapped.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MouseHoverSize\" data-linktype=\"self-bookmark\">MouseHoverSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of the rectangle within which the mouse pointer has to stay for the mouse hover time before a mouse hover message is generated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MouseHoverTime\" data-linktype=\"self-bookmark\">MouseHoverTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle before a mouse hover message is generated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MousePresent\" data-linktype=\"self-bookmark\">MousePresent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a pointing device is installed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MouseSpeed\" data-linktype=\"self-bookmark\">MouseSpeed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current mouse speed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MouseWheelPresent\" data-linktype=\"self-bookmark\">MouseWheelPresent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a mouse with a mouse wheel is installed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MouseWheelScrollDelta\" data-linktype=\"self-bookmark\">MouseWheelScrollDelta</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of the delta value of a single mouse wheel rotation increment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_MouseWheelScrollLines\" data-linktype=\"self-bookmark\">MouseWheelScrollLines</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of lines to scroll when the mouse wheel is rotated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_NativeMouseWheelSupport\" data-linktype=\"self-bookmark\">NativeMouseWheelSupport</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the operating system natively supports a mouse wheel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_Network\" data-linktype=\"self-bookmark\">Network</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a network connection is present.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_PenWindows\" data-linktype=\"self-bookmark\">PenWindows</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the Microsoft Windows for Pen Computing extensions are installed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_PopupMenuAlignment\" data-linktype=\"self-bookmark\">PopupMenuAlignment</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the side of pop-up menus that are aligned to the corresponding menu-bar item.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_PowerStatus\" data-linktype=\"self-bookmark\">PowerStatus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current system power status.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_PrimaryMonitorMaximizedWindowSize\" data-linktype=\"self-bookmark\">PrimaryMonitorMaximizedWindowSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default dimensions, in pixels, of a maximized window on the primary display.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_PrimaryMonitorSize\" data-linktype=\"self-bookmark\">PrimaryMonitorSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of the current video mode of the primary display.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_RightAlignedMenus\" data-linktype=\"self-bookmark\">RightAlignedMenus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether drop-down menus are right-aligned with the corresponding menu-bar item.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_ScreenOrientation\" data-linktype=\"self-bookmark\">ScreenOrientation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the orientation of the screen.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_Secure\" data-linktype=\"self-bookmark\">Secure</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a Security Manager is present on this operating system.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_ShowSounds\" data-linktype=\"self-bookmark\">ShowSounds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the user prefers that an application present information in visual form in situations when it would present the information in audible form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_SizingBorderWidth\" data-linktype=\"self-bookmark\">SizingBorderWidth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the width, in pixels, of the sizing border drawn around the perimeter of a window being resized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_SmallCaptionButtonSize\" data-linktype=\"self-bookmark\">SmallCaptionButtonSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the width, in pixels, of small caption buttons, and the height, in pixels, of small captions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_SmallIconSize\" data-linktype=\"self-bookmark\">SmallIconSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of a small icon.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_TerminalServerSession\" data-linktype=\"self-bookmark\">TerminalServerSession</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the calling process is associated with a Terminal Services client session.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_ToolWindowCaptionButtonSize\" data-linktype=\"self-bookmark\">ToolWindowCaptionButtonSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dimensions, in pixels, of small caption buttons.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_ToolWindowCaptionHeight\" data-linktype=\"self-bookmark\">ToolWindowCaptionHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the height, in pixels, of a tool window caption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_UIEffectsEnabled\" data-linktype=\"self-bookmark\">UIEffectsEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether user interface (UI) effects are enabled or disabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_UserDomainName\" data-linktype=\"self-bookmark\">UserDomainName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the domain the user belongs to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_UserInteractive\" data-linktype=\"self-bookmark\">UserInteractive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current process is running in user-interactive mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_UserName\" data-linktype=\"self-bookmark\">UserName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the user name associated with the current thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_VerticalFocusThickness\" data-linktype=\"self-bookmark\">VerticalFocusThickness</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thickness, in pixels, of the top and bottom edges of the system focus rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_VerticalResizeBorderThickness\" data-linktype=\"self-bookmark\">VerticalResizeBorderThickness</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thickness, in pixels, of the top and bottom edges of the sizing border around the perimeter of a window being resized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_VerticalScrollBarArrowHeight\" data-linktype=\"self-bookmark\">VerticalScrollBarArrowHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the height, in pixels, of the arrow bitmap on the vertical scroll bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_VerticalScrollBarThumbHeight\" data-linktype=\"self-bookmark\">VerticalScrollBarThumbHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the height, in pixels, of the scroll box in a vertical scroll bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_VerticalScrollBarWidth\" data-linktype=\"self-bookmark\">VerticalScrollBarWidth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default width, in pixels, of the vertical scroll bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_VirtualScreen\" data-linktype=\"self-bookmark\">VirtualScreen</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the bounds of the virtual screen.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_SystemInformation_WorkingArea\" data-linktype=\"self-bookmark\">WorkingArea</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size, in pixels, of the working area of the screen.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_ActiveWindowTrackingDelay\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_ActiveWindowTrackingDelay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ActiveWindowTrackingDelay</div>        \r\n          </div>\r\n    \r\n            <p>Gets the active window tracking delay.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ActiveWindowTrackingDelay { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The active window tracking delay, in milliseconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_ArrangeDirection\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_ArrangeDirection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrangeDirection</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates the direction in which the operating system arranges minimized windows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.ArrangeDirection ArrangeDirection { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.arrangedirection\" data-linktype=\"relative-path\">ArrangeDirection</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.arrangedirection\" data-linktype=\"relative-path\">ArrangeDirection</a> values that indicates the direction in which the operating system arranges minimized windows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.arrangedirection\" data-linktype=\"relative-path\">ArrangeDirection</a> property indicates the direction in which minimized windows are arranged on the desktop or in a Multiple Document Interface (MDI) container.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_ArrangeStartingPosition\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_ArrangeStartingPosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrangeStartingPosition</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.windows.forms.arrangestartingposition\" data-linktype=\"relative-path\">ArrangeStartingPosition</a> value that indicates the starting position from which the operating system arranges minimized windows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.ArrangeStartingPosition ArrangeStartingPosition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.arrangestartingposition\" data-linktype=\"relative-path\">ArrangeStartingPosition</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.arrangestartingposition\" data-linktype=\"relative-path\">ArrangeStartingPosition</a> values that indicates the starting position from which the operating system arranges minimized windows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.arrangestartingposition\" data-linktype=\"relative-path\">ArrangeStartingPosition</a> property indicates the corner of a screen or window in which the operating system begins to arrange minimized windows.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_BootMode\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_BootMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BootMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.windows.forms.bootmode\" data-linktype=\"relative-path\">BootMode</a> value that indicates the boot mode the system was started in.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.BootMode BootMode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.bootmode\" data-linktype=\"relative-path\">BootMode</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.bootmode\" data-linktype=\"relative-path\">BootMode</a> values that indicates the boot mode the system was started in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BootMode property indicates whether the operating system was started in a normal or safe boot mode.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_Border3DSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_Border3DSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Border3DSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thickness, in pixels, of a three-dimensional (3-D) style window or system control border.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size Border3DSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the width, in pixels, of a 3-D style vertical border, and the height, in pixels, of a 3-D style horizontal border.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Border3DSize property indicates the thickness, in pixels, of a three-dimensional (3-D) style system control border.  </p>\n<p> The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Width_\" data-linktype=\"relative-path\">Width</a> property of the Border3DSize property indicates the width of a vertical 3-D border. The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Height_\" data-linktype=\"relative-path\">Height</a> property of the Border3DSize property indicates the height of a horizontal 3-D border.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_BorderSize_\" data-linktype=\"relative-path\">BorderSize</a> property indicates the thickness of a window or system control border that is not a 3-D style border.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_BorderMultiplierFactor\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_BorderMultiplierFactor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BorderMultiplierFactor</div>        \r\n          </div>\r\n    \r\n            <p>Gets the border multiplier factor that is used when determining the thickness of a window&#39;s sizing border.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BorderMultiplierFactor { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The multiplier used to determine the thickness of a window&#39;s sizing border.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_BorderSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_BorderSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BorderSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thickness, in pixels, of a flat-style window or system control border.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size BorderSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the width, in pixels, of a vertical border, and the height, in pixels, of a horizontal border.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BorderSize property indicates the thickness of a flat-style system control border in pixels.  </p>\n<p> The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Width_\" data-linktype=\"relative-path\">Width</a> property of the BorderSize property indicates the width of a vertical flat-style border. The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Height_\" data-linktype=\"relative-path\">Height</a> property of the BorderSize property indicates the height of a horizontal flat-style border.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_Border3DSize_\" data-linktype=\"relative-path\">Border3DSize</a> property of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class indicates the thickness of a three-dimensional (3-D) style window or system control border.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_CaptionButtonSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_CaptionButtonSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaptionButtonSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the standard size, in pixels, of a button in a window&#39;s title bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size CaptionButtonSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the standard dimensions, in pixels, of a button in a window&#39;s title bar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CaptionButtonSize property indicates the standard dimensions of a button in the title bar of a window.  </p>\n<p> The value of this property can be used to ensure that a button is properly sized to fit within the title bar of a window. Window caption buttons should be sized less than or equal to the standard dimensions for window caption buttons to ensure that they can be displayed in view correctly.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_CaptionHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_CaptionHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaptionHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the height, in pixels, of the standard title bar area of a window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CaptionHeight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of the standard title bar area of a window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CaptionHeight property indicates the height of the standard window title bar area, in pixels.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_CaretBlinkTime\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_CaretBlinkTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaretBlinkTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the caret blink time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CaretBlinkTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The caret blink time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_CaretWidth\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_CaretWidth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaretWidth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the width, in pixels, of the caret in edit controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CaretWidth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width, in pixels, of the caret in edit controls.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system does not support this feature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The caret indicates where text or graphics will be inserted into the edit control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_ComputerName\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_ComputerName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ComputerName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the NetBIOS computer name of the local computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ComputerName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of this computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ComputerName property retrieves the NetBIOS name of the local computer. This is accomplished with a call into the native System Information function GetComputerName. This name is established at system startup, when the system reads it from the registry. If the local computer is a node in a cluster, ComputerName returns the name of the cluster virtual server.  </p>\n<p> You can use the ComputerName method to determine the name of the computer that is displayed to other users on a network.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_CursorSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_CursorSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CursorSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum size, in pixels, that a cursor can occupy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size CursorSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the maximum dimensions of a cursor in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The system cannot create cursors of other sizes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_DbcsEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_DbcsEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DbcsEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the operating system is capable of handling double-byte character set (DBCS) characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool DbcsEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operating system supports DBCS; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DbcsEnabled property indicates whether the current operating system supports DBCS.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_DebugOS\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_DebugOS_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DebugOS</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the debug version of USER.EXE is installed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool DebugOS { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the debugging version of USER.EXE is installed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_DoubleClickSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_DoubleClickSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoubleClickSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of the area within which the user must click twice for the operating system to consider the two clicks a double-click.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size DoubleClickSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the dimensions, in pixels, of the area within which the user must click twice for the operating system to consider the two clicks a double-click.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DoubleClickSize property indicates the size of a rectangular area centered around the point at which the last click occurred. To cause a double-click, a second click must occur within the area of the rectangle before the double-click time elapses.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DoubleClickTime_\" data-linktype=\"relative-path\">DoubleClickTime</a> property indicates the maximum number of milliseconds that can elapse before a second click for the second click to cause a double-click.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_DoubleClickTime\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_DoubleClickTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoubleClickTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum number of milliseconds that can elapse between a first click and a second click for the OS to consider the mouse action a double-click.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int DoubleClickTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum amount of time, in milliseconds, that can elapse between a first click and a second click for the OS to consider the mouse action a double-click.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A double-click is a series of two clicks of the mouse button, the second occurring within a specified length of time after, and within a specified distance from, the first. The double-click time is the maximum number of milliseconds that can elapse between the first and second click of a double-click.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DoubleClickSize_\" data-linktype=\"relative-path\">DoubleClickSize</a> property indicates the size of a rectangular area centered around the point at which the last click occurred. To cause a double-click, a second click must occur within the area of the rectangle before the double-click time elapses.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_DragFullWindows\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_DragFullWindows_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragFullWindows</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the user has enabled full window drag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool DragFullWindows { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the user has enabled full window drag; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this property is <code>true</code>, the content of a window is refreshed during a window move or resize drag, using the current position and size as they are updated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_DragSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_DragSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the width and height of a rectangle centered on the point the mouse button was pressed, within which a drag operation will not begin.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size DragSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that specifies the area of a rectangle, in pixels, centered on the point the mouse button was pressed, within which a drag operation will not begin.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DragSize property indicates the size, in pixels, of a rectangle centered around the point at which the mouse button was pressed. Windows uses the rectangle as a boundary within which it does not start a drag operation.  </p>\n<p> A user can hold a mouse button down and move the mouse within this area before a drag operation begins, which enables the user to click and release the mouse button easily without unintentionally starting a drag operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_FixedFrameBorderSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_FixedFrameBorderSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FixedFrameBorderSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thickness, in pixels, of the frame border of a window that has a caption and is not resizable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size FixedFrameBorderSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that specifies the thickness, in pixels, of a fixed sized window border.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FixedFrameBorderSize property indicates the thickness of the frame, in pixels, around the perimeter of a window that has a caption but is not sizable.  </p>\n<p> The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Width_\" data-linktype=\"relative-path\">Width</a> property of FixedFrameBorderSize is the height of the horizontal border and the <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Height_\" data-linktype=\"relative-path\">Height</a> property of FixedFrameBorderSize is the width of the vertical border.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_FontSmoothingContrast\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_FontSmoothingContrast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FontSmoothingContrast</div>        \r\n          </div>\r\n    \r\n            <p>Gets the font smoothing contrast value used in ClearType smoothing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FontSmoothingContrast { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The ClearType font smoothing contrast value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system does not support this feature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default ClearType font smoothing value is 1400, but it can be any value from 1000 to 2200. Depending on the display device and the user&#39;s sensitivity to colors, a higher or lower contrast value may improve readability.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows XP and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_FontSmoothingType\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_FontSmoothingType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FontSmoothingType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current type of font smoothing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FontSmoothingType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A value that indicates the current type of font smoothing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system does not support this feature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FontSmoothingType property returns a value that indicates the type of currently active font smoothing.  </p>\n<p> The following table indicates the meaning of the values returned by this property:  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Font smoothing type could not be determined.</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Standard font smoothing.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>ClearType font smoothing.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows XP and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_FrameBorderSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_FrameBorderSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FrameBorderSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thickness, in pixels, of the resizing border that is drawn around the perimeter of a window that is being drag resized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size FrameBorderSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the thickness, in pixels, of the width of a vertical resizing border and the height of a horizontal resizing border.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FrameBorderSize property indicates the width and height of the resizing border for a window.  </p>\n<p> The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Width_\" data-linktype=\"relative-path\">Width</a> value of this property is the width of a vertical resizing border. The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Height_\" data-linktype=\"relative-path\">Height</a> value of this property is the height of a horizontal resizing border.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_HighContrast\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_HighContrast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HighContrast</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the user has enabled the high-contrast mode accessibility feature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool HighContrast { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the user has enabled high-contrast mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The high-contrast accessibility feature can make the screen easier for some users to view by enabling a color scheme that can heighten screen contrast with alternative color combinations. Some of the schemes also change font sizes for easier reading.  </p>\n<p> The high-contrast mode feature can be enabled or disabled through the Accessibility Options control panel.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_HorizontalFocusThickness\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_HorizontalFocusThickness_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HorizontalFocusThickness</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thickness of the left and right edges of the system focus rectangle, in pixels.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int HorizontalFocusThickness { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The thickness of the left and right edges of the system focus rectangle, in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system does not support this feature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HorizontalFocusThickness property indicates the width of the left and right edges of the system focus rectangle, in pixels. The system focus rectangle is used to draw user&#39;s attention to a window or area by displaying a rectangular highlighted outline.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This is supported only on Windows XP and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_HorizontalResizeBorderThickness\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_HorizontalResizeBorderThickness_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HorizontalResizeBorderThickness</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thickness of the left and right edges of the sizing border around the perimeter of a window being resized, in pixels.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int HorizontalResizeBorderThickness { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width of the left and right edges of the sizing border around the perimeter of a window being resized, in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HorizontalResizeBorderThickness property indicates the width of the vertical sizing border around the perimeter of a window being resized.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_HorizontalScrollBarArrowWidth\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_HorizontalScrollBarArrowWidth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HorizontalScrollBarArrowWidth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the width, in pixels, of the arrow bitmap on the horizontal scroll bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int HorizontalScrollBarArrowWidth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width, in pixels, of the arrow bitmap on the horizontal scroll bar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_HorizontalScrollBarHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_HorizontalScrollBarHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HorizontalScrollBarHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default height, in pixels, of the horizontal scroll bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int HorizontalScrollBarHeight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The default height, in pixels, of the horizontal scroll bar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_HorizontalScrollBarThumbWidth\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_HorizontalScrollBarThumbWidth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HorizontalScrollBarThumbWidth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the width, in pixels, of the scroll box in a horizontal scroll bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int HorizontalScrollBarThumbWidth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width, in pixels, of the scroll box in a horizontal scroll bar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HorizontalScrollBarThumbWidth property indicates the width of the scroll box used to indicate scroll bar position and to drag the scroll bar to a new position. The scroll box is also called the thumb box.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IconHorizontalSpacing\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IconHorizontalSpacing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IconHorizontalSpacing</div>        \r\n          </div>\r\n    \r\n            <p>Gets the width, in pixels, of an icon arrangement cell in large icon view.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IconHorizontalSpacing { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width, in pixels, of an icon arrangement cell in large icon view.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IconHorizontalSpacing property indicates the width of the space for an icon in large icon view. The system uses this distance to arrange icons in large icon view.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IconSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IconSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IconSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of the Windows default program icon size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size IconSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the default dimensions, in pixels, for a program icon.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IconSpacingSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IconSpacingSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IconSpacingSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size, in pixels, of the grid square used to arrange icons in a large-icon view.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size IconSpacingSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that specifies the dimensions, in pixels, of the grid square used to arrange icons in a large-icon view.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IconSpacingSize property indicates the size of the grid rectangle that each icon fits into when the system arranges them in a large-icon view. This value is always greater than or equal to <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IconSize_\" data-linktype=\"relative-path\">IconSize</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IconVerticalSpacing\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IconVerticalSpacing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IconVerticalSpacing</div>        \r\n          </div>\r\n    \r\n            <p>Gets the height, in pixels, of an icon arrangement cell in large icon view.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IconVerticalSpacing { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of an icon arrangement cell in large icon view.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IconVerticalSpacing property indicates the height of the space for an icon in large icon view. The system uses this distance to arrange icons in large icon view.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsActiveWindowTrackingEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsActiveWindowTrackingEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsActiveWindowTrackingEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether active window tracking is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsActiveWindowTrackingEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if active window tracking is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsActiveWindowTrackingEnabled property indicates whether active window tracking is enabled. Active window tracking causes any window the mouse is directly over to become the active window.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsComboBoxAnimationEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsComboBoxAnimationEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsComboBoxAnimationEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the slide-open effect for combo boxes is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsComboBoxAnimationEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the slide-open effect for combo boxes is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsComboBoxAnimationEnabled property indicates whether the slide-open effect for system control combo boxes is enabled.  </p>\n<p> When the slide-open effect for system control combo boxes is enabled, the drop down menu of a combo box slides into view when it is displayed, instead of being immediately fully drawn in view.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsDropShadowEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsDropShadowEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDropShadowEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the drop shadow effect is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDropShadowEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the drop shadow effect is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows XP and the Windows Server 2003 family. On other platforms, this property returns <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsFlatMenuEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsFlatMenuEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFlatMenuEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether native user menus have a flat menu appearance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsFlatMenuEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property is not used and always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsFontSmoothingEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsFontSmoothingEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFontSmoothingEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether font smoothing is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsFontSmoothingEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the font smoothing feature is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This font smoothing feature uses font antialiasing to make font curves appear smoother by painting pixels at different gray levels.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsHotTrackingEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsHotTrackingEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHotTrackingEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether hot tracking of user-interface elements, such as menu names on menu bars, is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsHotTrackingEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if hot tracking of user-interface elements is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsHotTrackingEnabled property indicates whether hot tracking of user-interface elements is enabled. Hot tracking means that when the cursor moves over an item, it is highlighted but not selected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsIconTitleWrappingEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsIconTitleWrappingEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsIconTitleWrappingEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether icon-title wrapping is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsIconTitleWrappingEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the icon-title wrapping feature is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsKeyboardPreferred\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsKeyboardPreferred_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsKeyboardPreferred</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the user relies on the keyboard instead of the mouse, and prefers applications to display keyboard interfaces that would otherwise be hidden.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsKeyboardPreferred { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if keyboard preferred mode is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsKeyboardPreferred property indicates whether the user has indicated a preference for keyboard-based input interfaces.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsListBoxSmoothScrollingEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsListBoxSmoothScrollingEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsListBoxSmoothScrollingEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the smooth-scrolling effect for list boxes is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsListBoxSmoothScrollingEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if smooth-scrolling is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsListBoxSmoothScrollingEnabled property indicates whether the smooth-scrolling effect for system control list boxes is enabled.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsMenuAnimationEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsMenuAnimationEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMenuAnimationEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether menu fade or slide animation features are enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsMenuAnimationEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if menu fade or slide animation is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsMenuAnimationEnabled property indicates whether either of the fade or slide animation features of system control menus is enabled.  </p>\n<p> If the value of this property is <code>true</code>, the <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsMenuFadeEnabled_\" data-linktype=\"relative-path\">IsMenuFadeEnabled</a> property indicates whether menus use fade or slide animation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsMenuFadeEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsMenuFadeEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMenuFadeEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether menu fade animation is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsMenuFadeEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if fade animation is enabled; <code>false</code> if it is disabled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsMenuFadeEnabled property indicates whether a menu uses fade animation, if menu animation is enabled. The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsMenuAnimationEnabled_\" data-linktype=\"relative-path\">IsMenuAnimationEnabled</a> property indicates whether menu animation is enabled.  </p>\n<p> If menu animation is enabled and the value of this property is <code>true</code>, menus use fade animation. If menu animation is enabled and the value of this property is <code>false</code>, menus use slide animation. If menu animation is disabled, the value of this property is meaningless.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the value of the <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsMenuAnimationEnabled_\" data-linktype=\"relative-path\">IsMenuAnimationEnabled</a> is <code>false</code>, the value of this property is meaningless.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 2000, Windows XP, and the Windows Server 2003 family. On other platforms, this property returns <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsMinimizeRestoreAnimationEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsMinimizeRestoreAnimationEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMinimizeRestoreAnimationEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether window minimize and restore animation is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsMinimizeRestoreAnimationEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if window minimize and restore animation is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsMinimizeRestoreAnimationEnabled property indicates whether the window minimize and restore sequence is animated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsSelectionFadeEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsSelectionFadeEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSelectionFadeEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the selection fade effect is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSelectionFadeEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the selection fade effect is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsSelectionFadeEnabled property indicates whether the selection fade effect is enabled. The selection fade effect causes a menu item selected by the user to remain on the screen briefly while fading out after the menu is dismissed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 2000, Windows XP, and the Windows Server 2003 family. On other platforms, this property returns <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsSnapToDefaultEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsSnapToDefaultEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSnapToDefaultEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the snap-to-default-button feature is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSnapToDefaultEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the snap-to-default-button feature is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsSnapToDefaultEnabled property indicates whether the snap-to-default-button feature is enabled. If the feature is enabled, the mouse cursor automatically moves to the default button, such as <strong>OK</strong> or <strong>Apply</strong>, of a dialog box.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsTitleBarGradientEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsTitleBarGradientEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTitleBarGradientEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the gradient effect for window title bars is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsTitleBarGradientEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the gradient effect for window title bars is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsTitleBarGradientEnabled property indicates whether the background of window title bars are drawn using a gradient fill effect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_IsToolTipAnimationEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_IsToolTipAnimationEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsToolTipAnimationEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> animation is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsToolTipAnimationEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> animation is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsToolTipAnimationEnabled property indicates whether ToolTips can fade or slide into view.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 2000, Windows XP, and the Windows Server 2003 family. On other platforms, this property returns <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_KanjiWindowHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_KanjiWindowHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KanjiWindowHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the height, in pixels, of the Kanji window at the bottom of the screen for double-byte character set (DBCS) versions of Windows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int KanjiWindowHeight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of the Kanji window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The KanjiWindowHeight property indicates the height of the Kanji window on operating systems that support DBCS. The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DbcsEnabled_\" data-linktype=\"relative-path\">DbcsEnabled</a> property indicates whether the operating system supports DBCS.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_KeyboardDelay\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_KeyboardDelay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyboardDelay</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keyboard repeat-delay setting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int KeyboardDelay { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The keyboard repeat-delay setting, from 0 (approximately 250 millisecond delay) through 3 (approximately 1 second delay).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates the amount of time that elapses after a key is pressed and held down until keystroke repeat messages are sent by the operating system. This value is in the range from 0 (approximately 250 millisecond delay) through 3 (approximately 1 second delay). The actual delay associated with each value may vary depending on the hardware.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_KeyboardSpeed_\" data-linktype=\"relative-path\">KeyboardSpeed</a> property indicates the repeat speed setting that determines the length of time between each keystroke repeat message sent by the operating system.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_KeyboardSpeed\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_KeyboardSpeed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyboardSpeed</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keyboard repeat-speed setting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int KeyboardSpeed { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The keyboard repeat-speed setting, from 0 (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates the time between each keystroke repeat message that is sent when a user presses and holds a key down. This is a value in the range from 0 (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_KeyboardDelay_\" data-linktype=\"relative-path\">KeyboardDelay</a> property indicates the length of time after a key is pressed and held down before keystroke repeat messages are sent by the operating system.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MaxWindowTrackSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MaxWindowTrackSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxWindowTrackSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default maximum dimensions, in pixels, of a window that has a caption and sizing borders.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MaxWindowTrackSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that specifies the maximum dimensions, in pixels, to which a window can be sized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MaxWindowTrackSize property indicates the maximum dimensions to which a user can drag resize a window. The value returned by MaxWindowTrackSize refers to the dimensions of the entire desktop.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MenuAccessKeysUnderlined\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MenuAccessKeysUnderlined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MenuAccessKeysUnderlined</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether menu access keys are always underlined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool MenuAccessKeysUnderlined { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if menu access keys are always underlined; <code>false</code> if they are underlined only when the menu is activated or receives focus.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MenuAccessKeysUnderlined property indicates whether the menu shortcut keys are underlined in menu text even when the menu has not been activated or received focus.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MenuBarButtonSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MenuBarButtonSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MenuBarButtonSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default width, in pixels, for menu-bar buttons and the height, in pixels, of a menu bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MenuBarButtonSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the default width for menu-bar buttons, in pixels, and the height of a menu bar, in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Width_\" data-linktype=\"relative-path\">Width</a> value of this property indicates the default width for a button on a menu-bar, in pixels. The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Height_\" data-linktype=\"relative-path\">Height</a> value of this property indicates the height of a menu bar, in pixels.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MenuButtonSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MenuButtonSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MenuButtonSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default dimensions, in pixels, of menu-bar buttons.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MenuButtonSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the default dimensions, in pixels, of menu-bar buttons.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates the default dimensions, in pixels, for menu-bar buttons, such as the child window close button used in the multiple document interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MenuCheckSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MenuCheckSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MenuCheckSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of the default size of a menu check mark area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MenuCheckSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the default size, in pixels, of a menu check mark area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MenuCheckSize property indicates the size of the image used by Windows to display a check mark area next to a selected menu item.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MenuFont\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MenuFont_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MenuFont</div>        \r\n          </div>\r\n    \r\n            <p>Gets the font used to display text on menus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Font MenuFont { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> used to display text on menus.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MenuFont property indicates the font used to display text on menus.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MenuHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MenuHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MenuHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the height, in pixels, of one line of a menu.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MenuHeight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of one line of a menu.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MenuHeight property indicates the height that is currently defined by Windows for a menu bar.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MenuShowDelay\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MenuShowDelay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MenuShowDelay</div>        \r\n          </div>\r\n    \r\n            <p>Gets the time, in milliseconds, that the system waits before displaying a cascaded shortcut menu when the mouse cursor is over a submenu item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MenuShowDelay { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The time, in milliseconds, that the system waits before displaying a cascaded shortcut menu when the mouse cursor is over a submenu item.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MenuShowDelay property indicates the time, in milliseconds, that the system waits before displaying a cascaded shortcut menu when the mouse cursor is over a submenu item.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MidEastEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MidEastEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MidEastEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the operating system is enabled for the Hebrew and Arabic languages.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool MidEastEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operating system is enabled for Hebrew or Arabic; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MidEastEnabled property indicates whether the operating system is enabled for the Hebrew and Arabic languages.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MinimizedWindowSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MinimizedWindowSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinimizedWindowSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of a normal minimized window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MinimizedWindowSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the dimensions, in pixels, of a normal minimized window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MinimizedWindowSize property indicates the size of the area occupied by a normal minimized window.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MinimizedWindowSpacingSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MinimizedWindowSpacingSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinimizedWindowSpacingSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of the area each minimized window is allocated when arranged.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MinimizedWindowSpacingSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the area each minimized window is allocated when arranged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MinimizedWindowSpacingSize property indicates the size, in pixels, of an arrangement grid cell for a minimized window. Each minimized window fits into a rectangle this size when arranged.  </p>\n<p> The value of this property is always greater than or equal to the value of the <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MinimumWindowSize_\" data-linktype=\"relative-path\">MinimumWindowSize</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MinimumWindowSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MinimumWindowSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinimumWindowSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the minimum width and height for a window, in pixels.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MinimumWindowSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that specifies the minimum allowable dimensions of a window, in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MinimumWindowSize property indicates the dimensions specified by Windows as the minimum size for a window. You can use this property to limit the resizing of windows to dimensions not exceeding either dimension returned by this property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Developers of applications capable of resizing windows may want to use the value of this property to ensure that the application does not attempt to resize the window to a lesser width or height, since the dimensions of the window would be limited by the system.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MinWindowTrackSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MinWindowTrackSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinWindowTrackSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default minimum dimensions, in pixels, that a window may occupy during a drag resize.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MinWindowTrackSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the default minimum width and height of a window during resize, in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MinWindowTrackSize property indicates the default smallest window size that can be produced by using the borders to size the window.  </p>\n<p> The user cannot drag the window frame to a size smaller than these dimensions. A <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> can override these values by setting the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_MinimumSize_\" data-linktype=\"relative-path\">MinimumSize</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MonitorCount\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MonitorCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonitorCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of display monitors on the desktop.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MonitorCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of monitors that make up the desktop.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MonitorCount property indicates the number of monitors currently recognized by the operating system. This property returns a value greater than one only if multiple monitors are currently recognized by the operating system.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MonitorsSameDisplayFormat\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MonitorsSameDisplayFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonitorsSameDisplayFormat</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether all the display monitors are using the same pixel color format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool MonitorsSameDisplayFormat { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if all monitors are using the same pixel color format; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MonitorsSameDisplayFormat indicates whether all monitors currently recognized by the operating system are using the same pixel color format.  </p>\n<p> Pixel formats define the data structure used to encode pixel color and luminosity information. The <a class=\"xref\" href=\"system.drawing.imaging.pixelformat\" data-linktype=\"relative-path\">PixelFormat</a> enumeration indicates a set of standard pixel color formats. Pixel values can be encoded in a variety of formats, with differing color value ranges and bit precisions, and differing positions of bits in a pixel data format structure.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Two displays can have the same bit depth but different color formats.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MouseButtons\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MouseButtons_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseButtons</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of buttons on the mouse.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MouseButtons { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of buttons on the mouse, or zero if no mouse is installed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MouseButtons property indicates the number of mouse buttons recognized on the currently installed mouse.  </p>\n<p> You can use MouseButtons property to toggle additional functionality for users with more or less than the standard number of mouse buttons supported by your application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MouseButtonsSwapped\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MouseButtonsSwapped_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseButtonsSwapped</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the functions of the left and right mouse buttons have been swapped.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool MouseButtonsSwapped { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the functions of the left and right mouse buttons are swapped; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MouseHoverSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MouseHoverSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseHoverSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of the rectangle within which the mouse pointer has to stay for the mouse hover time before a mouse hover message is generated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size MouseHoverSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the dimensions, in pixels, of the rectangle within which the mouse pointer has to stay for the mouse hover time before a mouse hover message is generated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MouseHoverSize property indicates the size of the rectangle within which the mouse pointer has to stay for the mouse hover time before a mouse hover message is generated.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MouseHoverTime_\" data-linktype=\"relative-path\">MouseHoverTime</a> property indicates the time, in milliseconds, that a mouse pointer must remain within an area the size of the MouseHoverSize property in order to generate a mouse hover message.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MouseHoverTime\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MouseHoverTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseHoverTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle before a mouse hover message is generated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MouseHoverTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The time, in milliseconds, that the mouse pointer has to stay in the hover rectangle before a mouse hover message is generated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MouseHoverTime property indicates the amount of time, in milliseconds, that a mouse pointer must remain within an area the size of the <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MouseHoverSize_\" data-linktype=\"relative-path\">MouseHoverSize</a> property in order to generate a mouse hover message.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MouseHoverSize_\" data-linktype=\"relative-path\">MouseHoverSize</a> property indicates the size of the rectangle within which the mouse pointer has to stay for the mouse hover time before a mouse hover message is generated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MousePresent\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MousePresent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MousePresent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a pointing device is installed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool MousePresent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a mouse is installed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MousePresent property indicates whether a pointing device is present or installed on the system. This is usually the case, so MousePresent almost always returns <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MouseSpeed\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MouseSpeed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseSpeed</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current mouse speed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MouseSpeed { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A mouse speed value between 1 (slowest) and 20 (fastest).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The mouse speed determines how far the pointer will move based on the distance the mouse moves. The value of this property ranges between 1 (slowest) and 20 (fastest). A value of 10 is the default. The value can be set by an end user using the mouse control panel application or by an application using the <code>SystemParametersInfo</code> function of the Platform SDK.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MouseWheelPresent\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MouseWheelPresent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseWheelPresent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a mouse with a mouse wheel is installed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool MouseWheelPresent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a mouse with a mouse wheel is installed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MouseWheelPresent property indicates whether the system recognizes a mouse wheel on the current mouse.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows NT 4.0 or later, Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MouseWheelScrollDelta\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MouseWheelScrollDelta_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseWheelScrollDelta</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of the delta value of a single mouse wheel rotation increment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MouseWheelScrollDelta { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The amount of the delta value of a single mouse wheel rotation increment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delta value is an integer value that represents a single mouse wheel rotation increment. A downward mouse wheel rotation produces a negative delta value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_MouseWheelScrollLines\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_MouseWheelScrollLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseWheelScrollLines</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of lines to scroll when the mouse wheel is rotated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int MouseWheelScrollLines { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of lines to scroll on a mouse wheel rotation, or -1 if the &quot;One screen at a time&quot; mouse option is selected.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MouseWheelScrollLines property indicates how many lines to scroll, by default, in a multi-line control that has a scroll bar. The corresponding Platform SDK system-wide parameters are SPI_GETWHEELSCROLLLINES and SPI_SETWHEELSCROLLLINES. For more information about system-wide parameters, see &quot;SystemParametersInfo&quot; in the Platform SDK documentation at <a href=\"http://msdn.microsoft.com/\" data-linktype=\"external\">http://msdn.microsoft.com</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Be sure to handle the special case that occurs if the &quot;One screen at a time&quot; mouse option is selected. In this case, the MouseWheelScrollLines property has a value of -1.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_NativeMouseWheelSupport\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_NativeMouseWheelSupport_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NativeMouseWheelSupport</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the operating system natively supports a mouse wheel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool NativeMouseWheelSupport { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operating system natively supports a mouse wheel; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse wheel operations that occur through a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> object work even if the operating system does not natively support the wheel.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows NT 4.0 or later, Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_Network\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_Network_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Network</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a network connection is present.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Network { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a network connection is present; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Network property indicates whether the system has a currently established network connection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property always returns <code>true</code> on all Windows platforms supported by the .NET Framework. Use the <a class=\"xref\" href=\"system.net.networkinformation\" data-linktype=\"relative-path\">System.Net.NetworkInformation</a> namespace to retrieve more accurate network status.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_PenWindows\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_PenWindows_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PenWindows</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the Microsoft Windows for Pen Computing extensions are installed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool PenWindows { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the Windows for Pen Computing extensions are installed; <code>false</code> if Windows for Pen Computing extensions are not installed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PenWindows property indicates whether the Microsoft Windows for Pen Computing extensions are installed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_PopupMenuAlignment\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_PopupMenuAlignment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PopupMenuAlignment</div>        \r\n          </div>\r\n    \r\n            <p>Gets the side of pop-up menus that are aligned to the corresponding menu-bar item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.LeftRightAlignment PopupMenuAlignment { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> that indicates whether pop-up menus are left-aligned or right-aligned, relative to the corresponding menu-bar item.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_PowerStatus\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_PowerStatus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PowerStatus</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current system power status.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.PowerStatus PowerStatus { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.powerstatus\" data-linktype=\"relative-path\">PowerStatus</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.powerstatus\" data-linktype=\"relative-path\">PowerStatus</a> that indicates the current system power status.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_PrimaryMonitorMaximizedWindowSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_PrimaryMonitorMaximizedWindowSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrimaryMonitorMaximizedWindowSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default dimensions, in pixels, of a maximized window on the primary display.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size PrimaryMonitorMaximizedWindowSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that specifies the dimensions, in pixels, of a maximized window on the primary display.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_PrimaryMonitorSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_PrimaryMonitorSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrimaryMonitorSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of the current video mode of the primary display.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size PrimaryMonitorSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the dimensions, in pixels, of the current video mode of the primary display.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PrimaryMonitorSize property indicates the dimensions of the current video mode of the primary display adapter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_RightAlignedMenus\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_RightAlignedMenus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightAlignedMenus</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether drop-down menus are right-aligned with the corresponding menu-bar item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool RightAlignedMenus { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if drop-down menus are right-aligned with the corresponding menu-bar item; <code>false</code> if the menus are left-aligned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_ScreenOrientation\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_ScreenOrientation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScreenOrientation</div>        \r\n          </div>\r\n    \r\n            <p>Gets the orientation of the screen.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.ScreenOrientation ScreenOrientation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.screenorientation\" data-linktype=\"relative-path\">ScreenOrientation</a></div>\r\n                  </div>\r\n                  <p>The orientation of the screen, in degrees.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_Secure\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_Secure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Secure</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a Security Manager is present on this operating system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Secure { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a Security Manager is present; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Secure property indicates whether a Security Manager is available from the operating system. Windows NT and Windows 2000 provide a Security Manager to determine access to the operating system registry and to the file system. Windows 98 does not provide a Security Manager.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_ShowSounds\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_ShowSounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowSounds</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the user prefers that an application present information in visual form in situations when it would present the information in audible form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ShowSounds { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the application should visually show information about audible output; <code>false</code> if the application does not need to provide extra visual cues for audio events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ShowSounds property indicates whether a user preference has been set that indicates the user prefers visual information displays for audio events.  </p>\n<p> You can use this property to provide accessibility mode features to an application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_SizingBorderWidth\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_SizingBorderWidth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SizingBorderWidth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the width, in pixels, of the sizing border drawn around the perimeter of a window being resized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int SizingBorderWidth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width, in pixels, of the window sizing border drawn around the perimeter of a window being resized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_SmallCaptionButtonSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_SmallCaptionButtonSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SmallCaptionButtonSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the width, in pixels, of small caption buttons, and the height, in pixels, of small captions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size SmallCaptionButtonSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the width, in pixels, of small caption buttons, and the height, in pixels, of small captions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SmallCaptionButtonSize property indicates the width, in pixels, of small caption buttons, and the height, in pixels, of small captions.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_SmallIconSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_SmallIconSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SmallIconSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of a small icon.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size SmallIconSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that specifies the dimensions, in pixels, of a small icon.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SmallIconSize property indicates the size of small icons in Windows. Small icons typically appear in window captions and in the small icon view in Windows Explorer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_TerminalServerSession\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_TerminalServerSession_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TerminalServerSession</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the calling process is associated with a Terminal Services client session.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TerminalServerSession { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the calling process is associated with a Terminal Services client session; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TerminalServerSession property indicates whether the calling process is associated with a Terminal Services client session.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows NT 4.0 SP4 or later, Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_ToolWindowCaptionButtonSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_ToolWindowCaptionButtonSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToolWindowCaptionButtonSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dimensions, in pixels, of small caption buttons.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Size ToolWindowCaptionButtonSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that indicates the dimensions, in pixels, of small caption buttons.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToolWindowCaptionButtonSize property indicates the dimensions of the buttons placed in the caption of a tool window. You can use this property when adding your own custom buttons to the caption in a tool window.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_ToolWindowCaptionHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_ToolWindowCaptionHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToolWindowCaptionHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the height, in pixels, of a tool window caption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToolWindowCaptionHeight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of a tool window caption in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_UIEffectsEnabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_UIEffectsEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UIEffectsEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether user interface (UI) effects are enabled or disabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool UIEffectsEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if UI effects are enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>UI effects include animation, fading, hot tracking, and smooth scrolling of system controls, and drawing a shadow under the mouse cursor. When UI effects are disabled, these features are disabled. When UI effects are enabled, only the effects configured as active for the current user are enabled.  </p>\n<p> The following table lists properties that indicate whether particular UI effects are enabled, if the value of this property is <code>true</code>:  </p>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsComboBoxAnimationEnabled_\" data-linktype=\"relative-path\">IsComboBoxAnimationEnabled</a></td>\n<td>Indicates whether the slide-open effect for combo boxes is enabled.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsTitleBarGradientEnabled_\" data-linktype=\"relative-path\">IsTitleBarGradientEnabled</a></td>\n<td>Indicates whether the gradient effect for window title bars is enabled.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsHotTrackingEnabled_\" data-linktype=\"relative-path\">IsHotTrackingEnabled</a></td>\n<td>Indicates whether hot tracking of user-interface elements, such as menu names on menu bars, is enabled.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsListBoxSmoothScrollingEnabled_\" data-linktype=\"relative-path\">IsListBoxSmoothScrollingEnabled</a></td>\n<td>Indicates whether the smooth-scrolling effect for list boxes is enabled.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsMenuAnimationEnabled_\" data-linktype=\"relative-path\">IsMenuAnimationEnabled</a></td>\n<td>Indicates whether menu fade or slide animation features are enabled.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MenuAccessKeysUnderlined_\" data-linktype=\"relative-path\">MenuAccessKeysUnderlined</a></td>\n<td>Indicates whether menu access keys are always underlined.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsSelectionFadeEnabled_\" data-linktype=\"relative-path\">IsSelectionFadeEnabled</a></td>\n<td>Indicates whether the selection fade effect is enabled.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_IsToolTipAnimationEnabled_\" data-linktype=\"relative-path\">IsToolTipAnimationEnabled</a></td>\n<td>Indicates whether ToolTip animation is enabled.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 2000, Windows XP, and the Windows Server 2003 family. On other platforms, this property returns <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_UserDomainName\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_UserDomainName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserDomainName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the domain the user belongs to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string UserDomainName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the user domain. If a local user account exists with the same name as the user name, this property gets the computer name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>The operating system does not support this feature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a local user account exists with the same name as the user name, this property gets the computer name.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This is not supported on Windows 98 and Windows Millennium Edition.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_UserInteractive\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_UserInteractive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserInteractive</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current process is running in user-interactive mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool UserInteractive { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current process is running in user-interactive mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the UserInteractive property is <code>false</code>, do not display any modal dialogs or message boxes, as there is no graphical user interface for the user to interact with.  </p>\n<p> This property is <code>false</code> only when called from a service process or from a Web application.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows NT 3.51 or later, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_UserName\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_UserName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the user name associated with the current thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string UserName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The user name of the user associated with the current thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows NT workstation, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_VerticalFocusThickness\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_VerticalFocusThickness_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerticalFocusThickness</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thickness, in pixels, of the top and bottom edges of the system focus rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int VerticalFocusThickness { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The thickness, in pixels, of the top and bottom edges of the system focus rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system does not support this feature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The VerticalFocusThickness property indicates the height, in pixels, of the top and bottom edges of the system focus rectangle. The system focus rectangle is used to draw user&#39;s attention to a window or area by displaying a rectangular highlighted outline.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_VerticalResizeBorderThickness\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_VerticalResizeBorderThickness_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerticalResizeBorderThickness</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thickness, in pixels, of the top and bottom edges of the sizing border around the perimeter of a window being resized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int VerticalResizeBorderThickness { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of the top and bottom edges of the sizing border around the perimeter of a window being resized, in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The VerticalResizeBorderThickness property indicates the height of the horizontal sizing border around the perimeter of a window being resized.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_VerticalScrollBarArrowHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_VerticalScrollBarArrowHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerticalScrollBarArrowHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the height, in pixels, of the arrow bitmap on the vertical scroll bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int VerticalScrollBarArrowHeight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of the arrow bitmap on the vertical scroll bar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The VerticalScrollBarArrowHeight property indicates the height of the arrow bitmap on the vertical scroll bar system control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_VerticalScrollBarThumbHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_VerticalScrollBarThumbHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerticalScrollBarThumbHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the height, in pixels, of the scroll box in a vertical scroll bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int VerticalScrollBarThumbHeight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of the scroll box in a vertical scroll bar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The VerticalScrollBarThumbHeight property indicates the height of the scroll box used to indicate scroll bar position and to drag the scroll bar to a new position. The scroll box is also called the thumb box.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_VerticalScrollBarWidth\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_VerticalScrollBarWidth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerticalScrollBarWidth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default width, in pixels, of the vertical scroll bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int VerticalScrollBarWidth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The default width, in pixels, of the vertical scroll bar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_VirtualScreen\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_VirtualScreen_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VirtualScreen</div>        \r\n          </div>\r\n    \r\n            <p>Gets the bounds of the virtual screen.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Rectangle VirtualScreen { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that specifies the bounding rectangle of the entire virtual screen.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The VirtualScreen property indicates the bounds of the entire desktop on a multi-monitor system. You can use this property to determine the maximum visual space available on a system that has multiple monitors installed.  </p>\n<p> The position coordinates of the rectangle indicate the position offset, in pixels, of the upper left corner of the virtual screen area relative to the upper left corner of the onscreen area of the primary display. The size values of the rectangle indicate the size of the virtual screen area.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.drawing.rectangle#System_Drawing_Rectangle_X_\" data-linktype=\"relative-path\">X</a> position coordinate of the rectangle is negative when the virtual screen starts to the left of the left edge of the primary display. The <a class=\"xref\" href=\"system.drawing.rectangle#System_Drawing_Rectangle_Y_\" data-linktype=\"relative-path\">Y</a> coordinate of the rectangle is negative when the virtual screen starts above the top edge of the primary display.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is supported only on Windows 98, Windows Millennium Edition, Windows 2000, Windows XP, and the Windows Server 2003 family.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_SystemInformation_WorkingArea\">\r\n    \r\n            <a id=\"System_Windows_Forms_SystemInformation_WorkingArea_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkingArea</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size, in pixels, of the working area of the screen.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Rectangle WorkingArea { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the size, in pixels, of the working area of the screen.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The WorkingArea property indicates the bounds of the screen that can be used by applications. The working area is the desktop area of the display, excluding taskbars, docked windows, and docked tool bars.  </p>\n<p> WorkingArea always returns the work area of the primary monitor. If you need the work area of a monitor in a multiple display environment, you can call one of the overloads of <a class=\"xref\" href=\"system.windows.forms.screen#System_Windows_Forms_Screen_GetWorkingArea_\" data-linktype=\"relative-path\">GetWorkingArea</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists all properties of the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and displays the current value of the property in a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> when a list item selected.  </p>\n<pre><code class=\"lang-vb\" name=\"SystemInformationBrowser#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class SystemInfoBrowserForm\n    Inherits System.Windows.Forms.Form\n    \n    Private listBox1 As System.Windows.Forms.ListBox\n    Private textBox1 As System.Windows.Forms.TextBox  \n    \n    Public Sub New()\n        Me.SuspendLayout()\n        InitForm()\n        \n        &#39; Add each property of the SystemInformation class to the list box.\n        Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n        Dim pi As PropertyInfo() = t.GetProperties()\n        Dim i As Integer\n        For i = 0 To pi.Length - 1\n            listBox1.Items.Add(pi(i).Name)\n        Next i\n        textBox1.Text = &quot;The SystemInformation class has &quot; + pi.Length.ToString() + &quot; properties.&quot; + ControlChars.CrLf\n        \n        &#39; Configure the list item selected handler for the list box to invoke a \n        &#39; method that displays the value of each property.\n        AddHandler listBox1.SelectedIndexChanged, AddressOf listBox1_SelectedIndexChanged\n        \n        Me.ResumeLayout(False)\n    End Sub    \n    \n    Private Sub listBox1_SelectedIndexChanged(sender As Object, e As EventArgs)\n        &#39; Return if no list item is selected.\n        If listBox1.SelectedIndex = - 1 Then\n            Return\n        End If         \n        &#39; Get the property name from the list item.\n        Dim propname As String = listBox1.Text\n        \n        If propname = &quot;PowerStatus&quot; Then\n            &#39; Cycle and display the values of each property of the PowerStatus property.\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the PowerStatus property is:&quot;\n            Dim t As Type = GetType(System.Windows.Forms.PowerStatus)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                Dim propval As Object = pi(i).GetValue(SystemInformation.PowerStatus, Nothing)\n                textBox1.Text += ControlChars.CrLf + &quot;    PowerStatus.&quot; + pi(i).Name + &quot; is: &quot; + propval.ToString()\n            Next i\n        Else\n            &#39; Display the value of the selected property of the SystemInformation type.\n            Dim t As Type = GetType(System.Windows.Forms.SystemInformation)\n            Dim pi As PropertyInfo() = t.GetProperties()\n            Dim prop As PropertyInfo = Nothing\n            Dim i As Integer\n            For i = 0 To pi.Length - 1\n                If pi(i).Name = propname Then\n                    prop = pi(i)\n                    Exit For\n                End If\n            Next i\n            Dim propval As Object = prop.GetValue(Nothing, Nothing)\n            textBox1.Text += ControlChars.CrLf + &quot;The value of the &quot; + propname + &quot; property is: &quot; + propval.ToString()\n        End If\n    End Sub    \n    \n    Private Sub InitForm()\n        &#39; Initialize the form settings\n        Me.listBox1 = New System.Windows.Forms.ListBox()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.listBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.listBox1.Location = New System.Drawing.Point(8, 16)\n        Me.listBox1.Size = New System.Drawing.Size(172, 496)\n        Me.listBox1.TabIndex = 0\n        Me.textBox1.Anchor = CType(System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right, System.Windows.Forms.AnchorStyles)\n        Me.textBox1.Location = New System.Drawing.Point(188, 16)\n        Me.textBox1.Multiline = True\n        Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n        Me.textBox1.Size = New System.Drawing.Size(420, 496)\n        Me.textBox1.TabIndex = 1\n        Me.ClientSize = New System.Drawing.Size(616, 525)\n        Me.Controls.Add(Me.textBox1)\n        Me.Controls.Add(Me.listBox1)\n        Me.Text = &quot;Select a SystemInformation property to get the value of&quot;\n    End Sub\n        \n    &lt;STAThread()&gt;  _\n    Shared Sub Main()\n        Application.Run(New SystemInfoBrowserForm())\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"SystemInformationBrowser#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\npublic ref class SystemInfoBrowserForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n\npublic:\n   SystemInfoBrowserForm()\n   {\n      this-&gt;SuspendLayout();\n      InitForm();\n      \n      // Add each property of the SystemInformation class to the list box.\n      Type^ t = System::Windows::Forms::SystemInformation::typeid;\n      array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n      for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         listBox1-&gt;Items-&gt;Add( pi[ i ]-&gt;Name );\n      textBox1-&gt;Text = String::Format( &quot;The SystemInformation class has {0} properties.\\r<br>&quot;, pi-&gt;Length );\n      \n      // Configure the list item selected handler for the list box to invoke a \n      // method that displays the value of each property.\n      listBox1-&gt;SelectedIndexChanged += gcnew EventHandler( this, &amp;SystemInfoBrowserForm::listBox1_SelectedIndexChanged );\n      this-&gt;ResumeLayout( false );\n   }\n\n\nprivate:\n   void listBox1_SelectedIndexChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Return if no list item is selected.\n      if ( listBox1-&gt;SelectedIndex == -1 )\n            return;\n\n      \n      // Get the property name from the list item.\n      String^ propname = listBox1-&gt;Text;\n      if ( propname-&gt;Equals( &quot;PowerStatus&quot; ) )\n      {\n         \n         // Cycle and display the values of each property of the PowerStatus property.\n         textBox1-&gt;Text = String::Concat( textBox1-&gt;Text, &quot;\\r<br>The value of the PowerStatus property is:&quot; );\n         Type^ t = System::Windows::Forms::PowerStatus::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n         {\n            Object^ propval = pi[ i ]-&gt;GetValue( SystemInformation::PowerStatus, nullptr );\n            textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>    PowerStatus.{1} is: {2}&quot;, textBox1-&gt;Text, pi[ i ]-&gt;Name, propval );\n\n         }\n      }\n      else\n      {\n         \n         // Display the value of the selected property of the SystemInformation type.\n         Type^ t = System::Windows::Forms::SystemInformation::typeid;\n         array&lt;PropertyInfo^&gt;^pi = t-&gt;GetProperties();\n         PropertyInfo^ prop = nullptr;\n         for ( int i = 0; i &lt; pi-&gt;Length; i++ )\n            if ( pi[ i ]-&gt;Name == propname )\n            {\n               prop = pi[ i ];\n               break;\n            }\n         Object^ propval = prop-&gt;GetValue( nullptr, nullptr );\n         textBox1-&gt;Text = String::Format( &quot;{0}\\r<br>The value of the {1} property is: {2}&quot;, textBox1-&gt;Text, propname, propval );\n      }\n   }\n\n   void InitForm()\n   {\n      \n      // Initialize the form settings\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;listBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 8, 16 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 172, 496 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 188, 16 );\n      this-&gt;textBox1-&gt;Multiline = true;\n      this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 420, 496 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;ClientSize = System::Drawing::Size( 616, 525 );\n      this-&gt;Controls-&gt;Add( this-&gt;textBox1 );\n      this-&gt;Controls-&gt;Add( this-&gt;listBox1 );\n      this-&gt;Text = &quot;Select a SystemInformation property to get the value of&quot;;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew SystemInfoBrowserForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemInformationBrowser#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace SystemInfoBrowser\n{\n    public class SystemInfoBrowserForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox listBox1;\n        private System.Windows.Forms.TextBox textBox1;        \n        \n        public SystemInfoBrowserForm()\n\t    {\n            this.SuspendLayout();\n            InitForm();\n            \n            // Add each property of the SystemInformation class to the list box.\n            Type t = typeof(System.Windows.Forms.SystemInformation);            \n            PropertyInfo[] pi = t.GetProperties();            \n            for( int i=0; i&lt;pi.Length; i++ )\n                listBox1.Items.Add( pi[i].Name );            \n            textBox1.Text = &quot;The SystemInformation class has &quot;+pi.Length.ToString()+&quot; properties.\\r<br>&quot;;\n\n            // Configure the list item selected handler for the list box to invoke a \n            // method that displays the value of each property.\n            listBox1.SelectedIndexChanged += new EventHandler(listBox1_SelectedIndexChanged);\n            this.ResumeLayout(false);\n\t    }\n\t\t\n        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Return if no list item is selected.\n            if( listBox1.SelectedIndex == -1 ) return;\n            // Get the property name from the list item.\n            string propname = listBox1.Text;\n            \n            if( propname == &quot;PowerStatus&quot; )\n            {\n                // Cycle and display the values of each property of the PowerStatus property.\n                textBox1.Text += &quot;\\r<br>The value of the PowerStatus property is:&quot;;                                \n                Type t = typeof(System.Windows.Forms.PowerStatus);\n                PropertyInfo[] pi = t.GetProperties();            \n                for( int i=0; i&lt;pi.Length; i++ )\n                {\n                    object propval = pi[i].GetValue(SystemInformation.PowerStatus, null);            \n                    textBox1.Text += &quot;\\r<br>    PowerStatus.&quot;+pi[i].Name+&quot; is: &quot;+propval.ToString();\n                }\n            }\n            else\n            {\n                // Display the value of the selected property of the SystemInformation type.\n                Type t = typeof(System.Windows.Forms.SystemInformation);\n                PropertyInfo[] pi = t.GetProperties();            \n                PropertyInfo prop = null;\n                for( int i=0; i&lt;pi.Length; i++ )\n                    if( pi[i].Name == propname )\n                    {\n                        prop = pi[i];\n                        break;           \n                    }\n                object propval = prop.GetValue(null, null);            \n                textBox1.Text += &quot;\\r<br>The value of the &quot;+propname+&quot; property is: &quot;+propval.ToString();\n            }\n        }\n\n        private void InitForm()\n        {\n            // Initialize the form settings\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();            \n            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));\n            this.listBox1.Location = new System.Drawing.Point(8, 16);\n            this.listBox1.Size = new System.Drawing.Size(172, 496);\n            this.listBox1.TabIndex = 0;            \n            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n                | System.Windows.Forms.AnchorStyles.Right)));\n            this.textBox1.Location = new System.Drawing.Point(188, 16);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;           \n            this.textBox1.Size = new System.Drawing.Size(420, 496);\n            this.textBox1.TabIndex = 1;            \n            this.ClientSize = new System.Drawing.Size(616, 525);            \n            this.Controls.Add(this.textBox1);\n            this.Controls.Add(this.listBox1);            \n            this.Text = &quot;Select a SystemInformation property to get the value of&quot;;                   \n        }\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new SystemInfoBrowserForm());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.SystemInformation.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.SystemInformation.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.ActiveWindowTrackingDelay\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.ArrangeDirection\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.ArrangeStartingPosition\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.BootMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.Border3DSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.BorderMultiplierFactor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.BorderSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.CaptionButtonSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.CaptionHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.CaretBlinkTime\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.CaretWidth\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.ComputerName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.CursorSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.DbcsEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.DebugOS\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.DoubleClickSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.DoubleClickTime\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.DragFullWindows\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.DragSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.FixedFrameBorderSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.FontSmoothingContrast\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.FontSmoothingType\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.FrameBorderSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.HighContrast\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.HorizontalFocusThickness\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.HorizontalResizeBorderThickness\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.HorizontalScrollBarArrowWidth\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.HorizontalScrollBarHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.HorizontalScrollBarThumbWidth\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IconHorizontalSpacing\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IconSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IconSpacingSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IconVerticalSpacing\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsActiveWindowTrackingEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsComboBoxAnimationEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsDropShadowEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsFlatMenuEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsFontSmoothingEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsHotTrackingEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsIconTitleWrappingEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsKeyboardPreferred\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsListBoxSmoothScrollingEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsMenuAnimationEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsMenuFadeEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsMinimizeRestoreAnimationEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsSelectionFadeEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsSnapToDefaultEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsTitleBarGradientEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.IsToolTipAnimationEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.KanjiWindowHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.KeyboardDelay\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.KeyboardSpeed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MaxWindowTrackSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MenuAccessKeysUnderlined\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MenuBarButtonSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MenuButtonSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MenuCheckSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MenuFont\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MenuHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MenuShowDelay\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MidEastEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MinimizedWindowSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MinimizedWindowSpacingSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MinimumWindowSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MinWindowTrackSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MonitorCount\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MonitorsSameDisplayFormat\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MouseButtons\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MouseButtonsSwapped\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MouseHoverSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MouseHoverTime\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MousePresent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MouseSpeed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MouseWheelPresent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MouseWheelScrollDelta\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.MouseWheelScrollLines\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.NativeMouseWheelSupport\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.Network\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.PenWindows\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.PopupMenuAlignment\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.PowerStatus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.PrimaryMonitorMaximizedWindowSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.PrimaryMonitorSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.RightAlignedMenus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.ScreenOrientation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.Secure\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.ShowSounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.SizingBorderWidth\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.SmallCaptionButtonSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.SmallIconSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.TerminalServerSession\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.ToolWindowCaptionButtonSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.ToolWindowCaptionHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.UIEffectsEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.UserDomainName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.UserInteractive\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.UserName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.VerticalFocusThickness\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.VerticalResizeBorderThickness\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.VerticalScrollBarArrowHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.VerticalScrollBarThumbHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.VerticalScrollBarWidth\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.VirtualScreen\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.SystemInformation.WorkingArea\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8bd498d5-dffd-f3e3-d4e1-1689d97c9aea\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about the current system environment.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.SystemInformation\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.SystemInformation.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.SystemInformation.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.SystemInformation","System.Windows.Forms.SystemInformation.ActiveWindowTrackingDelay","System.Windows.Forms.SystemInformation.ArrangeDirection","System.Windows.Forms.SystemInformation.ArrangeStartingPosition","System.Windows.Forms.SystemInformation.BootMode","System.Windows.Forms.SystemInformation.Border3DSize","System.Windows.Forms.SystemInformation.BorderMultiplierFactor","System.Windows.Forms.SystemInformation.BorderSize","System.Windows.Forms.SystemInformation.CaptionButtonSize","System.Windows.Forms.SystemInformation.CaptionHeight","System.Windows.Forms.SystemInformation.CaretBlinkTime","System.Windows.Forms.SystemInformation.CaretWidth","System.Windows.Forms.SystemInformation.ComputerName","System.Windows.Forms.SystemInformation.CursorSize","System.Windows.Forms.SystemInformation.DbcsEnabled","System.Windows.Forms.SystemInformation.DebugOS","System.Windows.Forms.SystemInformation.DoubleClickSize","System.Windows.Forms.SystemInformation.DoubleClickTime","System.Windows.Forms.SystemInformation.DragFullWindows","System.Windows.Forms.SystemInformation.DragSize","System.Windows.Forms.SystemInformation.FixedFrameBorderSize","System.Windows.Forms.SystemInformation.FontSmoothingContrast","System.Windows.Forms.SystemInformation.FontSmoothingType","System.Windows.Forms.SystemInformation.FrameBorderSize","System.Windows.Forms.SystemInformation.HighContrast","System.Windows.Forms.SystemInformation.HorizontalFocusThickness","System.Windows.Forms.SystemInformation.HorizontalResizeBorderThickness","System.Windows.Forms.SystemInformation.HorizontalScrollBarArrowWidth","System.Windows.Forms.SystemInformation.HorizontalScrollBarHeight","System.Windows.Forms.SystemInformation.HorizontalScrollBarThumbWidth","System.Windows.Forms.SystemInformation.IconHorizontalSpacing","System.Windows.Forms.SystemInformation.IconSize","System.Windows.Forms.SystemInformation.IconSpacingSize","System.Windows.Forms.SystemInformation.IconVerticalSpacing","System.Windows.Forms.SystemInformation.IsActiveWindowTrackingEnabled","System.Windows.Forms.SystemInformation.IsComboBoxAnimationEnabled","System.Windows.Forms.SystemInformation.IsDropShadowEnabled","System.Windows.Forms.SystemInformation.IsFlatMenuEnabled","System.Windows.Forms.SystemInformation.IsFontSmoothingEnabled","System.Windows.Forms.SystemInformation.IsHotTrackingEnabled","System.Windows.Forms.SystemInformation.IsIconTitleWrappingEnabled","System.Windows.Forms.SystemInformation.IsKeyboardPreferred","System.Windows.Forms.SystemInformation.IsListBoxSmoothScrollingEnabled","System.Windows.Forms.SystemInformation.IsMenuAnimationEnabled","System.Windows.Forms.SystemInformation.IsMenuFadeEnabled","System.Windows.Forms.SystemInformation.IsMinimizeRestoreAnimationEnabled","System.Windows.Forms.SystemInformation.IsSelectionFadeEnabled","System.Windows.Forms.SystemInformation.IsSnapToDefaultEnabled","System.Windows.Forms.SystemInformation.IsTitleBarGradientEnabled","System.Windows.Forms.SystemInformation.IsToolTipAnimationEnabled","System.Windows.Forms.SystemInformation.KanjiWindowHeight","System.Windows.Forms.SystemInformation.KeyboardDelay","System.Windows.Forms.SystemInformation.KeyboardSpeed","System.Windows.Forms.SystemInformation.MaxWindowTrackSize","System.Windows.Forms.SystemInformation.MenuAccessKeysUnderlined","System.Windows.Forms.SystemInformation.MenuBarButtonSize","System.Windows.Forms.SystemInformation.MenuButtonSize","System.Windows.Forms.SystemInformation.MenuCheckSize","System.Windows.Forms.SystemInformation.MenuFont","System.Windows.Forms.SystemInformation.MenuHeight","System.Windows.Forms.SystemInformation.MenuShowDelay","System.Windows.Forms.SystemInformation.MidEastEnabled","System.Windows.Forms.SystemInformation.MinimizedWindowSize","System.Windows.Forms.SystemInformation.MinimizedWindowSpacingSize","System.Windows.Forms.SystemInformation.MinimumWindowSize","System.Windows.Forms.SystemInformation.MinWindowTrackSize","System.Windows.Forms.SystemInformation.MonitorCount","System.Windows.Forms.SystemInformation.MonitorsSameDisplayFormat","System.Windows.Forms.SystemInformation.MouseButtons","System.Windows.Forms.SystemInformation.MouseButtonsSwapped","System.Windows.Forms.SystemInformation.MouseHoverSize","System.Windows.Forms.SystemInformation.MouseHoverTime","System.Windows.Forms.SystemInformation.MousePresent","System.Windows.Forms.SystemInformation.MouseSpeed","System.Windows.Forms.SystemInformation.MouseWheelPresent","System.Windows.Forms.SystemInformation.MouseWheelScrollDelta","System.Windows.Forms.SystemInformation.MouseWheelScrollLines","System.Windows.Forms.SystemInformation.NativeMouseWheelSupport","System.Windows.Forms.SystemInformation.Network","System.Windows.Forms.SystemInformation.PenWindows","System.Windows.Forms.SystemInformation.PopupMenuAlignment","System.Windows.Forms.SystemInformation.PowerStatus","System.Windows.Forms.SystemInformation.PrimaryMonitorMaximizedWindowSize","System.Windows.Forms.SystemInformation.PrimaryMonitorSize","System.Windows.Forms.SystemInformation.RightAlignedMenus","System.Windows.Forms.SystemInformation.ScreenOrientation","System.Windows.Forms.SystemInformation.Secure","System.Windows.Forms.SystemInformation.ShowSounds","System.Windows.Forms.SystemInformation.SizingBorderWidth","System.Windows.Forms.SystemInformation.SmallCaptionButtonSize","System.Windows.Forms.SystemInformation.SmallIconSize","System.Windows.Forms.SystemInformation.TerminalServerSession","System.Windows.Forms.SystemInformation.ToolWindowCaptionButtonSize","System.Windows.Forms.SystemInformation.ToolWindowCaptionHeight","System.Windows.Forms.SystemInformation.UIEffectsEnabled","System.Windows.Forms.SystemInformation.UserDomainName","System.Windows.Forms.SystemInformation.UserInteractive","System.Windows.Forms.SystemInformation.UserName","System.Windows.Forms.SystemInformation.VerticalFocusThickness","System.Windows.Forms.SystemInformation.VerticalResizeBorderThickness","System.Windows.Forms.SystemInformation.VerticalScrollBarArrowHeight","System.Windows.Forms.SystemInformation.VerticalScrollBarThumbHeight","System.Windows.Forms.SystemInformation.VerticalScrollBarWidth","System.Windows.Forms.SystemInformation.VirtualScreen","System.Windows.Forms.SystemInformation.WorkingArea"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.SystemInformation","System::Windows::Forms::SystemInformation","System.Windows.Forms.SystemInformation.ActiveWindowTrackingDelay","System::Windows::Forms::SystemInformation::ActiveWindowTrackingDelay","System.Windows.Forms.SystemInformation.ArrangeDirection","System::Windows::Forms::SystemInformation::ArrangeDirection","System.Windows.Forms.SystemInformation.ArrangeStartingPosition","System::Windows::Forms::SystemInformation::ArrangeStartingPosition","System.Windows.Forms.SystemInformation.BootMode","System::Windows::Forms::SystemInformation::BootMode","System.Windows.Forms.SystemInformation.Border3DSize","System::Windows::Forms::SystemInformation::Border3DSize","System.Windows.Forms.SystemInformation.BorderMultiplierFactor","System::Windows::Forms::SystemInformation::BorderMultiplierFactor","System.Windows.Forms.SystemInformation.BorderSize","System::Windows::Forms::SystemInformation::BorderSize","System.Windows.Forms.SystemInformation.CaptionButtonSize","System::Windows::Forms::SystemInformation::CaptionButtonSize","System.Windows.Forms.SystemInformation.CaptionHeight","System::Windows::Forms::SystemInformation::CaptionHeight","System.Windows.Forms.SystemInformation.CaretBlinkTime","System::Windows::Forms::SystemInformation::CaretBlinkTime","System.Windows.Forms.SystemInformation.CaretWidth","System::Windows::Forms::SystemInformation::CaretWidth","System.Windows.Forms.SystemInformation.ComputerName","System::Windows::Forms::SystemInformation::ComputerName","System.Windows.Forms.SystemInformation.CursorSize","System::Windows::Forms::SystemInformation::CursorSize","System.Windows.Forms.SystemInformation.DbcsEnabled","System::Windows::Forms::SystemInformation::DbcsEnabled","System.Windows.Forms.SystemInformation.DebugOS","System::Windows::Forms::SystemInformation::DebugOS","System.Windows.Forms.SystemInformation.DoubleClickSize","System::Windows::Forms::SystemInformation::DoubleClickSize","System.Windows.Forms.SystemInformation.DoubleClickTime","System::Windows::Forms::SystemInformation::DoubleClickTime","System.Windows.Forms.SystemInformation.DragFullWindows","System::Windows::Forms::SystemInformation::DragFullWindows","System.Windows.Forms.SystemInformation.DragSize","System::Windows::Forms::SystemInformation::DragSize","System.Windows.Forms.SystemInformation.FixedFrameBorderSize","System::Windows::Forms::SystemInformation::FixedFrameBorderSize","System.Windows.Forms.SystemInformation.FontSmoothingContrast","System::Windows::Forms::SystemInformation::FontSmoothingContrast","System.Windows.Forms.SystemInformation.FontSmoothingType","System::Windows::Forms::SystemInformation::FontSmoothingType","System.Windows.Forms.SystemInformation.FrameBorderSize","System::Windows::Forms::SystemInformation::FrameBorderSize","System.Windows.Forms.SystemInformation.HighContrast","System::Windows::Forms::SystemInformation::HighContrast","System.Windows.Forms.SystemInformation.HorizontalFocusThickness","System::Windows::Forms::SystemInformation::HorizontalFocusThickness","System.Windows.Forms.SystemInformation.HorizontalResizeBorderThickness","System::Windows::Forms::SystemInformation::HorizontalResizeBorderThickness","System.Windows.Forms.SystemInformation.HorizontalScrollBarArrowWidth","System::Windows::Forms::SystemInformation::HorizontalScrollBarArrowWidth","System.Windows.Forms.SystemInformation.HorizontalScrollBarHeight","System::Windows::Forms::SystemInformation::HorizontalScrollBarHeight","System.Windows.Forms.SystemInformation.HorizontalScrollBarThumbWidth","System::Windows::Forms::SystemInformation::HorizontalScrollBarThumbWidth","System.Windows.Forms.SystemInformation.IconHorizontalSpacing","System::Windows::Forms::SystemInformation::IconHorizontalSpacing","System.Windows.Forms.SystemInformation.IconSize","System::Windows::Forms::SystemInformation::IconSize","System.Windows.Forms.SystemInformation.IconSpacingSize","System::Windows::Forms::SystemInformation::IconSpacingSize","System.Windows.Forms.SystemInformation.IconVerticalSpacing","System::Windows::Forms::SystemInformation::IconVerticalSpacing","System.Windows.Forms.SystemInformation.IsActiveWindowTrackingEnabled","System::Windows::Forms::SystemInformation::IsActiveWindowTrackingEnabled","System.Windows.Forms.SystemInformation.IsComboBoxAnimationEnabled","System::Windows::Forms::SystemInformation::IsComboBoxAnimationEnabled","System.Windows.Forms.SystemInformation.IsDropShadowEnabled","System::Windows::Forms::SystemInformation::IsDropShadowEnabled","System.Windows.Forms.SystemInformation.IsFlatMenuEnabled","System::Windows::Forms::SystemInformation::IsFlatMenuEnabled","System.Windows.Forms.SystemInformation.IsFontSmoothingEnabled","System::Windows::Forms::SystemInformation::IsFontSmoothingEnabled","System.Windows.Forms.SystemInformation.IsHotTrackingEnabled","System::Windows::Forms::SystemInformation::IsHotTrackingEnabled","System.Windows.Forms.SystemInformation.IsIconTitleWrappingEnabled","System::Windows::Forms::SystemInformation::IsIconTitleWrappingEnabled","System.Windows.Forms.SystemInformation.IsKeyboardPreferred","System::Windows::Forms::SystemInformation::IsKeyboardPreferred","System.Windows.Forms.SystemInformation.IsListBoxSmoothScrollingEnabled","System::Windows::Forms::SystemInformation::IsListBoxSmoothScrollingEnabled","System.Windows.Forms.SystemInformation.IsMenuAnimationEnabled","System::Windows::Forms::SystemInformation::IsMenuAnimationEnabled","System.Windows.Forms.SystemInformation.IsMenuFadeEnabled","System::Windows::Forms::SystemInformation::IsMenuFadeEnabled","System.Windows.Forms.SystemInformation.IsMinimizeRestoreAnimationEnabled","System::Windows::Forms::SystemInformation::IsMinimizeRestoreAnimationEnabled","System.Windows.Forms.SystemInformation.IsSelectionFadeEnabled","System::Windows::Forms::SystemInformation::IsSelectionFadeEnabled","System.Windows.Forms.SystemInformation.IsSnapToDefaultEnabled","System::Windows::Forms::SystemInformation::IsSnapToDefaultEnabled","System.Windows.Forms.SystemInformation.IsTitleBarGradientEnabled","System::Windows::Forms::SystemInformation::IsTitleBarGradientEnabled","System.Windows.Forms.SystemInformation.IsToolTipAnimationEnabled","System::Windows::Forms::SystemInformation::IsToolTipAnimationEnabled","System.Windows.Forms.SystemInformation.KanjiWindowHeight","System::Windows::Forms::SystemInformation::KanjiWindowHeight","System.Windows.Forms.SystemInformation.KeyboardDelay","System::Windows::Forms::SystemInformation::KeyboardDelay","System.Windows.Forms.SystemInformation.KeyboardSpeed","System::Windows::Forms::SystemInformation::KeyboardSpeed","System.Windows.Forms.SystemInformation.MaxWindowTrackSize","System::Windows::Forms::SystemInformation::MaxWindowTrackSize","System.Windows.Forms.SystemInformation.MenuAccessKeysUnderlined","System::Windows::Forms::SystemInformation::MenuAccessKeysUnderlined","System.Windows.Forms.SystemInformation.MenuBarButtonSize","System::Windows::Forms::SystemInformation::MenuBarButtonSize","System.Windows.Forms.SystemInformation.MenuButtonSize","System::Windows::Forms::SystemInformation::MenuButtonSize","System.Windows.Forms.SystemInformation.MenuCheckSize","System::Windows::Forms::SystemInformation::MenuCheckSize","System.Windows.Forms.SystemInformation.MenuFont","System::Windows::Forms::SystemInformation::MenuFont","System.Windows.Forms.SystemInformation.MenuHeight","System::Windows::Forms::SystemInformation::MenuHeight","System.Windows.Forms.SystemInformation.MenuShowDelay","System::Windows::Forms::SystemInformation::MenuShowDelay","System.Windows.Forms.SystemInformation.MidEastEnabled","System::Windows::Forms::SystemInformation::MidEastEnabled","System.Windows.Forms.SystemInformation.MinimizedWindowSize","System::Windows::Forms::SystemInformation::MinimizedWindowSize","System.Windows.Forms.SystemInformation.MinimizedWindowSpacingSize","System::Windows::Forms::SystemInformation::MinimizedWindowSpacingSize","System.Windows.Forms.SystemInformation.MinimumWindowSize","System::Windows::Forms::SystemInformation::MinimumWindowSize","System.Windows.Forms.SystemInformation.MinWindowTrackSize","System::Windows::Forms::SystemInformation::MinWindowTrackSize","System.Windows.Forms.SystemInformation.MonitorCount","System::Windows::Forms::SystemInformation::MonitorCount","System.Windows.Forms.SystemInformation.MonitorsSameDisplayFormat","System::Windows::Forms::SystemInformation::MonitorsSameDisplayFormat","System.Windows.Forms.SystemInformation.MouseButtons","System::Windows::Forms::SystemInformation::MouseButtons","System.Windows.Forms.SystemInformation.MouseButtonsSwapped","System::Windows::Forms::SystemInformation::MouseButtonsSwapped","System.Windows.Forms.SystemInformation.MouseHoverSize","System::Windows::Forms::SystemInformation::MouseHoverSize","System.Windows.Forms.SystemInformation.MouseHoverTime","System::Windows::Forms::SystemInformation::MouseHoverTime","System.Windows.Forms.SystemInformation.MousePresent","System::Windows::Forms::SystemInformation::MousePresent","System.Windows.Forms.SystemInformation.MouseSpeed","System::Windows::Forms::SystemInformation::MouseSpeed","System.Windows.Forms.SystemInformation.MouseWheelPresent","System::Windows::Forms::SystemInformation::MouseWheelPresent","System.Windows.Forms.SystemInformation.MouseWheelScrollDelta","System::Windows::Forms::SystemInformation::MouseWheelScrollDelta","System.Windows.Forms.SystemInformation.MouseWheelScrollLines","System::Windows::Forms::SystemInformation::MouseWheelScrollLines","System.Windows.Forms.SystemInformation.NativeMouseWheelSupport","System::Windows::Forms::SystemInformation::NativeMouseWheelSupport","System.Windows.Forms.SystemInformation.Network","System::Windows::Forms::SystemInformation::Network","System.Windows.Forms.SystemInformation.PenWindows","System::Windows::Forms::SystemInformation::PenWindows","System.Windows.Forms.SystemInformation.PopupMenuAlignment","System::Windows::Forms::SystemInformation::PopupMenuAlignment","System.Windows.Forms.SystemInformation.PowerStatus","System::Windows::Forms::SystemInformation::PowerStatus","System.Windows.Forms.SystemInformation.PrimaryMonitorMaximizedWindowSize","System::Windows::Forms::SystemInformation::PrimaryMonitorMaximizedWindowSize","System.Windows.Forms.SystemInformation.PrimaryMonitorSize","System::Windows::Forms::SystemInformation::PrimaryMonitorSize","System.Windows.Forms.SystemInformation.RightAlignedMenus","System::Windows::Forms::SystemInformation::RightAlignedMenus","System.Windows.Forms.SystemInformation.ScreenOrientation","System::Windows::Forms::SystemInformation::ScreenOrientation","System.Windows.Forms.SystemInformation.Secure","System::Windows::Forms::SystemInformation::Secure","System.Windows.Forms.SystemInformation.ShowSounds","System::Windows::Forms::SystemInformation::ShowSounds","System.Windows.Forms.SystemInformation.SizingBorderWidth","System::Windows::Forms::SystemInformation::SizingBorderWidth","System.Windows.Forms.SystemInformation.SmallCaptionButtonSize","System::Windows::Forms::SystemInformation::SmallCaptionButtonSize","System.Windows.Forms.SystemInformation.SmallIconSize","System::Windows::Forms::SystemInformation::SmallIconSize","System.Windows.Forms.SystemInformation.TerminalServerSession","System::Windows::Forms::SystemInformation::TerminalServerSession","System.Windows.Forms.SystemInformation.ToolWindowCaptionButtonSize","System::Windows::Forms::SystemInformation::ToolWindowCaptionButtonSize","System.Windows.Forms.SystemInformation.ToolWindowCaptionHeight","System::Windows::Forms::SystemInformation::ToolWindowCaptionHeight","System.Windows.Forms.SystemInformation.UIEffectsEnabled","System::Windows::Forms::SystemInformation::UIEffectsEnabled","System.Windows.Forms.SystemInformation.UserDomainName","System::Windows::Forms::SystemInformation::UserDomainName","System.Windows.Forms.SystemInformation.UserInteractive","System::Windows::Forms::SystemInformation::UserInteractive","System.Windows.Forms.SystemInformation.UserName","System::Windows::Forms::SystemInformation::UserName","System.Windows.Forms.SystemInformation.VerticalFocusThickness","System::Windows::Forms::SystemInformation::VerticalFocusThickness","System.Windows.Forms.SystemInformation.VerticalResizeBorderThickness","System::Windows::Forms::SystemInformation::VerticalResizeBorderThickness","System.Windows.Forms.SystemInformation.VerticalScrollBarArrowHeight","System::Windows::Forms::SystemInformation::VerticalScrollBarArrowHeight","System.Windows.Forms.SystemInformation.VerticalScrollBarThumbHeight","System::Windows::Forms::SystemInformation::VerticalScrollBarThumbHeight","System.Windows.Forms.SystemInformation.VerticalScrollBarWidth","System::Windows::Forms::SystemInformation::VerticalScrollBarWidth","System.Windows.Forms.SystemInformation.VirtualScreen","System::Windows::Forms::SystemInformation::VirtualScreen","System.Windows.Forms.SystemInformation.WorkingArea","System::Windows::Forms::SystemInformation::WorkingArea"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8bd498d5-dffd-f3e3-d4e1-1689d97c9aea","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/SystemInformation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SystemInformation class | Microsoft Docs","_op_ogTitle":"SystemInformation class","description":"Provides information about the current system environment.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.SystemInformation","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.systeminformation","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.systeminformation","fileRelativePath":"System.Windows.Forms.SystemInformation.html"},"themesRelativePathToOutputRoot":"_themes/"}