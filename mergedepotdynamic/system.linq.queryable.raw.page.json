{"content":"    \r\n    <h1 id=\"System_Linq_Queryable\">\r\n      <span class=\"lang-csharp\">Queryable</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a set of <code>static</code> (<code>Shared</code> in Visual Basic) methods for querying data structures that implement <span class=\"xref\">stem.Linq.IQueryable`1</span>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Queryable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Queryable</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The set of methods declared in the Queryable class provides an implementation of the standard query operators for querying data sources that implement <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a>. The standard query operators are general purpose methods that follow the LINQ pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.  </p>\n<p> The majority of the methods in this class are defined as extension methods that extend the <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> type. This means they can be called like an instance method on any object that implements <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a>. These methods that extend <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> do not perform any querying directly. Instead, their functionality is to build an <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> object, which is an expression tree that represents the cumulative query. The methods then pass the new expression tree to either the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method or the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the input <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a>. The method that is called depends on whether the Queryable method returns a singleton value, in which case <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> is called, or has enumerable results, in which case <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is called.  </p>\n<p> The actual query execution on the target data is performed by a class that implements <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a>. The expectation of any <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> implementation is that the result of executing an expression tree that was constructed by a Queryable standard query operator method is equivalent to the result of calling the corresponding method in the <a class=\"xref\" href=\"system.linq.enumerable\" data-linktype=\"relative-path\">Enumerable</a> class, if the data source were an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>.  </p>\n<p> In addition to the standard query operator methods that operate on <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> objects, this class also contains a method, <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_AsQueryable_\" data-linktype=\"relative-path\">AsQueryable</a>, which types <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> objects as <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> objects.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Aggregate__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___0___0___\" data-linktype=\"self-bookmark\">Aggregate&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TSource,TSource&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an accumulator function over a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Aggregate__2_System_Linq_IQueryable___0____1_System_Linq_Expressions_Expression_System_Func___1___0___1___\" data-linktype=\"self-bookmark\">Aggregate&lt;TSource,TAccumulate&gt;(IQueryable&lt;TSource&gt;,TAccumulate,Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Aggregate__3_System_Linq_IQueryable___0____1_System_Linq_Expressions_Expression_System_Func___1___0___1___System_Linq_Expressions_Expression_System_Func___1___2___\" data-linktype=\"self-bookmark\">Aggregate&lt;TSource,TAccumulate,TResult&gt;(IQueryable&lt;TSource&gt;,TAccumulate,Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;,Expression&lt;Func&lt;TAccumulate,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_All__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">All&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether all the elements of a sequence satisfy a condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Any__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">Any&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a sequence contains any elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Any__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">Any&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any element of a sequence satisfies a condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_AsQueryable_System_Collections_IEnumerable_\" data-linktype=\"self-bookmark\">AsQueryable(IEnumerable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> to an <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_AsQueryable__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">AsQueryable&lt;TElement&gt;(IEnumerable&lt;TElement&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a generic <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to a generic <span class=\"xref\">stem.Linq.IQueryable`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Decimal__\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Double__\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Int32__\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Int64__\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Single__\" data-linktype=\"self-bookmark\">Average(IQueryable&lt;Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Decimal___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int64___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Decimal____\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Double____\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Double&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Int32____\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Int32&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Int64____\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Int64&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Single____\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Single&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Single___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Cast__1_System_Linq_IQueryable_\" data-linktype=\"self-bookmark\">Cast&lt;TResult&gt;(IQueryable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the elements of an <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> to the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Concat__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Concat&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates two sequences.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Contains__1_System_Linq_IQueryable___0____0_\" data-linktype=\"self-bookmark\">Contains&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a sequence contains a specified element by using the default equality comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Contains__1_System_Linq_IQueryable___0____0_System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Contains&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a sequence contains a specified element by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Count__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">Count&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of elements in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Count__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">Count&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of elements in the specified sequence that satisfies a condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the elements of the specified sequence or the type parameter&#39;s default value in a singleton collection if the sequence is empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"self-bookmark\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Distinct__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">Distinct&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns distinct elements from a sequence by using the default equality comparer to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Distinct__1_System_Linq_IQueryable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Distinct&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns distinct elements from a sequence by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_ElementAt__1_System_Linq_IQueryable___0__System_Int32_\" data-linktype=\"self-bookmark\">ElementAt&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the element at a specified index in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_ElementAtOrDefault__1_System_Linq_IQueryable___0__System_Int32_\" data-linktype=\"self-bookmark\">ElementAtOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the element at a specified index in a sequence or a default value if the index is out of range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Except__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Except&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set difference of two sequences by using the default equality comparer to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Except__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Except&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set difference of two sequences by using the specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_First__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">First&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first element of a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_First__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">First&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first element of a sequence that satisfies a specified condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_FirstOrDefault__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">FirstOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_FirstOrDefault__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">FirstOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupBy__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___0___2___\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TElement&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TSource,TElement&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupBy__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___0___2___System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TElement&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TSource,TElement&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupBy__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___1_System_Collections_Generic_IEnumerable___0____2___\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupBy__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___1_System_Collections_Generic_IEnumerable___0____2___System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupBy__4_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1_System_Collections_Generic_IEnumerable___2____3___\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TSource,TElement&gt;&gt;,Expression&lt;Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupBy__4_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1_System_Collections_Generic_IEnumerable___2____3___System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TSource,TElement&gt;&gt;,Expression&lt;Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupJoin__4_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1___2___System_Linq_Expressions_Expression_System_Func___0_System_Collections_Generic_IEnumerable___1____3___\" data-linktype=\"self-bookmark\">GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;(IQueryable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Expression&lt;Func&lt;TOuter,TKey&gt;&gt;,Expression&lt;Func&lt;TInner,TKey&gt;&gt;,Expression&lt;Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_GroupJoin__4_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1___2___System_Linq_Expressions_Expression_System_Func___0_System_Collections_Generic_IEnumerable___1____3___System_Collections_Generic_IEqualityComparer___2__\" data-linktype=\"self-bookmark\">GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;(IQueryable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Expression&lt;Func&lt;TOuter,TKey&gt;&gt;,Expression&lt;Func&lt;TInner,TKey&gt;&gt;,Expression&lt;Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Correlates the elements of two sequences based on key equality and groups the results. A specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> is used to compare keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Intersect__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Intersect&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set intersection of two sequences by using the default equality comparer to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Intersect__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Intersect&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set intersection of two sequences by using the specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Join__4_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1___2___System_Linq_Expressions_Expression_System_Func___0___1___3___\" data-linktype=\"self-bookmark\">Join&lt;TOuter,TInner,TKey,TResult&gt;(IQueryable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Expression&lt;Func&lt;TOuter,TKey&gt;&gt;,Expression&lt;Func&lt;TInner,TKey&gt;&gt;,Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Join__4_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1___2___System_Linq_Expressions_Expression_System_Func___0___1___3___System_Collections_Generic_IEqualityComparer___2__\" data-linktype=\"self-bookmark\">Join&lt;TOuter,TInner,TKey,TResult&gt;(IQueryable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Expression&lt;Func&lt;TOuter,TKey&gt;&gt;,Expression&lt;Func&lt;TInner,TKey&gt;&gt;,Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Correlates the elements of two sequences based on matching keys. A specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> is used to compare keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Last__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">Last&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the last element in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Last__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">Last&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the last element of a sequence that satisfies a specified condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_LastOrDefault__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the last element in a sequence, or a default value if the sequence contains no elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_LastOrDefault__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_LongCount__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">LongCount&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that represents the total number of elements in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_LongCount__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">LongCount&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that represents the number of elements in a sequence that satisfy a condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Max__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a generic <span class=\"xref\">stem.Linq.IQueryable`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Max__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\" data-linktype=\"self-bookmark\">Max&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a projection function on each element of a generic <span class=\"xref\">stem.Linq.IQueryable`1</span> and returns the maximum resulting value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Min__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value of a generic <span class=\"xref\">stem.Linq.IQueryable`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Min__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\" data-linktype=\"self-bookmark\">Min&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a projection function on each element of a generic <span class=\"xref\">stem.Linq.IQueryable`1</span> and returns the minimum resulting value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_OfType__1_System_Linq_IQueryable_\" data-linktype=\"self-bookmark\">OfType&lt;TResult&gt;(IQueryable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Filters the elements of an <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> based on a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_OrderBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\" data-linktype=\"self-bookmark\">OrderBy&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements of a sequence in ascending order according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_OrderBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\" data-linktype=\"self-bookmark\">OrderBy&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements of a sequence in ascending order by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_OrderByDescending__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\" data-linktype=\"self-bookmark\">OrderByDescending&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements of a sequence in descending order according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_OrderByDescending__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\" data-linktype=\"self-bookmark\">OrderByDescending&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Reverse__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">Reverse&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inverts the order of the elements in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Select__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___1___\" data-linktype=\"self-bookmark\">Select&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence into a new form by incorporating the element&#39;s index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Select__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\" data-linktype=\"self-bookmark\">Select&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence into a new form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SelectMany__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Collections_Generic_IEnumerable___1____\" data-linktype=\"self-bookmark\">SelectMany&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,IEnumerable&lt;TResult&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and combines the resulting sequences into one sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SelectMany__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1____\" data-linktype=\"self-bookmark\">SelectMany&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,IEnumerable&lt;TResult&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SelectMany__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Collections_Generic_IEnumerable___1____System_Linq_Expressions_Expression_System_Func___0___1___2___\" data-linktype=\"self-bookmark\">SelectMany&lt;TSource,TCollection,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,IEnumerable&lt;TCollection&gt;&gt;&gt;,Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SelectMany__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1____System_Linq_Expressions_Expression_System_Func___0___1___2___\" data-linktype=\"self-bookmark\">SelectMany&lt;TSource,TCollection,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,IEnumerable&lt;TCollection&gt;&gt;&gt;,Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SequenceEqual__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">SequenceEqual&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two sequences are equal by using the default equality comparer to compare elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SequenceEqual__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">SequenceEqual&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two sequences are equal by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Single__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">Single&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Single__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">Single&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SingleOrDefault__1_System_Linq_IQueryable___0__\" data-linktype=\"self-bookmark\">SingleOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SingleOrDefault__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">SingleOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Skip__1_System_Linq_IQueryable___0__System_Int32_\" data-linktype=\"self-bookmark\">Skip&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SkipWhile__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">SkipWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_SkipWhile__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Boolean___\" data-linktype=\"self-bookmark\">SkipWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element&#39;s index is used in the logic of the predicate function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Decimal__\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Double__\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Int32__\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Int64__\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Single__\" data-linktype=\"self-bookmark\">Sum(IQueryable&lt;Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Decimal___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int64___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Decimal____\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Double____\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Double&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Int32____\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Int32&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Int64____\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Int64&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Single____\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Single&gt;&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Single___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Take__1_System_Linq_IQueryable___0__System_Int32_\" data-linktype=\"self-bookmark\">Take&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a specified number of contiguous elements from the start of a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_TakeWhile__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">TakeWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns elements from a sequence as long as a specified condition is true.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_TakeWhile__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Boolean___\" data-linktype=\"self-bookmark\">TakeWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns elements from a sequence as long as a specified condition is true. The element&#39;s index is used in the logic of the predicate function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_ThenBy__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\" data-linktype=\"self-bookmark\">ThenBy&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_ThenBy__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\" data-linktype=\"self-bookmark\">ThenBy&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_ThenByDescending__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\" data-linktype=\"self-bookmark\">ThenByDescending&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_ThenByDescending__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\" data-linktype=\"self-bookmark\">ThenByDescending&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Union__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Union&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set union of two sequences by using the default equality comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Union__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Union&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set union of two sequences by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Where__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"self-bookmark\">Where&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Filters a sequence of values based on a predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Where__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Boolean___\" data-linktype=\"self-bookmark\">Where&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,Boolean&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Filters a sequence of values based on a predicate. Each element&#39;s index is used in the logic of the predicate function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Queryable_Zip__3_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___1___2___\" data-linktype=\"self-bookmark\">Zip&lt;TFirst,TSecond,TResult&gt;(IQueryable&lt;TFirst&gt;,IEnumerable&lt;TSecond&gt;,Expression&lt;Func&lt;TFirst,TSecond,TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merges two sequences by using the specified predicate function.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Aggregate__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___0___0___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Aggregate_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Aggregate&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TSource,TSource&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an accumulator function over a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Aggregate&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TSource,TSource&gt;&gt; func);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence to aggregate over.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>func</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TSource</span>,<span class=\"xref\">TSource</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An accumulator function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The final accumulator value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>func</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Aggregate(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Aggregate(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Aggregate(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that the specified function, <code>func</code>, is applied to each value in the source sequence and the accumulated value is returned. The first value in <code>source</code> is used as the seed value for the accumulated value, which corresponds to the first parameter in <code>func</code>.  </p>\n<p> To simplify common aggregation operations, the set of standard query operators also includes two counting methods, &lt;xref:System.Linq.Queryable.Count%2A&gt; and &lt;xref:System.Linq.Queryable.LongCount%2A&gt;, and four numeric aggregation methods, namely &lt;xref:System.Linq.Queryable.Max%2A&gt;, &lt;xref:System.Linq.Queryable.Min%2A&gt;, <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_\" data-linktype=\"relative-path\">Sum</a>, and <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Aggregate(TSource) to build a sentence from an array of strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#1\">            string sentence = &quot;the quick brown fox jumps over the lazy dog&quot;;\n\n            // Split the string into individual words.\n            string[] words = sentence.Split(&#39; &#39;);\n\n            // Use Aggregate() to prepend each word to the beginning of the \n            // new sentence to reverse the word order.\n            string reversed =\n                words.AsQueryable().Aggregate(\n                (workingSentence, next) =&gt; next + &quot; &quot; + workingSentence\n                );\n\n            Console.WriteLine(reversed);\n\n            // This code produces the following output:\n            //\n            // dog lazy the over jumps fox brown quick the \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#1\">        Dim sentence As String = &quot;the quick brown fox jumps over the lazy dog&quot;\n\n        &#39; Split the string into individual words.\n        Dim words() As String = sentence.Split(&quot; &quot;c)\n\n        &#39; Use Aggregate() to prepend each word to the beginning of the \n        &#39; new sentence to reverse the word order.\n        Dim reversed As String = _\n            words.AsQueryable().Aggregate( _\n                Function(ByVal workingSentence, ByVal nextWord) nextWord &amp; &quot; &quot; &amp; workingSentence _\n            )\n\n        MsgBox(reversed)\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; dog lazy the over jumps fox brown quick the\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Aggregate__2_System_Linq_IQueryable___0____1_System_Linq_Expressions_Expression_System_Func___1___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Aggregate_TSource_TAccumulate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Aggregate&lt;TSource,TAccumulate&gt;(IQueryable&lt;TSource&gt;,TAccumulate,Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TAccumulate seed, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt; func);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence to aggregate over.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>seed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TAccumulate</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial accumulator value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>func</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TAccumulate</span>,<span class=\"xref\">TSource</span>,<span class=\"xref\">TAccumulate</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An accumulator function to invoke on each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TAccumulate</span></div>\r\n                  </div>\r\n                  <p>The final accumulator value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>func</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Aggregate(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Aggregate(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Aggregate(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that the specified function, <code>func</code>, is applied to each value in the source sequence and the accumulated value is returned. The <code>seed</code> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <code>func</code>.  </p>\n<p> To simplify common aggregation operations, the set of standard query operators also includes two counting methods, &lt;xref:System.Linq.Queryable.Count%2A&gt; and &lt;xref:System.Linq.Queryable.LongCount%2A&gt;, and four numeric aggregation methods, namely &lt;xref:System.Linq.Queryable.Max%2A&gt;, &lt;xref:System.Linq.Queryable.Min%2A&gt;, <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_\" data-linktype=\"relative-path\">Sum</a>, and <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Aggregate(TSource, to apply an accumulator function when a seed value is provided to the function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#2\">            int[] ints = { 4, 8, 8, 3, 9, 0, 7, 8, 2 };\n\n            // Count the even numbers in the array, using a seed value of 0.\n            int numEven =\n                ints.AsQueryable().Aggregate(\n                0,\n                (total, next) =&gt; next % 2 == 0 ? total + 1 : total\n                );\n\n            Console.WriteLine(&quot;The number of even integers is: {0}&quot;, numEven);\n\n            // This code produces the following output:\n            //\n            // The number of even integers is: 6 \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#2\">        Dim ints() As Integer = {4, 8, 8, 3, 9, 0, 7, 8, 2}\n\n        &#39; Count the even numbers in the array, using a seed value of 0.\n        Dim numEven As Integer = _\n            ints.AsQueryable().Aggregate( _\n                0, _\n                Function(ByVal total, ByVal number) _\n                    IIf(number Mod 2 = 0, total + 1, total) _\n            )\n\n        MsgBox(String.Format(&quot;The number of even integers is: {0}&quot;, numEven))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The number of even integers is: 6 \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Aggregate__3_System_Linq_IQueryable___0____1_System_Linq_Expressions_Expression_System_Func___1___0___1___System_Linq_Expressions_Expression_System_Func___1___2___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Aggregate_TSource_TAccumulate_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Aggregate&lt;TSource,TAccumulate,TResult&gt;(IQueryable&lt;TSource&gt;,TAccumulate,Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;,Expression&lt;Func&lt;TAccumulate,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TAccumulate seed, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt; func, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TResult&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence to aggregate over.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>seed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TAccumulate</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial accumulator value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>func</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TAccumulate</span>,<span class=\"xref\">TSource</span>,<span class=\"xref\">TAccumulate</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An accumulator function to invoke on each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TAccumulate</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to transform the final accumulator value into the result value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>The transformed final accumulator value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>func</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Aggregate(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Aggregate(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Aggregate(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that the specified function, <code>func</code>, is applied to each value in the source sequence and the accumulated value is returned. The <code>seed</code> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <code>func</code>. The final accumulated value is passed to <code>selector</code> to obtain the result value.  </p>\n<p> To simplify common aggregation operations, the set of standard query operators also includes two counting methods, &lt;xref:System.Linq.Queryable.Count%2A&gt; and &lt;xref:System.Linq.Queryable.LongCount%2A&gt;, and four numeric aggregation methods, namely &lt;xref:System.Linq.Queryable.Max%2A&gt;, &lt;xref:System.Linq.Queryable.Min%2A&gt;, <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_\" data-linktype=\"relative-path\">Sum</a>, and <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Aggregate(TSource, to apply an accumulator function and a result selector.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#3\">            string[] fruits = { &quot;apple&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine whether any string in the array is longer than &quot;banana&quot;.\n            string longestName =\n                fruits.AsQueryable().Aggregate(\n                &quot;banana&quot;,\n                (longest, next) =&gt; next.Length &gt; longest.Length ? next : longest,\n                // Return the final result as an uppercase string.\n                fruit =&gt; fruit.ToUpper()\n                );\n\n            Console.WriteLine(\n                &quot;The fruit with the longest name is {0}.&quot;,\n                longestName);\n\n            // This code produces the following output:\n            //\n            // The fruit with the longest name is PASSIONFRUIT. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#3\">        Dim fruits() As String = {&quot;apple&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine whether any string in the array is longer than &quot;banana&quot;.\n        Dim longestName As String = _\n            fruits.AsQueryable().Aggregate( _\n            &quot;banana&quot;, _\n            Function(ByVal longest, ByVal fruit) IIf(fruit.Length &gt; longest.Length, fruit, longest), _\n            Function(ByVal fruit) fruit.ToUpper() _\n        )\n\n        MsgBox(String.Format( _\n            &quot;The fruit with the longest name is {0}.&quot;, longestName) _\n        )\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The fruit with the longest name is PASSIONFRUIT. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_All__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_All_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">All&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether all the elements of a sequence satisfy a condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool All&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence whose elements to test for a condition.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The All(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling All(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling All(TSource) depends on the implementation of the <code>source</code> parameter&#39;s type. The expected behavior is that it determines if all the elements in <code>source</code> satisfy the condition in <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use All(TSource) to determine whether all the elements in a sequence satisfy a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#4\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void AllEx1()\n            {\n                // Create an array of Pets.\n                Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=10 },\n                               new Pet { Name=&quot;Boots&quot;, Age=4 },\n                               new Pet { Name=&quot;Whiskers&quot;, Age=6 } };\n\n                // Determine whether all pet names in the array start with &#39;B&#39;.\n                bool allStartWithB =\n                    pets.AsQueryable().All(pet =&gt; pet.Name.StartsWith(&quot;B&quot;));\n\n                Console.WriteLine(\n                    &quot;{0} pet names start with &#39;B&#39;.&quot;,\n                    allStartWithB ? &quot;All&quot; : &quot;Not all&quot;);\n            }\n\n            // This code produces the following output:\n            //\n            //  Not all pet names start with &#39;B&#39;. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#4\">    Sub AllEx()\n        &#39; Create an array of Pets.\n        Dim pets() As Pet = _\n            {New Pet With {.Name = &quot;Barley&quot;, .Age = 10}, _\n             New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n             New Pet With {.Name = &quot;Whiskers&quot;, .Age = 6}}\n\n        &#39; Determine whether all pet names in the array start with &#39;B&#39;.\n        Dim allStartWithB As Boolean = _\n            pets.AsQueryable().All(Function(ByVal pet) pet.Name.StartsWith(&quot;B&quot;))\n\n        MsgBox(String.Format( _\n            &quot;{0} pet names start with &#39;B&#39;.&quot;, _\n            IIf(allStartWithB, &quot;All&quot;, &quot;Not all&quot;)))\n    End Sub\n\n    Public Structure Pet\n        Dim Name As String\n        Dim Age As Integer\n    End Structure\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39;  Not all pet names start with &#39;B&#39;. \n</code></pre><p> The Boolean value that the All(TSource) method returns is typically used in the predicate of a <code>where</code> clause (<code>Where</code> clause in Visual Basic) or a direct call to the &lt;xref:System.Linq.Queryable.Where%2A&gt; method. The following example demonstrates this use of the <code>All</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#134\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n            class Person\n            {\n                public string LastName { get; set; }\n                public Pet[] Pets { get; set; }\n            }\n\n            public static void AllEx2()\n            {\n                List&lt;Person&gt; people = new List&lt;Person&gt;\n                    { new Person { LastName = &quot;Haas&quot;,\n                                   Pets = new Pet[] { new Pet { Name=&quot;Barley&quot;, Age=10 },\n                                                      new Pet { Name=&quot;Boots&quot;, Age=14 },\n                                                      new Pet { Name=&quot;Whiskers&quot;, Age=6 }}},\n                      new Person { LastName = &quot;Fakhouri&quot;,\n                                   Pets = new Pet[] { new Pet { Name = &quot;Snowball&quot;, Age = 1}}},\n                      new Person { LastName = &quot;Antebi&quot;,\n                                   Pets = new Pet[] { new Pet { Name = &quot;Belle&quot;, Age = 8} }},\n                      new Person { LastName = &quot;Philips&quot;,\n                                   Pets = new Pet[] { new Pet { Name = &quot;Sweetie&quot;, Age = 2},\n                                                      new Pet { Name = &quot;Rover&quot;, Age = 13}} }\n                    };\n\n                // Determine which people have pets that are all older than 5.\n                IEnumerable&lt;string&gt; names = from person in people\n                                            where person.Pets.AsQueryable().All(pet =&gt; pet.Age &gt; 5)\n                                            select person.LastName;\n\n                foreach (string name in names)\n                    Console.WriteLine(name);\n\n                /* This code produces the following output:\n                 * \n                 * Haas\n                 * Antebi\n                 */\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#134\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Structure Person\n        Public LastName As String\n        Public Pets() As Pet\n    End Structure\n\n    Sub AllEx2()\n        Dim people As New List(Of Person)(New Person() _\n            {New Person With {.LastName = &quot;Haas&quot;, _\n                              .Pets = New Pet() {New Pet With {.Name = &quot;Barley&quot;, .Age = 10}, _\n                                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 14}, _\n                                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 6}}}, _\n              New Person With {.LastName = &quot;Fakhouri&quot;, _\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Snowball&quot;, .Age = 1}}}, _\n              New Person With {.LastName = &quot;Antebi&quot;, _\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Belle&quot;, .Age = 8}}}, _\n              New Person With {.LastName = &quot;Philips&quot;, _\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Sweetie&quot;, .Age = 2}, _\n                                                  New Pet With {.Name = &quot;Rover&quot;, .Age = 13}}}})\n\n        &#39; Determine which people have pets that are all older than 5.\n        Dim names = From person In people _\n                    Where person.Pets.AsQueryable().All(Function(pet) pet.Age &gt; 5) _\n                    Select person.LastName\n\n        For Each name As String In names\n            Console.WriteLine(name)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Haas\n        &#39; Antebi\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Any__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Any_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Any&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a sequence contains any elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Any&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence to check for being empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the source sequence contains any elements; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Any(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Any(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Any(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it determines if <code>source</code> contains any elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Any(TSource) to determine whether a sequence contains any elements.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#5\">                List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2 };\n\n                // Determine if the list contains any elements.\n                bool hasElements = numbers.AsQueryable().Any();\n\n                Console.WriteLine(&quot;The list {0} empty.&quot;,\n                    hasElements ? &quot;is not&quot; : &quot;is&quot;);\n\n                // This code produces the following output:\n                //\n                // The list is not empty. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#5\">        Dim numbers As New List(Of Integer)(New Integer() {1, 2})\n\n        &#39; Determine if the list contains any elements.\n        Dim hasElements As Boolean = numbers.AsQueryable().Any()\n\n        MsgBox(String.Format(&quot;The list {0} empty.&quot;, _\n            IIf(hasElements, &quot;is not&quot;, &quot;is&quot;)))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The list is not empty. \n</code></pre><p> The Boolean value that the Any(TSource) method returns is typically used in the predicate of a <code>where</code> clause (<code>Where</code> clause in Visual Basic) or a direct call to the <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Where__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\" data-linktype=\"relative-path\">Where&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</a> method. The following example demonstrates this use of the <code>Any</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#135\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n            class Person\n            {\n                public string LastName { get; set; }\n                public Pet[] Pets { get; set; }\n            }\n\n            public static void AnyEx2()\n            {\n                List&lt;Person&gt; people = new List&lt;Person&gt;\n                    { new Person { LastName = &quot;Haas&quot;,\n                                   Pets = new Pet[] { new Pet { Name=&quot;Barley&quot;, Age=10 },\n                                                      new Pet { Name=&quot;Boots&quot;, Age=14 },\n                                                      new Pet { Name=&quot;Whiskers&quot;, Age=6 }}},\n                      new Person { LastName = &quot;Fakhouri&quot;,\n                                   Pets = new Pet[] { new Pet { Name = &quot;Snowball&quot;, Age = 1}}},\n                      new Person { LastName = &quot;Antebi&quot;,\n                                   Pets = new Pet[] { }},\n                      new Person { LastName = &quot;Philips&quot;,\n                                   Pets = new Pet[] { new Pet { Name = &quot;Sweetie&quot;, Age = 2},\n                                                      new Pet { Name = &quot;Rover&quot;, Age = 13}} }\n                    };\n\n                // Determine which people have a non-empty Pet array.\n                IEnumerable&lt;string&gt; names = from person in people\n                                            where person.Pets.AsQueryable().Any()\n                                            select person.LastName;\n\n                foreach (string name in names)\n                    Console.WriteLine(name);\n\n                /* This code produces the following output:\n                  \n                   Haas\n                   Fakhouri\n                   Philips\n                */\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#135\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Structure Person\n        Public LastName As String\n        Public Pets() As Pet\n    End Structure\n\n    Sub AnyEx2()\n        Dim people As New List(Of Person)(New Person() _\n            {New Person With {.LastName = &quot;Haas&quot;, _\n                              .Pets = New Pet() {New Pet With {.Name = &quot;Barley&quot;, .Age = 10}, _\n                                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 14}, _\n                                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 6}}}, _\n              New Person With {.LastName = &quot;Fakhouri&quot;, _\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Snowball&quot;, .Age = 1}}}, _\n              New Person With {.LastName = &quot;Antebi&quot;, _\n                               .Pets = New Pet() {}}, _\n              New Person With {.LastName = &quot;Philips&quot;, _\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Sweetie&quot;, .Age = 2}, _\n                                                  New Pet With {.Name = &quot;Rover&quot;, .Age = 13}}}})\n\n        &#39; Determine which people have a non-empty Pet array.\n        Dim names = From person In people _\n                    Where person.Pets.AsQueryable().Any() _\n                    Select person.LastName\n\n        For Each name As String In names\n            Console.WriteLine(name)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Haas\n        &#39; Fakhouri\n        &#39; Philips\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Any__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Any_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Any&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any element of a sequence satisfies a condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Any&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence whose elements to test for a condition.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if any elements in the source sequence pass the test in the specified predicate; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Any(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Any(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Any(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it determines if any of the elements of <code>source</code> satisfy the condition specified by <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Any(TSource) to determine whether any element in a sequence satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#6\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n                public bool Vaccinated { get; set; }\n            }\n\n            public static void AnyEx3()\n            {\n                // Create an array of Pet objects.\n                Pet[] pets =\n                    { new Pet { Name=&quot;Barley&quot;, Age=8, Vaccinated=true },\n                      new Pet { Name=&quot;Boots&quot;, Age=4, Vaccinated=false },\n                      new Pet { Name=&quot;Whiskers&quot;, Age=1, Vaccinated=false } };\n\n                // Determine whether any pets over age 1 are also unvaccinated.\n                bool unvaccinated =\n                    pets.AsQueryable().Any(p =&gt; p.Age &gt; 1 &amp;&amp; p.Vaccinated == false);\n\n                Console.WriteLine(\n                    &quot;There {0} unvaccinated animals over age one.&quot;,\n                    unvaccinated ? &quot;are&quot; : &quot;are not any&quot;);\n            }\n\n            // This code produces the following output:\n            //\n            //  There are unvaccinated animals over age one. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#6\">    Structure Pet\n        Dim Name As String\n        Dim Age As Integer\n        Dim Vaccinated As Boolean\n    End Structure\n\n    Shared Sub AnyEx3()\n        &#39; Create an array of Pet objects.\n        Dim pets() As Pet = _\n            {New Pet With {.Name = &quot;Barley&quot;, .Age = 8, .Vaccinated = True}, _\n             New Pet With {.Name = &quot;Boots&quot;, .Age = 4, .Vaccinated = False}, _\n             New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1, .Vaccinated = False}}\n\n        &#39; Determine whether any pets over age 1 are also unvaccinated.\n        Dim unvaccinated As Boolean = _\n        pets.AsQueryable().Any(Function(p) p.Age &gt; 1 And p.Vaccinated = False)\n\n        MsgBox(String.Format( _\n            &quot;There {0} unvaccinated animals over age one.&quot;, _\n            IIf(unvaccinated, &quot;are&quot;, &quot;are not any&quot;) _\n        ))\n    End Sub\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39;  There are unvaccinated animals over age one. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_AsQueryable_System_Collections_IEnumerable_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_AsQueryable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsQueryable(IEnumerable)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> to an <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable AsQueryable (this System.Collections.IEnumerable source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> that represents the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> does not implement <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> for some <code>T</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type of <code>source</code> implements <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a>, AsQueryable returns it directly. Otherwise, it returns an <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> that executes queries by calling the equivalent query operator methods in <a class=\"xref\" href=\"system.linq.enumerable\" data-linktype=\"relative-path\">Enumerable</a> instead of those in <a class=\"xref\" href=\"system.linq.queryable\" data-linktype=\"relative-path\">Queryable</a>.  </p>\n<p> This method assumes that <code>source</code> implements <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> for some <code>T</code>. At runtime, the result is of type <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> for the same <code>T</code>. This method is useful in dynamic scenarios when you do not statically know the type of <code>T</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_AsQueryable__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_AsQueryable_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsQueryable&lt;TElement&gt;(IEnumerable&lt;TElement&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a generic <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to a generic <span class=\"xref\">stem.Linq.IQueryable`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TElement&gt; AsQueryable&lt;TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TElement&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that represents the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type of <code>source</code> implements <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a>, AsQueryable(TElement) returns it directly. Otherwise, it returns an <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> that executes queries by calling the equivalent query operator methods in <a class=\"xref\" href=\"system.linq.enumerable\" data-linktype=\"relative-path\">Enumerable</a> instead of those in <a class=\"xref\" href=\"system.linq.queryable\" data-linktype=\"relative-path\">Queryable</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use AsQueryable(TElement) to convert an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> to an <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#125\">            List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\n            // Convert the List to an IQueryable&lt;int&gt;.\n            IQueryable&lt;int&gt; iqueryable = grades.AsQueryable();\n\n            // Get the Expression property of the IQueryable object.\n            System.Linq.Expressions.Expression expressionTree =\n                iqueryable.Expression;\n\n            Console.WriteLine(&quot;The NodeType of the expression tree is: &quot;\n                + expressionTree.NodeType.ToString());\n            Console.WriteLine(&quot;The Type of the expression tree is: &quot;\n                + expressionTree.Type.Name);\n\n            /*\n                This code produces the following output:\n\n                The NodeType of the expression tree is: Constant\n                The Type of the expression tree is: EnumerableQuery`1\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#125\">        Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n        &#39; Convert the List to an IQueryable&lt;int&gt;.\n        Dim iqueryable As IQueryable(Of Integer) = grades.AsQueryable()\n\n        &#39; Get the Expression property of the IQueryable object.\n        Dim expressionTree As System.Linq.Expressions.Expression = _\n            iqueryable.Expression\n\n        MsgBox(&quot;The NodeType of the expression tree is: &quot; _\n            &amp; expressionTree.NodeType.ToString())\n        MsgBox(&quot;The Type of the expression tree is: &quot; _\n            &amp; expressionTree.Type.Name)\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The NodeType of the expression tree is: Constant\n        &#39; The Type of the expression tree is: EnumerableQuery`1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Average (this System.Linq.IQueryable&lt;decimal&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Int32__\" data-linktype=\"relative-path\">Average(IQueryable&lt;Int32&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#8\">            List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\n            double average = grades.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average grade is 77.6. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#8\">        Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n        Dim average As Double = grades.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average grade is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average grade is 77.6. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average (this System.Linq.IQueryable&lt;double&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Int32__\" data-linktype=\"relative-path\">Average(IQueryable&lt;Int32&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#8\">            List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\n            double average = grades.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average grade is 77.6. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#8\">        Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n        Dim average As Double = grades.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average grade is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average grade is 77.6. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average (this System.Linq.IQueryable&lt;int&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Average to calculate the average of a sequence of values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#8\">            List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\n            double average = grades.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average grade is 77.6. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#8\">        Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n        Dim average As Double = grades.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average grade is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average grade is 77.6. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average (this System.Linq.IQueryable&lt;long&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Int32__\" data-linktype=\"relative-path\">Average(IQueryable&lt;Int32&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#8\">            List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\n            double average = grades.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average grade is 77.6. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#8\">        Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n        Dim average As Double = grades.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average grade is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average grade is 77.6. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Int64___\" data-linktype=\"relative-path\">Average(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#12\">            long?[] longs = { null, 10007L, 37L, 399846234235L };\n\n            double? average = longs.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average is 133282081426.333. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#12\">        Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n        Dim average As Nullable(Of Double) = longs.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average is 133282081426.333. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Int64___\" data-linktype=\"relative-path\">Average(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#12\">            long?[] longs = { null, 10007L, 37L, 399846234235L };\n\n            double? average = longs.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average is 133282081426.333. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#12\">        Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n        Dim average As Nullable(Of Double) = longs.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average is 133282081426.333. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Int64___\" data-linktype=\"relative-path\">Average(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#12\">            long?[] longs = { null, 10007L, 37L, 399846234235L };\n\n            double? average = longs.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average is 133282081426.333. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#12\">        Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n        Dim average As Nullable(Of Double) = longs.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average is 133282081426.333. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Average to calculate the average of a sequence of values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#12\">            long?[] longs = { null, 10007L, 37L, 399846234235L };\n\n            double? average = longs.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average is 133282081426.333. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#12\">        Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n        Dim average As Nullable(Of Double) = longs.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average is 133282081426.333. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Nullable_System_Int64___\" data-linktype=\"relative-path\">Average(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#12\">            long?[] longs = { null, 10007L, 37L, 399846234235L };\n\n            double? average = longs.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average is 133282081426.333. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#12\">        Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n        Dim average As Nullable(Of Double) = longs.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average is 133282081426.333. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average_System_Linq_IQueryable_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IQueryable&lt;Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Average (this System.Linq.IQueryable&lt;float&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Average method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average itself. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average_System_Linq_IQueryable_System_Int32__\" data-linktype=\"relative-path\">Average(IQueryable&lt;Int32&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#8\">            List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\n            double average = grades.AsQueryable().Average();\n\n            Console.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average grade is 77.6. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#8\">        Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n        Dim average As Double = grades.AsQueryable().Average()\n\n        MsgBox(String.Format(&quot;The average grade is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average grade is 77.6. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate an average.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Average(TSource) to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Decimal____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the <code>source</code> sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Double____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Double&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the <code>source</code> sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Int32____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Int32&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the <code>source</code> sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Int64____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Int64&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the <code>source</code> sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Single____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Single&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the <code>source</code> sequence is empty or contains only <code>null</code> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Average(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it calculates the average of the values in <code>source</code> after invoking <code>selector</code> on each value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Average__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</a> to calculate the average <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> length in a sequence of values of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#18\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Determine the average string length in the array.\n            double average = fruits.AsQueryable().Average(s =&gt; s.Length);\n\n            Console.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n            // This code produces the following output:\n            //\n            // The average string length is 6.5. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#18\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Determine the average string length in the array.\n        Dim average As Double = fruits.AsQueryable().Average(Function(s) s.Length)\n\n        MsgBox(String.Format(&quot;The average string length is {0}.&quot;, average))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The average string length is 6.5. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Cast__1_System_Linq_IQueryable_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Cast_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cast&lt;TResult&gt;(IQueryable)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the elements of an <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> to the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Linq.IQueryable source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> that contains the elements to be converted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains each element of the source sequence converted to the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>An element in the sequence cannot be cast to type <code>TResult</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Cast(TResult) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Cast(TResult) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Cast(TResult) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it converts the values in <code>source</code> to type <code>TResult</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Cast(TResult) to convert objects in a sequence to type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#19\">\n            // Create a list of objects.\n            List&lt;object&gt; words =\n                new List&lt;object&gt; { &quot;green&quot;, &quot;blue&quot;, &quot;violet&quot; };\n\n            // Cast the objects in the list to type &#39;string&#39;\n            // and project the first letter of each string.\n            IEnumerable&lt;string&gt; query =\n                words.AsQueryable()\n                .Cast&lt;string&gt;()\n                .Select(str =&gt; str.Substring(0, 1));\n\n            foreach (string s in query)\n                Console.WriteLine(s);\n\n            /*  This code produces the following output:\n            \n                g\n                b\n                v\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#19\">\n        &#39; Create a list of objects.\n        Dim words As New List(Of Object)(New Object() {&quot;green&quot;, &quot;blue&quot;, &quot;violet&quot;})\n\n        &#39; Cast the objects in the list to type &#39;string&#39;\n        &#39; and project the first letter of each string.\n        Dim query As IEnumerable(Of String) = _\n            words.AsQueryable() _\n                    .Cast(Of String)() _\n                    .Select(Function(str) str.Substring(0, 1))\n\n        For Each s As String In query\n            MsgBox(s)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; g\n        &#39; b\n        &#39; v\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Concat__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Concat_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates two sequences.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to concatenate to the first sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the concatenated elements of the two input sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Concat(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Concat(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Concat(TSource) depends on the implementation of the type of the <code>source1</code> parameter. The expected behavior is that the elements in <code>source2</code> are concatenated to those of <code>source1</code> to create a new sequence.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Concat(TSource) to concatenate two sequences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#20\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            // This method creates and returns an array of Pet objects.\n            static Pet[] GetCats()\n            {\n                Pet[] cats = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                               new Pet { Name=&quot;Boots&quot;, Age=4 },\n                               new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n                return cats;\n            }\n\n            // This method creates and returns an array of Pet objects.\n            static Pet[] GetDogs()\n            {\n                Pet[] dogs = { new Pet { Name=&quot;Bounder&quot;, Age=3 },\n                               new Pet { Name=&quot;Snoopy&quot;, Age=14 },\n                               new Pet { Name=&quot;Fido&quot;, Age=9 } };\n                return dogs;\n            }\n\n            public static void ConcatEx1()\n            {\n                Pet[] cats = GetCats();\n                Pet[] dogs = GetDogs();\n\n                // Concatenate a collection of cat names to a\n                // collection of dog names by using Concat().\n                IEnumerable&lt;string&gt; query =\n                    cats.AsQueryable()\n                    .Select(cat =&gt; cat.Name)\n                    .Concat(dogs.Select(dog =&gt; dog.Name));\n\n                foreach (string name in query)\n                    Console.WriteLine(name);\n            }\n\n            // This code produces the following output:\n            //\n            // Barley\n            // Boots\n            // Whiskers\n            // Bounder\n            // Snoopy\n            // Fido\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#20\">\n    &#39; This method creates and returns an array of Pet objects.\n    Shared Function GetCats() As Pet()\n        Dim cats() As Pet = _\n            {New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n             New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n             New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n        Return cats\n    End Function\n\n    &#39; This method creates and returns an array of Pet objects.\n    Shared Function GetDogs() As Pet()\n        Dim dogs() As Pet = _\n            {New Pet With {.Name = &quot;Bounder&quot;, .Age = 3}, _\n             New Pet With {.Name = &quot;Snoopy&quot;, .Age = 14}, _\n             New Pet With {.Name = &quot;Fido&quot;, .Age = 9}}\n\n        Return dogs\n    End Function\n\n    Shared Sub ConcatEx1()\n        Dim cats() As Pet = GetCats()\n        Dim dogs() As Pet = GetDogs()\n\n        &#39; Concatenate a collection of cat names to a\n        &#39; collection of dog names by using Concat().\n        Dim query As IEnumerable(Of String) = _\n            cats.AsQueryable() _\n            .Select(Function(cat) cat.Name) _\n            .Concat(dogs.Select(Function(dog) dog.Name))\n\n        For Each name As String In query\n            MsgBox(name)\n        Next\n    End Sub\n\n    Structure Pet\n        Dim Name As String\n        Dim Age As Integer\n    End Structure\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39; Barley\n    &#39; Boots\n    &#39; Whiskers\n    &#39; Bounder\n    &#39; Snoopy\n    &#39; Fido\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Contains__1_System_Linq_IQueryable___0____0_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Contains_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a sequence contains a specified element by using the default equality comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Contains&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> in which to locate <code>item</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the input sequence contains an element that has the specified value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Contains(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Contains(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Contains(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it determines if <code>source</code> contains <code>item</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Contains(TSource) to determine whether a sequence contains a specific element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#21\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                                &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // The string to search for in the array.\n            string mango = &quot;mango&quot;;\n\n            bool hasMango = fruits.AsQueryable().Contains(mango);\n\n            Console.WriteLine(\n                &quot;The array {0} contain &#39;{1}&#39;.&quot;,\n                hasMango ? &quot;does&quot; : &quot;does not&quot;,\n                mango);\n\n            // This code produces the following output:\n            //\n            // The array does contain &#39;mango&#39;. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#21\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, _\n                                &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; The string to search for in the array.\n        Dim mango As String = &quot;mango&quot;\n\n        Dim hasMango As Boolean = fruits.AsQueryable().Contains(mango)\n\n        MsgBox(String.Format(&quot;The array {0} contain &#39;{1}&#39;.&quot;, _\n                IIf(hasMango, &quot;does&quot;, &quot;does not&quot;), mango))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The array does contain &#39;mango&#39;. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Contains__1_System_Linq_IQueryable___0____0_System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Contains_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a sequence contains a specified element by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Contains&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> in which to locate <code>item</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the input sequence contains an element that has the specified value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Contains(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Contains(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Contains(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it determines if <code>source</code> contains <code>item</code> by using <code>comparer</code> to compare values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Count__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Count_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of elements in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Count&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the elements to be counted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>source</code> is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Count(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Count(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Count(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it counts the number of items in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Count(TSource) to count the elements in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#22\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                                &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            int numberOfFruits = fruits.AsQueryable().Count();\n\n            Console.WriteLine(\n                &quot;There are {0} items in the array.&quot;,\n                numberOfFruits);\n\n            // This code produces the following output:\n            //\n            // There are 6 items in the array. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#22\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, _\n                            &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        Dim numberOfFruits As Integer = fruits.AsQueryable().Count()\n\n        MsgBox(String.Format( _\n            &quot;There are {0} items in the array.&quot;, _\n            numberOfFruits))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; There are 6 items in the array. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Count__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Count_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of elements in the specified sequence that satisfies a condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Count&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the elements to be counted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the sequence that satisfies the condition in the predicate function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>source</code> is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Count(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Count(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Count(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it counts the number of items in <code>source</code> that satisfy the condition specified by <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Count(TSource) to count the elements in a sequence that satisfy a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#23\">            class Pet\n            {\n                public string Name { get; set; }\n                public bool Vaccinated { get; set; }\n            }\n\n            public static void CountEx2()\n            {\n                // Create an array of Pet objects.\n                Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Vaccinated=true },\n                               new Pet { Name=&quot;Boots&quot;, Vaccinated=false },\n                               new Pet { Name=&quot;Whiskers&quot;, Vaccinated=false } };\n\n                // Count the number of unvaccinated pets in the array.\n                int numberUnvaccinated =\n                    pets.AsQueryable().Count(p =&gt; p.Vaccinated == false);\n\n                Console.WriteLine(\n                    &quot;There are {0} unvaccinated animals.&quot;,\n                    numberUnvaccinated);\n            }\n\n            // This code produces the following output:\n            //\n            // There are 2 unvaccinated animals.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#23\">    Structure Pet\n        Public Name As String\n        Public Vaccinated As Boolean\n    End Structure\n\n    Shared Sub CountEx2()\n        &#39; Create an array of Pet objects.\n        Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Vaccinated = True}, _\n                       New Pet With {.Name = &quot;Boots&quot;, .Vaccinated = False}, _\n                       New Pet With {.Name = &quot;Whiskers&quot;, .Vaccinated = False}}\n\n        &#39; Count the number of unvaccinated pets in the array.\n        Dim numberUnvaccinated As Integer = pets.AsQueryable().Count(Function(p) p.Vaccinated = False)\n\n        MsgBox(String.Format(&quot;There are {0} unvaccinated animals.&quot;, numberUnvaccinated))\n    End Sub\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39; There are 2 unvaccinated animals.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_DefaultIfEmpty_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the elements of the specified sequence or the type parameter&#39;s default value in a singleton collection if the sequence is empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.IQueryable`1</span> to return a default value for if empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains <code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DefaultIfEmpty(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling DefaultIfEmpty(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling DefaultIfEmpty(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns <code>source</code> if it is not empty. Otherwise, it returns an <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> that contains <code>default</code>(<code>TSource</code>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code examples demonstrate how to use DefaultIfEmpty(TSource) to provide a default value in case the source sequence is empty.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#24\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void DefaultIfEmptyEx1()\n            {\n                // Create a list of Pet objects.\n                List&lt;Pet&gt; pets =\n                    new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8 },\n                                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n                // Call DefaultIfEmtpy() on the collection that Select()\n                // returns, so that if the initial list is empty, there\n                // will always be at least one item in the returned array.\n                string[] names =\n                    pets.AsQueryable()\n                    .Select(pet =&gt; pet.Name)\n                    .DefaultIfEmpty()\n                    .ToArray();\n\n                string first = names[0];\n                Console.WriteLine(first);\n            }\n\n            /*\n                This code produces the following output:\n\n                Barley\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#24\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Shared Sub DefaultIfEmptyEx1()\n        &#39; Create a list of Pet objects.\n        Dim pets As New List(Of Pet)(New Pet() { _\n                            New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n                            New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n                            New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}})\n\n        &#39; Call DefaultIfEmtpy() on the collection that Select()\n        &#39; returns, so that if the initial list is empty, there\n        &#39; will always be at least one item in the returned array.\n        Dim names() As String = pets.AsQueryable() _\n            .Select(Function(Pet) Pet.Name) _\n            .DefaultIfEmpty() _\n            .ToArray()\n\n        Dim first As String = names(0)\n        MsgBox(first)\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Barley\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_DefaultIfEmpty_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource defaultValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.IQueryable`1</span> to return the specified value for if empty.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to return if the sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DefaultIfEmpty(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling DefaultIfEmpty(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling DefaultIfEmpty(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns <code>source</code> if it is not empty. Otherwise, it returns an <a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> that contains <code>defaultValue</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a situation in which it is useful to call DefaultIfEmpty(TSource) in a LINQ query. A default value is passed to DefaultIfEmpty(TSource) in this example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#25\">                // Create a list of Pet objects.\n                List&lt;Pet&gt; pets =\n                    new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8 },\n                                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n                // This query selects only those pets that are 10 or older.\n                // In case there are no pets that meet that criteria, call\n                // DefaultIfEmpty(). This code passes an (optional) default\n                // value to DefaultIfEmpty().\n                string[] oldPets =\n                    pets.AsQueryable()\n                    .Where(pet =&gt; pet.Age &gt;= 10)\n                    .Select(pet =&gt; pet.Name)\n                    .DefaultIfEmpty(&quot;[EMPTY]&quot;)\n                    .ToArray();\n\n                Console.WriteLine(&quot;First query: &quot; + oldPets[0]);\n\n                // This query selects only those pets that are 10 or older.\n                // This code does not call DefaultIfEmpty().\n                string[] oldPets2 =\n                    pets.AsQueryable()\n                    .Where(pet =&gt; pet.Age &gt;= 10)\n                    .Select(pet =&gt; pet.Name)\n                    .ToArray();\n\n                // There may be no elements in the array, so directly\n                // accessing element 0 may throw an exception.\n                try\n                {\n                    Console.WriteLine(&quot;Second query: &quot; + oldPets2[0]);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(&quot;Second query: An exception was thrown: &quot; + e.Message);\n                }\n\n                /*\n                    This code produces the following output:\n            \n                    First query: [EMPTY]\n                    Second query: An exception was thrown: Index was outside the bounds of the array.\n                */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#25\">        &#39; Create a list of Pet objects.\n        Dim pets As New List(Of Pet)(New Pet() { _\n                           New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n                           New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n                           New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}})\n\n        &#39; This query returns pets that are 10 or older. In case there are no pets \n        &#39; that meet that criteria, call DefaultIfEmpty(). This code passes an (optional) \n        &#39; default value to DefaultIfEmpty().\n        Dim oldPets() As String = pets.AsQueryable() _\n            .Where(Function(Pet) Pet.Age &gt;= 10) _\n            .Select(Function(Pet) Pet.Name) _\n            .DefaultIfEmpty(&quot;[EMPTY]&quot;) _\n            .ToArray()\n        Try\n            MsgBox(&quot;First query: &quot; + oldPets(0))\n        Catch ex As Exception\n            Console.WriteLine(&quot;First query: An exception was thrown: &quot; + ex.Message)\n        End Try\n\n        &#39; This query selects only those pets that are 10 or older.\n        &#39; This code does not call DefaultIfEmpty().\n        Dim oldPets2() As String = _\n            pets.AsQueryable() _\n            .Where(Function(Pet) Pet.Age &gt;= 10) _\n            .Select(Function(Pet) Pet.Name) _\n            .ToArray()\n\n        &#39; There may be no elements in the array, so directly\n        &#39; accessing element 0 may throw an exception.\n        Try\n            MsgBox(&quot;Second query: &quot; + oldPets2(0))\n        Catch ex As Exception\n            MsgBox(&quot;Second query: An exception was thrown: &quot; + ex.Message)\n        End Try\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; First(query) : [EMPTY]\n        &#39; Second query: An exception was thrown: Index was outside the bounds of the array.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Distinct__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Distinct_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Distinct&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns distinct elements from a sequence by using the default equality comparer to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.IQueryable`1</span> to remove duplicates from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains distinct elements from <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Distinct(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Distinct(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Distinct(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns an unordered sequence of the unique items in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Distinct(TSource) to return distinct elements from a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#27\">            List&lt;int&gt; ages = new List&lt;int&gt; { 21, 46, 46, 55, 17, 21, 55, 55 };\n\n            IEnumerable&lt;int&gt; distinctAges = ages.AsQueryable().Distinct();\n\n            Console.WriteLine(&quot;Distinct ages:&quot;);\n\n            foreach (int age in distinctAges)\n                Console.WriteLine(age);\n\n            /*\n                This code produces the following output:\n\n                Distinct ages:\n                21\n                46\n                55\n                17\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#27\">        Dim ages As List(Of Integer) = New List(Of Integer)(New Integer() {21, 46, 46, 55, 17, 21, 55, 55})\n\n        Dim distinctAges As IEnumerable(Of Integer) = ages.AsQueryable().Distinct()\n\n        Dim output As New System.Text.StringBuilder\n        output.AppendLine(&quot;Distinct ages:&quot;)\n\n        For Each age As Integer In distinctAges\n            output.AppendLine(age)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Distinct(ages)\n        &#39; 21\n        &#39; 46\n        &#39; 55\n        &#39; 17\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Distinct__1_System_Linq_IQueryable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Distinct_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Distinct&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns distinct elements from a sequence by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.IQueryable`1</span> to remove duplicates from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains distinct elements from <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Distinct(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Distinct(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Distinct(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns an unordered sequence of the unique items in <code>source</code> by using <code>comparer</code> to compare values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_ElementAt__1_System_Linq_IQueryable___0__System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_ElementAt_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ElementAt&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the element at a specified index in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource ElementAt&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The element at the specified position in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ElementAt(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling ElementAt(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling ElementAt(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the item at position <code>index</code> in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ElementAt(TSource) to return an element at a specific position in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#28\">            string[] names = { &quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, \n                               &quot;Andersen, Henriette Thaulow&quot;, \n                               &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot; };\n\n            Random random = new Random(DateTime.Now.Millisecond);\n\n            string name =\n                names.AsQueryable().ElementAt(random.Next(0, names.Length));\n\n            Console.WriteLine(&quot;The name chosen at random is &#39;{0}&#39;.&quot;, name);\n\n            /*\n                This code produces the following sample output.\n                Yours may be different due to the use of Random.\n\n                The name chosen at random is &#39;Ito, Shu&#39;.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#28\">        Dim names() As String = {&quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, _\n                           &quot;Andersen, Henriette Thaulow&quot;, _\n                           &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot;}\n\n        Dim rand As New Random(DateTime.Now.Millisecond)\n\n        Dim name As String = _\n            names.AsQueryable().ElementAt(rand.Next(0, names.Length))\n\n        MsgBox(String.Format(&quot;The name chosen at random is &#39;{0}&#39;.&quot;, name))\n\n        &#39; This code produces the following sample output.\n        &#39; Yours may be different due to the use of Random.\n        &#39;\n        &#39; The name chosen at random is &#39;Ito, Shu&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_ElementAtOrDefault__1_System_Linq_IQueryable___0__System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_ElementAtOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ElementAtOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the element at a specified index in a sequence or a default value if the index is out of range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if <code>index</code> is outside the bounds of <code>source</code>; otherwise, the element at the specified position in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ElementAtOrDefault(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling ElementAtOrDefault(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling ElementAtOrDefault(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the item at position <code>index</code> in <code>source</code>, or <code>default</code>(<code>TSource</code>) if <code>index</code> is outside the bounds of <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ElementAtOrDefault(TSource). This example uses a value for <code>index</code> that is outside the bounds of the source sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#29\">            string[] names = { &quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;,\n                               &quot;Andersen, Henriette Thaulow&quot;,\n                               &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot; };\n\n            int index = 20;\n\n            string name = names.AsQueryable().ElementAtOrDefault(index);\n\n            Console.WriteLine(\n                &quot;The name chosen at index {0} is &#39;{1}&#39;.&quot;,\n                index,\n                String.IsNullOrEmpty(name) ? &quot;[NONE AT THIS INDEX]&quot; : name);\n\n            /*\n                This code produces the following output:\n\n                The name chosen at index 20 is &#39;[NONE AT THIS INDEX]&#39;.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#29\">        Dim names() As String = {&quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, _\n                           &quot;Andersen, Henriette Thaulow&quot;, _\n                           &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot;}\n\n        Dim index As Integer = 20\n\n        Dim name As String = names.AsQueryable().ElementAtOrDefault(index)\n\n        MsgBox(String.Format(&quot;The name at index {0} is &#39;{1}&#39;.&quot;, _\n            index, IIf(String.IsNullOrEmpty(name), &quot;[NONE AT THIS INDEX]&quot;, name)))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The name at index 20 is &#39;[NONE AT THIS INDEX]&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Except__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Except_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Except&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set difference of two sequences by using the default equality comparer to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements that are not also in <code>source2</code> will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements that also occur in the first sequence will not appear in the returned sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the set difference of the two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Except(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Except(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the<code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Except(TSource) depends on the implementation of the type of  the <code>source1</code> parameter. The expected behavior is that all the elements in <code>source1</code> are returned except for those that are also in <code>source2</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Except(TSource) to return those elements that only appear in the first source sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#34\">            double[] numbers1 = { 2.0, 2.1, 2.2, 2.3, 2.4, 2.5 };\n            double[] numbers2 = { 2.2 };\n\n            // Get the numbers from the first array that\n            // are NOT in the second array.\n            IEnumerable&lt;double&gt; onlyInFirstSet =\n                numbers1.AsQueryable().Except(numbers2);\n\n            foreach (double number in onlyInFirstSet)\n                Console.WriteLine(number);\n\n            /*\n                This code produces the following output:\n\n                2\n                2.1\n                2.3\n                2.4\n                2.5\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#34\">        Dim numbers1() As Double = {2.0, 2.1, 2.2, 2.3, 2.4, 2.5}\n        Dim numbers2() As Double = {2.2}\n\n        &#39; Get the numbers from the first array that\n        &#39; are NOT in the second array.\n        Dim onlyInFirstSet As IEnumerable(Of Double) = _\n            numbers1.AsQueryable().Except(numbers2)\n\n        Dim output As New System.Text.StringBuilder\n        For Each number As Double In onlyInFirstSet\n            output.AppendLine(number)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; 2\n        &#39; 2.1\n        &#39; 2.3\n        &#39; 2.4\n        &#39; 2.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Except__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Except_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Except&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set difference of two sequences by using the specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements that are not also in <code>source2</code> will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements that also occur in the first sequence will not appear in the returned sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the set difference of the two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Except(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Except(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the<code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Except(TSource) depends on the implementation of the type of the <code>source1</code> parameter. The expected behavior is that all the elements in <code>source1</code> are returned except for those that are also in <code>source2</code>, and <code>comparer</code> is used to compare values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_First__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_First_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">First&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first element of a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource First&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.IQueryable`1</span> to return the first element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The first element in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The First(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling First(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling First(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the first element in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use First(TSource) to return the first element in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#35\">            int[] numbers = { 9, 34, 65, 92, 87, 435, 3, 54, \n                                83, 23, 87, 435, 67, 12, 19 };\n\n            int first = numbers.AsQueryable().First();\n\n            Console.WriteLine(first);\n\n            /*\n                This code produces the following output:\n\n                9\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#35\">        Dim numbers() As Integer = {9, 34, 65, 92, 87, 435, 3, 54, _\n                            83, 23, 87, 435, 67, 12, 19}\n\n        Dim first As Integer = numbers.AsQueryable().First()\n\n        MsgBox(first)\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; 9\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_First__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_First_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">First&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first element of a sequence that satisfies a specified condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource First&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The first element in <code>source</code> that passes the test in <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No element satisfies the condition in <code>predicate</code>.  </p>\n<p> -or-  </p>\n<p> The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The First(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling First(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling First(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the first element in <code>source</code> that satisfies the condition specified by <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use First(TSource) to return the first element of a sequence that satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#36\">            int[] numbers = { 9, 34, 65, 92, 87, 435, 3, 54, \n                              83, 23, 87, 435, 67, 12, 19 };\n\n            // Get the first number in the array that is greater than 80.\n            int first = numbers.AsQueryable().First(number =&gt; number &gt; 80);\n\n            Console.WriteLine(first);\n\n            /*\n                This code produces the following output:\n\n                92\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#36\">        Dim numbers() As Integer = {9, 34, 65, 92, 87, 435, 3, 54, _\n                          83, 23, 87, 435, 67, 12, 19}\n\n        &#39; Get the first number in the array that is greater than 80.\n        Dim first As Integer = numbers.AsQueryable().First(Function(number) number &gt; 80)\n\n        MsgBox(first)\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; 92\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_FirstOrDefault__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_FirstOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.IQueryable`1</span> to return the first element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FirstOrDefault(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling FirstOrDefault(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling FirstOrDefault(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the first element in <code>source</code>, or a default value if <code>source</code> is empty.  </p>\n<p> The &lt;xref:System.Linq.Queryable.FirstOrDefault%2A&gt; method does not provide a way to specify the default value to return if <code>source</code> is empty. If you want to specify a default value other than <code>default</code>(<code>TSource</code>), use the <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> method as described in the Example section.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use FirstOrDefault(TSource) on an empty sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#37\">            // Create an empty array.\n            int[] numbers = { };\n            // Get the first item in the array, or else the \n            // default value for type int (0).\n            int first = numbers.AsQueryable().FirstOrDefault();\n\n            Console.WriteLine(first);\n\n            /*\n                This code produces the following output:\n\n                0\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#37\">        &#39; Create an empty array.\n        Dim numbers() As Integer = {}\n        &#39; Get the first item in the array, or else the \n        &#39; default value for type int, which is 0.\n        Dim first As Integer = numbers.AsQueryable().FirstOrDefault()\n\n        MsgBox(first)\n\n        &#39; This code produces the following output:\n\n        &#39; 0\n</code></pre><p> Sometimes the value of <code>default</code>(<code>TSource</code>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> method to specify the default value that you want to use if the collection is empty. Then, call <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_First__1_System_Linq_IQueryable___0__\" data-linktype=\"relative-path\">First&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a> to obtain the first element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty. Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> to specify a default value of 1.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#131\">            List&lt;int&gt; months = new List&lt;int&gt; { };\n\n            // Setting the default value to 1 after the query.\n            int firstMonth1 = months.AsQueryable().FirstOrDefault();\n            if (firstMonth1 == 0)\n            {\n                firstMonth1 = 1;\n            }\n            Console.WriteLine(&quot;The value of the firstMonth1 variable is {0}&quot;, firstMonth1);\n\n            // Setting the default value to 1 by using DefaultIfEmpty() in the query.\n            int firstMonth2 = months.AsQueryable().DefaultIfEmpty(1).First();\n            Console.WriteLine(&quot;The value of the firstMonth2 variable is {0}&quot;, firstMonth2);\n\n            /*\n             This code produces the following output:\n            \n             The value of the firstMonth1 variable is 1\n             The value of the firstMonth2 variable is 1\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#131\">        Dim months As New List(Of Integer)(New Integer() {})\n\n        &#39; Setting the default value to 1 after the query.\n        Dim firstMonth1 As Integer = months.AsQueryable().FirstOrDefault()\n        If firstMonth1 = 0 Then\n            firstMonth1 = 1\n        End If\n        MsgBox(String.Format(&quot;The value of the firstMonth1 variable is {0}&quot;, firstMonth1))\n\n        &#39; Setting the default value to 1 by using DefaultIfEmpty() in the query.\n        Dim firstMonth2 As Integer = months.AsQueryable().DefaultIfEmpty(1).First()\n        MsgBox(String.Format(&quot;The value of the firstMonth2 variable is {0}&quot;, firstMonth2))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The value of the firstMonth1 variable is 1\n        &#39; The value of the firstMonth2 variable is 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_FirstOrDefault__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_FirstOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The FirstOrDefault(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling FirstOrDefault(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling FirstOrDefault(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the first element in <code>source</code> that satisfies the condition in <code>predicate</code>, or a default value if no element satisfies the condition.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use FirstOrDefault(TSource) by passing in a predicate. In the second query, there is no element in the sequence that satisfies the condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#38\">            string[] names = { &quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, \n                                 &quot;Andersen, Henriette Thaulow&quot;, \n                                 &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot; };\n\n            // Get the first string in the array that is longer\n            // than 20 characters, or the default value for type\n            // string (null) if none exists.\n            string firstLongName =\n                names.AsQueryable().FirstOrDefault(name =&gt; name.Length &gt; 20);\n\n            Console.WriteLine(&quot;The first long name is &#39;{0}&#39;.&quot;, firstLongName);\n\n            // Get the first string in the array that is longer\n            // than 30 characters, or the default value for type\n            // string (null) if none exists.\n            string firstVeryLongName =\n                names.AsQueryable().FirstOrDefault(name =&gt; name.Length &gt; 30);\n\n            Console.WriteLine(\n                &quot;There is {0} name that is longer than 30 characters.&quot;,\n                string.IsNullOrEmpty(firstVeryLongName) ? &quot;NOT a&quot; : &quot;a&quot;);\n\n            /*\n                This code produces the following output:\n\n                The first long name is &#39;Andersen, Henriette Thaulow&#39;.\n                There is NOT a name that is longer than 30 characters.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#38\">        Dim names() As String = {&quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, _\n                             &quot;Andersen, Henriette Thaulow&quot;, _\n                             &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot;}\n\n        &#39; Get the first string in the array that is longer\n        &#39; than 20 characters, or the default value for type\n        &#39; string (null) if none exists.\n        Dim firstLongName As String = _\n                    names.AsQueryable().FirstOrDefault(Function(name) name.Length &gt; 20)\n\n        MsgBox(String.Format(&quot;The first long name is &#39;{0}&#39;.&quot;, firstLongName))\n\n        &#39; Get the first string in the array that is longer\n        &#39; than 30 characters, or the default value for type\n        &#39; string (null) if none exists.\n        Dim firstVeryLongName As String = _\n            names.AsQueryable().FirstOrDefault(Function(name) name.Length &gt; 30)\n\n        MsgBox(String.Format( _\n            &quot;There is {0} name that is longer than 30 characters.&quot;, _\n            IIf(String.IsNullOrEmpty(firstVeryLongName), &quot;NOT a&quot;, &quot;a&quot;)))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The first long name is &#39;Andersen, Henriette Thaulow&#39;.\n        &#39; There is NOT a name that is longer than 30 characters.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TSource</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IQueryable<><tkey, tsource=\"\">&gt;</tkey,></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in Visual Basic where each <span class=\"xref\">stem.Linq.IGrouping`2</span> object contains a sequence of objects and a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it groups the elements of <code>source</code> by a key value that is obtained by invoking <code>keySelector</code> on each element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#14\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void GroupByEx1()\n            {\n                // Create a list of Pet objects.\n                List&lt;Pet&gt; pets =\n                    new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8 },\n                                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                                   new Pet { Name=&quot;Whiskers&quot;, Age=1 },\n                                   new Pet { Name=&quot;Daisy&quot;, Age=4 } };\n\n                // Group the pets using Pet.Age as the key.\n                // Use Pet.Name as the value for each entry.\n                var query = pets.AsQueryable().GroupBy(pet =&gt; pet.Age);\n\n                // Iterate over each IGrouping in the collection.\n                foreach (var ageGroup in query)\n                {\n                    Console.WriteLine(&quot;Age group: {0}  Number of pets: {1}&quot;, ageGroup.Key, ageGroup.Count());\n                }\n            }\n\n            /*\n                This code produces the following output:\n\n                Age group: 8  Number of pets: 1\n                Age group: 4  Number of pets: 2\n                Age group: 1  Number of pets: 1\n             \n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#14\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Shared Sub GroupByEx1()\n        &#39; Create a list of Pet objects.\n        Dim pets As New List(Of Pet)(New Pet() { _\n                        New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n                        New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n                        New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}, _\n                        New Pet With {.Name = &quot;Daisy&quot;, .Age = 4}})\n\n        &#39; Group the pets using Pet.Age as the key.\n        &#39; Use Pet.Name as the value for each entry.\n        Dim query = pets.AsQueryable().GroupBy(Function(pet) pet.Age)\n\n        Dim output As New System.Text.StringBuilder\n        &#39; Iterate over each IGrouping in the collection.\n        For Each ageGroup In query\n            output.AppendFormat(&quot;Age group: {0}   Number of pets: {1}{2}&quot;, ageGroup.Key, ageGroup.Count(), vbCrLf)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39; Age group: 8   Number of pets: 1\n    &#39; Age group: 4   Number of pets: 2\n    &#39; Age group: 1   Number of pets: 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TSource</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IQueryable<><tkey, tsource=\"\">&gt;</tkey,></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in Visual Basic where each <span class=\"xref\">stem.Linq.IGrouping`2</span> contains a sequence of objects and a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it groups the elements of <code>source</code> by a key value. The key value is obtained by invoking <code>keySelector</code> on each element, and key values are compared by using <code>comparer</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupBy__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___0___2___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupBy_TSource_TKey_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TElement&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TSource,TElement&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to map each source element to an element in an <span class=\"xref\">stem.Linq.IGrouping`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TElement</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IQueryable<><tkey, telement=\"\">&gt;</tkey,></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in Visual Basic where each <span class=\"xref\">stem.Linq.IGrouping`2</span> contains a sequence of objects of type <code>TElement</code> and a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it groups the elements of <code>source</code> by a key value that is obtained by invoking <code>keySelector</code> on each element. It invokes <code>elementSelector</code> on each element to obtain a result element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#39\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void GroupByEx2()\n            {\n                // Create a list of Pet objects.\n                List&lt;Pet&gt; pets =\n                    new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8 },\n                                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                                   new Pet { Name=&quot;Whiskers&quot;, Age=1 },\n                                   new Pet { Name=&quot;Daisy&quot;, Age=4 } };\n\n                // Group the pets using Pet.Age as the key.\n                // Use Pet.Name as the value for each entry.\n                IEnumerable&lt;IGrouping&lt;int, string&gt;&gt; query =\n                    pets.AsQueryable().GroupBy(pet =&gt; pet.Age, pet =&gt; pet.Name);\n\n                // Iterate over each IGrouping in the collection.\n                foreach (IGrouping&lt;int, string&gt; petGroup in query)\n                {\n                    // Print the key value of the IGrouping.\n                    Console.WriteLine(petGroup.Key);\n                    // Iterate over each value in the \n                    // IGrouping and print the value.\n                    foreach (string name in petGroup)\n                        Console.WriteLine(&quot;  {0}&quot;, name);\n                }\n            }\n\n            /*\n                This code produces the following output:\n\n                8\n                  Barley\n                4\n                  Boots\n                  Daisy\n                1\n                  Whiskers\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#39\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Shared Sub GroupByEx2()\n        &#39; Create a list of Pet objects.\n        Dim pets As New List(Of Pet)(New Pet() { _\n                        New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n                        New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n                        New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}, _\n                        New Pet With {.Name = &quot;Daisy&quot;, .Age = 4}})\n\n        &#39; Group the pets using Pet.Age as the key.\n        &#39; Use Pet.Name as the value for each entry.\n        Dim query As IEnumerable(Of IGrouping(Of Integer, String)) = _\n            pets.AsQueryable().GroupBy(Function(pet) pet.Age, Function(pet) pet.Name)\n\n        Dim output As New System.Text.StringBuilder\n        &#39; Iterate over each IGrouping in the collection.\n        For Each petGroup As IGrouping(Of Integer, String) In query\n            &#39; Print the key value of the IGrouping.\n            output.AppendLine(petGroup.Key)\n            &#39; Iterate over each value in the \n            &#39; IGrouping and print the value.\n            For Each name As String In petGroup\n                output.AppendLine(String.Format(&quot;  {0}&quot;, name))\n            Next\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39; 8\n    &#39;  Barley\n    &#39; 4\n    &#39;  Boots\n    &#39;  Daisy\n    &#39; 1\n    &#39;  Whiskers\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupBy__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___0___2___System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupBy_TSource_TKey_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TElement&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TSource,TElement&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to map each source element to an element in an <span class=\"xref\">stem.Linq.IGrouping`2</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TElement</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IQueryable<><tkey, telement=\"\">&gt;</tkey,></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in Visual Basic where each <span class=\"xref\">stem.Linq.IGrouping`2</span> contains a sequence of objects of type <code>TElement</code> and a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it groups the elements of <code>source</code> by a key value that is obtained by invoking <code>keySelector</code> on each element. Key values are compared by using <code>comparer</code>. The <code>elementSelector</code> parameter is invoked on each element to obtain a result element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupBy__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___1_System_Collections_Generic_IEnumerable___0____2___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupBy_TSource_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result value from each group.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it groups the elements of <code>source</code> by a key value that is obtained by invoking <code>keySelector</code> on each element. The <code>resultSelector</code> parameter is used to obtain a result value from each group and its key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence and project a sequence of results of type <code>TResult</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#15\">            class Pet\n            {\n                public string Name { get; set; }\n                public double Age { get; set; }\n            }\n\n            public static void GroupByEx3()\n            {\n                // Create a list of pets.\n                List&lt;Pet&gt; petsList =\n                    new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8.3 },\n                                   new Pet { Name=&quot;Boots&quot;, Age=4.9 },\n                                   new Pet { Name=&quot;Whiskers&quot;, Age=1.5 },\n                                   new Pet { Name=&quot;Daisy&quot;, Age=4.3 } };\n\n                // Group Pet objects by the Math.Floor of their age.\n                // Then project an anonymous type from each group\n                // that consists of the key, the count of the group&#39;s\n                // elements, and the minimum and maximum age in the group.\n                var query = petsList.AsQueryable().GroupBy(\n                    pet =&gt; Math.Floor(pet.Age),\n                    (age, pets) =&gt; new\n                    {\n                        Key = age,\n                        Count = pets.Count(),\n                        Min = pets.Min(pet =&gt; pet.Age),\n                        Max = pets.Max(pet =&gt; pet.Age)\n                    });\n\n                // Iterate over each anonymous type.\n                foreach (var result in query)\n                {\n                    Console.WriteLine(&quot;<br>Age group: &quot; + result.Key);\n                    Console.WriteLine(&quot;Number of pets in this age group: &quot; + result.Count);\n                    Console.WriteLine(&quot;Minimum age: &quot; + result.Min);\n                    Console.WriteLine(&quot;Maximum age: &quot; + result.Max);\n                }\n\n                /*  This code produces the following output:\n                 \n                    Age group: 8\n                    Number of pets in this age group: 1\n                    Minimum age: 8.3\n                    Maximum age: 8.3\n                 \n                    Age group: 4\n                    Number of pets in this age group: 2\n                    Minimum age: 4.3\n                    Maximum age: 4.9\n                 \n                    Age group: 1\n                    Number of pets in this age group: 1\n                    Minimum age: 1.5\n                    Maximum age: 1.5\n                */\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#15\">    Structure Pet\n        Public Name As String\n        Public Age As Double\n    End Structure\n\n    Shared Sub GroupByEx3()\n        &#39; Create a list of pets.\n        Dim petsList As New List(Of Pet)(New Pet() { _\n                           New Pet With {.Name = &quot;Barley&quot;, .Age = 8.3}, _\n                           New Pet With {.Name = &quot;Boots&quot;, .Age = 4.9}, _\n                           New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1.5}, _\n                           New Pet With {.Name = &quot;Daisy&quot;, .Age = 4.3}})\n\n        &#39; Group Pet objects by the Math.Floor of their age.\n        &#39; Then project an anonymous type from each group\n        &#39; that consists of the key, the count of the group&#39;s\n        &#39; elements, and the minimum and maximum age in the group.\n        Dim query = petsList.AsQueryable().GroupBy( _\n            Function(pet) Math.Floor(pet.Age), _\n            Function(age, pets) New With { _\n                .Key = age, _\n                .Count = pets.Count(), _\n                .Min = pets.Min(Function(pet) pet.Age), _\n                .Max = pets.Max(Function(pet) pet.Age) _\n            })\n\n        Dim output As New System.Text.StringBuilder\n        &#39; Iterate over each anonymous type.\n        For Each result In query\n            output.AppendLine(vbCrLf &amp; &quot;Age group: &quot; &amp; result.Key)\n            output.AppendLine(&quot;Number of pets with this age: &quot; &amp; result.Count)\n            output.AppendLine(&quot;Minimum age: &quot; &amp; result.Min)\n            output.AppendLine(&quot;Maximum age: &quot; &amp; result.Max)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39;  Age group: 8\n        &#39;  Number of pets with this age: 1\n        &#39;  Minimum age: 8.3\n        &#39;  Maximum age: 8.3\n\n        &#39;  Age group: 4\n        &#39;  Number of pets with this age: 2\n        &#39;  Minimum age: 4.3\n        &#39;  Maximum age: 4.9\n\n        &#39;  Age group: 1\n        &#39;  Number of pets with this age: 1\n        &#39;  Minimum age: 1.5\n        &#39;  Maximum age: 1.5\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupBy__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___1_System_Collections_Generic_IEnumerable___0____2___System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupBy_TSource_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result value from each group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>resultSelector</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it groups the elements of <code>source</code> by key values that are obtained by invoking <code>keySelector</code> on each element. The <code>comparer</code> parameter is used to compare keys and the <code>resultSelector</code> parameter is used to obtain a result value from each group and its key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupBy__4_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1_System_Collections_Generic_IEnumerable___2____3___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupBy_TSource_TKey_TElement_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TSource,TElement&gt;&gt;,Expression&lt;Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to map each source element to an element in an <span class=\"xref\">stem.Linq.IGrouping`2</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TElement</span>&gt;,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result value from each group.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it groups the elements of <code>source</code> by key values that are obtained by invoking <code>keySelector</code> on each element. The <code>elementSelector</code> parameter is used to project the elements of each group, and the <code>resultSelector</code> parameter is used to obtain a result value from each group and its key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence and project a sequence of results of type <code>TResult</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#130\">            class Pet\n            {\n                public string Name { get; set; }\n                public double Age { get; set; }\n            }\n\n            public static void GroupByEx4()\n            {\n                // Create a list of pets.\n                List&lt;Pet&gt; petsList =\n                    new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8.3 },\n                                   new Pet { Name=&quot;Boots&quot;, Age=4.9 },\n                                   new Pet { Name=&quot;Whiskers&quot;, Age=1.5 },\n                                   new Pet { Name=&quot;Daisy&quot;, Age=4.3 } };\n\n                // Group Pet.Age values by the Math.Floor of the age.\n                // Then project an anonymous type from each group\n                // that consists of the key, the count of the group&#39;s\n                // elements, and the minimum and maximum age in the group.\n                var query = petsList.AsQueryable().GroupBy(\n                    pet =&gt; Math.Floor(pet.Age),\n                    pet =&gt; pet.Age,\n                    (baseAge, ages) =&gt; new\n                    {\n                        Key = baseAge,\n                        Count = ages.Count(),\n                        Min = ages.Min(),\n                        Max = ages.Max()\n                    });\n\n                // Iterate over each anonymous type.\n                foreach (var result in query)\n                {\n                    Console.WriteLine(&quot;<br>Age group: &quot; + result.Key);\n                    Console.WriteLine(&quot;Number of pets in this age group: &quot; + result.Count);\n                    Console.WriteLine(&quot;Minimum age: &quot; + result.Min);\n                    Console.WriteLine(&quot;Maximum age: &quot; + result.Max);\n                }\n\n                /*  This code produces the following output:\n                 \n                    Age group: 8\n                    Number of pets in this age group: 1\n                    Minimum age: 8.3\n                    Maximum age: 8.3\n                 \n                    Age group: 4\n                    Number of pets in this age group: 2\n                    Minimum age: 4.3\n                    Maximum age: 4.9\n                 \n                    Age group: 1\n                    Number of pets in this age group: 1\n                    Minimum age: 1.5\n                    Maximum age: 1.5\n                */\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#130\">    Structure Pet\n        Public Name As String\n        Public Age As Double\n    End Structure\n\n    Shared Sub GroupByEx4()\n        &#39; Create a list of pets.\n        Dim petsList As New List(Of Pet)(New Pet() { _\n                           New Pet With {.Name = &quot;Barley&quot;, .Age = 8.3}, _\n                           New Pet With {.Name = &quot;Boots&quot;, .Age = 4.9}, _\n                           New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1.5}, _\n                           New Pet With {.Name = &quot;Daisy&quot;, .Age = 4.3}})\n\n        &#39; Group Pet.Age valuesby the Math.Floor of the age.\n        &#39; Then project an anonymous type from each group\n        &#39; that consists of the key, the count of the group&#39;s\n        &#39; elements, and the minimum and maximum age in the group.\n        Dim query = petsList.AsQueryable().GroupBy( _\n            Function(pet) Math.Floor(pet.Age), _\n            Function(pet) pet.Age, _\n            Function(baseAge, ages) New With { _\n                .Key = baseAge, _\n                .Count = ages.Count(), _\n                .Min = ages.Min(), _\n                .Max = ages.Max() _\n            })\n\n        Dim output As New System.Text.StringBuilder\n        &#39; Iterate over each anonymous type.\n        For Each result In query\n            output.AppendLine(vbCrLf &amp; &quot;Age group: &quot; &amp; result.Key)\n            output.AppendLine(&quot;Number of pets with this age: &quot; &amp; result.Count)\n            output.AppendLine(&quot;Minimum age: &quot; &amp; result.Min)\n            output.AppendLine(&quot;Maximum age: &quot; &amp; result.Max)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39;  Age group: 8\n        &#39;  Number of pets with this age: 1\n        &#39;  Minimum age: 8.3\n        &#39;  Maximum age: 8.3\n\n        &#39;  Age group: 4\n        &#39;  Number of pets with this age: 2\n        &#39;  Minimum age: 4.3\n        &#39;  Maximum age: 4.9\n\n        &#39;  Age group: 1\n        &#39;  Number of pets with this age: 1\n        &#39;  Minimum age: 1.5\n        &#39;  Maximum age: 1.5\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupBy__4_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1_System_Collections_Generic_IEnumerable___2____3___System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupBy_TSource_TKey_TElement_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,Expression&lt;Func&lt;TSource,TElement&gt;&gt;,Expression&lt;Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to map each source element to an element in an <span class=\"xref\">stem.Linq.IGrouping`2</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TElement</span>&gt;,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result value from each group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it groups the elements of <code>source</code> by key values that are obtained by invoking <code>keySelector</code> on each element. The <code>comparer</code> parameter is used to compare key values. The <code>elementSelector</code> parameter is used to project the elements of each group, and the <code>resultSelector</code> parameter is used to obtain a result value from each group and its key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupJoin__4_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1___2___System_Linq_Expressions_Expression_System_Func___0_System_Collections_Generic_IEnumerable___1____3___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupJoin_TOuter_TInner_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;(IQueryable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Expression&lt;Func&lt;TOuter,TKey&gt;&gt;,Expression&lt;Func&lt;TInner,TKey&gt;&gt;,Expression&lt;Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TOuter</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to join to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TInner</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupJoin(TOuter, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupJoin(TOuter, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>outer</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupJoin(TOuter, depends on the implementation of the type of the <code>outer</code> parameter. The expected behavior is that the <code>outerKeySelector</code> and <code>innerKeySelector</code> functions are used to extract keys from <code>outer</code> and <code>inner</code>, respectively. These keys are compared for equality to match each element in <code>outer</code> with zero or more elements from <code>inner</code>. Then the <code>resultSelector</code> function is invoked to project a result object from each group of correlated elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupJoin(TOuter, to perform a grouped join on two sequences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#40\">            class Person\n            {\n                public string Name { get; set; }\n            }\n\n            class Pet\n            {\n                public string Name { get; set; }\n                public Person Owner { get; set; }\n            }\n\n            public static void GroupJoinEx1()\n            {\n                Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };\n                Person terry = new Person { Name = &quot;Adams, Terry&quot; };\n                Person charlotte = new Person { Name = &quot;Weiss, Charlotte&quot; };\n\n                Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n                Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n                Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, Owner = charlotte };\n                Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n                List&lt;Person&gt; people = new List&lt;Person&gt; { magnus, terry, charlotte };\n                List&lt;Pet&gt; pets = new List&lt;Pet&gt; { barley, boots, whiskers, daisy };\n\n                // Create a list where each element is an anonymous \n                // type that contains a person&#39;s name and a collection \n                // of names of the pets that are owned by them.\n                var query =\n                    people.AsQueryable().GroupJoin(pets,\n                                     person =&gt; person,\n                                     pet =&gt; pet.Owner,\n                                     (person, petCollection) =&gt;\n                                         new\n                                         {\n                                             OwnerName = person.Name,\n                                             Pets = petCollection.Select(pet =&gt; pet.Name)\n                                         });\n\n                foreach (var obj in query)\n                {\n                    // Output the owner&#39;s name.\n                    Console.WriteLine(&quot;{0}:&quot;, obj.OwnerName);\n                    // Output each of the owner&#39;s pet&#39;s names.\n                    foreach (string pet in obj.Pets)\n                        Console.WriteLine(&quot;  {0}&quot;, pet);\n                }\n            }\n\n            /*\n                This code produces the following output:\n\n                Hedlund, Magnus:\n                  Daisy\n                Adams, Terry:\n                  Barley\n                  Boots\n                Weiss, Charlotte:\n                  Whiskers\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#40\">    Structure Person\n        Public Name As String\n    End Structure\n\n    Structure Pet\n        Public Name As String\n        Public Owner As Person\n    End Structure\n\n    Shared Sub GroupJoinEx1()\n        Dim magnus As New Person With {.Name = &quot;Hedlund, Magnus&quot;}\n        Dim terry As New Person With {.Name = &quot;Adams, Terry&quot;}\n        Dim charlotte As New Person With {.Name = &quot;Weiss, Charlotte&quot;}\n\n        Dim barley As New Pet With {.Name = &quot;Barley&quot;, .Owner = terry}\n        Dim boots As New Pet With {.Name = &quot;Boots&quot;, .Owner = terry}\n        Dim whiskers As New Pet With {.Name = &quot;Whiskers&quot;, .Owner = charlotte}\n        Dim daisy As New Pet With {.Name = &quot;Daisy&quot;, .Owner = magnus}\n\n        Dim people As New List(Of Person)(New Person() {magnus, terry, charlotte})\n        Dim pets As New List(Of Pet)(New Pet() {barley, boots, whiskers, daisy})\n\n        &#39; Create a list where each element is an anonymous \n        &#39; type that contains a person&#39;s name and a collection\n        &#39; of the names of the pets that are owned by them.\n        Dim query = _\n            people.AsQueryable().GroupJoin(pets, _\n                       Function(person) person, _\n                       Function(pet) pet.Owner, _\n                       Function(person, petCollection) _\n                           New With {.OwnerName = person.Name, _\n                                     .Pets = petCollection.Select( _\n                                                        Function(pet) pet.Name)})\n\n        Dim output As New System.Text.StringBuilder\n        For Each obj In query\n            &#39; Output the owner&#39;s name.\n            output.AppendLine(String.Format(&quot;{0}:&quot;, obj.OwnerName))\n            &#39; Output each of the owner&#39;s pet&#39;s names.\n            For Each pet As String In obj.Pets\n                output.AppendLine(String.Format(&quot;  {0}&quot;, pet))\n            Next\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; Hedlund, Magnus:\n    &#39;   Daisy\n    &#39; Adams, Terry:\n    &#39;   Barley\n    &#39;   Boots\n    &#39; Weiss, Charlotte:\n    &#39;   Whiskers\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_GroupJoin__4_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1___2___System_Linq_Expressions_Expression_System_Func___0_System_Collections_Generic_IEnumerable___1____3___System_Collections_Generic_IEqualityComparer___2__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_GroupJoin_TOuter_TInner_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;(IQueryable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Expression&lt;Func&lt;TOuter,TKey&gt;&gt;,Expression&lt;Func&lt;TInner,TKey&gt;&gt;,Expression&lt;Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Correlates the elements of two sequences based on key equality and groups the results. A specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> is used to compare keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TOuter</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to join to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TInner</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A comparer to hash and compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The GroupJoin(TOuter, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling GroupJoin(TOuter, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>outer</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling GroupJoin(TOuter, depends on the implementation of the type of the <code>outer</code> parameter. The expected behavior is that the <code>outerKeySelector</code> and <code>innerKeySelector</code> functions are used to extract keys from <code>outer</code> and <code>inner</code>, respectively. These keys are compared for equality by using <code>comparer</code>. The outcome of the comparisons is used to match each element in <code>outer</code> with zero or more elements from <code>inner</code>. Then the <code>resultSelector</code> function is invoked to project a result object from each group of correlated elements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Intersect__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Intersect_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set intersection of two sequences by using the default equality comparer to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence whose distinct elements that also appear in <code>source2</code> are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence whose distinct elements that also appear in the first sequence are returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A sequence that contains the set intersection of the two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Intersect(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Intersect(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Intersect(TSource) depends on the implementation of the type of the <code>source1</code> parameter. The expected behavior is that all the elements in <code>source1</code> that are also in <code>source2</code> are returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Intersect(TSource) to return the elements that appear in each of two sequences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#41\">            int[] id1 = { 44, 26, 92, 30, 71, 38 };\n            int[] id2 = { 39, 59, 83, 47, 26, 4, 30 };\n\n            // Get the numbers that occur in both arrays (id1 and id2).\n            IEnumerable&lt;int&gt; both = id1.AsQueryable().Intersect(id2);\n\n            foreach (int id in both)\n                Console.WriteLine(id);\n\n            /*\n                This code produces the following output:\n\n                26\n                30\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#41\">        Dim id1() As Integer = {44, 26, 92, 30, 71, 38}\n        Dim id2() As Integer = {39, 59, 83, 47, 26, 4, 30}\n\n        &#39; Get the numbers that occur in both arrays (id1 and id2).\n        Dim both As IEnumerable(Of Integer) = id1.AsQueryable().Intersect(id2)\n\n        Dim output As New System.Text.StringBuilder\n        For Each id As Integer In both\n            output.AppendLine(id)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; 26\n        &#39; 30\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Intersect__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Intersect_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set intersection of two sequences by using the specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose distinct elements that also appear in <code>source2</code> are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements that also appear in the first sequence are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the set intersection of the two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Intersect(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Intersect(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Intersect(TSource) depends on the implementation of the type of the <code>source1</code> parameter. The expected behavior is that all the elements in <code>source1</code> that are also in <code>source2</code> are returned. The <code>comparer</code> parameter is used to compare elements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Join__4_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1___2___System_Linq_Expressions_Expression_System_Func___0___1___3___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Join_TOuter_TInner_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join&lt;TOuter,TInner,TKey,TResult&gt;(IQueryable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Expression&lt;Func&lt;TOuter,TKey&gt;&gt;,Expression&lt;Func&lt;TInner,TKey&gt;&gt;,Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TOuter</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to join to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TInner</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TInner</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result element from two matching elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Join(TOuter, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Join(TOuter, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>outer</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Join(TOuter, depends on the implementation of the type of the <code>outer</code> parameter. The expected behavior is that of an inner join. The <code>outerKeySelector</code> and <code>innerKeySelector</code> functions are used to extract keys from <code>outer</code> and <code>inner</code>, respectively. These keys are compared for equality to match elements from each sequence. A pair of elements is stored for each element in <code>inner</code> that matches an element in <code>outer</code>. Then the <code>resultSelector</code> function is invoked to project a result object from each pair of matching elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Join(TOuter, to perform an inner join of two sequences based on a common key.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#42\">            class Person\n            {\n                public string Name { get; set; }\n            }\n\n            class Pet\n            {\n                public string Name { get; set; }\n                public Person Owner { get; set; }\n            }\n\n            public static void JoinEx1()\n            {\n                Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };\n                Person terry = new Person { Name = &quot;Adams, Terry&quot; };\n                Person charlotte = new Person { Name = &quot;Weiss, Charlotte&quot; };\n\n                Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n                Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n                Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, Owner = charlotte };\n                Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n                List&lt;Person&gt; people = new List&lt;Person&gt; { magnus, terry, charlotte };\n                List&lt;Pet&gt; pets = new List&lt;Pet&gt; { barley, boots, whiskers, daisy };\n\n                // Join the list of Person objects and the list of Pet objects \n                // to create a list of person-pet pairs where each element is \n                // an anonymous type that contains the name of pet and the name\n                // of the person that owns the pet.\n                var query = people.AsQueryable().Join(pets,\n                                person =&gt; person,\n                                pet =&gt; pet.Owner,\n                                (person, pet) =&gt;\n                                    new { OwnerName = person.Name, Pet = pet.Name });\n\n                foreach (var obj in query)\n                {\n                    Console.WriteLine(\n                        &quot;{0} - {1}&quot;,\n                        obj.OwnerName,\n                        obj.Pet);\n                }\n            }\n\n            /*\n                This code produces the following output:\n\n                Hedlund, Magnus - Daisy\n                Adams, Terry - Barley\n                Adams, Terry - Boots\n                Weiss, Charlotte - Whiskers\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#42\">    Structure Person\n        Public Name As String\n    End Structure\n\n    Structure Pet\n        Public Name As String\n        Public Owner As Person\n    End Structure\n\n    Shared Sub JoinEx1()\n        Dim magnus As New Person With {.Name = &quot;Hedlund, Magnus&quot;}\n        Dim terry As New Person With {.Name = &quot;Adams, Terry&quot;}\n        Dim charlotte As New Person With {.Name = &quot;Weiss, Charlotte&quot;}\n\n        Dim barley As New Pet With {.Name = &quot;Barley&quot;, .Owner = terry}\n        Dim boots As New Pet With {.Name = &quot;Boots&quot;, .Owner = terry}\n        Dim whiskers As New Pet With {.Name = &quot;Whiskers&quot;, .Owner = charlotte}\n        Dim daisy As New Pet With {.Name = &quot;Daisy&quot;, .Owner = magnus}\n\n        Dim people As New List(Of Person)(New Person() {magnus, terry, charlotte})\n        Dim pets As New List(Of Pet)(New Pet() {barley, boots, whiskers, daisy})\n\n        &#39; Join the list of Person objects and the list of Pet objects \n        &#39; to create a list of person-pet pairs where each element is \n        &#39; an anonymous type that contains pet&#39;s name and the name of the\n        &#39; Person object that owns the pet.\n        Dim query = people.AsQueryable().Join(pets, _\n                        Function(person) person, _\n                        Function(pet) pet.Owner, _\n                        Function(person, pet) _\n                            New With {.OwnerName = person.Name, .Pet = pet.Name})\n\n        Dim output As New System.Text.StringBuilder\n        For Each obj In query\n            output.AppendLine(String.Format( _\n                &quot;{0} - {1}&quot;, obj.OwnerName, obj.Pet))\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; Hedlund, Magnus - Daisy\n    &#39; Adams, Terry - Barley\n    &#39; Adams, Terry - Boots\n    &#39; Weiss, Charlotte - Whiskers\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Join__4_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___2___System_Linq_Expressions_Expression_System_Func___1___2___System_Linq_Expressions_Expression_System_Func___0___1___3___System_Collections_Generic_IEqualityComparer___2__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Join_TOuter_TInner_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join&lt;TOuter,TInner,TKey,TResult&gt;(IQueryable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Expression&lt;Func&lt;TOuter,TKey&gt;&gt;,Expression&lt;Func&lt;TInner,TKey&gt;&gt;,Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Correlates the elements of two sequences based on matching keys. A specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> is used to compare keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TOuter</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to join to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TInner</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TInner</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result element from two matching elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to hash and compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Join(TOuter, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Join(TOuter, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>outer</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Join(TOuter, depends on the implementation of the type of the <code>outer</code> parameter. The expected behavior is that of an inner join. The <code>outerKeySelector</code> and <code>innerKeySelector</code> functions are used to extract keys from <code>outer</code> and <code>inner</code>, respectively. These keys are compared for equality by using <code>comparer</code>. The outcome of the comparisons is used to create a matching pair for each element in <code>inner</code> that matches an element in <code>outer</code>. Then the <code>resultSelector</code> function is invoked to project a result object from each pair of matching elements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Last__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Last_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Last&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the last element in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Last&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return the last element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The value at the last position in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Last(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Last(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Last(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the last element in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Last(TSource) to return the last element of an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#43\">            int[] numbers = { 9, 34, 65, 92, 87, 435, 3, 54, \n                                83, 23, 87, 67, 12, 19 };\n\n            int last = numbers.AsQueryable().Last();\n\n            Console.WriteLine(last);\n\n            /*\n                This code produces the following output:\n\n                19\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#43\">        Dim numbers() As Integer = {9, 34, 65, 92, 87, 435, 3, 54, _\n                            83, 23, 87, 67, 12, 19}\n\n        Dim last As Integer = numbers.AsQueryable().Last()\n\n        MsgBox(last)\n\n        &#39; This code produces the following output:\n        &#39; 19\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Last__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Last_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Last&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the last element of a sequence that satisfies a specified condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Last&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The last element in <code>source</code> that passes the test specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No element satisfies the condition in <code>predicate</code>.  </p>\n<p> -or-  </p>\n<p> The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Last(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Last(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Last(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the last element in <code>source</code> that satisfies the condition specified by <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Last(TSource) to return the last element of an array that satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#44\">            int[] numbers = { 9, 34, 65, 92, 87, 435, 3, 54, \n                                83, 23, 87, 67, 12, 19 };\n\n            // Get the last number in the array that is greater than 80.\n            int last = numbers.AsQueryable().Last(num =&gt; num &gt; 80);\n\n            Console.WriteLine(last);\n\n            /*\n                This code produces the following output:\n\n                87\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#44\">        Dim numbers() As Integer = {9, 34, 65, 92, 87, 435, 3, 54, _\n                            83, 23, 87, 67, 12, 19}\n\n        &#39; Get the last number in the array that is greater than 80.\n        Dim last As Integer = numbers.AsQueryable().Last(Function(num) num &gt; 80)\n\n        MsgBox(last)\n\n        &#39; This code produces the following output:\n        &#39; 87\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_LastOrDefault__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_LastOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the last element in a sequence, or a default value if the sequence contains no elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return the last element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the last element in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LastOrDefault(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling LastOrDefault(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling LastOrDefault(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the last element in <code>source</code>, or a default value if <code>source</code> is empty.  </p>\n<p> The &lt;xref:System.Linq.Queryable.LastOrDefault%2A&gt; method does not provide a way to specify a default value. If you want to specify a default value other than <code>default</code>(<code>TSource</code>), use the <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> method as described in the Example section.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use LastOrDefault(TSource) on an empty array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#45\">            // Create an empty array.\n            string[] fruits = { };\n\n            // Get the last item in the array, or else the default\n            // value for type string (null).\n            string last = fruits.AsQueryable().LastOrDefault();\n\n            Console.WriteLine(\n                String.IsNullOrEmpty(last) ? &quot;[STRING IS NULL OR EMPTY]&quot; : last);\n\n            /*\n                This code produces the following output:\n\n                [STRING IS NULL OR EMPTY]\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#45\">        &#39; Create an empty array.\n        Dim fruits() As String = {}\n\n        &#39; Get the last item in the array, or else the default\n        &#39; value for type string (null).\n        Dim last As String = fruits.AsQueryable().LastOrDefault()\n\n        MsgBox(IIf(String.IsNullOrEmpty(last), &quot;[STRING IS NULL OR EMPTY]&quot;, last))\n\n        &#39; This code produces the following output:\n        &#39; [STRING IS NULL OR EMPTY]\n</code></pre><p> Sometimes the value of <code>default</code>(<code>TSource</code>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> method to specify the default value that you want to use if the collection is empty. Then, call <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Last__1_System_Linq_IQueryable___0__\" data-linktype=\"relative-path\">Last&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a> to obtain the last element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty. Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> to specify a default value of 1.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#132\">            List&lt;int&gt; daysOfMonth = new List&lt;int&gt; { };\n\n            // Setting the default value to 1 after the query.\n            int lastDay1 = daysOfMonth.AsQueryable().LastOrDefault();\n            if (lastDay1 == 0)\n            {\n                lastDay1 = 1;\n            }\n            Console.WriteLine(&quot;The value of the lastDay1 variable is {0}&quot;, lastDay1);\n\n            // Setting the default value to 1 by using DefaultIfEmpty() in the query.\n            int lastDay2 = daysOfMonth.AsQueryable().DefaultIfEmpty(1).Last();\n            Console.WriteLine(&quot;The value of the lastDay2 variable is {0}&quot;, lastDay2);\n\n            /*\n             This code produces the following output:\n             \n             The value of the lastDay1 variable is 1\n             The value of the lastDay2 variable is 1\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#132\">        Dim daysOfMonth As New List(Of Integer)(New Integer() {})\n\n        &#39; Setting the default value to 1 after the query.\n        Dim lastDay1 As Integer = daysOfMonth.AsQueryable().LastOrDefault()\n        If lastDay1 = 0 Then\n            lastDay1 = 1\n        End If\n        MsgBox(String.Format(&quot;The value of the lastDay1 variable is {0}&quot;, lastDay1))\n\n        &#39; Setting the default value to 1 by using DefaultIfEmpty() in the query.\n        Dim lastDay2 As Integer = daysOfMonth.AsQueryable().DefaultIfEmpty(1).Last()\n        MsgBox(String.Format(&quot;The value of the lastDay2 variable is {0}&quot;, lastDay2))\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The value of the lastDay1 variable is 1\n        &#39; The value of the lastDay2 variable is 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_LastOrDefault__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_LastOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <code>source</code> that passes the test in the predicate function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_LastOrDefault__1_System_Linq_IQueryable___0__\" data-linktype=\"relative-path\">LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a> method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_LastOrDefault__1_System_Linq_IQueryable___0__\" data-linktype=\"relative-path\">LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a> itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_LastOrDefault__1_System_Linq_IQueryable___0__\" data-linktype=\"relative-path\">LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a> depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the last element in <code>source</code> that satisfies the condition specified by <code>predicate</code>. It returns a default value if there is no such element in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use LastOrDefault(TSource) by passing in a predicate. In the second call to the method, there is no element in the sequence that satisfies the condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#46\">            double[] numbers = { 49.6, 52.3, 51.0, 49.4, 50.2, 48.3 };\n\n            // Get the last number in the array that rounds to 50.0,\n            // or else the default value for type double (0.0).\n            double last50 =\n                numbers.AsQueryable().LastOrDefault(n =&gt; Math.Round(n) == 50.0);\n\n            Console.WriteLine(&quot;The last number that rounds to 50 is {0}.&quot;, last50);\n\n            // Get the last number in the array that rounds to 40.0,\n            // or else the default value for type double (0.0).\n            double last40 =\n                numbers.AsQueryable().LastOrDefault(n =&gt; Math.Round(n) == 40.0);\n\n            Console.WriteLine(\n                &quot;The last number that rounds to 40 is {0}.&quot;,\n                last40 == 0.0 ? &quot;[DOES NOT EXIST]&quot; : last40.ToString());\n\n            /*\n                This code produces the following output:\n\n                The last number that rounds to 50 is 50.2.\n                The last number that rounds to 40 is [DOES NOT EXIST].\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#46\">        Dim numbers() As Double = {49.6, 52.3, 51.0, 49.4, 50.2, 48.3}\n\n        &#39; Get the last number in the array that rounds to 50.0,\n        &#39; or else the default value for type double (0.0).\n        Dim last50 As Double = _\n             numbers.AsQueryable().LastOrDefault(Function(n) Math.Round(n) = 50.0)\n\n        MsgBox(String.Format(&quot;The last number that rounds to 50 is {0}.&quot;, last50))\n\n        &#39; Get the last number in the array that rounds to 40.0,\n        &#39; or else the default value for type double (0.0).\n        Dim last40 As Double = _\n            numbers.AsQueryable().LastOrDefault(Function(n) Math.Round(n) = 40.0)\n\n        MsgBox(String.Format(&quot;The last number that rounds to 40 is {0}.&quot;, _\n            IIf(last40 = 0.0, &quot;[DOES NOT EXIST]&quot;, last40.ToString())))\n\n        &#39;This code produces the following output:\n\n        &#39;The last number that rounds to 50 is 50.2.\n        &#39;The last number that rounds to 40 is [DOES NOT EXIST].\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_LongCount__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_LongCount_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LongCount&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that represents the total number of elements in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long LongCount&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the elements to be counted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The number of elements exceeds <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LongCount(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling LongCount(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling LongCount(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it counts the number of items in <code>source</code> and returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use LongCount(TSource) to count the elements in an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#47\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                                  &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            long count = fruits.AsQueryable().LongCount();\n\n            Console.WriteLine(&quot;There are {0} fruits in the collection.&quot;, count);\n\n            /*\n                This code produces the following output:\n\n                There are 6 fruits in the collection.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#47\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, _\n                              &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        Dim count As Long = fruits.AsQueryable().LongCount()\n\n        MsgBox(String.Format(&quot;There are {0} fruits in the collection.&quot;, count))\n\n        &#39; This code produces the following output:\n\n        &#39; There are 6 fruits in the collection.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_LongCount__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_LongCount_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LongCount&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that represents the number of elements in a sequence that satisfy a condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long LongCount&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the elements to be counted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>source</code> that satisfy the condition in the predicate function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The number of matching elements exceeds <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The LongCount(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling LongCount(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling LongCount(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it counts the number of items in <code>source</code> that satisfy the condition specified by <code>predicate</code> and returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use LongCount(TSource) to count the elements in an array that satisfy a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#48\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void LongCountEx2()\n            {\n                Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                               new Pet { Name=&quot;Boots&quot;, Age=4 },\n                               new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n                const int Age = 3;\n\n                // Count the number of Pet objects where Pet.Age is greater than 3.\n                long count = pets.AsQueryable().LongCount(pet =&gt; pet.Age &gt; Age);\n\n                Console.WriteLine(&quot;There are {0} animals over age {1}.&quot;, count, Age);\n            }\n\n            /*\n                This code produces the following output:\n\n                There are 2 animals over age 3.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#48\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Shared Sub LongCountEx2()\n        Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n                           New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n                           New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n        Const Age As Integer = 3\n\n        &#39; Count the number of Pet objects where Pet.Age is greater than 3.\n        Dim count As Long = pets.AsQueryable().LongCount(Function(Pet) Pet.Age &gt; Age)\n\n        MsgBox(String.Format(&quot;There are {0} animals over age {1}.&quot;, count, Age))\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; There are 2 animals over age 3.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Max__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a generic <span class=\"xref\">stem.Linq.IQueryable`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Max&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Max(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Max(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the maximum value in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Max(TSource) to determine the maximum value in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#52\">            List&lt;long&gt; longs = new List&lt;long&gt; { 4294967296L, 466855135L, 81125L };\n\n            long max = longs.AsQueryable().Max();\n\n            Console.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n            /*\n                This code produces the following output:\n\n                The largest number is 4294967296.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#52\">        Dim longs As New List(Of Long)(New Long() {4294967296L, 466855135L, 81125L})\n\n        Dim max As Long = longs.AsQueryable().Max()\n\n        MsgBox(String.Format(&quot;The largest number is {0}.&quot;, max))\n\n        &#39;This code produces the following output:\n\n        &#39;The largest number is 4294967296.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Max__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Max_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a projection function on each element of a generic <span class=\"xref\">stem.Linq.IQueryable`1</span> and returns the maximum resulting value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Max&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Max(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Max(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Max(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element in <code>source</code> and returns the maximum value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Max(TSource, to determine the maximum value in a sequence of projected values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#58\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void MaxEx2()\n            {\n                Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                               new Pet { Name=&quot;Boots&quot;, Age=4 },\n                               new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n                // Add Pet.Age to the length of Pet.Name\n                // to determine the &quot;maximum&quot; Pet object in the array.\n                int max =\n                    pets.AsQueryable().Max(pet =&gt; pet.Age + pet.Name.Length);\n\n                Console.WriteLine(\n                    &quot;The maximum pet age plus name length is {0}.&quot;,\n                    max);\n            }\n\n            /*\n                This code produces the following output:\n\n                The maximum pet age plus name length is 14.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#58\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Shared Sub MaxEx2()\n        Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n                       New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n                       New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n        &#39; Add Pet.Age to the length of Pet.Name\n        &#39; to determine the &quot;maximum&quot; Pet object in the array.\n        Dim max As Integer = _\n            pets.AsQueryable().Max(Function(pet) pet.Age + pet.Name.Length)\n\n        MsgBox(String.Format(&quot;The maximum pet age plus name length is {0}.&quot;, max))\n\n        &#39;This code produces the following output:\n\n        &#39;The maximum pet age plus name length is 14.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Min__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value of a generic <span class=\"xref\">stem.Linq.IQueryable`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Min&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Min(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Min(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the minimum value in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Min(TSource) to determine the minimum value in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#60\">            double[] doubles = { 1.5E+104, 9E+103, -2E+103 };\n\n            double min = doubles.AsQueryable().Min();\n\n            Console.WriteLine(&quot;The smallest number is {0}.&quot;, min);\n\n            /*\n                This code produces the following output:\n\n                The smallest number is -2E+103.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#60\">        Dim doubles() As Double = {1.5E+104, 9.0E+103, -2.0E+103}\n\n        Dim min As Double = doubles.AsQueryable().Min()\n\n        MsgBox(String.Format(&quot;The smallest number is {0}.&quot;, min))\n\n        &#39;This code produces the following output:\n\n        &#39;The smallest number is -2E+103.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Min__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Min_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a projection function on each element of a generic <span class=\"xref\">stem.Linq.IQueryable`1</span> and returns the minimum resulting value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Min&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Min(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Min(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Min(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element in <code>source</code> and returns the minimum value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Min(TSource, to determine the minimum value in a sequence of projected values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#68\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void MinEx2()\n            {\n                Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                               new Pet { Name=&quot;Boots&quot;, Age=4 },\n                               new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n                // Get the Pet object that has the smallest Age value.\n                int min = pets.AsQueryable().Min(pet =&gt; pet.Age);\n\n                Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n            }\n\n            /*\n                This code produces the following output:\n\n                The youngest animal is age 1.  \n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#68\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Shared Sub MinEx2()\n        Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n                       New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n                       New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n        &#39; Get the Pet object that has the smallest Age value.\n        Dim min As Integer = pets.AsQueryable().Min(Function(pet) pet.Age)\n\n        MsgBox(String.Format(&quot;The youngest animal is age {0}.&quot;, min))\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The youngest animal is age 1.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_OfType__1_System_Linq_IQueryable_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_OfType_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OfType&lt;TResult&gt;(IQueryable)</div>        \r\n          </div>\r\n    \r\n            <p>Filters the elements of an <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> based on a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Linq.IQueryable source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> whose elements to filter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A collection that contains the elements from <code>source</code> that have type <code>TResult</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>OfType</code> method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling <code>OfType</code> itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling <code>OfType</code> depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it filters out any elements in <code>source</code> that are not of type <code>TResult</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <code>OfType</code> to filter out elements that are not of type <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> from a list of elements of type <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#69\">            // Create a list of MemberInfo objects.\n            List&lt;System.Reflection.MemberInfo&gt; members = typeof(String).GetMembers().ToList();\n\n            // Return only those items that can be cast to type PropertyInfo.\n            IQueryable&lt;System.Reflection.PropertyInfo&gt; propertiesOnly =\n                members.AsQueryable().OfType&lt;System.Reflection.PropertyInfo&gt;();\n\n            Console.WriteLine(&quot;Members of type &#39;PropertyInfo&#39; are:&quot;);\n            foreach (System.Reflection.PropertyInfo pi in propertiesOnly)\n                Console.WriteLine(pi.Name);\n\n            /*\n                This code produces the following output:\n             \n                Members of type &#39;PropertyInfo&#39; are:\n                Chars\n                Length\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#69\">        &#39; Create a list of MemberInfo objects.\n        Dim members As List(Of System.Reflection.MemberInfo) = GetType(String).GetMembers().ToList()\n\n        &#39; Return only those items that can be cast to type PropertyInfo.\n        Dim propertiesOnly As IQueryable(Of System.Reflection.PropertyInfo) = _\n                members.AsQueryable().OfType(Of System.Reflection.PropertyInfo)()\n\n        Dim output As New System.Text.StringBuilder\n        output.AppendLine(&quot;Members of type &#39;PropertyInfo&#39; are:&quot;)\n        For Each pi As System.Reflection.PropertyInfo In propertiesOnly\n            output.AppendLine(pi.Name)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; Members of type &#39;PropertyInfo&#39; are:\n        &#39; Chars\n        &#39; Length\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_OrderBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_OrderBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrderBy&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements of a sequence in ascending order according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from an element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The OrderBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling OrderBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter. The result of calling <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is cast to type <a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable&lt;T&gt;</a> and returned.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling OrderBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it sorts the elements of <code>source</code> based on the key obtained by invoking <code>keySelector</code> on each element of <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use OrderBy(TSource, to sort the elements of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#70\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void OrderByEx1()\n            {\n                Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                               new Pet { Name=&quot;Boots&quot;, Age=4 },\n                               new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n                // Sort the Pet objects in the array by Pet.Age.\n                IEnumerable&lt;Pet&gt; query =\n                    pets.AsQueryable().OrderBy(pet =&gt; pet.Age);\n\n                foreach (Pet pet in query)\n                    Console.WriteLine(&quot;{0} - {1}&quot;, pet.Name, pet.Age);\n            }\n\n            /*\n                This code produces the following output:\n\n                Whiskers - 1\n                Boots - 4\n                Barley - 8\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#70\">    Structure Pet\n        Public Name As String\n        Public Age As Integer\n    End Structure\n\n    Shared Sub OrderByEx1()\n        Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8}, _\n                             New Pet With {.Name = &quot;Boots&quot;, .Age = 4}, _\n                             New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n        &#39; Sort the Pet objects in the array by Pet.Age.\n        Dim query As IEnumerable(Of Pet) = _\n                    pets.AsQueryable().OrderBy(Function(pet) pet.Age)\n\n        Dim output As New System.Text.StringBuilder\n        For Each pet As Pet In query\n            output.AppendLine(String.Format(&quot;{0} - {1}&quot;, pet.Name, pet.Age))\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; Whiskers - 1\n    &#39; Boots - 4\n    &#39; Barley - 8\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_OrderBy__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_OrderBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrderBy&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements of a sequence in ascending order by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from an element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The OrderBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling OrderBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter. The result of calling <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is cast to type <a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable&lt;T&gt;</a> and returned.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling OrderBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it sorts the elements of <code>source</code> based on the key obtained by invoking <code>keySelector</code> on each element of <code>source</code>. The <code>comparer</code> parameter is used to compare keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_OrderByDescending__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_OrderByDescending_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrderByDescending&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements of a sequence in descending order according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from an element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> whose elements are sorted in descending order according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The OrderByDescending(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling OrderByDescending(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter. The result of calling <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is cast to type <a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable&lt;T&gt;</a> and returned.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling OrderByDescending(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it sorts the elements of <code>source</code> in descending order, based on the key obtained by invoking <code>keySelector</code> on each element of <code>source</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_OrderByDescending__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_OrderByDescending_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrderByDescending&lt;TSource,TKey&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from an element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> whose elements are sorted in descending order according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The OrderByDescending(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling OrderByDescending(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter. The result of calling <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is cast to type <a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable&lt;T&gt;</a> and returned.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling OrderByDescending(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it sorts the elements of <code>source</code> in descending order, based on the key obtained by invoking <code>keySelector</code> on each element of <code>source</code>. The <code>comparer</code> parameter is used to compare keys.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use OrderByDescending(TSource, to sort the elements of a sequence in descending order by using a custom comparer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#71\">            /// &lt;summary&gt;\n            /// This IComparer class sorts by the fractional part of the decimal number.\n            /// &lt;/summary&gt;\n            public class SpecialComparer : IComparer&lt;decimal&gt;\n            {\n                /// &lt;summary&gt;\n                /// Compare two decimal numbers by their fractional parts.\n                /// &lt;/summary&gt;\n                /// &lt;param name=&quot;d1&quot;&gt;The first decimal to compare.&lt;/param&gt;\n                /// &lt;param name=&quot;d2&quot;&gt;The second decimal to compare.&lt;/param&gt;\n                /// &lt;returns&gt;1 if the first decimal&#39;s fractional part \n                /// is greater than the second decimal&#39;s fractional part,\n                /// -1 if the first decimal&#39;s fractional\n                /// part is less than the second decimal&#39;s fractional part,\n                /// or the result of calling Decimal.Compare()\n                /// if the fractional parts are equal.&lt;/returns&gt;\n                public int Compare(decimal d1, decimal d2)\n                {\n                    decimal fractional1, fractional2;\n\n                    // Get the fractional part of the first number.\n                    try\n                    {\n                        fractional1 = decimal.Remainder(d1, decimal.Floor(d1));\n                    }\n                    catch (DivideByZeroException)\n                    {\n                        fractional1 = d1;\n                    }\n                    // Get the fractional part of the second number.\n                    try\n                    {\n                        fractional2 = decimal.Remainder(d2, decimal.Floor(d2));\n                    }\n                    catch (DivideByZeroException)\n                    {\n                        fractional2 = d2;\n                    }\n\n                    if (fractional1 == fractional2)\n                        return Decimal.Compare(d1, d2);\n                    else if (fractional1 &gt; fractional2)\n                        return 1;\n                    else\n                        return -1;\n                }\n            }\n\n            public static void OrderByDescendingEx1()\n            {\n                List&lt;decimal&gt; decimals =\n                    new List&lt;decimal&gt; { 6.2m, 8.3m, 0.5m, 1.3m, 6.3m, 9.7m };\n\n                // Sort the decimal values in descending order\n                // by using a custom comparer.\n                IEnumerable&lt;decimal&gt; query =\n                    decimals.AsQueryable()\n                    .OrderByDescending(num =&gt; num, new SpecialComparer());\n\n                foreach (decimal num in query)\n                    Console.WriteLine(num);\n            }\n\n            /*\n                This code produces the following output:\n\n                9.7\n                0.5\n                8.3\n                6.3\n                1.3\n                6.2\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#71\">    &#39;&#39;&#39; &lt;summary&gt;\n    &#39;&#39;&#39; This class provides a custom implementation of the\n    &#39;&#39;&#39; IComparer.Compare() method. It sorts by the fractional part of the decimal number.\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Class SpecialComparer\n        Implements IComparer(Of Decimal)\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Compare two decimal numbers by their fractional parts.\n        &#39;&#39;&#39; &lt;/summary&gt;\n        &#39;&#39;&#39; &lt;param name=&quot;d1&quot;&gt;The first decimal to compare.&lt;/param&gt;\n        &#39;&#39;&#39; &lt;param name=&quot;d2&quot;&gt;The second decimal to compare.&lt;/param&gt;\n        &#39;&#39;&#39; &lt;returns&gt;1 if the first decimal&#39;s fractional part is greater than\n        &#39;&#39;&#39; the second decimal&#39;s fractional part,\n        &#39;&#39;&#39; -1 if the first decimal&#39;s fractional\n        &#39;&#39;&#39; part is less than the second decimal&#39;s fractional part,\n        &#39;&#39;&#39; or the result of calling Decimal.Compare()\n        &#39;&#39;&#39; if the fractional parts are equal.&lt;/returns&gt;\n        Function Compare(ByVal d1 As Decimal, ByVal d2 As Decimal) As Integer _\n            Implements IComparer(Of Decimal).Compare\n\n            Dim fractional1 As Decimal\n            Dim fractional2 As Decimal\n\n            &#39; Get the fractional part of the first number.\n            Try\n                fractional1 = Decimal.Remainder(d1, Decimal.Floor(d1))\n            Catch ex As DivideByZeroException\n                fractional1 = d1\n            End Try\n\n            &#39; Get the fractional part of the second number.\n            Try\n                fractional2 = Decimal.Remainder(d2, Decimal.Floor(d2))\n            Catch ex As DivideByZeroException\n                fractional2 = d2\n            End Try\n\n            If (fractional1 = fractional2) Then\n                &#39; The fractional parts are equal, so compare the entire numbers.\n                Return Decimal.Compare(d1, d2)\n            ElseIf (fractional1 &gt; fractional2) Then\n                Return 1\n            Else\n                Return -1\n            End If\n        End Function\n    End Class\n\n    Sub OrderByDescendingEx1()\n        &#39; Create a list of decimal values.\n        Dim decimals As New List(Of Decimal)(New Decimal() _\n                                             {6.2D, 8.3D, 0.5D, 1.3D, 6.3D, 9.7D})\n\n        &#39; Order the elements of the list by passing\n        &#39; in the custom IComparer class.\n        Dim query As IEnumerable(Of Decimal) = _\n            decimals.AsQueryable(). _\n            OrderByDescending(Function(num) num, New SpecialComparer())\n\n        Dim output As New System.Text.StringBuilder\n        For Each num As Decimal In query\n            output.AppendLine(num)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; 9.7\n    &#39; 0.5\n    &#39; 8.3\n    &#39; 6.3\n    &#39; 1.3\n    &#39; 6.2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Reverse__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Reverse_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reverse&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Inverts the order of the elements in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to reverse.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements correspond to those of the input sequence in reverse order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Reverse(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Reverse(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Reverse(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it reverses the order of the elements in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Reverse(TSource) to reverse the order of elements in an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#74\">            char[] apple = { &#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39; };\n\n            // Reverse the order of the characters in the collection.\n            IQueryable&lt;char&gt; reversed = apple.AsQueryable().Reverse();\n\n            foreach (char chr in reversed)\n                Console.Write(chr + &quot; &quot;);\n            Console.WriteLine();\n\n            /*\n                This code produces the following output:\n\n                e l p p a\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#74\">        Dim appleLetters As New List(Of Char)(New Char() _\n                                              {&quot;a&quot;c, &quot;p&quot;c, &quot;p&quot;c, &quot;l&quot;c, &quot;e&quot;c})\n\n        &#39; Reverse the order of the characters in the collection.\n        Dim reversed As IQueryable(Of Char) = _\n           appleLetters.AsQueryable().Reverse()\n\n        Dim output As New System.Text.StringBuilder\n        For Each chr As Char In reversed\n            output.Append(chr &amp; &quot; &quot;)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; e l p p a \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Select__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Select_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence into a new form by incorporating the element&#39;s index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,TResult&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements are the result of invoking a projection function on each element of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Select(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Select(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Select(TSource, depend on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> to project it into a different form.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Select(TSource, to project over a sequence of values and use the index of each element in the projected form.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#76\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, \n                                  &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Project an anonymous type that contains the\n            // index of the string in the source array, and\n            // a string that contains the same number of characters\n            // as the string&#39;s index in the source array.\n            var query =\n                fruits.AsQueryable()\n                .Select((fruit, index) =&gt;\n                            new { index, str = fruit.Substring(0, index) });\n\n            foreach (var obj in query)\n                Console.WriteLine(&quot;{0}&quot;, obj);\n\n            /*\n                This code produces the following output:\n\n                { index = 0, str =  }\n                { index = 1, str = b }\n                { index = 2, str = ma }\n                { index = 3, str = ora }\n                { index = 4, str = pass }\n                { index = 5, str = grape }\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#76\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, _\n                              &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Project an anonymous type that contains the\n        &#39; index of the string in the source array, and\n        &#39; a string that contains the same number of characters\n        &#39; as the string&#39;s index in the source array.\n        Dim query = _\n            fruits.AsQueryable() _\n            .Select(Function(fruit, index) New With {index, .str = fruit.Substring(0, index)})\n\n        Dim output As New System.Text.StringBuilder\n        For Each obj In query\n            output.AppendLine(obj.ToString())\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; { index = 0, str =  }\n        &#39; { index = 1, str = b }\n        &#39; { index = 2, str = ma }\n        &#39; { index = 3, str = ora }\n        &#39; { index = 4, str = pass }\n        &#39; { index = 5, str = grape }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Select__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Select_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence into a new form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements are the result of invoking a projection function on each element of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Select(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Select(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Select(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> to project it into a different form.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Select(TSource, to project over a sequence of values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#75\">            List&lt;int&gt; range =\n                new List&lt;int&gt; { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n            // Project the square of each int value.\n            IEnumerable&lt;int&gt; squares =\n                range.AsQueryable().Select(x =&gt; x * x);\n\n            foreach (int num in squares)\n                Console.WriteLine(num);\n\n            /*\n                This code produces the following output:\n\n                1\n                4\n                9\n                16\n                25\n                36\n                49\n                64\n                81\n                100\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#75\">        Dim range As New List(Of Integer)(New Integer() {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\n        &#39; Project the square of each int value.\n        Dim squares As IEnumerable(Of Integer) = _\n            range.AsQueryable().Select(Function(x) x * x)\n\n        Dim output As New System.Text.StringBuilder\n        For Each num As Integer In squares\n            output.AppendLine(num)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; 1\n        &#39; 4\n        &#39; 9\n        &#39; 16\n        &#39; 25\n        &#39; 36\n        &#39; 49\n        &#39; 64\n        &#39; 81\n        &#39; 100\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SelectMany__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Collections_Generic_IEnumerable___1____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SelectMany_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectMany&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,IEnumerable&lt;TResult&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and combines the resulting sequences into one sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The SelectMany(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SelectMany(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SelectMany(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> to project it into an enumerable form. It then concatenates the enumerable results into a single, one-dimensional sequence.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#77\">            class PetOwner\n            {\n                public string Name { get; set; }\n                public List&lt;String&gt; Pets { get; set; }\n            }\n\n            public static void SelectManyEx1()\n            {\n                PetOwner[] petOwners = \n                    { new PetOwner { Name=&quot;Higa, Sidney&quot;, \n                          Pets = new List&lt;string&gt;{ &quot;Scruffy&quot;, &quot;Sam&quot; } },\n                      new PetOwner { Name=&quot;Ashkenazi, Ronen&quot;, \n                          Pets = new List&lt;string&gt;{ &quot;Walker&quot;, &quot;Sugar&quot; } },\n                      new PetOwner { Name=&quot;Price, Vernette&quot;, \n                          Pets = new List&lt;string&gt;{ &quot;Scratches&quot;, &quot;Diesel&quot; } } };\n\n                // Query using SelectMany().\n                IEnumerable&lt;string&gt; query1 =\n                    petOwners.AsQueryable().SelectMany(petOwner =&gt; petOwner.Pets);\n\n                Console.WriteLine(&quot;Using SelectMany():&quot;);\n\n                // Only one foreach loop is required to iterate through the\n                // results because it is a one-dimensional collection.\n                foreach (string pet in query1)\n                    Console.WriteLine(pet);\n\n                // This code shows how to use Select() instead of SelectMany().\n                IEnumerable&lt;List&lt;String&gt;&gt; query2 =\n                    petOwners.AsQueryable().Select(petOwner =&gt; petOwner.Pets);\n\n                Console.WriteLine(&quot;<br>Using Select():&quot;);\n\n                // Notice that two foreach loops are required to iterate through\n                // the results because the query returns a collection of arrays.\n                foreach (List&lt;String&gt; petList in query2)\n                {\n                    foreach (string pet in petList)\n                    {\n                        Console.WriteLine(pet);\n                    }\n                    Console.WriteLine();\n                }\n            }\n\n            /*\n                This code produces the following output:\n\n                Using SelectMany():\n                Scruffy\n                Sam\n                Walker\n                Sugar\n                Scratches\n                Diesel\n\n                Using Select():\n                Scruffy\n                Sam\n\n                Walker\n                Sugar\n\n                Scratches\n                Diesel\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#77\">    Structure PetOwner\n        Public Name As String\n        Public Pets() As String\n    End Structure\n\n    Shared Sub SelectManyEx1()\n        Dim petOwners() As PetOwner = _\n            {New PetOwner With _\n             {.Name = &quot;Higa, Sidney&quot;, .Pets = New String() {&quot;Scruffy&quot;, &quot;Sam&quot;}}, _\n             New PetOwner With _\n             {.Name = &quot;Ashkenazi, Ronen&quot;, .Pets = New String() {&quot;Walker&quot;, &quot;Sugar&quot;}}, _\n             New PetOwner With _\n             {.Name = &quot;Price, Vernette&quot;, .Pets = New String() {&quot;Scratches&quot;, &quot;Diesel&quot;}}}\n\n        &#39; Query using SelectMany().\n        Dim query1 As IEnumerable(Of String) = _\n                    petOwners.AsQueryable().SelectMany(Function(petOwner) petOwner.Pets)\n\n        Dim output As New System.Text.StringBuilder(&quot;Using SelectMany():&quot; &amp; vbCrLf)\n        &#39; Only one foreach loop is required to iterate through \n        &#39; the results because it is a one-dimensional collection.\n        For Each pet As String In query1\n            output.AppendLine(pet)\n        Next\n\n        &#39; This code shows how to use Select() instead of SelectMany().\n        Dim query2 As IEnumerable(Of String()) = _\n                    petOwners.AsQueryable().Select(Function(petOwner) petOwner.Pets)\n\n        output.AppendLine(vbCrLf &amp; &quot;Using Select():&quot;)\n        &#39; Notice that two foreach loops are required to iterate through \n        &#39; the results because the query returns a collection of arrays.\n        For Each petArray() As String In query2\n            For Each pet As String In petArray\n                output.AppendLine(pet)\n            Next\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; Using SelectMany():\n    &#39; Scruffy\n    &#39; Sam\n    &#39; Walker\n    &#39; Sugar\n    &#39; Scratches\n    &#39; Diesel\n\n    &#39; Using Select():\n    &#39; Scruffy\n    &#39; Sam\n    &#39; Walker\n    &#39; Sugar\n    &#39; Scratches\n    &#39; Diesel\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SelectMany__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SelectMany_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectMany&lt;TSource,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,IEnumerable&lt;TResult&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element; the second parameter of this function represents the index of the source element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The SelectMany(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SelectMany(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SelectMany(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> to project it into an enumerable form. Each enumerable result incorporates the index of the source element. It then concatenates the enumerable results into a single, one-dimensional sequence.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array and use the index of each source element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#78\">            class PetOwner\n            {\n                public string Name { get; set; }\n                public List&lt;string&gt; Pets { get; set; }\n            }\n\n            public static void SelectManyEx2()\n            {\n                PetOwner[] petOwners = \n                    { new PetOwner { Name=&quot;Higa, Sidney&quot;, \n                          Pets = new List&lt;string&gt;{ &quot;Scruffy&quot;, &quot;Sam&quot; } },\n                      new PetOwner { Name=&quot;Ashkenazi, Ronen&quot;, \n                          Pets = new List&lt;string&gt;{ &quot;Walker&quot;, &quot;Sugar&quot; } },\n                      new PetOwner { Name=&quot;Price, Vernette&quot;, \n                          Pets = new List&lt;string&gt;{ &quot;Scratches&quot;, &quot;Diesel&quot; } },\n                      new PetOwner { Name=&quot;Hines, Patrick&quot;, \n                          Pets = new List&lt;string&gt;{ &quot;Dusty&quot; } } };\n\n                // For each PetOwner element in the source array,\n                // project a sequence of strings where each string\n                // consists of the index of the PetOwner element in the\n                // source array and the name of each pet in PetOwner.Pets.\n                IEnumerable&lt;string&gt; query =\n                    petOwners.AsQueryable()\n                    .SelectMany(\n                    (petOwner, index) =&gt; petOwner.Pets.Select(pet =&gt; index + pet)\n                    );\n\n                foreach (string pet in query)\n                    Console.WriteLine(pet);\n            }\n\n            // This code produces the following output:\n            //\n            // 0Scruffy\n            // 0Sam\n            // 1Walker\n            // 1Sugar\n            // 2Scratches\n            // 2Diesel\n            // 3Dusty\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#78\">    Structure PetOwner\n        Public Name As String\n        Public Pets() As String\n    End Structure\n\n    Shared Sub SelectManyEx2()\n        Dim petOwners() As PetOwner = _\n            {New PetOwner With _\n             {.Name = &quot;Higa, Sidney&quot;, .Pets = New String() {&quot;Scruffy&quot;, &quot;Sam&quot;}}, _\n             New PetOwner With _\n             {.Name = &quot;Ashkenazi, Ronen&quot;, .Pets = New String() {&quot;Walker&quot;, &quot;Sugar&quot;}}, _\n             New PetOwner With _\n             {.Name = &quot;Price, Vernette&quot;, .Pets = New String() {&quot;Scratches&quot;, &quot;Diesel&quot;}}, _\n             New PetOwner With _\n             {.Name = &quot;Hines, Patrick&quot;, .Pets = New String() {&quot;Dusty&quot;}}}\n\n        &#39; For each PetOwner element in the source array,\n        &#39; project a sequence of strings where each string\n        &#39; consists of the index of the PetOwner element in the\n        &#39; source array and the name of each pet in PetOwner.Pets.\n        Dim query As IEnumerable(Of String) = _\n            petOwners.AsQueryable() _\n            .SelectMany(Function(petOwner, index) petOwner.Pets.Select(Function(pet) index.ToString() + pet))\n\n        Dim output As New System.Text.StringBuilder\n        For Each pet As String In query\n            output.AppendLine(pet)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39; 0Scruffy\n    &#39; 0Sam\n    &#39; 1Walker\n    &#39; 1Sugar\n    &#39; 2Scratches\n    &#39; 2Diesel\n    &#39; 3Dusty\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SelectMany__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Collections_Generic_IEnumerable___1____System_Linq_Expressions_Expression_System_Func___0___1___2___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SelectMany_TSource_TCollection_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectMany&lt;TSource,TCollection,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,IEnumerable&lt;TCollection&gt;&gt;&gt;,Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>collectionSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TCollection</span>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element of the input sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TCollection</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element of each intermediate sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The SelectMany(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SelectMany(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SelectMany(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>collectionSelector</code> on each element of <code>source</code> to project it into an enumerable form. Then the function represented by <code>resultSelector</code> is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array. This example uses a result selector function to keep the source element that corresponds to each intermediate sequence in scope for the final call to <code>Select</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#124\">            class PetOwner\n            {\n                public string Name { get; set; }\n                public List&lt;Pet&gt; Pets { get; set; }\n            }\n\n            class Pet\n            {\n                public string Name { get; set; }\n                public string Breed { get; set; }\n            }\n\n            public static void SelectManyEx3()\n            {\n                PetOwner[] petOwners =\n                    { new PetOwner { Name=&quot;Higa&quot;, \n                          Pets = new List&lt;Pet&gt;{\n                              new Pet { Name=&quot;Scruffy&quot;, Breed=&quot;Poodle&quot; },\n                              new Pet { Name=&quot;Sam&quot;, Breed=&quot;Hound&quot; } } },\n                      new PetOwner { Name=&quot;Ashkenazi&quot;, \n                          Pets = new List&lt;Pet&gt;{\n                              new Pet { Name=&quot;Walker&quot;, Breed=&quot;Collie&quot; },\n                              new Pet { Name=&quot;Sugar&quot;, Breed=&quot;Poodle&quot; } } },\n                      new PetOwner { Name=&quot;Price&quot;, \n                          Pets = new List&lt;Pet&gt;{\n                              new Pet { Name=&quot;Scratches&quot;, Breed=&quot;Dachshund&quot; },\n                              new Pet { Name=&quot;Diesel&quot;, Breed=&quot;Collie&quot; } } },\n                      new PetOwner { Name=&quot;Hines&quot;, \n                          Pets = new List&lt;Pet&gt;{\n                              new Pet { Name=&quot;Dusty&quot;, Breed=&quot;Collie&quot; } } }\n                    };\n\n                // This query demonstrates how to obtain a sequence of\n                // the names of all the pets whose breed is &quot;Collie&quot;, while\n                // keeping an association with the owner that owns the pet.\n                var query =\n                    petOwners.AsQueryable()\n                    // Create a sequence of ALL the Pet objects. Then\n                    // project an anonymous type that consists of each\n                    // Pet in the new sequence and the PetOwner object\n                    // from the initial array that corresponds to that pet.\n                   .SelectMany(owner =&gt; owner.Pets,\n                               (owner, pet) =&gt; new { owner, pet })\n                    // Filter the sequence of anonymous types to only\n                    // keep pets whose breed is &quot;Collie&quot;.\n                    .Where(ownerAndPet =&gt; ownerAndPet.pet.Breed == &quot;Collie&quot;)\n                    // Project an anonymous type that consists\n                    // of the pet owner&#39;s name and the pet&#39;s name.\n                    .Select(ownerAndPet =&gt; new\n                    {\n                        Owner = ownerAndPet.owner.Name,\n                        Pet = ownerAndPet.pet.Name\n                    });\n\n                // Print the results.\n                foreach (var obj in query)\n                    Console.WriteLine(obj);\n            }\n\n            /* This code produces the following output:\n            \n                { Owner = Ashkenazi, Pet = Walker }\n                { Owner = Price, Pet = Diesel }\n                { Owner = Hines, Pet = Dusty }\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#124\">    Structure PetOwner\n        Public Name As String\n        Public Pets As List(Of Pet)\n    End Structure\n\n    Structure Pet\n        Public Name As String\n        Public Breed As String\n    End Structure\n\n    Shared Sub SelectManyEx3()\n        Dim petOwners() As PetOwner = _\n                    {New PetOwner With {.Name = &quot;Higa&quot;, _\n                          .Pets = New List(Of Pet)(New Pet() { _\n                              New Pet With {.Name = &quot;Scruffy&quot;, .Breed = &quot;Poodle&quot;}, _\n                              New Pet With {.Name = &quot;Sam&quot;, .Breed = &quot;Hound&quot;}})}, _\n                      New PetOwner With {.Name = &quot;Ashkenazi&quot;, _\n                          .Pets = New List(Of Pet)(New Pet() { _\n                              New Pet With {.Name = &quot;Walker&quot;, .Breed = &quot;Collie&quot;}, _\n                              New Pet With {.Name = &quot;Sugar&quot;, .Breed = &quot;Poodle&quot;}})}, _\n                      New PetOwner With {.Name = &quot;Price&quot;, _\n                          .Pets = New List(Of Pet)(New Pet() { _\n                              New Pet With {.Name = &quot;Scratches&quot;, .Breed = &quot;Dachshund&quot;}, _\n                              New Pet With {.Name = &quot;Diesel&quot;, .Breed = &quot;Collie&quot;}})}, _\n                      New PetOwner With {.Name = &quot;Hines&quot;, _\n                          .Pets = New List(Of Pet)(New Pet() { _\n                              New Pet With {.Name = &quot;Dusty&quot;, .Breed = &quot;Collie&quot;}})} _\n                    }\n\n        &#39; This query demonstrates how to obtain a sequence of\n        &#39; the names of all the pets whose breed is &quot;Collie&quot;, while\n        &#39; keeping an association with the owner that owns the pet.\n        Dim query = petOwners.AsQueryable() _\n            .SelectMany(Function(owner) owner.Pets, _\n                   Function(owner, pet) New With {owner, pet}) _\n            .Where(Function(ownerAndPet) ownerAndPet.pet.Breed = &quot;Collie&quot;) _\n            .Select(Function(ownerAndPet) New With { _\n                .Owner = ownerAndPet.owner.Name, _\n                .Pet = ownerAndPet.pet.Name})\n\n        Dim output As New System.Text.StringBuilder\n        For Each obj In query\n            output.AppendLine(String.Format(&quot;Owner={0}, Pet={1}&quot;, obj.Owner, obj.Pet))\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; Owner=Ashkenazi, Pet=Walker\n    &#39; Owner=Price, Pet=Diesel\n    &#39; Owner=Hines, Pet=Dusty\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SelectMany__3_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1____System_Linq_Expressions_Expression_System_Func___0___1___2___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SelectMany_TSource_TCollection_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectMany&lt;TSource,TCollection,TResult&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,IEnumerable&lt;TCollection&gt;&gt;&gt;,Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>collectionSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TCollection</span>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TCollection</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element of each intermediate sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The SelectMany(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SelectMany(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SelectMany(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>collectionSelector</code> on each element of <code>source</code> to project it into an enumerable form. Each enumerable result incorporates the source element&#39;s index. Then the function represented by <code>resultSelector</code> is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SequenceEqual__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SequenceEqual_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SequenceEqual&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two sequences are equal by using the default equality comparer to compare elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to compare to those of <code>source2</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to compare to those of the first sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SequenceEqual(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SequenceEqual(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SequenceEqual(TSource) depends on the implementation of the type of the <code>source1</code> parameter. The expected behavior is that it determines if the two source sequences are equal.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SequenceEqual(TSource) to determine whether two sequences are equal. In this example the sequences are equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#32\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void SequenceEqualEx1()\n            {\n                Pet pet1 = new Pet { Name = &quot;Turbo&quot;, Age = 2 };\n                Pet pet2 = new Pet { Name = &quot;Peanut&quot;, Age = 8 };\n\n                // Create two lists of pets.\n                List&lt;Pet&gt; pets1 = new List&lt;Pet&gt; { pet1, pet2 };\n                List&lt;Pet&gt; pets2 = new List&lt;Pet&gt; { pet1, pet2 };\n\n                // Determine if the lists are equal.\n                bool equal = pets1.AsQueryable().SequenceEqual(pets2);\n\n                Console.WriteLine(\n                    &quot;The lists {0} equal.&quot;,\n                    equal ? &quot;are&quot; : &quot;are not&quot;);\n            }\n\n            /*\n                This code produces the following output:\n\n                The lists are equal.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#32\">    Class Pet\n        Public Name As String\n        Public Age As Integer\n    End Class\n\n    Shared Sub SequenceEqualEx1()\n        Dim pet1 As New Pet With {.Name = &quot;Turbo&quot;, .Age = 2}\n        Dim pet2 As New Pet With {.Name = &quot;Peanut&quot;, .Age = 8}\n\n        &#39; Create two lists of pets.\n        Dim pets1 As New List(Of Pet)(New Pet() {pet1, pet2})\n        Dim pets2 As New List(Of Pet)(New Pet() {pet1, pet2})\n\n        &#39; Determine if the lists are equal.\n        Dim equal As Boolean = pets1.AsQueryable().SequenceEqual(pets2)\n\n        &#39; Display the output.\n        Dim text As String = IIf(equal, &quot;are&quot;, &quot;are not&quot;)\n        MsgBox(&quot;The lists &quot; &amp; text &amp; &quot; equal.&quot;)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The lists are equal.\n</code></pre><p> The following code example compares two sequences that are not equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#33\">            class Pet\n            {\n                public string Name { get; set; }\n                public int Age { get; set; }\n            }\n\n            public static void SequenceEqualEx2()\n            {\n                Pet pet1 = new Pet() { Name = &quot;Turbo&quot;, Age = 2 };\n                Pet pet2 = new Pet() { Name = &quot;Peanut&quot;, Age = 8 };\n\n                // Create two lists of pets.\n                List&lt;Pet&gt; pets1 = new List&lt;Pet&gt; { pet1, pet2 };\n                List&lt;Pet&gt; pets2 = new List&lt;Pet&gt; { \n                    new Pet { Name = &quot;Turbo&quot;, Age = 2 },\n                    new Pet { Name = &quot;Peanut&quot;, Age = 8 } \n                };\n\n                // Determine if the lists are equal.\n                bool equal = pets1.AsQueryable().SequenceEqual(pets2);\n\n                Console.WriteLine(&quot;The lists {0} equal.&quot;, equal ? &quot;are&quot; : &quot;are NOT&quot;);\n            }\n\n            /*\n                This code produces the following output:\n\n                The lists are NOT equal.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#33\">    Class Pet\n        Public Name As String\n        Public Age As Integer\n    End Class\n\n    Shared Sub SequenceEqualEx2()\n        Dim pet1 As New Pet With {.Name = &quot;Turbo&quot;, .Age = 2}\n        Dim pet2 As New Pet With {.Name = &quot;Peanut&quot;, .Age = 8}\n\n        &#39; Create two lists of pets.\n        Dim pets1 As New List(Of Pet)()\n        pets1.Add(pet1)\n        pets1.Add(pet2)\n\n        Dim pets2 As New List(Of Pet)()\n        pets2.Add(New Pet With {.Name = &quot;Turbo&quot;, .Age = 2})\n        pets2.Add(New Pet With {.Name = &quot;Peanut&quot;, .Age = 8})\n\n        &#39; Determine if the lists are equal.\n        Dim equal As Boolean = pets1.AsQueryable().SequenceEqual(pets2)\n\n        &#39; Display the output.\n        Dim text As String = IIf(equal, &quot;are&quot;, &quot;are not&quot;)\n        MsgBox(&quot;The lists &quot; &amp; text &amp; &quot; equal.&quot;)\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; The lists are not equal.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SequenceEqual__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SequenceEqual_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SequenceEqual&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two sequences are equal by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> whose elements to compare to those of <code>source2</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to compare to those of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to use to compare elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SequenceEqual(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SequenceEqual(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SequenceEqual(TSource) depends on the implementation of the type of the <code>source1</code> parameter. The expected behavior is that it determines if the two source sequences are equal by using <code>comparer</code> to compare elements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Single__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Single_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Single&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Single&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return the single element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The single element of the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> has more than one element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Single(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Single(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Single(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the only element in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Single(TSource) to select the only element of an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#79\">            // Create two arrays.\n            string[] fruits1 = { &quot;orange&quot; };\n            string[] fruits2 = { &quot;orange&quot;, &quot;apple&quot; };\n            \n            // Get the only item in the first array.\n            string fruit1 = fruits1.AsQueryable().Single();\n\n            Console.WriteLine(&quot;First query: &quot; + fruit1);\n\n            try\n            {\n                // Try to get the only item in the second array.\n                string fruit2 = fruits2.AsQueryable().Single();\n                Console.WriteLine(&quot;Second query: &quot; + fruit2);\n            }\n            catch (System.InvalidOperationException)\n            {\n                Console.WriteLine(\n                    &quot;Second query: The collection does not contain exactly one element.&quot;\n                    );\n            }\n\n            /*\n                This code produces the following output:\n\n                First query: orange\n                Second query: The collection does not contain exactly one element\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#79\">        &#39; Create two arrays.\n        Dim fruits1() As String = {&quot;orange&quot;}\n        Dim fruits2() As String = {&quot;orange&quot;, &quot;apple&quot;}\n\n        &#39; Get the only item in the first array.\n        Dim result As String = fruits1.AsQueryable().Single()\n\n        &#39; Display the result.\n        MsgBox(&quot;First query: &quot; &amp; result)\n\n        Try\n            &#39; Try to get the only item in the second array.\n            Dim fruit2 As String = fruits2.AsQueryable().Single()\n            MsgBox(&quot;Second query: &quot; + fruit2)\n        Catch\n            MsgBox(&quot;Second query: The collection does not contain exactly one element.&quot;)\n        End Try\n\n        &#39; This code produces the following output:\n\n        &#39; First query: orange\n        &#39; Second query: The collection does not contain exactly one element.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Single__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Single_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Single&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Single&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return a single element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test an element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The single element of the input sequence that satisfies the condition in <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No element satisfies the condition in <code>predicate</code>.  </p>\n<p> -or-  </p>\n<p> More than one element satisfies the condition in <code>predicate</code>.  </p>\n<p> -or-  </p>\n<p> The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Single(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Single(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Single(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the only element in <code>source</code> that satisfies the condition specified by <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Single(TSource) to select the only element of an array that satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#81\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                                  &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Get the only string in the array whose length is greater than 10.\n            string fruit1 = fruits.AsQueryable().Single(fruit =&gt; fruit.Length &gt; 10);\n\n            Console.WriteLine(&quot;First Query: &quot; + fruit1);\n\n            try\n            {\n                // Try to get the only string in the array\n                // whose length is greater than 15.\n                string fruit2 = fruits.AsQueryable().Single(fruit =&gt; fruit.Length &gt; 15);\n                Console.WriteLine(&quot;Second Query: &quot; + fruit2);\n            }\n            catch (System.InvalidOperationException)\n            {\n                Console.Write(&quot;Second Query: The collection does not contain &quot;);\n                Console.WriteLine(&quot;exactly one element whose length is greater than 15.&quot;);\n            }\n\n            /*\n                This code produces the following output:\n\n                First Query: passionfruit\n                Second Query: The collection does not contain exactly one \n                element whose length is greater than 15.\n             */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#81\">        Dim fruits() As String = _\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Get the only string in the array whose length is greater than 10.\n        Dim result As String = _\n            fruits.AsQueryable().Single(Function(fruit) fruit.Length &gt; 10)\n\n        &#39; Display the result.\n        MsgBox(&quot;First Query: &quot; &amp; result)\n\n        Try\n            &#39; Try to get the only string in the array\n            &#39; whose length is greater than 15.\n            Dim fruit2 As String = fruits.AsQueryable().Single(Function(fruit) fruit.Length &gt; 15)\n            MsgBox(&quot;Second Query: &quot; + fruit2)\n        Catch\n            Dim text As String = &quot;Second Query: The collection does not contain &quot;\n            text = text &amp; &quot;exactly one element whose length is greater than 15.&quot;\n            MsgBox(text)\n        End Try\n\n        &#39; This code produces the following output:\n\n        &#39; First Query: passionfruit\n        &#39; Second Query: The collection does not contain exactly one \n        &#39;   element whose length is greater than 15.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SingleOrDefault__1_System_Linq_IQueryable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SingleOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SingleOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return the single element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The single element of the input sequence, or <code>default</code>(<code>TSource</code>) if the sequence contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> has more than one element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SingleOrDefault(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SingleOrDefault(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SingleOrDefault(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the only element in <code>source</code>, or a default value if <code>source</code> is empty.  </p>\n<p> The &lt;xref:System.Linq.Queryable.SingleOrDefault%2A&gt; method does not provide a way to specify a default value. If you want to specify a default value other than <code>default</code>(<code>TSource</code>), use the <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> method as described in the Example section.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SingleOrDefault(TSource) to select the only element of an array. The second query demonstrates that SingleOrDefault(TSource) returns a default value when the sequence does not contain exactly one element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#83\">            // Create two arrays. The second is empty.\n            string[] fruits1 = { &quot;orange&quot; };\n            string[] fruits2 = { };\n\n            // Get the only item in the first array, or else\n            // the default value for type string (null).\n            string fruit1 = fruits1.AsQueryable().SingleOrDefault();\n            Console.WriteLine(&quot;First Query: &quot; + fruit1);\n\n            // Get the only item in the second array, or else\n            // the default value for type string (null). \n            string fruit2 = fruits2.AsQueryable().SingleOrDefault();\n            Console.WriteLine(&quot;Second Query: &quot; +\n                (String.IsNullOrEmpty(fruit2) ? &quot;No such string!&quot; : fruit2));\n\n            /*\n                This code produces the following output:\n\n                First Query: orange\n                Second Query: No such string!\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#83\">        &#39; Create two arrays. The second is empty.\n        Dim fruits1() As String = {&quot;orange&quot;}\n        Dim fruits2() As String = {}\n\n        &#39; Get the only item in the first array, or else\n        &#39; the default value for type string (null).\n        Dim fruit1 As String = fruits1.AsQueryable().SingleOrDefault()\n        MsgBox(&quot;First Query: &quot; + fruit1)\n\n        &#39; Get the only item in the second array, or else\n        &#39; the default value for type string (null). \n        Dim fruit2 As String = fruits2.AsQueryable().SingleOrDefault()\n        MsgBox(&quot;Second Query: &quot; &amp; _\n            IIf(String.IsNullOrEmpty(fruit2), &quot;No such string!&quot;, fruit2))\n\n        &#39; This code produces the following output:\n\n        &#39; First Query: orange\n        &#39; Second Query: No such string!\n</code></pre><p> Sometimes the value of <code>default</code>(<code>TSource</code>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> method to specify the default value that you want to use if the collection is empty. Then, call <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Single__1_System_Linq_IQueryable___0__\" data-linktype=\"relative-path\">Single&lt;TSource&gt;(IQueryable&lt;TSource&gt;)</a> to obtain the element. The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty. Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_DefaultIfEmpty__1_System_Linq_IQueryable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;,TSource)</a> to specify a default value of 1.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#133\">            int[] pageNumbers = { };\n\n            // Setting the default value to 1 after the query.\n            int pageNumber1 = pageNumbers.AsQueryable().SingleOrDefault();\n            if (pageNumber1 == 0)\n            {\n                pageNumber1 = 1;\n            }\n            Console.WriteLine(&quot;The value of the pageNumber1 variable is {0}&quot;, pageNumber1);\n\n            // Setting the default value to 1 by using DefaultIfEmpty() in the query.\n            int pageNumber2 = pageNumbers.AsQueryable().DefaultIfEmpty(1).Single();\n            Console.WriteLine(&quot;The value of the pageNumber2 variable is {0}&quot;, pageNumber2);\n\n            /*\n             This code produces the following output:\n            \n             The value of the pageNumber1 variable is 1\n             The value of the pageNumber2 variable is 1\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#133\">        Dim pageNumbers() As Integer = {}\n\n        &#39; Setting the default value to 1 after the query.\n        Dim pageNumber1 As Integer = pageNumbers.AsQueryable().SingleOrDefault()\n        If pageNumber1 = 0 Then\n            pageNumber1 = 1\n        End If\n        MsgBox(String.Format(&quot;The value of the pageNumber1 variable is {0}&quot;, pageNumber1))\n\n        &#39; Setting the default value to 1 by using DefaultIfEmpty() in the query.\n        Dim pageNumber2 As Integer = pageNumbers.AsQueryable().DefaultIfEmpty(1).Single()\n        MsgBox(String.Format(&quot;The value of the pageNumber2 variable is {0}&quot;, pageNumber2))\n\n        &#39; This code produces the following output:\n\n        &#39; The value of the pageNumber1 variable is 1\n        &#39; The value of the pageNumber2 variable is 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SingleOrDefault__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SingleOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SingleOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return a single element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test an element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The single element of the input sequence that satisfies the condition in <code>predicate</code>, or <code>default</code>(<code>TSource</code>) if no such element is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>More than one element satisfies the condition in <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The SingleOrDefault(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SingleOrDefault(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SingleOrDefault(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the only element in <code>source</code> that satisfies the condition specified by <code>predicate</code>, or a default value if no such element exists.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SingleOrDefault(TSource) to select the only element of an array that satisfies a condition. The second query demonstrates that SingleOrDefault(TSource) returns a default value when the sequence does not contain exactly one element that satisfies the condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#85\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                                  &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Get the single string in the array whose length is greater\n            // than 10, or else the default value for type string (null).\n            string fruit1 =\n                fruits.AsQueryable().SingleOrDefault(fruit =&gt; fruit.Length &gt; 10);\n            Console.WriteLine(&quot;First Query: &quot; + fruit1);\n\n            // Get the single string in the array whose length is greater\n            // than 15, or else the default value for type string (null).\n            string fruit2 =\n               fruits.AsQueryable().SingleOrDefault(fruit =&gt; fruit.Length &gt; 15);\n            Console.WriteLine(&quot;Second Query: &quot; +\n                (String.IsNullOrEmpty(fruit2) ? &quot;No such string!&quot; : fruit2));\n\n            /*\n                This code produces the following output:\n\n                First Query: passionfruit\n                Second Query: No such string!\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#85\">        Dim fruits() As String = _\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Get the single string in the array whose length is greater\n        &#39; than 10, or else the default value for type string (null).\n        Dim fruit1 As String = _\n            fruits.AsQueryable().SingleOrDefault(Function(fruit) fruit.Length &gt; 10)\n        &#39; Display the result.\n        MsgBox(&quot;First Query: &quot; &amp; fruit1)\n\n        &#39; Get the single string in the array whose length is greater\n        &#39; than 15, or else the default value for type string (null).\n        Dim fruit2 As String = _\n            fruits.AsQueryable().SingleOrDefault(Function(fruit) fruit.Length &gt; 15)\n        MsgBox(&quot;Second Query: &quot; &amp; _\n            IIf(String.IsNullOrEmpty(fruit2), &quot;No such string!&quot;, fruit2))\n\n        &#39; This code produces the following output:\n\n        &#39; First Query: passionfruit\n        &#39; Second Query: No such string!\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Skip__1_System_Linq_IQueryable___0__System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Skip_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Skip&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to skip before returning the remaining elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements that occur after the specified index in the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Skip(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Skip(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Skip(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it skips the first <code>count</code> elements in <code>source</code> and returns the remaining elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Skip(TSource) to skip a specified number of elements in a sorted array and return the remaining elements.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#87\">            int[] grades = { 59, 82, 70, 56, 92, 98, 85 };\n\n            // Sort the grades in descending order and\n            // get all except the first three.\n            IEnumerable&lt;int&gt; lowerGrades =\n                grades.AsQueryable().OrderByDescending(g =&gt; g).Skip(3);\n\n            Console.WriteLine(&quot;All grades except the top three are:&quot;);\n            foreach (int grade in lowerGrades)\n                Console.WriteLine(grade);\n\n            /*\n                This code produces the following output:\n\n                All grades except the top three are:\n                82\n                70\n                59\n                56\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#87\">        Dim grades() As Integer = {59, 82, 70, 56, 92, 98, 85}\n\n        &#39; Sort the grades in descending order and\n        &#39; get all except the first three.\n        Dim lowerGrades = grades.AsQueryable() _\n            .OrderByDescending(Function(g) g) _\n            .Skip(3)\n\n        Dim output As New System.Text.StringBuilder\n        output.AppendLine(&quot;All grades except the top three are:&quot;)\n        For Each grade As Integer In lowerGrades\n            output.AppendLine(grade)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; All grades except the top three are:\n        &#39; 82\n        &#39; 70\n        &#39; 59\n        &#39; 56\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SkipWhile__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SkipWhile_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The SkipWhile(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SkipWhile(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SkipWhile(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it applies <code>predicate</code> to each element in <code>source</code> until it finds an element for which <code>predicate</code> returns false. That element and all the remaining elements are returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SkipWhile(TSource) to skip elements of an array as long as a condition is true.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#88\">            int[] grades = { 59, 82, 70, 56, 92, 98, 85 };\n\n            // Get all grades less than 80 by first\n            // sorting the grades in descending order and then\n            // taking all the grades after the first grade\n            // that is less than 80.\n            IEnumerable&lt;int&gt; lowerGrades =\n                grades.AsQueryable()\n                .OrderByDescending(grade =&gt; grade)\n                .SkipWhile(grade =&gt; grade &gt;= 80);\n\n            Console.WriteLine(&quot;All grades below 80:&quot;);\n            foreach (int grade in lowerGrades)\n                Console.WriteLine(grade);\n\n            /*\n                This code produces the following output:\n\n                All grades below 80:\n                70\n                59\n                56\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#88\">        Dim grades() As Integer = {59, 82, 70, 56, 92, 98, 85}\n\n        &#39; Get all grades less than 80 by first  sorting the grades \n        &#39; in descending order and then taking all the grades that \n        &#39; occur after the first grade that is less than 80.\n        Dim lowerGrades = grades.AsQueryable() _\n            .OrderByDescending(Function(grade) grade) _\n            .SkipWhile(Function(grade) grade &gt;= 80)\n\n        Dim output As New System.Text.StringBuilder\n        output.AppendLine(&quot;All grades below 80:&quot;)\n        For Each grade As Integer In lowerGrades\n            output.AppendLine(grade)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; All grades below 80:\n        &#39; 70\n        &#39; 59\n        &#39; 56\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_SkipWhile__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_SkipWhile_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element&#39;s index is used in the logic of the predicate function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition; the second parameter of this function represents the index of the source element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The SkipWhile(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling SkipWhile(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling SkipWhile(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it applies <code>predicate</code> to each element in <code>source</code> until it finds an element for which <code>predicate</code> returns false. That element and all the remaining elements are returned. The index of each source element is provided as the second argument to <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SkipWhile(TSource) to skip elements of an array as long as a condition that depends on the element&#39;s index is true.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#89\">            int[] amounts = { 5000, 2500, 9000, 8000, \n                                6500, 4000, 1500, 5500 };\n\n            // Skip over amounts in the array until the first amount\n            // that is less than or equal to the product of its\n            // index in the array and 1000. Take the remaining items.\n            IEnumerable&lt;int&gt; query =\n                amounts.AsQueryable()\n                .SkipWhile((amount, index) =&gt; amount &gt; index * 1000);\n\n            foreach (int amount in query)\n                Console.WriteLine(amount);\n\n            /*\n                This code produces the following output:\n\n                4000\n                1500\n                5500\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#89\">        Dim amounts() As Integer = {5000, 2500, 9000, 8000, _\n                            6500, 4000, 1500, 5500}\n\n        &#39; Skip over amounts in the array until the first amount\n        &#39; that is less than or equal to the product of its\n        &#39; index in the array and 1000. Take the remaining items.\n        Dim query = amounts.AsQueryable() _\n            .SkipWhile(Function(amount, index) amount &gt; index * 1000)\n\n        Dim output As New System.Text.StringBuilder\n        For Each amount As Integer In query\n            output.AppendLine(amount)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; 4000\n        &#39; 1500\n        &#39; 5500\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Sum (this System.Linq.IQueryable&lt;decimal&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Single__\" data-linktype=\"relative-path\">Sum(IQueryable&lt;Single&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#120\">            List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\n            float sum = numbers.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                The sum of the numbers is 635.13.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#120\">        Dim numbers As New List(Of Single)(New Single() {43.68F, 1.25F, 583.7F, 6.5F})\n\n        Dim sum As Single = numbers.AsQueryable().Sum()\n\n        MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n        &#39; This code produces the following output:\n\n        &#39; The sum of the numbers is 635.13.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Sum (this System.Linq.IQueryable&lt;double&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Single__\" data-linktype=\"relative-path\">Sum(IQueryable&lt;Single&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#120\">            List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\n            float sum = numbers.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                The sum of the numbers is 635.13.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#120\">        Dim numbers As New List(Of Single)(New Single() {43.68F, 1.25F, 583.7F, 6.5F})\n\n        Dim sum As Single = numbers.AsQueryable().Sum()\n\n        MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n        &#39; This code produces the following output:\n\n        &#39; The sum of the numbers is 635.13.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Sum (this System.Linq.IQueryable&lt;int&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Single__\" data-linktype=\"relative-path\">Sum(IQueryable&lt;Single&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#120\">            List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\n            float sum = numbers.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                The sum of the numbers is 635.13.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#120\">        Dim numbers As New List(Of Single)(New Single() {43.68F, 1.25F, 583.7F, 6.5F})\n\n        Dim sum As Single = numbers.AsQueryable().Sum()\n\n        MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n        &#39; This code produces the following output:\n\n        &#39; The sum of the numbers is 635.13.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Sum (this System.Linq.IQueryable&lt;long&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Single__\" data-linktype=\"relative-path\">Sum(IQueryable&lt;Single&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#120\">            List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\n            float sum = numbers.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                The sum of the numbers is 635.13.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#120\">        Dim numbers As New List(Of Single)(New Single() {43.68F, 1.25F, 583.7F, 6.5F})\n\n        Dim sum As Single = numbers.AsQueryable().Sum()\n\n        MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n        &#39; This code produces the following output:\n\n        &#39; The sum of the numbers is 635.13.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Single___\" data-linktype=\"relative-path\">Sum(IQueryable&lt;Nullable&lt;Single&gt;&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#121\">            float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\n            float? sum = points.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                Total points earned: 311.39\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#121\">        Dim points As Nullable(Of Single)() = {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n        Dim sum As Nullable(Of Single) = points.AsQueryable().Sum()\n\n        MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n        &#39;This code produces the following output:\n\n        &#39;Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Single___\" data-linktype=\"relative-path\">Sum(IQueryable&lt;Nullable&lt;Single&gt;&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#121\">            float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\n            float? sum = points.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                Total points earned: 311.39\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#121\">        Dim points As Nullable(Of Single)() = {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n        Dim sum As Nullable(Of Single) = points.AsQueryable().Sum()\n\n        MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n        &#39;This code produces the following output:\n\n        &#39;Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Single___\" data-linktype=\"relative-path\">Sum(IQueryable&lt;Nullable&lt;Single&gt;&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#121\">            float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\n            float? sum = points.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                Total points earned: 311.39\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#121\">        Dim points As Nullable(Of Single)() = {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n        Dim sum As Nullable(Of Single) = points.AsQueryable().Sum()\n\n        MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n        &#39;This code produces the following output:\n\n        &#39;Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Single___\" data-linktype=\"relative-path\">Sum(IQueryable&lt;Nullable&lt;Single&gt;&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#121\">            float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\n            float? sum = points.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                Total points earned: 311.39\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#121\">        Dim points As Nullable(Of Single)() = {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n        Dim sum As Nullable(Of Single) = points.AsQueryable().Sum()\n\n        MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n        &#39;This code produces the following output:\n\n        &#39;Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Sum to sum the values of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#121\">            float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\n            float? sum = points.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                Total points earned: 311.39\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#121\">        Dim points As Nullable(Of Single)() = {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n        Dim sum As Nullable(Of Single) = points.AsQueryable().Sum()\n\n        MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n        &#39;This code produces the following output:\n\n        &#39;Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum_System_Linq_IQueryable_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IQueryable&lt;Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Sum (this System.Linq.IQueryable&lt;float&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the sum of the values in <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Sum to sum the values of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#120\">            List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\n            float sum = numbers.AsQueryable().Sum();\n\n            Console.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n            /*\n                This code produces the following output:\n\n                The sum of the numbers is 635.13.\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#120\">        Dim numbers As New List(Of Single)(New Single() {43.68F, 1.25F, 583.7F, 6.5F})\n\n        Dim sum As Single = numbers.AsQueryable().Sum()\n\n        MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n        &#39; This code produces the following output:\n\n        &#39; The sum of the numbers is 635.13.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of he <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Sum(TSource) to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Decimal____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Double____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Double&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Int32____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Int32&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Int64____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Int64&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Nullable_System_Single____\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Nullable&lt;Single&gt;&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that is obtained by invoking a projection function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values of type <code>TSource</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A projection function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Sum(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_Execute__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">Execute&lt;TResult&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it invokes <code>selector</code> on each element of <code>source</code> and returns the sum of the resulting values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_Sum__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Double___\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Double&gt;&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#98\">            class Package\n            {\n                public string Company { get; set; }\n                public double Weight { get; set; }\n            }\n\n            public static void SumEx3()\n            {\n                List&lt;Package&gt; packages =\n                    new List&lt;Package&gt; \n                        { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n                          new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n                          new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n                          new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n                // Calculate the sum of all package weights.\n                double totalWeight = packages.AsQueryable().Sum(pkg =&gt; pkg.Weight);\n\n                Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n            }\n\n            /*\n                This code produces the following output:\n\n                The total weight of the packages is: 83.7\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#98\">    Structure Package\n        Public Company As String\n        Public Weight As Double\n    End Structure\n\n    Shared Sub SumEx3()\n        Dim packages As New List(Of Package)(New Package() { _\n                New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2}, _\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7}, _\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0}, _\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n        &#39; Calculate the sum of all package weights.\n        Dim totalWeight As Double = packages.AsQueryable().Sum(Function(pkg) pkg.Weight)\n\n        MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n    End Sub\n\n    &#39;This code produces the following output:\n\n    &#39;The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Take__1_System_Linq_IQueryable___0__System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Take_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Take&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a specified number of contiguous elements from the start of a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the specified number of elements from the start of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Take(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Take(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Take(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it takes the first <code>count</code> elements from the start of <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Take(TSource) to return elements from the start of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#99\">            int[] grades = { 59, 82, 70, 56, 92, 98, 85 };\n\n            // Sort the grades in descending order and take the first three.\n            IEnumerable&lt;int&gt; topThreeGrades =\n                grades.AsQueryable().OrderByDescending(grade =&gt; grade).Take(3);\n\n            Console.WriteLine(&quot;The top three grades are:&quot;);\n            foreach (int grade in topThreeGrades)\n                Console.WriteLine(grade);\n\n            /*\n                This code produces the following output:\n\n                The top three grades are:\n                98\n                92\n                85\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#99\">        Dim grades() As Integer = {59, 82, 70, 56, 92, 98, 85}\n\n        &#39; Sort the grades in descending order and take the first three.\n        Dim topThreeGrades = _\n            grades.AsQueryable().OrderByDescending(Function(grade) grade).Take(3)\n\n        Dim output As New System.Text.StringBuilder\n        output.AppendLine(&quot;The top three grades are:&quot;)\n        For Each grade As Integer In topThreeGrades\n            output.AppendLine(grade)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; The top three grades are:\n        &#39; 98\n        &#39; 92\n        &#39; 85\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_TakeWhile__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_TakeWhile_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TakeWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns elements from a sequence as long as a specified condition is true.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The TakeWhile(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling TakeWhile(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling TakeWhile(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it applies <code>predicate</code> to each element in <code>source</code> until it finds an element for which <code>predicate</code> returns <code>false</code>. It returns all the elements up until that point.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use TakeWhile(TSource) to return elements from the start of a sequence as long as a condition is true.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#100\">            string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, \n                                  &quot;passionfruit&quot;, &quot;grape&quot; };\n\n            // Take strings from the array until a string\n            // that is equal to &quot;orange&quot; is found.\n            IEnumerable&lt;string&gt; query =\n                fruits.AsQueryable()\n                .TakeWhile(fruit =&gt; String.Compare(&quot;orange&quot;, fruit, true) != 0);\n\n            foreach (string fruit in query)\n                Console.WriteLine(fruit);\n\n            /*\n                This code produces the following output:\n\n                apple\n                banana\n                mango\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#100\">        Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, _\n                              &quot;passionfruit&quot;, &quot;grape&quot;}\n\n        &#39; Take strings from the array until a string\n        &#39; that is equal to &quot;orange&quot; is found.\n        Dim query = fruits.AsQueryable() _\n            .TakeWhile(Function(fruit) String.Compare(&quot;orange&quot;, fruit, True) &lt;&gt; 0)\n\n        Dim output As New System.Text.StringBuilder\n        For Each fruit As String In query\n            output.AppendLine(fruit)\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39;This code produces the following output:\n\n        &#39;apple\n        &#39;banana\n        &#39;mango\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_TakeWhile__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_TakeWhile_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TakeWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns elements from a sequence as long as a specified condition is true. The element&#39;s index is used in the logic of the predicate function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The TakeWhile(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling TakeWhile(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling TakeWhile(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it applies <code>predicate</code> to each element in <code>source</code> until it finds an element for which <code>predicate</code> returns <code>false</code>. It returns all the elements up until that point. The index of each source element is provided as the second argument to <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use TakeWhile(TSource) to return elements from the start of a sequence as long as a condition that uses the index of the element is true.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#101\">            string[] fruits = { &quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                                  &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot; };\n\n            // Take strings from the array until a string whose length\n            // is less than its index in the array is found.\n            IEnumerable&lt;string&gt; query =\n                fruits.AsQueryable()\n                .TakeWhile((fruit, index) =&gt; fruit.Length &gt;= index);\n\n            foreach (string fruit in query)\n                Console.WriteLine(fruit);\n\n            /*\n                This code produces the following output:\n\n                apple\n                passionfruit\n                banana\n                mango\n                orange\n                blueberry\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#101\">        Dim fruits() As String = _\n            {&quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, _\n             &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot;}\n\n        &#39; Take strings from the array until a string whose length\n        &#39; is less than its index in the array is found.\n        Dim query = fruits.AsQueryable() _\n            .TakeWhile(Function(fruit, index) fruit.Length &gt;= index)\n\n        &#39; Display the results.\n        Dim output As New System.Text.StringBuilder\n        For Each fruit As String In query\n            output.AppendLine(fruit)\n        Next\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; apple\n        &#39; passionfruit\n        &#39; banana\n        &#39; mango\n        &#39; orange\n        &#39; blueberry\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_ThenBy__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_ThenBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThenBy&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> that contains elements to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The ThenBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling ThenBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter. The result of calling <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is cast to type <a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable&lt;T&gt;</a> and returned.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling ThenBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it performs a secondary sort of the elements of <code>source</code> based on the key obtained by invoking <code>keySelector</code> on each element of <code>source</code>. All previously established sort orders are preserved.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ThenBy(TSource, to perform a secondary ordering of the elements in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#102\">            string[] fruits = { &quot;grape&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;apple&quot;, \n                                  &quot;orange&quot;, &quot;raspberry&quot;, &quot;mango&quot;, &quot;blueberry&quot; };\n\n            // Sort the strings first by their length and then \n            // alphabetically by passing the identity selector function.\n            IEnumerable&lt;string&gt; query =\n                fruits.AsQueryable()\n                .OrderBy(fruit =&gt; fruit.Length).ThenBy(fruit =&gt; fruit);\n\n            foreach (string fruit in query)\n                Console.WriteLine(fruit);\n\n            /*\n                This code produces the following output:\n\n                apple\n                grape\n                mango\n                banana\n                orange\n                blueberry\n                raspberry\n                passionfruit\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#102\">        Dim fruits() As String = _\n            {&quot;grape&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, _\n             &quot;orange&quot;, &quot;raspberry&quot;, &quot;apple&quot;, &quot;blueberry&quot;}\n\n        &#39; Sort the strings first by their length and then \n        &#39; alphabetically by passing the identity selector function.\n        Dim query = fruits.AsQueryable() _\n            .OrderBy(Function(fruit) fruit.Length).ThenBy(Function(fruit) fruit)\n\n        &#39; Display the results.\n        Dim output As New System.Text.StringBuilder\n        For Each fruit As String In query\n            output.AppendLine(fruit)\n        Next\n        MsgBox(output.ToString())\n\n        &#39;This code produces the following output:\n\n        &#39;apple\n        &#39;grape\n        &#39;mango\n        &#39;banana\n        &#39;orange\n        &#39;blueberry\n        &#39;raspberry\n        &#39;passionfruit\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_ThenBy__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_ThenBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThenBy&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> that contains elements to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The ThenBy(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling ThenBy(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter. The result of calling <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is cast to type <a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable&lt;T&gt;</a> and returned.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling ThenBy(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it performs a secondary sort of the elements of <code>source</code> based on the key obtained by invoking <code>keySelector</code> on each element of <code>source</code>. All previously established sort orders are preserved. The <code>comparer</code> parameter is used to compare key values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_ThenByDescending__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_ThenByDescending_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThenByDescending&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> that contains elements to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> whose elements are sorted in descending order according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The ThenByDescending(TSource, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling ThenByDescending(TSource, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter. The result of calling <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is cast to type <a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable&lt;T&gt;</a> and returned.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling ThenByDescending(TSource, depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it performs a secondary sort of the elements of <code>source</code> in descending order, based on the key obtained by invoking <code>keySelector</code> on each element of <code>source</code>. All previously established sort orders are preserved.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_ThenByDescending__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_ThenByDescending_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThenByDescending&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedQueryable`1</span> that contains elements to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A collection whose elements are sorted in descending order according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>comparer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_ThenBy__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\" data-linktype=\"relative-path\">ThenBy&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</a> method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_ThenBy__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\" data-linktype=\"relative-path\">ThenBy&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</a> itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter. The result of calling <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> is cast to type <a class=\"xref\" href=\"system.linq.iorderedqueryable-1\" data-linktype=\"relative-path\">IOrderedQueryable&lt;T&gt;</a> and returned.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling <a class=\"xref\" href=\"system.linq.queryable#System_Linq_Queryable_ThenBy__2_System_Linq_IOrderedQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Collections_Generic_IComparer___1__\" data-linktype=\"relative-path\">ThenBy&lt;TSource,TKey&gt;(IOrderedQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,TKey&gt;&gt;,IComparer&lt;TKey&gt;)</a> depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it performs a secondary sort of the elements of <code>source</code> in descending order, based on the key obtained by invoking <code>keySelector</code> on each element of <code>source</code>. All previously established sort orders are preserved. The <code>comparer</code> parameter is used to compare key values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ThenByDescending(TSource, to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#103\">            public class CaseInsensitiveComparer : IComparer&lt;string&gt;\n            {\n                public int Compare(string x, string y)\n                {\n                    return string.Compare(x, y, true);\n                }\n            }\n\n            public static void ThenByDescendingEx1()\n            {\n                string[] fruits = \n                { &quot;apPLe&quot;, &quot;baNanA&quot;, &quot;apple&quot;, &quot;APple&quot;, &quot;orange&quot;, &quot;BAnana&quot;, &quot;ORANGE&quot;, &quot;apPLE&quot; };\n\n                // Sort the strings first ascending by their length and \n                // then descending using a custom case insensitive comparer.\n                IEnumerable&lt;string&gt; query =\n                    fruits.AsQueryable()\n                    .OrderBy(fruit =&gt; fruit.Length)\n                    .ThenByDescending(fruit =&gt; fruit, new CaseInsensitiveComparer());\n\n                foreach (string fruit in query)\n                    Console.WriteLine(fruit);\n            }\n\n            /*\n                This code produces the following output:\n            \n                apPLe\n                apple\n                APple\n                apPLE\n                orange\n                ORANGE\n                baNanA\n                BAnana\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#103\">    Class CaseInsensitiveComparer\n        Implements IComparer(Of String)\n\n        Function Compare(ByVal x As String, ByVal y As String) As Integer _\n            Implements IComparer(Of String).Compare\n\n            &#39; Compare values and ignore case.\n            Return String.Compare(x, y, True)\n        End Function\n    End Class\n\n    Sub ThenByDescendingEx1()\n        Dim fruits() As String = _\n            {&quot;apPLe&quot;, &quot;baNanA&quot;, &quot;apple&quot;, &quot;APple&quot;, &quot;orange&quot;, &quot;BAnana&quot;, &quot;ORANGE&quot;, &quot;apPLE&quot;}\n\n        &#39; Sort the strings first ascending by their length and \n        &#39; then descending by using a custom case insensitive comparer.\n        Dim query = fruits.AsQueryable() _\n            .OrderBy(Function(fruit) fruit.Length) _\n            .ThenByDescending(Function(fruit) fruit, New CaseInsensitiveComparer())\n\n        Dim output As New System.Text.StringBuilder\n        For Each fruit As String In query\n            output.AppendLine(fruit)\n        Next\n\n        &#39; Display the results.\n        MsgBox(output.ToString())\n    End Sub\n\n    &#39; This code produces the following output:\n\n    &#39; apPLe\n    &#39; apple\n    &#39; APple\n    &#39; apPLE\n    &#39; orange\n    &#39; ORANGE\n    &#39; baNanA\n    &#39; BAnana\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Union__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Union_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set union of two sequences by using the default equality comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence whose distinct elements form the first set for the union operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence whose distinct elements form the second set for the union operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the elements from both input sequences, excluding duplicates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Union(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Union(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Union(TSource) depends on the implementation of the type of the <code>source1</code> parameter. The expected behavior is that the set union of the elements in <code>source1</code> and <code>source2</code> is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Union(TSource) to obtain the set union of two sequences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#109\">            int[] ints1 = { 5, 3, 9, 7, 5, 9, 3, 7 };\n            int[] ints2 = { 8, 3, 6, 4, 4, 9, 1, 0 };\n\n            // Get the set union of the items in the two arrays.\n            IEnumerable&lt;int&gt; union = ints1.AsQueryable().Union(ints2);\n\n            foreach (int num in union)\n                Console.Write(&quot;{0} &quot;, num);\n\n            /*\n                This code produces the following output:\n\n                5 3 9 7 8 6 4 1 0\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#109\">        Dim ints1() As Integer = {5, 3, 9, 7, 5, 9, 3, 7}\n        Dim ints2() As Integer = {8, 3, 6, 4, 4, 9, 1, 0}\n\n        &#39; Get the set union of the items in the two arrays.\n        Dim union = ints1.AsQueryable().Union(ints2)\n\n        Dim output As New System.Text.StringBuilder\n        For Each num As Integer In union\n            output.Append(String.Format(&quot;{0} &quot;, num))\n        Next\n\n        &#39; Display the output.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; 5 3 9 7 8 6 4 1 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Union__1_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Union_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union&lt;TSource&gt;(IQueryable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set union of two sequences by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence whose distinct elements form the first set for the union operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence whose distinct elements form the second set for the union operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains the elements from both input sequences, excluding duplicates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code> or <code>source2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Union(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Union(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source1</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Union(TSource) depends on the implementation of the type of the <code>source1</code> parameter. The expected behavior is that the set union of the elements in <code>source1</code> and <code>source2</code> is returned. The <code>comparer</code> parameter is used to compare values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Where__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Where_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Where&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Filters a sequence of values based on a predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to filter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Where(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Where(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Where(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the elements from <code>source</code> that satisfy the condition specified by <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Where(TSource) to filter a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#110\">            List&lt;string&gt; fruits =\n                new List&lt;string&gt; { &quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                                   &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot; };\n\n            // Get all strings whose length is less than 6.\n            IEnumerable&lt;string&gt; query =\n                fruits.AsQueryable().Where(fruit =&gt; fruit.Length &lt; 6);\n\n            foreach (string fruit in query)\n                Console.WriteLine(fruit);\n\n            /*\n                This code produces the following output:\n\n                apple\n                mango\n                grape\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#110\">        Dim fruits As New List(Of String)(New String() _\n                                {&quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, _\n                                 &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot;})\n\n        &#39; Get all strings whose length is less than 6.\n        Dim query = fruits.AsQueryable().Where(Function(fruit) fruit.Length &lt; 6)\n\n        &#39; Display the results.\n        Dim output As New System.Text.StringBuilder\n        For Each fruit As String In query\n            output.AppendLine(fruit)\n        Next\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; apple\n        &#39; mango\n        &#39; grape\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Where__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Boolean___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Where_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Where&lt;TSource&gt;(IQueryable&lt;TSource&gt;,Expression&lt;Func&lt;TSource,Int32,Boolean&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Filters a sequence of values based on a predicate. Each element&#39;s index is used in the logic of the predicate function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> to filter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has at least one parameter of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a> whose type argument is one of the <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>.  </p>\n<p> The Where(TSource) method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Where(TSource) itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source</code> parameter.  </p>\n<p> The query behavior that occurs as a result of executing an expression tree that represents calling Where(TSource) depends on the implementation of the type of the <code>source</code> parameter. The expected behavior is that it returns the elements from <code>source</code> that satisfy the condition specified by <code>predicate</code>. The index of each source element is provided as the second argument to <code>predicate</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Where(TSource) to filter a sequence based on a predicate that incorporates the index of each element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#111\">            int[] numbers = { 0, 30, 20, 15, 90, 85, 40, 75 };\n\n            // Get all the numbers that are less than or equal to\n            // the product of their index in the array and 10.\n            IEnumerable&lt;int&gt; query =\n                numbers.AsQueryable()\n                .Where((number, index) =&gt; number &lt;= index * 10);\n\n            foreach (int number in query)\n                Console.WriteLine(number);\n\n            /*\n                This code produces the following output:\n\n                0\n                20\n                15\n                40\n            */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#111\">        Dim numbers() As Integer = {0, 30, 20, 15, 90, 85, 40, 75}\n\n        &#39; Get all the numbers that are less than or equal to\n        &#39; the product of their index in the array and 10.\n        Dim query = numbers.AsQueryable() _\n            .Where(Function(number, index) number &lt;= index * 10)\n\n        &#39; Display the results.\n        Dim output As New System.Text.StringBuilder\n        For Each number As Integer In query\n            output.AppendLine(number)\n        Next\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; 0\n        &#39; 20\n        &#39; 15\n        &#39; 40\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Queryable_Zip__3_System_Linq_IQueryable___0__System_Collections_Generic_IEnumerable___1__System_Linq_Expressions_Expression_System_Func___0___1___2___\">\r\n    \r\n            <a id=\"System_Linq_Queryable_Zip_TFirst_TSecond_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Zip&lt;TFirst,TSecond,TResult&gt;(IQueryable&lt;TFirst&gt;,IEnumerable&lt;TSecond&gt;,Expression&lt;Func&lt;TFirst,TSecond,TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Merges two sequences by using the specified predicate function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IQueryable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Linq.IQueryable&lt;TFirst&gt; source1, System.Collections.Generic.IEnumerable&lt;TSecond&gt; source2, System.Linq.Expressions.Expression&lt;Func&lt;TFirst,TSecond,TResult&gt;&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TFirst</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to merge.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>source2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSecond</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second sequence to merge.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression</a>&lt;<a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TFirst</span>,<span class=\"xref\">TSecond</span>,<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function that specifies how to merge the elements from the two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IQueryable`1</span> that contains merged elements of two input sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source1</code>or <code>source2 </code>is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Zip(TFirst, method generates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents calling Zip(TFirst, itself as a constructed generic method. It then passes the <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> to the <a class=\"xref\" href=\"system.linq.iqueryprovider#System_Linq_IQueryProvider_CreateQuery__1_System_Linq_Expressions_Expression_\" data-linktype=\"relative-path\">CreateQuery&lt;TElement&gt;(Expression)</a> method of the <a class=\"xref\" href=\"system.linq.iqueryprovider\" data-linktype=\"relative-path\">IQueryProvider</a> represented by the <a class=\"xref\" href=\"system.linq.iqueryable#System_Linq_IQueryable_Provider_\" data-linktype=\"relative-path\">Provider</a> property of the <code>source1</code> parameter.  </p>\n<p> The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Zip(TFirst, method to merge two sequences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Queryable#200\">            int[] numbers = { 1, 2, 3, 4 };\n            string[] words = { &quot;one&quot;, &quot;two&quot;, &quot;three&quot; };\n\n            var numbersAndWords = numbers.AsQueryable().Zip(words, (first, second) =&gt; first + &quot; &quot; + second);\n\n            foreach (var item in numbersAndWords)\n                Console.WriteLine(item);\n\n            // This code produces the following output:\n\n            // 1 one\n            // 2 two\n            // 3 three\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Queryable#200\">        Dim numbers() As Integer = {1, 2, 3, 4}\n        Dim words() As String = {&quot;one&quot;, &quot;two&quot;, &quot;three&quot;}\n        Dim numbersAndWords = numbers.AsQueryable().Zip(words, Function(first, second) first &amp; &quot; &quot; &amp; second)\n\n        For Each item In numbersAndWords\n            Console.WriteLine(item)\n        Next\n\n        &#39; This code produces the following output:\n\n        &#39; 1 one\n        &#39; 2 two\n        &#39; 3 three\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Queryable.yml\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Aggregate&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Aggregate&lt;TSource,TAccumulate&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Aggregate&lt;TSource,TAccumulate,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.All&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Any&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.AsQueryable\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.AsQueryable&lt;TElement&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Average\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Average&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Cast&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Concat&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Contains&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Count&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.DefaultIfEmpty&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Distinct&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.ElementAt&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.ElementAtOrDefault&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Except&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.First&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.FirstOrDefault&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.GroupBy&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.GroupBy&lt;TSource,TKey,TElement&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.GroupBy&lt;TSource,TKey,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.GroupBy&lt;TSource,TKey,TElement,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Intersect&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Join&lt;TOuter,TInner,TKey,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Last&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.LastOrDefault&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.LongCount&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Max&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Max&lt;TSource,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Min&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Min&lt;TSource,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.OfType&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.OrderBy&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.OrderByDescending&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Reverse&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Select&lt;TSource,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.SelectMany&lt;TSource,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.SelectMany&lt;TSource,TCollection,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.SequenceEqual&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Single&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.SingleOrDefault&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Skip&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.SkipWhile&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Sum\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Sum&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Take&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.TakeWhile&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.ThenBy&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.ThenByDescending&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Union&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Where&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Queryable.Zip&lt;TFirst,TSecond,TResult&gt;\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"7be8f304-a41c-bb90-eae0-ca725ba4880d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Linq/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.Queryable\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Queryable.yml","open_to_public_contributors":true,"api_name":["System.Linq.Queryable","System.Linq.Queryable.Aggregate<TSource>","System.Linq.Queryable.Aggregate<TSource,TAccumulate>","System.Linq.Queryable.Aggregate<TSource,TAccumulate,TResult>","System.Linq.Queryable.All<TSource>","System.Linq.Queryable.Any<TSource>","System.Linq.Queryable.AsQueryable","System.Linq.Queryable.AsQueryable<TElement>","System.Linq.Queryable.Average","System.Linq.Queryable.Average<TSource>","System.Linq.Queryable.Cast<TResult>","System.Linq.Queryable.Concat<TSource>","System.Linq.Queryable.Contains<TSource>","System.Linq.Queryable.Count<TSource>","System.Linq.Queryable.DefaultIfEmpty<TSource>","System.Linq.Queryable.Distinct<TSource>","System.Linq.Queryable.ElementAt<TSource>","System.Linq.Queryable.ElementAtOrDefault<TSource>","System.Linq.Queryable.Except<TSource>","System.Linq.Queryable.First<TSource>","System.Linq.Queryable.FirstOrDefault<TSource>","System.Linq.Queryable.GroupBy<TSource,TKey>","System.Linq.Queryable.GroupBy<TSource,TKey,TElement>","System.Linq.Queryable.GroupBy<TSource,TKey,TResult>","System.Linq.Queryable.GroupBy<TSource,TKey,TElement,TResult>","System.Linq.Queryable.GroupJoin<TOuter,TInner,TKey,TResult>","System.Linq.Queryable.Intersect<TSource>","System.Linq.Queryable.Join<TOuter,TInner,TKey,TResult>","System.Linq.Queryable.Last<TSource>","System.Linq.Queryable.LastOrDefault<TSource>","System.Linq.Queryable.LongCount<TSource>","System.Linq.Queryable.Max<TSource>","System.Linq.Queryable.Max<TSource,TResult>","System.Linq.Queryable.Min<TSource>","System.Linq.Queryable.Min<TSource,TResult>","System.Linq.Queryable.OfType<TResult>","System.Linq.Queryable.OrderBy<TSource,TKey>","System.Linq.Queryable.OrderByDescending<TSource,TKey>","System.Linq.Queryable.Reverse<TSource>","System.Linq.Queryable.Select<TSource,TResult>","System.Linq.Queryable.SelectMany<TSource,TResult>","System.Linq.Queryable.SelectMany<TSource,TCollection,TResult>","System.Linq.Queryable.SequenceEqual<TSource>","System.Linq.Queryable.Single<TSource>","System.Linq.Queryable.SingleOrDefault<TSource>","System.Linq.Queryable.Skip<TSource>","System.Linq.Queryable.SkipWhile<TSource>","System.Linq.Queryable.Sum","System.Linq.Queryable.Sum<TSource>","System.Linq.Queryable.Take<TSource>","System.Linq.Queryable.TakeWhile<TSource>","System.Linq.Queryable.ThenBy<TSource,TKey>","System.Linq.Queryable.ThenByDescending<TSource,TKey>","System.Linq.Queryable.Union<TSource>","System.Linq.Queryable.Where<TSource>","System.Linq.Queryable.Zip<TFirst,TSecond,TResult>"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Linq.Queryable","System::Linq::Queryable","System.Linq.Queryable.Aggregate``1","System::Linq::Queryable::Aggregate``1","System.Linq.Queryable.Aggregate``2","System::Linq::Queryable::Aggregate``2","System.Linq.Queryable.Aggregate``3","System::Linq::Queryable::Aggregate``3","System.Linq.Queryable.All``1","System::Linq::Queryable::All``1","System.Linq.Queryable.Any``1","System::Linq::Queryable::Any``1","System.Linq.Queryable.AsQueryable","System::Linq::Queryable::AsQueryable","System.Linq.Queryable.AsQueryable``1","System::Linq::Queryable::AsQueryable``1","System.Linq.Queryable.Average","System::Linq::Queryable::Average","System.Linq.Queryable.Average``1","System::Linq::Queryable::Average``1","System.Linq.Queryable.Cast``1","System::Linq::Queryable::Cast``1","System.Linq.Queryable.Concat``1","System::Linq::Queryable::Concat``1","System.Linq.Queryable.Contains``1","System::Linq::Queryable::Contains``1","System.Linq.Queryable.Count``1","System::Linq::Queryable::Count``1","System.Linq.Queryable.DefaultIfEmpty``1","System::Linq::Queryable::DefaultIfEmpty``1","System.Linq.Queryable.Distinct``1","System::Linq::Queryable::Distinct``1","System.Linq.Queryable.ElementAt``1","System::Linq::Queryable::ElementAt``1","System.Linq.Queryable.ElementAtOrDefault``1","System::Linq::Queryable::ElementAtOrDefault``1","System.Linq.Queryable.Except``1","System::Linq::Queryable::Except``1","System.Linq.Queryable.First``1","System::Linq::Queryable::First``1","System.Linq.Queryable.FirstOrDefault``1","System::Linq::Queryable::FirstOrDefault``1","System.Linq.Queryable.GroupBy``2","System::Linq::Queryable::GroupBy``2","System.Linq.Queryable.GroupBy``3","System::Linq::Queryable::GroupBy``3","System.Linq.Queryable.GroupBy``4","System::Linq::Queryable::GroupBy``4","System.Linq.Queryable.GroupJoin``4","System::Linq::Queryable::GroupJoin``4","System.Linq.Queryable.Intersect``1","System::Linq::Queryable::Intersect``1","System.Linq.Queryable.Join``4","System::Linq::Queryable::Join``4","System.Linq.Queryable.Last``1","System::Linq::Queryable::Last``1","System.Linq.Queryable.LastOrDefault``1","System::Linq::Queryable::LastOrDefault``1","System.Linq.Queryable.LongCount``1","System::Linq::Queryable::LongCount``1","System.Linq.Queryable.Max``1","System::Linq::Queryable::Max``1","System.Linq.Queryable.Max``2","System::Linq::Queryable::Max``2","System.Linq.Queryable.Min``1","System::Linq::Queryable::Min``1","System.Linq.Queryable.Min``2","System::Linq::Queryable::Min``2","System.Linq.Queryable.OfType``1","System::Linq::Queryable::OfType``1","System.Linq.Queryable.OrderBy``2","System::Linq::Queryable::OrderBy``2","System.Linq.Queryable.OrderByDescending``2","System::Linq::Queryable::OrderByDescending``2","System.Linq.Queryable.Reverse``1","System::Linq::Queryable::Reverse``1","System.Linq.Queryable.Select``2","System::Linq::Queryable::Select``2","System.Linq.Queryable.SelectMany``2","System::Linq::Queryable::SelectMany``2","System.Linq.Queryable.SelectMany``3","System::Linq::Queryable::SelectMany``3","System.Linq.Queryable.SequenceEqual``1","System::Linq::Queryable::SequenceEqual``1","System.Linq.Queryable.Single``1","System::Linq::Queryable::Single``1","System.Linq.Queryable.SingleOrDefault``1","System::Linq::Queryable::SingleOrDefault``1","System.Linq.Queryable.Skip``1","System::Linq::Queryable::Skip``1","System.Linq.Queryable.SkipWhile``1","System::Linq::Queryable::SkipWhile``1","System.Linq.Queryable.Sum","System::Linq::Queryable::Sum","System.Linq.Queryable.Sum``1","System::Linq::Queryable::Sum``1","System.Linq.Queryable.Take``1","System::Linq::Queryable::Take``1","System.Linq.Queryable.TakeWhile``1","System::Linq::Queryable::TakeWhile``1","System.Linq.Queryable.ThenBy``2","System::Linq::Queryable::ThenBy``2","System.Linq.Queryable.ThenByDescending``2","System::Linq::Queryable::ThenByDescending``2","System.Linq.Queryable.Union``1","System::Linq::Queryable::Union``1","System.Linq.Queryable.Where``1","System::Linq::Queryable::Where``1","System.Linq.Queryable.Zip``3","System::Linq::Queryable::Zip``3"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"7be8f304-a41c-bb90-eae0-ca725ba4880d","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Linq/Queryable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Queryable class | Microsoft Docs","_op_ogTitle":"Queryable class","description":"Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement .\n","toc_asset_id":"_splitted/System.Linq/toc.json","toc_rel":"_splitted/System.Linq/toc.json","source_url":"","ms.assetid":"System.Linq.Queryable","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.queryable","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.queryable","fileRelativePath":"System.Linq.Queryable.html"},"themesRelativePathToOutputRoot":"_themes/"}