{"content":"    \r\n    <h1 id=\"System_Windows_Input_ManipulationDeltaEventArgs\">\r\n      <span class=\"lang-csharp\">ManipulationDeltaEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.input.inputeventargs\" data-linktype=\"relative-path\">System.Windows.Input.InputEventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ManipulationDeltaEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.input.inputeventargs#System_Windows_Input_InputEventArgs_Device\" data-linktype=\"relative-path\">Device</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.input.inputeventargs#System_Windows_Input_InputEventArgs_Timestamp\" data-linktype=\"relative-path\">Timestamp</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Handled\" data-linktype=\"relative-path\">Handled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_OnSetSource_System_Object_\" data-linktype=\"relative-path\">OnSetSource(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_OriginalSource\" data-linktype=\"relative-path\">OriginalSource</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_RoutedEvent\" data-linktype=\"relative-path\">RoutedEvent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source\" data-linktype=\"relative-path\">Source</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The ManipulationDeltaEventArgs class contains data about changes in the position of a manipulation. The <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs#System_Windows_Input_ManipulationDeltaEventArgs_DeltaManipulation_\" data-linktype=\"relative-path\">DeltaManipulation</a> property contains the changes that occurred since the last <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurred. The <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs#System_Windows_Input_ManipulationDeltaEventArgs_CumulativeManipulation_\" data-linktype=\"relative-path\">CumulativeManipulation</a> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.  </p>\n<p> You can end a manipulation by calling the <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs#System_Windows_Input_ManipulationDeltaEventArgs_Complete_\" data-linktype=\"relative-path\">Complete</a> method or force the manipulation into inertia by calling the <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs#System_Windows_Input_ManipulationDeltaEventArgs_StartInertia_\" data-linktype=\"relative-path\">StartInertia</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_CumulativeManipulation\" data-linktype=\"self-bookmark\">CumulativeManipulation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the cumulated changes of the current manipulation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_DeltaManipulation\" data-linktype=\"self-bookmark\">DeltaManipulation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the most recent changes of the current manipulation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_IsInertial\" data-linktype=\"self-bookmark\">IsInertial</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurs during inertia.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_ManipulationContainer\" data-linktype=\"self-bookmark\">ManipulationContainer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the container that defines the coordinates for the manipulation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_ManipulationOrigin\" data-linktype=\"self-bookmark\">ManipulationOrigin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the point from which the manipulation originated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_Manipulators\" data-linktype=\"self-bookmark\">Manipulators</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of objects that represents the touch contacts for the manipulation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_Velocities\" data-linktype=\"self-bookmark\">Velocities</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the rates of the most recent changes to the manipulation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_Cancel\" data-linktype=\"self-bookmark\">Cancel()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels the manipulation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_Complete\" data-linktype=\"self-bookmark\">Complete()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes the manipulation without inertia.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_InvokeEventHandler_System_Delegate_System_Object_\" data-linktype=\"self-bookmark\">InvokeEventHandler(Delegate,Object)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_ReportBoundaryFeedback_System_Windows_Input_ManipulationDelta_\" data-linktype=\"self-bookmark\">ReportBoundaryFeedback(ManipulationDelta)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies that the manipulation has gone beyond certain boundaries.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_ManipulationDeltaEventArgs_StartInertia\" data-linktype=\"self-bookmark\">StartInertia()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_CumulativeManipulation\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_CumulativeManipulation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CumulativeManipulation</div>        \r\n          </div>\r\n    \r\n            <p>Gets the cumulated changes of the current manipulation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationdelta\" data-linktype=\"relative-path\">ManipulationDelta</a></div>\r\n                  </div>\r\n                  <p>The cumulated changes of the current manipulation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CumulativeManipulation property contains the total changes that occurred for the current manipulation. You can use CumulativeManipulation to transform the manipulated object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_DeltaManipulation\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_DeltaManipulation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeltaManipulation</div>        \r\n          </div>\r\n    \r\n            <p>Gets the most recent changes of the current manipulation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationdelta\" data-linktype=\"relative-path\">ManipulationDelta</a></div>\r\n                  </div>\r\n                  <p>The most recent changes of the current manipulation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DeltaManipulation property contains the changes that occurred since the last <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurred. You can use this property to transform the manipulated object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows an event handler for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event. The example uses the DeltaManipulation property to move, resize, and rotate a <a class=\"xref\" href=\"system.windows.shapes.rectangle\" data-linktype=\"relative-path\">Rectangle</a>. This example is part of a larger example in <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"BasicManipulation#ManipulationDelta\">void Window_ManipulationDelta(object sender, ManipulationDeltaEventArgs e)\n{\n    \n    // Get the Rectangle and its RenderTransform matrix.\n    Rectangle rectToMove = e.OriginalSource as Rectangle;\n    Matrix rectsMatrix = ((MatrixTransform)rectToMove.RenderTransform).Matrix;\n\n    // Rotate the Rectangle.\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation, \n                         e.ManipulationOrigin.X, \n                         e.ManipulationOrigin.Y);\n\n    // Resize the Rectangle.  Keep it square \n    // so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X, \n                        e.DeltaManipulation.Scale.X, \n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y);\n\n    // Move the Rectangle.\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y);\n\n    // Apply the changes to the Rectangle.\n    rectToMove.RenderTransform = new MatrixTransform(rectsMatrix);\n\n    Rect containingRect =\n        new Rect(((FrameworkElement)e.ManipulationContainer).RenderSize);\n\n    Rect shapeBounds =\n        rectToMove.RenderTransform.TransformBounds(\n            new Rect(rectToMove.RenderSize));\n\n    // Check if the rectangle is completely in the window.\n    // If it is not and intertia is occuring, stop the manipulation.\n    if (e.IsInertial &amp;&amp; !containingRect.Contains(shapeBounds))\n    {\n        e.Complete();\n    }\n\n    \n    e.Handled = true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"BasicManipulation#ManipulationDelta\">Private Sub Window_ManipulationDelta(ByVal sender As Object, ByVal e As ManipulationDeltaEventArgs)\n\n    &#39; Get the Rectangle and its RenderTransform matrix.\n    Dim rectToMove As Rectangle = e.OriginalSource\n    Dim rectTransform As MatrixTransform = rectToMove.RenderTransform\n    Dim rectsMatrix As Matrix = rectTransform.Matrix\n\n\n    &#39; Rotate the shape\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation,\n                         e.ManipulationOrigin.X,\n                         e.ManipulationOrigin.Y)\n\n    &#39; Resize the Rectangle. Keep it square \n    &#39; so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X,\n                        e.DeltaManipulation.Scale.X,\n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y)\n\n    &#39;move the center\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y)\n\n    &#39; Apply the changes to the Rectangle.\n    rectTransform = New MatrixTransform(rectsMatrix)\n    rectToMove.RenderTransform = rectTransform\n\n    Dim container As FrameworkElement = e.ManipulationContainer\n    Dim containingRect As New Rect(container.RenderSize)\n\n    Dim shapeBounds As Rect = rectTransform.TransformBounds(\n                                New Rect(rectToMove.RenderSize))\n\n    &#39; Check if the rectangle is completely in the window.\n    &#39; If it is not and intertia is occuring, stop the manipulation.\n    If e.IsInertial AndAlso Not containingRect.Contains(shapeBounds) Then\n        e.Complete()\n    End If\n\n    e.Handled = True\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_IsInertial\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_IsInertial_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInertial</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurs during inertia.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsInertial { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurs during inertia; <code>false</code> if the event occurs while the user has contact with the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to determine whether the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurs during inertia or while the user has contact with the element that receives the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows an event handler for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event. The example checks whether the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"BasicManipulation#ManipulationDelta\">void Window_ManipulationDelta(object sender, ManipulationDeltaEventArgs e)\n{\n    \n    // Get the Rectangle and its RenderTransform matrix.\n    Rectangle rectToMove = e.OriginalSource as Rectangle;\n    Matrix rectsMatrix = ((MatrixTransform)rectToMove.RenderTransform).Matrix;\n\n    // Rotate the Rectangle.\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation, \n                         e.ManipulationOrigin.X, \n                         e.ManipulationOrigin.Y);\n\n    // Resize the Rectangle.  Keep it square \n    // so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X, \n                        e.DeltaManipulation.Scale.X, \n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y);\n\n    // Move the Rectangle.\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y);\n\n    // Apply the changes to the Rectangle.\n    rectToMove.RenderTransform = new MatrixTransform(rectsMatrix);\n\n    Rect containingRect =\n        new Rect(((FrameworkElement)e.ManipulationContainer).RenderSize);\n\n    Rect shapeBounds =\n        rectToMove.RenderTransform.TransformBounds(\n            new Rect(rectToMove.RenderSize));\n\n    // Check if the rectangle is completely in the window.\n    // If it is not and intertia is occuring, stop the manipulation.\n    if (e.IsInertial &amp;&amp; !containingRect.Contains(shapeBounds))\n    {\n        e.Complete();\n    }\n\n    \n    e.Handled = true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"BasicManipulation#ManipulationDelta\">Private Sub Window_ManipulationDelta(ByVal sender As Object, ByVal e As ManipulationDeltaEventArgs)\n\n    &#39; Get the Rectangle and its RenderTransform matrix.\n    Dim rectToMove As Rectangle = e.OriginalSource\n    Dim rectTransform As MatrixTransform = rectToMove.RenderTransform\n    Dim rectsMatrix As Matrix = rectTransform.Matrix\n\n\n    &#39; Rotate the shape\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation,\n                         e.ManipulationOrigin.X,\n                         e.ManipulationOrigin.Y)\n\n    &#39; Resize the Rectangle. Keep it square \n    &#39; so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X,\n                        e.DeltaManipulation.Scale.X,\n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y)\n\n    &#39;move the center\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y)\n\n    &#39; Apply the changes to the Rectangle.\n    rectTransform = New MatrixTransform(rectsMatrix)\n    rectToMove.RenderTransform = rectTransform\n\n    Dim container As FrameworkElement = e.ManipulationContainer\n    Dim containingRect As New Rect(container.RenderSize)\n\n    Dim shapeBounds As Rect = rectTransform.TransformBounds(\n                                New Rect(rectToMove.RenderSize))\n\n    &#39; Check if the rectangle is completely in the window.\n    &#39; If it is not and intertia is occuring, stop the manipulation.\n    If e.IsInertial AndAlso Not containingRect.Contains(shapeBounds) Then\n        e.Complete()\n    End If\n\n    e.Handled = True\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_ManipulationContainer\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_ManipulationContainer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationContainer</div>        \r\n          </div>\r\n    \r\n            <p>Gets the container that defines the coordinates for the manipulation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.IInputElement ManipulationContainer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a></div>\r\n                  </div>\r\n                  <p>The container that defines the coordinates for the manipulation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_ManipulationOrigin\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_ManipulationOrigin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationOrigin</div>        \r\n          </div>\r\n    \r\n            <p>Gets the point from which the manipulation originated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Point ManipulationOrigin { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The point from which the manipulation originated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_Manipulators\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_Manipulators_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Manipulators</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of objects that represents the touch contacts for the manipulation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.imanipulator\" data-linktype=\"relative-path\">IManipulator</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of objects that represents the touch contacts for the manipulation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_Velocities\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_Velocities_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Velocities</div>        \r\n          </div>\r\n    \r\n            <p>Gets the rates of the most recent changes to the manipulation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.ManipulationVelocities Velocities { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationvelocities\" data-linktype=\"relative-path\">ManipulationVelocities</a></div>\r\n                  </div>\r\n                  <p>The rates of the most recent changes to the manipulation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_Cancel\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_Cancel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cancel()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels the manipulation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Cancel ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the manipulation was successfully canceled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the method succeeds, the default <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationCompleted\" data-linktype=\"relative-path\">ManipulationCompleted</a> event occurs during inertia.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_Complete\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_Complete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Complete()</div>        \r\n          </div>\r\n    \r\n            <p>Completes the manipulation without inertia.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Complete ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can call the Complete method to end the manipulation. For example, when an object reaches the edge of a window, you can call Complete to prevent the object from going off the screen.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows an event handler for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event. The example checks whether the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"BasicManipulation#ManipulationDelta\">void Window_ManipulationDelta(object sender, ManipulationDeltaEventArgs e)\n{\n    \n    // Get the Rectangle and its RenderTransform matrix.\n    Rectangle rectToMove = e.OriginalSource as Rectangle;\n    Matrix rectsMatrix = ((MatrixTransform)rectToMove.RenderTransform).Matrix;\n\n    // Rotate the Rectangle.\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation, \n                         e.ManipulationOrigin.X, \n                         e.ManipulationOrigin.Y);\n\n    // Resize the Rectangle.  Keep it square \n    // so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X, \n                        e.DeltaManipulation.Scale.X, \n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y);\n\n    // Move the Rectangle.\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y);\n\n    // Apply the changes to the Rectangle.\n    rectToMove.RenderTransform = new MatrixTransform(rectsMatrix);\n\n    Rect containingRect =\n        new Rect(((FrameworkElement)e.ManipulationContainer).RenderSize);\n\n    Rect shapeBounds =\n        rectToMove.RenderTransform.TransformBounds(\n            new Rect(rectToMove.RenderSize));\n\n    // Check if the rectangle is completely in the window.\n    // If it is not and intertia is occuring, stop the manipulation.\n    if (e.IsInertial &amp;&amp; !containingRect.Contains(shapeBounds))\n    {\n        e.Complete();\n    }\n\n    \n    e.Handled = true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"BasicManipulation#ManipulationDelta\">Private Sub Window_ManipulationDelta(ByVal sender As Object, ByVal e As ManipulationDeltaEventArgs)\n\n    &#39; Get the Rectangle and its RenderTransform matrix.\n    Dim rectToMove As Rectangle = e.OriginalSource\n    Dim rectTransform As MatrixTransform = rectToMove.RenderTransform\n    Dim rectsMatrix As Matrix = rectTransform.Matrix\n\n\n    &#39; Rotate the shape\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation,\n                         e.ManipulationOrigin.X,\n                         e.ManipulationOrigin.Y)\n\n    &#39; Resize the Rectangle. Keep it square \n    &#39; so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X,\n                        e.DeltaManipulation.Scale.X,\n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y)\n\n    &#39;move the center\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y)\n\n    &#39; Apply the changes to the Rectangle.\n    rectTransform = New MatrixTransform(rectsMatrix)\n    rectToMove.RenderTransform = rectTransform\n\n    Dim container As FrameworkElement = e.ManipulationContainer\n    Dim containingRect As New Rect(container.RenderSize)\n\n    Dim shapeBounds As Rect = rectTransform.TransformBounds(\n                                New Rect(rectToMove.RenderSize))\n\n    &#39; Check if the rectangle is completely in the window.\n    &#39; If it is not and intertia is occuring, stop the manipulation.\n    If e.IsInertial AndAlso Not containingRect.Contains(shapeBounds) Then\n        e.Complete()\n    End If\n\n    e.Handled = True\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_InvokeEventHandler_System_Delegate_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_InvokeEventHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeEventHandler(Delegate,Object)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTarget</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_ReportBoundaryFeedback_System_Windows_Input_ManipulationDelta_\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_ReportBoundaryFeedback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReportBoundaryFeedback(ManipulationDelta)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies that the manipulation has gone beyond certain boundaries.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unusedManipulation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationdelta\" data-linktype=\"relative-path\">ManipulationDelta</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The portion of the manipulation that represents moving beyond the boundary.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>unusedManipulation</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ReportBoundaryFeedback method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <a class=\"xref\" href=\"system.windows.window\" data-linktype=\"relative-path\">Window</a>, you can call this method to report that to the window.  When you call ReportBoundaryFeedback, the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a> event occurs.  By default, the <a class=\"xref\" href=\"system.windows.window\" data-linktype=\"relative-path\">Window</a> subscribes to the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a> to implement custom behavior.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows an event handler for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event that calls the ReportBoundaryFeedback method when the user moves the element over the edge of its container.  To test this example, follow the steps in <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a> and replace the code in step 5 with this code.  </p>\n<pre><code class=\"lang-cs\" name=\"BasicManipulation#ReportBoundaryFeedback\">void Window_ManipulationDelta(object sender, ManipulationDeltaEventArgs e)\n{\n\n    Rectangle rectToMove = e.OriginalSource as Rectangle;\n    Vector overshoot;\n\n    // When the element crosses the boundary of the window, check whether \n    // the manipulation is in inertia.  If it is, complete the manipulation.\n    // Otherwise, report the boundary feedback.\n    if (CalculateOvershoot(rectToMove, e.ManipulationContainer, out overshoot))\n    {\n        if (e.IsInertial)\n        {\n            e.Complete();\n            e.Handled = true;\n            return;\n        }\n        else\n        {\n            //Report that the element hit the boundary\n            e.ReportBoundaryFeedback(new ManipulationDelta(overshoot, 0, new Vector(), new Vector()));\n\n        }\n    }\n  \n    // Move the element as usual.\n\n    // Get the Rectangle and its RenderTransform matrix.\n    Matrix rectsMatrix = ((MatrixTransform)rectToMove.RenderTransform).Matrix;\n\n    // Rotate the Rectangle.\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation,\n                         e.ManipulationOrigin.X,\n                         e.ManipulationOrigin.Y);\n\n    // Resize the Rectangle.  Keep it square \n    // so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X,\n                        e.DeltaManipulation.Scale.X,\n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y);\n\n    // Move the Rectangle.\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y);\n\n    // Apply the changes to the Rectangle.\n    rectToMove.RenderTransform = new MatrixTransform(rectsMatrix);\n\n    e.Handled = true;\n}\n\nprivate bool CalculateOvershoot(UIElement element, IInputElement container, out Vector overshoot)\n{\n    // Get axis aligned element bounds\n    var elementBounds = element.RenderTransform.TransformBounds(\n                  VisualTreeHelper.GetDrawing(element).Bounds);\n\n    //double extraX = 0.0, extraY = 0.0;\n    overshoot = new Vector();\n\n    FrameworkElement parent = container as FrameworkElement;\n    if (parent == null)\n    {\n        return false;\n    }\n\n    // Calculate overshoot.  \n    if (elementBounds.Left &lt; 0)\n        overshoot.X = elementBounds.Left;\n    else if (elementBounds.Right &gt; parent.ActualWidth)\n        overshoot.X = elementBounds.Right - parent.ActualWidth;\n\n    if (elementBounds.Top &lt; 0)\n        overshoot.Y = elementBounds.Top;\n    else if (elementBounds.Bottom &gt; parent.ActualHeight)\n        overshoot.Y = elementBounds.Bottom - parent.ActualHeight;\n\n    // Return false if Overshoot is empty; otherwsie, return true.\n    return !Vector.Equals(overshoot, new Vector());\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"BasicManipulation#ReportBoundaryFeedback\">Private Sub Window_ManipulationDelta(ByVal sender As Object, ByVal e As ManipulationDeltaEventArgs)\n\n    Dim rectToMove As Rectangle = TryCast(e.OriginalSource, Rectangle)\n    Dim overshoot As Vector\n\n    &#39; When the element crosses the boundary of the window, check whether \n    &#39; the manipulation is in inertia. If it is, complete the manipulation.\n    &#39; Otherwise, report the boundary feedback.\n    If CalculateOvershoot(rectToMove, e.ManipulationContainer, overshoot) Then\n        If e.IsInertial Then\n            e.Complete()\n            e.Handled = True\n            Exit Sub\n        Else\n            &#39;Report that the element hit the boundary\n\n            e.ReportBoundaryFeedback(New ManipulationDelta(overshoot, 0, New Vector(), New Vector()))\n        End If\n    End If\n\n    &#39; Move the element as usual.\n\n    &#39; Get the Rectangle and its RenderTransform matrix.\n    Dim rectsMatrix As Matrix = DirectCast(rectToMove.RenderTransform, MatrixTransform).Matrix\n\n    &#39; Rotate the Rectangle.\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation, e.ManipulationOrigin.X, e.ManipulationOrigin.Y)\n\n    &#39; Resize the Rectangle. Keep it square \n    &#39; so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X, e.DeltaManipulation.Scale.X, e.ManipulationOrigin.X, e.ManipulationOrigin.Y)\n\n    &#39; Move the Rectangle.\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X, e.DeltaManipulation.Translation.Y)\n\n    &#39; Apply the changes to the Rectangle.\n    rectToMove.RenderTransform = New MatrixTransform(rectsMatrix)\n\n    e.Handled = True\nEnd Sub\n\nPrivate Function CalculateOvershoot(ByVal element As UIElement, ByVal container As IInputElement, ByRef overshoot As Vector) As Boolean\n    &#39; Get axis aligned element bounds\n    Dim elementBounds = element.RenderTransform.TransformBounds(VisualTreeHelper.GetDrawing(element).Bounds)\n\n    &#39;double extraX = 0.0, extraY = 0.0;\n    overshoot = New Vector()\n\n    Dim parent As FrameworkElement = TryCast(container, FrameworkElement)\n    If parent Is Nothing Then\n        Return False\n    End If\n\n    &#39; Calculate overshoot. \n    If elementBounds.Left &lt; 0 Then\n        overshoot.X = elementBounds.Left\n    ElseIf elementBounds.Right &gt; parent.ActualWidth Then\n        overshoot.X = elementBounds.Right - parent.ActualWidth\n    End If\n\n    If elementBounds.Top &lt; 0 Then\n        overshoot.Y = elementBounds.Top\n    ElseIf elementBounds.Bottom &gt; parent.ActualHeight Then\n        overshoot.Y = elementBounds.Bottom - parent.ActualHeight\n    End If\n\n    &#39; Return false if Overshoot is empty; otherwsie, return true.\n    Return Not Vector.Equals(overshoot, New Vector())\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_ManipulationDeltaEventArgs_StartInertia\">\r\n    \r\n            <a id=\"System_Windows_Input_ManipulationDeltaEventArgs_StartInertia_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StartInertia()</div>        \r\n          </div>\r\n    \r\n            <p>Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void StartInertia ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Input.ManipulationDeltaEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Input.ManipulationDeltaEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.Cancel\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.Complete\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.StartInertia\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ManipulationDeltaEventArgs.Velocities\">\r\n<meta name=\"APILocation\" content=\"PresentationCore.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7736b03b-3076-ea91-3389-e1db2b3e2460\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Input\\ManipulationDeltaEventArgs.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Input/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Input.ManipulationDeltaEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Input.ManipulationDeltaEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Input.ManipulationDeltaEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Input.ManipulationDeltaEventArgs","System.Windows.Input.ManipulationDeltaEventArgs.Cancel","System.Windows.Input.ManipulationDeltaEventArgs.Complete","System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation","System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation","System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler","System.Windows.Input.ManipulationDeltaEventArgs.IsInertial","System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer","System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin","System.Windows.Input.ManipulationDeltaEventArgs.Manipulators","System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback","System.Windows.Input.ManipulationDeltaEventArgs.StartInertia","System.Windows.Input.ManipulationDeltaEventArgs.Velocities"],"api_location":["PresentationCore.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Input.ManipulationDeltaEventArgs","System::Windows::Input::ManipulationDeltaEventArgs","System.Windows.Input.ManipulationDeltaEventArgs.Cancel","System::Windows::Input::ManipulationDeltaEventArgs::Cancel","System.Windows.Input.ManipulationDeltaEventArgs.Complete","System::Windows::Input::ManipulationDeltaEventArgs::Complete","System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation","System::Windows::Input::ManipulationDeltaEventArgs::CumulativeManipulation","System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation","System::Windows::Input::ManipulationDeltaEventArgs::DeltaManipulation","System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler","System::Windows::Input::ManipulationDeltaEventArgs::InvokeEventHandler","System.Windows.Input.ManipulationDeltaEventArgs.IsInertial","System::Windows::Input::ManipulationDeltaEventArgs::IsInertial","System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer","System::Windows::Input::ManipulationDeltaEventArgs::ManipulationContainer","System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin","System::Windows::Input::ManipulationDeltaEventArgs::ManipulationOrigin","System.Windows.Input.ManipulationDeltaEventArgs.Manipulators","System::Windows::Input::ManipulationDeltaEventArgs::Manipulators","System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback","System::Windows::Input::ManipulationDeltaEventArgs::ReportBoundaryFeedback","System.Windows.Input.ManipulationDeltaEventArgs.StartInertia","System::Windows::Input::ManipulationDeltaEventArgs::StartInertia","System.Windows.Input.ManipulationDeltaEventArgs.Velocities","System::Windows::Input::ManipulationDeltaEventArgs::Velocities"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7736b03b-3076-ea91-3389-e1db2b3e2460","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Input\\ManipulationDeltaEventArgs.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ManipulationDeltaEventArgs class | Microsoft Docs","_op_ogTitle":"ManipulationDeltaEventArgs class","description":"Provides data for the  event.\n","toc_asset_id":"_splitted/System.Windows.Input/toc.json","toc_rel":"_splitted/System.Windows.Input/toc.json","source_url":"","ms.assetid":"System.Windows.Input.ManipulationDeltaEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.input.manipulationdeltaeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.input.manipulationdeltaeventargs","fileRelativePath":"System.Windows.Input.ManipulationDeltaEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}