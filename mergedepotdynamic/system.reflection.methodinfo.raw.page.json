{"content":"    \r\n    <h1 id=\"System_Reflection_MethodInfo\">\r\n      <span class=\"lang-csharp\">MethodInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Discovers the attributes of a method and provides access to method metadata.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodInfo))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class MethodInfo : System.Reflection.MethodBase, System.Runtime.InteropServices._MethodInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">System.Reflection.MethodBase</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">MethodInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_DeclaringType\" data-linktype=\"relative-path\">DeclaringType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_IsDefined_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Module\" data-linktype=\"relative-path\">Module</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Name\" data-linktype=\"relative-path\">Name</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_ReflectedType\" data-linktype=\"relative-path\">ReflectedType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_CallingConvention\" data-linktype=\"relative-path\">CallingConvention</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_ContainsGenericParameters\" data-linktype=\"relative-path\">ContainsGenericParameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetCurrentMethod\" data-linktype=\"relative-path\">GetCurrentMethod()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody\" data-linktype=\"relative-path\">GetMethodBody()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodFromHandle_System_RuntimeMethodHandle_\" data-linktype=\"relative-path\">GetMethodFromHandle(RuntimeMethodHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodFromHandle_System_RuntimeMethodHandle_System_RuntimeTypeHandle_\" data-linktype=\"relative-path\">GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodImplementationFlags\" data-linktype=\"relative-path\">GetMethodImplementationFlags()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters\" data-linktype=\"relative-path\">GetParameters()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_System_Object_System_Object___\" data-linktype=\"relative-path\">Invoke(Object,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsAbstract\" data-linktype=\"relative-path\">IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsAssembly\" data-linktype=\"relative-path\">IsAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsConstructor\" data-linktype=\"relative-path\">IsConstructor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamily\" data-linktype=\"relative-path\">IsFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamilyAndAssembly\" data-linktype=\"relative-path\">IsFamilyAndAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamilyOrAssembly\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFinal\" data-linktype=\"relative-path\">IsFinal</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsGenericMethod\" data-linktype=\"relative-path\">IsGenericMethod</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsGenericMethodDefinition\" data-linktype=\"relative-path\">IsGenericMethodDefinition</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsHideBySig\" data-linktype=\"relative-path\">IsHideBySig</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsPrivate\" data-linktype=\"relative-path\">IsPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsPublic\" data-linktype=\"relative-path\">IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSecurityCritical\" data-linktype=\"relative-path\">IsSecurityCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSecuritySafeCritical\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSecurityTransparent\" data-linktype=\"relative-path\">IsSecurityTransparent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSpecialName\" data-linktype=\"relative-path\">IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsStatic\" data-linktype=\"relative-path\">IsStatic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsVirtual\" data-linktype=\"relative-path\">IsVirtual</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_MethodHandle\" data-linktype=\"relative-path\">MethodHandle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_MethodImplementationFlags\" data-linktype=\"relative-path\">MethodImplementationFlags</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_op_Equality_System_Reflection_MethodBase_System_Reflection_MethodBase_\" data-linktype=\"relative-path\">op_Equality(MethodBase,MethodBase)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_op_Inequality_System_Reflection_MethodBase_System_Reflection_MethodBase_\" data-linktype=\"relative-path\">op_Inequality(MethodBase,MethodBase)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetType\" data-linktype=\"relative-path\">_MethodBase.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MethodBase.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsAbstract\" data-linktype=\"relative-path\">_MethodBase.IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsAssembly\" data-linktype=\"relative-path\">_MethodBase.IsAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsConstructor\" data-linktype=\"relative-path\">_MethodBase.IsConstructor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamily\" data-linktype=\"relative-path\">_MethodBase.IsFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamilyAndAssembly\" data-linktype=\"relative-path\">_MethodBase.IsFamilyAndAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamilyOrAssembly\" data-linktype=\"relative-path\">_MethodBase.IsFamilyOrAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFinal\" data-linktype=\"relative-path\">_MethodBase.IsFinal</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsHideBySig\" data-linktype=\"relative-path\">_MethodBase.IsHideBySig</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsPrivate\" data-linktype=\"relative-path\">_MethodBase.IsPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsPublic\" data-linktype=\"relative-path\">_MethodBase.IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsSpecialName\" data-linktype=\"relative-path\">_MethodBase.IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsStatic\" data-linktype=\"relative-path\">_MethodBase.IsStatic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsVirtual\" data-linktype=\"relative-path\">_MethodBase.IsVirtual</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The MethodInfo class represents a method of a type. You can use a MethodInfo object to obtain information about the method that the object represents and to invoke the method. For example:  </p>\n<ul>\n<li><p>You can determine the method&#39;s visibility by retrieving the values of the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamilyAndAssembly_\" data-linktype=\"relative-path\">IsFamilyAndAssembly</a>, <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamilyOrAssembly_\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a>, <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsPrivate_\" data-linktype=\"relative-path\">IsPrivate</a>, and <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsPublic_\" data-linktype=\"relative-path\">IsPublic</a> properties.  </p>\n</li>\n<li><p>You can discover what attributes are applied to the method by retrieving the value of the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Attributes_\" data-linktype=\"relative-path\">Attributes</a> property or calling the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>method.  </p>\n</li>\n<li><p>You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the &lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt; and &lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt; properties.  </p>\n</li>\n<li><p>You can get information about the method&#39;s parameters and return type from the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a> method and the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_ReturnParameter_\" data-linktype=\"relative-path\">ReturnParameter</a>, <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_ReturnType_\" data-linktype=\"relative-path\">ReturnType</a>, and <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_ReturnTypeCustomAttributes_\" data-linktype=\"relative-path\">ReturnTypeCustomAttributes</a> properties.  </p>\n</li>\n<li><p>You can execute a method on a class instance by calling the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method.  </p>\n</li>\n<li><p>You can instantiate a MethodInfo object that represents a constructed generic method from one that represents a generic method definition by calling the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_\" data-linktype=\"relative-path\">MakeGenericMethod</a> method.  </p>\n<p>You can instantiate a MethodInfo instances by calling the <a class=\"xref\" href=\"system.type#System_Type_GetMethods_\" data-linktype=\"relative-path\">GetMethods</a> or <a class=\"xref\" href=\"system.type#System_Type_GetMethod_\" data-linktype=\"relative-path\">GetMethod</a> method, or by calling the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_\" data-linktype=\"relative-path\">MakeGenericMethod</a> method of a MethodInfo object that represents a generic method definition.  </p>\n<p>For a list of the invariant conditions for terms specific to generic methods, see the &lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt; property. For a list of the invariant conditions for other terms used in generic reflection, see the <a class=\"xref\" href=\"system.type#System_Type_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo__ctor\" data-linktype=\"self-bookmark\">MethodInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_MemberType\" data-linktype=\"self-bookmark\">MemberType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_ReturnParameter\" data-linktype=\"self-bookmark\">ReturnParameter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_ReturnType\" data-linktype=\"self-bookmark\">ReturnType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the return type of this method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_ReturnTypeCustomAttributes\" data-linktype=\"self-bookmark\">ReturnTypeCustomAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom attributes for the return type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_CreateDelegate_System_Type_\" data-linktype=\"self-bookmark\">CreateDelegate(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type from this method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_CreateDelegate_System_Type_System_Object_\" data-linktype=\"self-bookmark\">CreateDelegate(Type,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a delegate of the specified type with the specified target from this method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_GetBaseDefinition\" data-linktype=\"self-bookmark\">GetBaseDefinition()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_GetGenericArguments\" data-linktype=\"self-bookmark\">GetGenericArguments()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_GetGenericMethodDefinition\" data-linktype=\"self-bookmark\">GetGenericMethodDefinition()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents a generic method definition from which the current method can be constructed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_MakeGenericMethod_System_Type___\" data-linktype=\"self-bookmark\">MakeGenericMethod(Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object representing the resulting constructed method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_op_Equality_System_Reflection_MethodInfo_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">op_Equality(MethodInfo,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_op_Inequality_System_Reflection_MethodInfo_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">op_Inequality(MethodInfo,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetType\" data-linktype=\"self-bookmark\">_MethodInfo.GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to the <span class=\"xref\">stem.Object.GetType*</span> method from COM.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_MethodInfo.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo__ctor\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MethodInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected MethodInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_MemberType\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_MemberType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberTypes MemberType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property overrides <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MemberType_\" data-linktype=\"relative-path\">MemberType</a>. Therefore, when you examine a set of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects â€” for example, the array returned by <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a> â€” the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MemberType_\" data-linktype=\"relative-path\">MemberType</a> property returns <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">System.Reflection.MemberTypes</a> only when a given member is a method.  </p>\n<p> To get the <code>MemberType</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>MethodInfo</code>. From the <code>MethodInfo</code>, get the <code>MemberType</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the type of the specified member.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic MethodInfo.MemberType Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   Console::WriteLine( &quot;Reflection.MethodInfo&quot; );\n   \n   // Get the Type and MethodInfo.\n   Type^ MyType = Type::GetType( &quot;System.Reflection.FieldInfo&quot; );\n   MethodInfo^ Mymethodinfo = MyType-&gt;GetMethod( &quot;GetValue&quot; );\n   Console::WriteLine( &quot;{0}.{1}&quot;, MyType-&gt;FullName, Mymethodinfo-&gt;Name );\n   \n   // Get and display the MemberType property.\n   MemberTypes Mymembertypes = Mymethodinfo-&gt;MemberType;\n   if ( MemberTypes::Constructor == Mymembertypes )\n   {\n      Console::WriteLine( &quot;MemberType is of type All.&quot; );\n   }\n   else\n   if ( MemberTypes::Custom == Mymembertypes )\n   {\n      Console::WriteLine( &quot;MemberType is of type Custom.&quot; );\n   }\n   else\n   if ( MemberTypes::Event == Mymembertypes )\n   {\n      Console::WriteLine( &quot;MemberType is of type Event.&quot; );\n   }\n   else\n   if ( MemberTypes::Field == Mymembertypes )\n   {\n      Console::WriteLine( &quot;MemberType is of type Field.&quot; );\n   }\n   else\n   if ( MemberTypes::Method == Mymembertypes )\n   {\n      Console::WriteLine( &quot;MemberType is of type Method.&quot; );\n   }\n   else\n   if ( MemberTypes::Property == Mymembertypes )\n   {\n      Console::WriteLine( &quot;MemberType is of type Property.&quot; );\n   }\n   else\n   if ( MemberTypes::TypeInfo == Mymembertypes )\n   {\n      Console::WriteLine( &quot;MemberType is of type TypeInfo.&quot; );\n   }\n\n\n\n\n\n\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic MethodInfo.MemberType Example#1\">using System;\nusing System.Reflection;\n \nclass MyMethodInfo\n{\n    public static int Main()\n    {\n        Console.WriteLine(&quot;Reflection.MethodInfo&quot;);\n  \n        // Get the Type and MethodInfo.\n        Type MyType = Type.GetType(&quot;System.Reflection.FieldInfo&quot;);\n        MethodInfo Mymethodinfo = MyType.GetMethod(&quot;GetValue&quot;);\n        Console.WriteLine(MyType.FullName + &quot;.&quot; + Mymethodinfo.Name);\n  \n        // Get and display the MemberType property.\n        MemberTypes Mymembertypes = Mymethodinfo.MemberType;\n      \n \n        if (MemberTypes.Constructor == Mymembertypes)\n        {\n            Console.WriteLine(&quot;MemberType is of type All.&quot;);\n        }\n        else if (MemberTypes.Custom == Mymembertypes)\n        {\n            Console.WriteLine(&quot;MemberType is of type Custom.&quot;);\n        }\n        else if (MemberTypes.Event == Mymembertypes)\n        {\n            Console.WriteLine(&quot;MemberType is of type Event.&quot;);\n        }\n        else if (MemberTypes.Field == Mymembertypes)\n        {\n            Console.WriteLine(&quot;MemberType is of type Field.&quot;);\n        }\n        else if (MemberTypes.Method == Mymembertypes)\n        {\n            Console.WriteLine(&quot;MemberType is of type Method.&quot;);\n        }\n        else if (MemberTypes.Property == Mymembertypes)\n        {\n            Console.WriteLine(&quot;MemberType is of type Property.&quot;);\n        }\n        else if (MemberTypes.TypeInfo == Mymembertypes)\n        {\n            Console.WriteLine(&quot;MemberType is of type TypeInfo.&quot;);\n        }\n \n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic MethodInfo.MemberType Example#1\">Imports System\nImports System.Reflection\n\nClass MyMethodInfo\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(&quot;Reflection.MethodInfo&quot;)\n\n        &#39; Get the Type and MethodInfo.\n        Dim MyType As Type = Type.GetType(&quot;System.Reflection.FieldInfo&quot;)\n        Dim Mymethodinfo As MethodInfo = MyType.GetMethod(&quot;GetValue&quot;)\n        Console.WriteLine(MyType.FullName + &quot;.&quot; + Mymethodinfo.Name)\n\n        &#39; Get and display the MemberType property.\n        Dim Mymembertypes As MemberTypes = Mymethodinfo.MemberType\n\n        If MemberTypes.Constructor = Mymembertypes Then\n            Console.WriteLine(&quot;MemberType is of type All.&quot;)\n\n        ElseIf MemberTypes.Custom = Mymembertypes Then\n            Console.WriteLine(&quot;MemberType is of type Custom.&quot;)\n\n        ElseIf MemberTypes.Event = Mymembertypes Then\n            Console.WriteLine(&quot;MemberType is of type Event.&quot;)\n\n        ElseIf MemberTypes.Field = Mymembertypes Then\n            Console.WriteLine(&quot;MemberType is of type Field.&quot;)\n\n        ElseIf MemberTypes.Method = Mymembertypes Then\n            Console.WriteLine(&quot;MemberType is of type Method.&quot;)\n\n        ElseIf MemberTypes.Property = Mymembertypes Then\n            Console.WriteLine(&quot;MemberType is of type Property.&quot;)\n\n        ElseIf MemberTypes.TypeInfo = Mymembertypes Then\n            Console.WriteLine(&quot;MemberType is of type TypeInfo.&quot;)\n\n        End If\n        Return 0\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_ReturnParameter\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_ReturnParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnParameter</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.ParameterInfo ReturnParameter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> object that contains information about the return type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Compiler designers can use the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> object returned by this property to discover whether custom modifiers, such as <a class=\"xref\" href=\"microsoft.visualc.isconstmodifier\" data-linktype=\"relative-path\">IsConstModifier</a>, have been applied to the return type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_ReturnType\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_ReturnType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the return type of this method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type ReturnType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The return type of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the return type property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>MethodInfo</code>. From the <code>MethodInfo</code>, get the <code>ReturnType</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the return type of the specified method.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic MethodInfo.ReturnType Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.MethodInfo&quot; );\n   \n   // Get the Type and MethodInfo.\n   Type^ MyType = Type::GetType( &quot;System.Reflection.FieldInfo&quot; );\n   MethodInfo^ Mymethodinfo = MyType-&gt;GetMethod( &quot;GetValue&quot; );\n   Console::Write( &quot;<br>{0}.{1}&quot;, MyType-&gt;FullName, Mymethodinfo-&gt;Name );\n   \n   // Get and display the ReturnType.\n   Console::Write( &quot;<br>ReturnType = {0}&quot;, Mymethodinfo-&gt;ReturnType );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic MethodInfo.ReturnType Example#1\">using System;\nusing System.Reflection;\n\nclass Mymethodinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine (&quot;<br>Reflection.MethodInfo&quot;);\n  \n        // Get the Type and MethodInfo.\n        Type MyType = Type.GetType(&quot;System.Reflection.FieldInfo&quot;);\n        MethodInfo Mymethodinfo = MyType.GetMethod(&quot;GetValue&quot;);\n        Console.Write (&quot;<br>&quot; + MyType.FullName + &quot;.&quot; + Mymethodinfo.Name);\n  \n        // Get and display the ReturnType.\n        Console.Write (&quot;<br>ReturnType = {0}&quot;, Mymethodinfo.ReturnType);\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic MethodInfo.ReturnType Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nClass Mymethodinfo1\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.Cr + &quot;Reflection.MethodInfo&quot;)\n\n        &#39;Get the Type and MethodInfo.\n        Dim MyType As Type = Type.GetType(&quot;System.Reflection.FieldInfo&quot;)\n        Dim Mymethodinfo As MethodInfo = MyType.GetMethod(&quot;GetValue&quot;)\n        Console.Write(ControlChars.Cr _\n           + MyType.FullName + &quot;.&quot; + Mymethodinfo.Name)\n\n        &#39;Get and display the ReturnType.\n        Console.Write(ControlChars.Cr _\n           + &quot;ReturnType = {0}&quot;, Mymethodinfo.ReturnType)\n        Return 0\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_ReturnTypeCustomAttributes\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_ReturnTypeCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnTypeCustomAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom attributes for the return type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a></div>\r\n                  </div>\r\n                  <p>An <code>ICustomAttributeProvider</code> object representing the custom attributes for the return type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_CreateDelegate_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type from this method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Delegate CreateDelegate (Type delegateType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>The delegate for this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_CreateDelegate_System_Type_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_CreateDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDelegate(Type,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a delegate of the specified type with the specified target from this method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Delegate CreateDelegate (Type delegateType, object target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object targeted by the delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>The delegate for this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_GetBaseDefinition\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_GetBaseDefinition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBaseDefinition()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.MethodInfo GetBaseDefinition ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the first implementation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetBaseDefinition method returns the first definition of the specified method in the class hierarchy. You can determine the type on which the first definition of the method is found by retrieving the value of the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_DeclaringType_\" data-linktype=\"relative-path\">DeclaringType</a> property on the returned <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object.  </p>\n<p> The GetBaseDefinition method behaves as follows:  </p>\n<ul>\n<li><p>If the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object represents an interface implementation, the GetBaseDefinition method returns the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object.  </p>\n</li>\n<li><p>If the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object represents a method that overrides a virtual definition in a base class, the GetBaseDefinition method returns a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents the virtual definition.  </p>\n</li>\n<li><p>If the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object represents a method that is specified with the <code>new</code> keyword in C# or the <code>Shadows</code> keyword in Visual Basic (as in <code>newslot</code>, as described in <a href=\"../Topic/Common%20Type%20System.md\" data-linktype=\"relative-path\">Common Type System</a>), the GetBaseDefinition method returns the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object.  </p>\n</li>\n<li><p>If the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object represents an inherited method (that is, the current method does not provide its own implementation), the GetBaseDefinition method returns a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents the lowest method in the class hierarchy. For example, if <code>Base.ToString</code> overrides <code>Object.ToString</code>, and <code>Derived.ToString</code> overrides <code>Base.ToString</code>, calling the GetBaseDefinition method on a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents <code>Derived.ToString</code> returns a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents <code>Object.ToString</code>.  </p>\n</li>\n<li><p>If the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object represents a method that is not present in any base class, the GetBaseDefinition method returns the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object.  </p>\n<p>You can determine whether the current method overrides a method in a base class by calling the GetBaseDefinition method. The following example implements an <code>IsOverride</code> method that does this.  </p>\n<pre><code class=\"lang-cs\" name=\"system.reflection.methodinfo.getbasedefinition#2\">using System;\nusing System.Reflection;\n\npublic class ReflectionUtilities\n{   \n   public static bool IsOverride(MethodInfo method)\n   {\n      return ! method.Equals(method.GetBaseDefinition());\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      MethodInfo equals = typeof(Int32).GetMethod(&quot;Equals&quot;, \n                                        new Type[] { typeof(Object) } );\n      Console.WriteLine(&quot;{0}.{1} is inherited: {2}&quot;, \n                        equals.ReflectedType.Name, equals.Name,\n                        ReflectionUtilities.IsOverride(equals));\n      \n      equals = typeof(Object).GetMethod(&quot;Equals&quot;, \n                                        new Type[] { typeof(Object) } );\n      Console.WriteLine(&quot;{0}.{1} is inherited: {2}&quot;, \n                        equals.ReflectedType.Name, equals.Name,\n                        ReflectionUtilities.IsOverride(equals));\n   }\n}\n// The example displays the following output:\n//       Int32.Equals is inherited: True\n//       Object.Equals is inherited: False\n</code></pre><pre><code class=\"lang-vb\" name=\"system.reflection.methodinfo.getbasedefinition#2\">Imports System.Reflection\n\nPublic Class ReflectionUtilities\n   Public Shared Function IsOverride(method As MethodInfo) As Boolean\n      Return Not method.Equals(method.GetBaseDefinition())\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim equals As MethodInfo = GetType(Int32).GetMethod(&quot;Equals&quot;, \n                                         { GetType(Object) } )\n      Console.WriteLine(&quot;{0}.{1} is inherited: {2}&quot;, \n                        equals.ReflectedType.Name, equals.Name,\n                        ReflectionUtilities.IsOverride(equals))\n      \n      equals = GetType(Object).GetMethod(&quot;Equals&quot;, { GetType(Object) } )\n      Console.WriteLine(&quot;{0}.{1} is inherited: {2}&quot;, \n                        equals.ReflectedType.Name, equals.Name,\n                        ReflectionUtilities.IsOverride(equals))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Int32.Equals is inherited: True\n&#39;       Object.Equals is inherited: False\n</code></pre><p>To call the <code>GetBaseDefinition</code> method:  </p>\n</li>\n</ul>\n<ol>\n<li><p>Get a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <a class=\"xref\" href=\"system.object#System_Object_GetType_\" data-linktype=\"relative-path\">GetType</a> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.  </p>\n</li>\n<li><p>Get a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents the method in which you&#39;re interested. You can do this by getting an array of all methods from the <a class=\"xref\" href=\"system.type#System_Type_GetMethods_\" data-linktype=\"relative-path\">GetMethods</a> method and then iterating the elements in the array, or you can retrieve the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents the method directly by calling the <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_\" data-linktype=\"relative-path\">System.Type.GetMethod(String)</a> method and specifying the method name.  </p>\n</li>\n<li><p>Call the GetBaseDefinition method to get the value of the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents the base method definition.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the behavior of the GetBaseDefinition method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Reflection.MethodInfo.GetBaseDefinition#1\">Imports System\nImports System.Reflection\n\nInterface Interf\n   Function InterfaceImpl(n As Integer) As String\nEnd Interface\n\nPublic Class BaseClass\n   Public Overrides Function ToString() As String\n      Return &quot;Base&quot;\n   End Function\n\n   Public Overridable Sub Method1()\n      Console.WriteLine(&quot;Method1&quot;)\n   End Sub\n\n   Public Overridable Sub Method2()\n      Console.WriteLine(&quot;Method2&quot;)\n   End Sub\n\n   Public Overridable Sub Method3()\n      Console.WriteLine(&quot;Method3&quot;)\n   End Sub\nEnd Class\n\nPublic Class DerivedClass : Inherits BaseClass : Implements Interf\n   Public Function InterfaceImpl(n As Integer) As String _\n                   Implements Interf.InterfaceImpl\n      Return n.ToString(&quot;N&quot;)\n   End Function\n\n   Public Overrides Sub Method2()\n      Console.WriteLine(&quot;Derived.Method2&quot;)\n   End Sub\n\n   Public Shadows Sub Method3()\n      Console.WriteLine(&quot;Derived.Method3&quot;)\n   End Sub\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim t As Type = GetType(DerivedClass)\n      Dim m, mb As MethodInfo\n      Dim methodNames() As String = { &quot;ToString&quot;, &quot;Equals&quot;,\n                                      &quot;InterfaceImpl&quot;, &quot;Method1&quot;,\n                                      &quot;Method2&quot;, &quot;Method3&quot; }\n\n      For Each methodName In methodNames\n         m = t.GetMethod(methodName)\n         mb = m.GetBaseDefinition()\n         Console.WriteLine(&quot;{0}.{1} --&gt; {2}.{3}&quot;, m.ReflectedType.Name,\n                           m.Name, mb.ReflectedType.Name, mb.Name)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       DerivedClass.ToString --&gt; Object.ToString\n&#39;       DerivedClass.Equals --&gt; Object.Equals\n&#39;       DerivedClass.InterfaceImpl --&gt; DerivedClass.InterfaceImpl\n&#39;       DerivedClass.Method1 --&gt; BaseClass.Method1\n&#39;       DerivedClass.Method2 --&gt; BaseClass.Method2\n&#39;       DerivedClass.Method3 --&gt; DerivedClass.Method3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.MethodInfo.GetBaseDefinition#1\">using System;\nusing System.Reflection;\n\ninterface Interf\n{\n   string InterfaceImpl(int n);\n}\n\npublic class BaseClass\n{\n   public override string ToString()\n   {\n      return &quot;Base&quot;;\n   }\n\n   public virtual void Method1()\n   {\n      Console.WriteLine(&quot;Method1&quot;);\n   }\n\n   public virtual void Method2()\n   {\n      Console.WriteLine(&quot;Method2&quot;);\n   }\n\n   public virtual void Method3()\n   {\n      Console.WriteLine(&quot;Method3&quot;);\n   }\n}\n\npublic class DerivedClass : BaseClass, Interf\n{\n   public string InterfaceImpl(int n)\n   {\n      return n.ToString(&quot;N&quot;);\n   }\n\n   public override void Method2()\n   {\n      Console.WriteLine(&quot;Derived.Method2&quot;);\n   }\n\n   public new void Method3()\n   {\n      Console.WriteLine(&quot;Derived.Method3&quot;);\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Type t = typeof(DerivedClass);\n      MethodInfo m, mb;\n      string[] methodNames = { &quot;ToString&quot;, &quot;Equals&quot;, &quot;InterfaceImpl&quot;,\n                               &quot;Method1&quot;, &quot;Method2&quot;, &quot;Method3&quot; };\n\n      foreach (var methodName in methodNames) {\n         m = t.GetMethod(methodName);\n         mb = m.GetBaseDefinition();\n         Console.WriteLine(&quot;{0}.{1} --&gt; {2}.{3}&quot;, m.ReflectedType.Name,\n                           m.Name, mb.ReflectedType.Name, mb.Name);\n      }\n   }\n}\n// The example displays the following output:\n//       DerivedClass.ToString --&gt; Object.ToString\n//       DerivedClass.Equals --&gt; Object.Equals\n//       DerivedClass.InterfaceImpl --&gt; DerivedClass.InterfaceImpl\n//       DerivedClass.Method1 --&gt; BaseClass.Method1\n//       DerivedClass.Method2 --&gt; BaseClass.Method2\n//       DerivedClass.Method3 --&gt; DerivedClass.Method3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_GetGenericArguments\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_GetGenericArguments_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGenericArguments()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetGenericArguments ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.  </p>\n<ul>\n<li><p>If the current method is a closed constructed method (that is, the &lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt; property returns <code>false</code>), the array returned by the GetGenericArguments method contains the types that have been assigned to the generic type parameters of the generic method definition.  </p>\n</li>\n<li><p>If the current method is a generic method definition, the array contains the type parameters.  </p>\n</li>\n<li><p>If the current method is an open constructed method (that is, the &lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt; property returns <code>true</code>) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <a class=\"xref\" href=\"system.type#System_Type_IsGenericParameter_\" data-linktype=\"relative-path\">IsGenericParameter</a> property to tell them apart. For a demonstration of this scenario, see the code example for the &lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt; property.  </p>\n<p>For a list of the invariant conditions for terms specific to generic methods, see the &lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt; property. For a list of the invariant conditions for other terms used in generic reflection, see the <a class=\"xref\" href=\"system.type#System_Type_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to get the type arguments of a generic method and display them.  </p>\n<p> This example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_\" data-linktype=\"relative-path\">MakeGenericMethod</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"MethodInfo.Generics#8\">        // If this is a generic method, display its type arguments.\n        //\n        if (mi.IsGenericMethod)\n        {\n            Type[] typeArguments = mi.GetGenericArguments();\n\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;List type arguments ({0}):&quot;, \n                typeArguments.Length);\n\n            foreach (Type tParam in typeArguments)\n            {\n                // IsGenericParameter is true only for generic type\n                // parameters.\n                //\n                if (tParam.IsGenericParameter)\n                {\n                    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0}  parameter position {1}&quot; +\n                        &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   declaring method: {2}&quot;,\n                        tParam,\n                        tParam.GenericParameterPosition,\n                        tParam.DeclaringMethod);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, tParam);\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodInfo.Generics#8\">        &#39; If this is a generic method, display its type arguments.\n        &#39;\n        If mi.IsGenericMethod Then\n            Dim typeArguments As Type() = mi.GetGenericArguments()\n            \n            Console.WriteLine(vbTab &amp; &quot;List type arguments ({0}):&quot;, _\n                typeArguments.Length)\n            \n            For Each tParam As Type In typeArguments\n                &#39; IsGenericParameter is true only for generic type\n                &#39; parameters.\n                &#39;\n                If tParam.IsGenericParameter Then\n                    Console.WriteLine(vbTab &amp; vbTab _\n                        &amp; &quot;{0}  parameter position: {1}&quot; _\n                        &amp; vbCrLf &amp; vbTab &amp; vbTab _\n                        &amp; &quot;   declaring method: {2}&quot;, _\n                        tParam,  _\n                        tParam.GenericParameterPosition, _\n                        tParam.DeclaringMethod)\n                Else\n                    Console.WriteLine(vbTab &amp; vbTab &amp; tParam.ToString())\n                End If\n            Next tParam\n        End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodInfo.Generics#8\">    // If this is a generic method, display its type arguments.\n    //\n    if (mi-&gt;IsGenericMethod)\n    {\n        array&lt;Type^&gt;^ typeArguments = mi-&gt;GetGenericArguments();\n\n        Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;List type arguments ({0}):&quot;, \n            typeArguments-&gt;Length);\n\n        for each (Type^ tParam in typeArguments)\n        {\n            // IsGenericParameter is true only for generic type\n            // parameters.\n            //\n            if (tParam-&gt;IsGenericParameter)\n            {\n                Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0}  parameter position {1}&quot; +\n                    &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   declaring method: {2}&quot;,\n                    tParam,\n                    tParam-&gt;GenericParameterPosition,\n                    tParam-&gt;DeclaringMethod);\n            }\n            else\n            {\n                Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, tParam);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_GetGenericMethodDefinition\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_GetGenericMethodDefinition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGenericMethodDefinition()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents a generic method definition from which the current method can be constructed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo GetGenericMethodDefinition ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object representing a generic method definition from which the current method can be constructed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current method is not a generic method. That is, <span class=\"xref\">stem.Reflection.MethodInfo.IsGenericMethod*</span> returns <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A generic method definition is a template from which methods can be constructed. For example, from the generic method definition <code>T M&lt;T&gt;(T t)</code> (expressed in C# syntax; <code>Function M(Of T)(ByVal tVal As T) As T</code> in Visual Basic) you can construct and invoke the method <code>int M&lt;int&gt;(int t)</code> (<code>Function M(Of Integer)(ByVal tVal As Integer) As Integer</code> in Visual Basic). Given a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object representing this constructed method, the GetGenericMethodDefinition method returns the generic method definition.  </p>\n<p> If two constructed methods are created from the same generic method definition, the GetGenericMethodDefinition method returns the same <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for both methods.  </p>\n<p> If you call GetGenericMethodDefinition on a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that already represents a generic method definition, it returns the current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>.  </p>\n<p> If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type. For example, consider the following C#, Visual Basic, and C++ code:  </p>\n<pre><code>class B&lt;U,V&gt; {}  \nclass C&lt;T&gt; { public B&lt;T,S&gt; M&lt;S&gt;() {...}}  \n\nClass B(Of U, V)  \nEnd Class  \nClass C(Of T)  \n    Public Function M(Of S)() As B(Of T, S)  \n        ...  \n    End Function  \nEnd Class   \n\ngeneric &lt;typename U, typename V&gt; ref class B {};  \ngeneric &lt;typename T&gt; ref class C  \n{  \npublic:  \n    generic &lt;typename S&gt; B&lt;T,S&gt;^ M() {...};  \n};  \n</code></pre><p> In the constructed type <code>C&lt;int&gt;</code> (<code>C(Of Integer)</code> in Visual Basic), the generic method <code>M</code> returns <code>B&lt;int, S&gt;</code>. In the open type <code>C&lt;T&gt;</code>, <code>M</code> returns <code>B&lt;T, S&gt;</code>. In both cases, the &lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A&gt; property returns <code>true</code> for the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents <code>M</code>, so <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_\" data-linktype=\"relative-path\">MakeGenericMethod</a> can be called on both <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects. In the case of the constructed type, the result of calling <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_\" data-linktype=\"relative-path\">MakeGenericMethod</a> is a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that can be invoked. In the case of the open type, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> returned by <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_\" data-linktype=\"relative-path\">MakeGenericMethod</a> cannot be invoked.  </p>\n<p> For a list of the invariant conditions for terms specific to generic methods, see the &lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt; property. For a list of the invariant conditions for other terms used in generic reflection, see the <a class=\"xref\" href=\"system.type#System_Type_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a class with a generic method and the code required to obtain a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> for the method, bind the method to type arguments, and get the original generic type definition back from the bound method.  </p>\n<p> This example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_MakeGenericMethod_\" data-linktype=\"relative-path\">MakeGenericMethod</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"MethodInfo.Generics#2\">// Define a class with a generic method.\npublic class Example\n{\n    public static void Generic&lt;T&gt;(T toDisplay)\n    {\n        Console.WriteLine(&quot;\\r<br>Here it is: {0}&quot;, toDisplay);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodInfo.Generics#2\">&#39; Define a class with a generic method.\nPublic Class Example\n    Public Shared Sub Generic(Of T)(ByVal toDisplay As T)\n        Console.WriteLine(vbCrLf &amp; &quot;Here it is: {0}&quot;, toDisplay)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodInfo.Generics#2\">// Define a class with a generic method.\nref class Example\n{\npublic:\n    generic&lt;typename T&gt; static void Generic(T toDisplay)\n    {\n        Console::WriteLine(&quot;\\r<br>Here it is: {0}&quot;, toDisplay);\n    }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodInfo.Generics#3\">        // Create a Type object representing class Example, and\n        // get a MethodInfo representing the generic method.\n        //\n        Type ex = typeof(Example);\n        MethodInfo mi = ex.GetMethod(&quot;Generic&quot;);\n\n        DisplayGenericMethodInfo(mi);\n\n        // Assign the int type to the type parameter of the Example \n        // method.\n        //\n        MethodInfo miConstructed = mi.MakeGenericMethod(typeof(int));\n\n        DisplayGenericMethodInfo(miConstructed);\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodInfo.Generics#3\">        &#39; Create a Type object representing class Example, and\n        &#39; get a MethodInfo representing the generic method.\n        &#39;\n        Dim ex As Type = GetType(Example)\n        Dim mi As MethodInfo = ex.GetMethod(&quot;Generic&quot;)\n        \n        DisplayGenericMethodInfo(mi)\n        \n        &#39; Assign the Integer type to the type parameter of the Example \n        &#39; method.\n        &#39;\n        Dim arguments() As Type = { GetType(Integer) }\n        Dim miConstructed As MethodInfo = mi.MakeGenericMethod(arguments)\n        \n        DisplayGenericMethodInfo(miConstructed)\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodInfo.Generics#3\">    // Create a Type object representing class Example, and\n    // get a MethodInfo representing the generic method.\n    //\n    Type^ ex = Example::typeid;\n    MethodInfo^ mi = ex-&gt;GetMethod(&quot;Generic&quot;);\n\n    DisplayGenericMethodInfo(mi);\n\n    // Assign the int type to the type parameter of the Example \n    // method.\n    //\n    MethodInfo^ miConstructed = mi-&gt;MakeGenericMethod(int::typeid);\n\n    DisplayGenericMethodInfo(miConstructed);\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodInfo.Generics#4\">        // Get the generic type definition from the closed method,\n        // and show it&#39;s the same as the original definition.\n        //\n        MethodInfo miDef = miConstructed.GetGenericMethodDefinition();\n        Console.WriteLine(&quot;\\r<br>The definition is the same: {0}&quot;,\n            miDef == mi);\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodInfo.Generics#4\">        &#39; Get the generic type definition from the constructed method,\n        &#39; and show that it&#39;s the same as the original definition.\n        &#39;\n        Dim miDef As MethodInfo = miConstructed.GetGenericMethodDefinition()\n        Console.WriteLine(vbCrLf &amp; &quot;The definition is the same: {0}&quot;, _\n            miDef Is mi)\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodInfo.Generics#4\">    // Get the generic type definition from the closed method,\n    // and show it&#39;s the same as the original definition.\n    //\n    MethodInfo^ miDef = miConstructed-&gt;GetGenericMethodDefinition();\n    Console::WriteLine(&quot;\\r<br>The definition is the same: {0}&quot;,\n            miDef == mi);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_MakeGenericMethod_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_MakeGenericMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeGenericMethod(Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object representing the resulting constructed method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo MakeGenericMethod (Type[] typeArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types to be substituted for the type parameters of the current generic method definition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents the constructed method formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic method definition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> does not represent a generic method definition. That is, <span class=\"xref\">stem.Reflection.MethodInfo.IsGenericMethodDefinition*</span> returns <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeArguments</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> Any element of <code>typeArguments</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>typeArguments</code> is not the same as the number of type parameters of the current generic method definition.  </p>\n<p> -or-  </p>\n<p> An element of <code>typeArguments</code> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MakeGenericMethod method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object that represents a particular constructed method. If the &lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt; property of this <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object returns <code>true</code>, you can use it to invoke the method or to create a delegate to invoke the method.  </p>\n<p> Methods constructed with the MakeGenericMethod method can be open, that is, some of their type arguments can be type parameters of enclosing generic types. You might use such open constructed methods when you generate dynamic assemblies. For example, consider the following C#, Visual Basic, and C++ code.  </p>\n<pre><code>class C  \n{  \n    T N&lt;T,U&gt;(T t, U u) {...}  \n    public V M&lt;V&gt;(V v)  \n    {  \n        return N&lt;V,int&gt;(v, 42);  \n    }  \n}  \n\nClass C  \n    Public Function N(Of T,U)(ByVal ta As T, ByVal ua As U) As T  \n        ...  \n    End Function  \n    Public Function M(Of V)(ByVal va As V ) As V  \n        Return N(Of V, Integer)(va, 42)  \n    End Function  \nEnd Class  \n\nref class C  \n{  \nprivate:  \n    generic &lt;typename T, typename U&gt; T N(T t, U u) {...}  \npublic:  \n    generic &lt;typename V&gt; V M(V v)  \n    {  \n        return N&lt;V, int&gt;(v, 42);  \n    }  \n};  \n</code></pre><p> The method body of <code>M</code> contains a call to method <code>N</code>, specifying the type parameter of <code>M</code> and the type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The &lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A&gt; property returns <code>false</code> for method <code>N&lt;V,int&gt;</code>. The &lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt; property returns <code>true</code>, so method <code>N&lt;V,int&gt;</code> cannot be invoked.  </p>\n<p> For a list of the invariant conditions for terms specific to generic methods, see the &lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt; property. For a list of the invariant conditions for other terms used in generic reflection, see the <a class=\"xref\" href=\"system.type#System_Type_IsGenericType_\" data-linktype=\"relative-path\">IsGenericType</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the properties and methods of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that support the examination of generic methods. The example does the following:  </p>\n<ul>\n<li><p>Defines a class that has a generic method.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the generic method.  </p>\n</li>\n<li><p>Displays properties of the generic method definition.  </p>\n</li>\n<li><p>Assigns type arguments to the type parameters of the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>, and invokes the resulting constructed generic method.  </p>\n</li>\n<li><p>Displays properties of the constructed generic method.  </p>\n</li>\n<li><p>Retrieves the generic method definition from the constructed method and compares it to the original definition.  </p>\n<pre><code class=\"lang-cs\" name=\"MethodInfo.Generics#1\">using System;\nusing System.Reflection;\n\n// Define a class with a generic method.\npublic class Example\n{\n    public static void Generic&lt;T&gt;(T toDisplay)\n    {\n        Console.WriteLine(&quot;\\r<br>Here it is: {0}&quot;, toDisplay);\n    }\n}\n\npublic class Test\n{\n    public static void Main()\n    {\n        Console.WriteLine(&quot;\\r<br>--- Examine a generic method.&quot;);\n\n        // Create a Type object representing class Example, and\n        // get a MethodInfo representing the generic method.\n        //\n        Type ex = typeof(Example);\n        MethodInfo mi = ex.GetMethod(&quot;Generic&quot;);\n\n        DisplayGenericMethodInfo(mi);\n\n        // Assign the int type to the type parameter of the Example \n        // method.\n        //\n        MethodInfo miConstructed = mi.MakeGenericMethod(typeof(int));\n\n        DisplayGenericMethodInfo(miConstructed);\n\n        // Invoke the method.\n        object[] args = {42};\n        miConstructed.Invoke(null, args);\n\n        // Invoke the method normally.\n        Example.Generic&lt;int&gt;(42);\n\n        // Get the generic type definition from the closed method,\n        // and show it&#39;s the same as the original definition.\n        //\n        MethodInfo miDef = miConstructed.GetGenericMethodDefinition();\n        Console.WriteLine(&quot;\\r<br>The definition is the same: {0}&quot;,\n            miDef == mi);\n    }\n        \n    private static void DisplayGenericMethodInfo(MethodInfo mi)\n    {\n        Console.WriteLine(&quot;\\r<br>{0}&quot;, mi);\n\n        Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Is this a generic method definition? {0}&quot;, \n            mi.IsGenericMethodDefinition);\n\n        Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Is it a generic method? {0}&quot;, \n            mi.IsGenericMethod);\n\n        Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Does it have unassigned generic parameters? {0}&quot;, \n            mi.ContainsGenericParameters);\n\n        // If this is a generic method, display its type arguments.\n        //\n        if (mi.IsGenericMethod)\n        {\n            Type[] typeArguments = mi.GetGenericArguments();\n\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;List type arguments ({0}):&quot;, \n                typeArguments.Length);\n\n            foreach (Type tParam in typeArguments)\n            {\n                // IsGenericParameter is true only for generic type\n                // parameters.\n                //\n                if (tParam.IsGenericParameter)\n                {\n                    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0}  parameter position {1}&quot; +\n                        &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   declaring method: {2}&quot;,\n                        tParam,\n                        tParam.GenericParameterPosition,\n                        tParam.DeclaringMethod);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, tParam);\n                }\n            }\n        }\n    }\n}\n\n/* This example produces the following output:\n\n--- Examine a generic method.\n\nVoid Generic[T](T)\n        Is this a generic method definition? True\n        Is it a generic method? True\n        Does it have unassigned generic parameters? True\n        List type arguments (1):\n                T  parameter position 0\n                   declaring method: Void Generic[T](T)\n\nVoid Generic[Int32](Int32)\n        Is this a generic method definition? False\n        Is it a generic method? True\n        Does it have unassigned generic parameters? False\n        List type arguments (1):\n                System.Int32\n\nHere it is: 42\n\nHere it is: 42\n\nThe definition is the same: True\n\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodInfo.Generics#1\">Imports System\nImports System.Reflection\n\n&#39; Define a class with a generic method.\nPublic Class Example\n    Public Shared Sub Generic(Of T)(ByVal toDisplay As T)\n        Console.WriteLine(vbCrLf &amp; &quot;Here it is: {0}&quot;, toDisplay)\n    End Sub\nEnd Class\n\nPublic Class Test\n    Public Shared Sub Main() \n        Console.WriteLine(vbCrLf &amp; &quot;--- Examine a generic method.&quot;)\n        \n        &#39; Create a Type object representing class Example, and\n        &#39; get a MethodInfo representing the generic method.\n        &#39;\n        Dim ex As Type = GetType(Example)\n        Dim mi As MethodInfo = ex.GetMethod(&quot;Generic&quot;)\n        \n        DisplayGenericMethodInfo(mi)\n        \n        &#39; Assign the Integer type to the type parameter of the Example \n        &#39; method.\n        &#39;\n        Dim arguments() As Type = { GetType(Integer) }\n        Dim miConstructed As MethodInfo = mi.MakeGenericMethod(arguments)\n        \n        DisplayGenericMethodInfo(miConstructed)\n\n        &#39; Invoke the method.\n        Dim args() As Object = { 42 }\n        miConstructed.Invoke(Nothing, args)\n        \n        &#39; Invoke the method normally.\n        Example.Generic(Of Integer)(42)\n        \n        &#39; Get the generic type definition from the constructed method,\n        &#39; and show that it&#39;s the same as the original definition.\n        &#39;\n        Dim miDef As MethodInfo = miConstructed.GetGenericMethodDefinition()\n        Console.WriteLine(vbCrLf &amp; &quot;The definition is the same: {0}&quot;, _\n            miDef Is mi)\n    End Sub &#39;Main\n      \n    Private Shared Sub DisplayGenericMethodInfo(ByVal mi As MethodInfo) \n        Console.WriteLine(vbCrLf &amp; mi.ToString())\n        \n        Console.WriteLine(vbTab _\n            &amp; &quot;Is this a generic method definition? {0}&quot;, _\n            mi.IsGenericMethodDefinition)\n\n        Console.WriteLine(vbTab &amp; &quot;Is it a generic method? {0}&quot;, _\n            mi.IsGenericMethod)\n\n        Console.WriteLine(vbTab _\n            &amp; &quot;Does it have unassigned generic parameters? {0}&quot;, _\n            mi.ContainsGenericParameters)\n\n        &#39; If this is a generic method, display its type arguments.\n        &#39;\n        If mi.IsGenericMethod Then\n            Dim typeArguments As Type() = mi.GetGenericArguments()\n            \n            Console.WriteLine(vbTab &amp; &quot;List type arguments ({0}):&quot;, _\n                typeArguments.Length)\n            \n            For Each tParam As Type In typeArguments\n                &#39; IsGenericParameter is true only for generic type\n                &#39; parameters.\n                &#39;\n                If tParam.IsGenericParameter Then\n                    Console.WriteLine(vbTab &amp; vbTab _\n                        &amp; &quot;{0}  parameter position: {1}&quot; _\n                        &amp; vbCrLf &amp; vbTab &amp; vbTab _\n                        &amp; &quot;   declaring method: {2}&quot;, _\n                        tParam,  _\n                        tParam.GenericParameterPosition, _\n                        tParam.DeclaringMethod)\n                Else\n                    Console.WriteLine(vbTab &amp; vbTab &amp; tParam.ToString())\n                End If\n            Next tParam\n        End If\n    End Sub \nEnd Class \n\n&#39; This example produces the following output:\n&#39;\n&#39;--- Examine a generic method.\n&#39;\n&#39;Void Generic[T](T)\n&#39;        Is this a generic method definition? True\n&#39;        Is it a generic method? True\n&#39;        Does it have unassigned generic parameters? True\n&#39;        List type arguments (1):\n&#39;                T  parameter position: 0\n&#39;                   declaring method: Void Generic[T](T)\n&#39;\n&#39;Void Generic[Int32](Int32)\n&#39;        Is this a generic method definition? False\n&#39;        Is it a generic method? True\n&#39;        Does it have unassigned generic parameters? False\n&#39;        List type arguments (1):\n&#39;                System.Int32\n&#39;\n&#39;Here it is: 42\n&#39;\n&#39;Here it is: 42\n&#39;\n&#39;The definition is the same: True\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodInfo.Generics#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define a class with a generic method.\nref class Example\n{\npublic:\n    generic&lt;typename T&gt; static void Generic(T toDisplay)\n    {\n        Console::WriteLine(&quot;\\r<br>Here it is: {0}&quot;, toDisplay);\n    }\n};\n\nvoid DisplayGenericMethodInfo(MethodInfo^ mi)\n{\n    Console::WriteLine(&quot;\\r<br>{0}&quot;, mi);\n\n    Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Is this a generic method definition? {0}&quot;, \n        mi-&gt;IsGenericMethodDefinition);\n\n    Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Is it a generic method? {0}&quot;, \n        mi-&gt;IsGenericMethod);\n\n    Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Does it have unassigned generic parameters? {0}&quot;, \n        mi-&gt;ContainsGenericParameters);\n\n    // If this is a generic method, display its type arguments.\n    //\n    if (mi-&gt;IsGenericMethod)\n    {\n        array&lt;Type^&gt;^ typeArguments = mi-&gt;GetGenericArguments();\n\n        Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;List type arguments ({0}):&quot;, \n            typeArguments-&gt;Length);\n\n        for each (Type^ tParam in typeArguments)\n        {\n            // IsGenericParameter is true only for generic type\n            // parameters.\n            //\n            if (tParam-&gt;IsGenericParameter)\n            {\n                Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0}  parameter position {1}&quot; +\n                    &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   declaring method: {2}&quot;,\n                    tParam,\n                    tParam-&gt;GenericParameterPosition,\n                    tParam-&gt;DeclaringMethod);\n            }\n            else\n            {\n                Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, tParam);\n            }\n        }\n    }\n};\n\nvoid main()\n{\n    Console::WriteLine(&quot;\\r<br>--- Examine a generic method.&quot;);\n\n    // Create a Type object representing class Example, and\n    // get a MethodInfo representing the generic method.\n    //\n    Type^ ex = Example::typeid;\n    MethodInfo^ mi = ex-&gt;GetMethod(&quot;Generic&quot;);\n\n    DisplayGenericMethodInfo(mi);\n\n    // Assign the int type to the type parameter of the Example \n    // method.\n    //\n    MethodInfo^ miConstructed = mi-&gt;MakeGenericMethod(int::typeid);\n\n    DisplayGenericMethodInfo(miConstructed);\n\n    // Invoke the method.\n    array&lt;Object^&gt;^ args = { 42 };\n    miConstructed-&gt;Invoke((Object^) 0, args);\n\n    // Invoke the method normally.\n    Example::Generic&lt;int&gt;(42);\n\n    // Get the generic type definition from the closed method,\n    // and show it&#39;s the same as the original definition.\n    //\n    MethodInfo^ miDef = miConstructed-&gt;GetGenericMethodDefinition();\n    Console::WriteLine(&quot;\\r<br>The definition is the same: {0}&quot;,\n            miDef == mi);\n};\n        \n/* This example produces the following output:\n\n--- Examine a generic method.\n\nVoid Generic[T](T)\n        Is this a generic method definition? True\n        Is it a generic method? True\n        Does it have unassigned generic parameters? True\n        List type arguments (1):\n                T  parameter position 0\n                   declaring method: Void Generic[T](T)\n\nVoid Generic[Int32](Int32)\n        Is this a generic method definition? False\n        Is it a generic method? True\n        Does it have unassigned generic parameters? False\n        List type arguments (1):\n                System.Int32\n\nHere it is: 42\n\nHere it is: 42\n\nThe definition is the same: True\n\n */\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_op_Equality_System_Reflection_MethodInfo_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(MethodInfo,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_op_Inequality_System_Reflection_MethodInfo_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(MethodInfo,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is not equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MethodInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array that receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetType\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodInfo.GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to the <span class=\"xref\">stem.Object.GetType*</span> method from COM.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">Type _MethodInfo.GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MethodInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodInfo.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MethodInfo.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_MethodInfo_System_Runtime_InteropServices__MethodInfo_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MethodInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.MethodInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.MethodInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.CreateDelegate\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.GetBaseDefinition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.GetGenericArguments\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.GetGenericMethodDefinition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.MakeGenericMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.MemberType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.ReturnParameter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.ReturnType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo.ReturnTypeCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo._MethodInfo.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo._MethodInfo.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo._MethodInfo.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo._MethodInfo.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodInfo._MethodInfo.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e1495cae-7399-1c03-1eff-6f59dbb9f980\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Discovers the attributes of a method and provides access to method metadata.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.MethodInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.MethodInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.MethodInfo.yml","open_to_public_contributors":true,"api_name":["System.Reflection.MethodInfo","System.Reflection.MethodInfo..ctor","System.Reflection.MethodInfo.CreateDelegate","System.Reflection.MethodInfo.Equals","System.Reflection.MethodInfo.GetBaseDefinition","System.Reflection.MethodInfo.GetGenericArguments","System.Reflection.MethodInfo.GetGenericMethodDefinition","System.Reflection.MethodInfo.GetHashCode","System.Reflection.MethodInfo.MakeGenericMethod","System.Reflection.MethodInfo.MemberType","System.Reflection.MethodInfo.op_Equality","System.Reflection.MethodInfo.op_op_Equality","System.Reflection.MethodInfo.op_Inequality","System.Reflection.MethodInfo.op_op_Inequality","System.Reflection.MethodInfo.ReturnParameter","System.Reflection.MethodInfo.ReturnType","System.Reflection.MethodInfo.ReturnTypeCustomAttributes","System.Reflection.MethodInfo._MethodInfo.GetIDsOfNames","System.Reflection.MethodInfo._MethodInfo.GetType","System.Reflection.MethodInfo._MethodInfo.GetTypeInfo","System.Reflection.MethodInfo._MethodInfo.GetTypeInfoCount","System.Reflection.MethodInfo._MethodInfo.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.MethodInfo","System::Reflection::MethodInfo","System.Reflection.MethodInfo.#ctor","System::Reflection::MethodInfo::#ctor","System.Reflection.MethodInfo.CreateDelegate","System::Reflection::MethodInfo::CreateDelegate","System.Reflection.MethodInfo.Equals","System::Reflection::MethodInfo::Equals","System.Reflection.MethodInfo.GetBaseDefinition","System::Reflection::MethodInfo::GetBaseDefinition","System.Reflection.MethodInfo.GetGenericArguments","System::Reflection::MethodInfo::GetGenericArguments","System.Reflection.MethodInfo.GetGenericMethodDefinition","System::Reflection::MethodInfo::GetGenericMethodDefinition","System.Reflection.MethodInfo.GetHashCode","System::Reflection::MethodInfo::GetHashCode","System.Reflection.MethodInfo.MakeGenericMethod","System::Reflection::MethodInfo::MakeGenericMethod","System.Reflection.MethodInfo.MemberType","System::Reflection::MethodInfo::MemberType","System.Reflection.MethodInfo.op_Equality","System::Reflection::MethodInfo::op_Equality","System.Reflection.MethodInfo.op_Inequality","System::Reflection::MethodInfo::op_Inequality","System.Reflection.MethodInfo.ReturnParameter","System::Reflection::MethodInfo::ReturnParameter","System.Reflection.MethodInfo.ReturnType","System::Reflection::MethodInfo::ReturnType","System.Reflection.MethodInfo.ReturnTypeCustomAttributes","System::Reflection::MethodInfo::ReturnTypeCustomAttributes","System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames","System::Reflection::MethodInfo::System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames","System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType","System::Reflection::MethodInfo::System#Runtime#InteropServices#_MethodInfo#GetType","System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo","System::Reflection::MethodInfo::System#Runtime#InteropServices#_MethodInfo#GetTypeInfo","System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount","System::Reflection::MethodInfo::System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount","System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke","System::Reflection::MethodInfo::System#Runtime#InteropServices#_MethodInfo#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e1495cae-7399-1c03-1eff-6f59dbb9f980","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/MethodInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MethodInfo class | Microsoft Docs","_op_ogTitle":"MethodInfo class","description":"Discovers the attributes of a method and provides access to method metadata.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.MethodInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.methodinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.methodinfo","fileRelativePath":"System.Reflection.MethodInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}