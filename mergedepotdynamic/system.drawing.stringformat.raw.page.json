{"content":"    \r\n    <h1 id=\"System_Drawing_StringFormat\">\r\n      <span class=\"lang-csharp\">StringFormat</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Encapsulates text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class StringFormat : MarshalByRefObject, ICloneable, IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StringFormat</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Many common formats are provided through the <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration. StringFormat objects can be changed.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat__ctor\" data-linktype=\"self-bookmark\">StringFormat()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat__ctor_System_Drawing_StringFormat_\" data-linktype=\"self-bookmark\">StringFormat(StringFormat)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object from the specified existing <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat__ctor_System_Drawing_StringFormatFlags_\" data-linktype=\"self-bookmark\">StringFormat(StringFormatFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object with the specified <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat__ctor_System_Drawing_StringFormatFlags_System_Int32_\" data-linktype=\"self-bookmark\">StringFormat(StringFormatFlags,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object with the specified <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration and language.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_Alignment\" data-linktype=\"self-bookmark\">Alignment</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets horizontal alignment of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_DigitSubstitutionLanguage\" data-linktype=\"self-bookmark\">DigitSubstitutionLanguage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the language that is used when local digits are substituted for western digits.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_DigitSubstitutionMethod\" data-linktype=\"self-bookmark\">DigitSubstitutionMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method to be used for digit substitution.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_FormatFlags\" data-linktype=\"self-bookmark\">FormatFlags</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration that contains formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_GenericDefault\" data-linktype=\"self-bookmark\">GenericDefault</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a generic default <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_GenericTypographic\" data-linktype=\"self-bookmark\">GenericTypographic</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a generic typographic <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_HotkeyPrefix\" data-linktype=\"self-bookmark\">HotkeyPrefix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.drawing.text.hotkeyprefix\" data-linktype=\"relative-path\">HotkeyPrefix</a> object for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_LineAlignment\" data-linktype=\"self-bookmark\">LineAlignment</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the vertical alignment of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_Trimming\" data-linktype=\"self-bookmark\">Trimming</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.drawing.stringtrimming\" data-linktype=\"relative-path\">StringTrimming</a> enumeration for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an exact copy of this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_GetTabStops_System_Single__\" data-linktype=\"self-bookmark\">GetTabStops(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the tab stops for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_SetDigitSubstitution_System_Int32_System_Drawing_StringDigitSubstitute_\" data-linktype=\"self-bookmark\">SetDigitSubstitution(Int32,StringDigitSubstitute)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the language and method to be used when local digits are substituted for western digits.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_SetMeasurableCharacterRanges_System_Drawing_CharacterRange___\" data-linktype=\"self-bookmark\">SetMeasurableCharacterRanges(CharacterRange[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies an array of <a class=\"xref\" href=\"system.drawing.characterrange\" data-linktype=\"relative-path\">CharacterRange</a> structures that represent the ranges of characters measured by a call to the <span class=\"xref\">stem.Drawing.Graphics.MeasureCharacterRanges*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_SetTabStops_System_Single_System_Single___\" data-linktype=\"self-bookmark\">SetTabStops(Single,Single[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets tab stops for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_StringFormat_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object to a human-readable string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat__ctor\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringFormat()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringFormat ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> class.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FormatFlags</td>\n<td>0 (no flags are set)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_HotkeyPrefix_\" data-linktype=\"relative-path\">HotkeyPrefix</a></td>\n<td><a class=\"xref\" href=\"system.drawing.text.hotkeyprefix\" data-linktype=\"relative-path\">HotkeyPrefix</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat__ctor_System_Drawing_StringFormat_\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringFormat(StringFormat)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object from the specified existing <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringFormat (System.Drawing.StringFormat format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object from which to initialize the new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the following members:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.drawing.rectangle#System_Drawing_Rectangle__ctor_\" data-linktype=\"relative-path\">Rectangle</a>  \n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat__ctor_\" data-linktype=\"relative-path\">StringFormat</a>  \n</li>\n<li><p>StringFormat  </p>\n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_Alignment_\" data-linktype=\"relative-path\">Alignment</a>  \n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_LineAlignment_\" data-linktype=\"relative-path\">LineAlignment</a>  \n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a>  \n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a>  \n\n<p>This example is designed to be used with Windows Forms. Paste the code into a form and call the <code>ShowLineAndAlignment</code> method when handling the form&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event, passing <code>e</code> as <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Drawing.Misc2#1\">    private void ShowLineAndAlignment(PaintEventArgs e)\n    {\n\n        // Construct a new Rectangle .\n        Rectangle  displayRectangle = \n            new Rectangle (new Point(40, 40), new Size (80, 80));\n\n        // Construct 2 new StringFormat objects\n        StringFormat format1 = new StringFormat(StringFormatFlags.NoClip);\n        StringFormat format2 = new StringFormat(format1);\n\n        // Set the LineAlignment and Alignment properties for\n        // both StringFormat objects to different values.\n        format1.LineAlignment = StringAlignment.Near;\n        format1.Alignment = StringAlignment.Center;\n        format2.LineAlignment = StringAlignment.Center;\n        format2.Alignment = StringAlignment.Far;\n\n        // Draw the bounding rectangle and a string for each\n        // StringFormat object.\n        e.Graphics.DrawRectangle(Pens.Black, displayRectangle);\n        e.Graphics.DrawString(&quot;Showing Format1&quot;, this.Font, \n            Brushes.Red, (RectangleF)displayRectangle, format1);\n        e.Graphics.DrawString(&quot;Showing Format2&quot;, this.Font, \n            Brushes.Red, (RectangleF)displayRectangle, format2);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.Misc2#1\">    Private Sub ShowLineAndAlignment(ByVal e As PaintEventArgs)\n\n        &#39; Construct a new Rectangle.\n        Dim displayRectangle _\n            As New Rectangle(New Point(40, 40), New Size(80, 80))\n\n        &#39; Construct two new StringFormat objects\n        Dim format1 As New StringFormat(StringFormatFlags.NoClip)\n        Dim format2 As New StringFormat(format1)\n\n        &#39; Set the LineAlignment and Alignment properties for\n        &#39; both StringFormat objects to different values.\n        format1.LineAlignment = StringAlignment.Near\n        format1.Alignment = StringAlignment.Center\n        format2.LineAlignment = StringAlignment.Center\n        format2.Alignment = StringAlignment.Far\n\n        &#39; Draw the bounding rectangle and a string for each\n        &#39; StringFormat object.\n        e.Graphics.DrawRectangle(Pens.Black, displayRectangle)\n        e.Graphics.DrawString(&quot;Showing Format1&quot;, Me.Font, Brushes.Red, _\n            RectangleF.op_Implicit(displayRectangle), format1)\n        e.Graphics.DrawString(&quot;Showing Format2&quot;, Me.Font, Brushes.Red, _\n            RectangleF.op_Implicit(displayRectangle), format2)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Misc2#1\">private:\n   void ShowLineAndAlignment( PaintEventArgs^ e )\n   {\n      // Construct a new Rectangle .\n      Rectangle displayRectangle = Rectangle(Point(40,40),System::Drawing::Size( 80, 80 ));\n      \n      // Construct 2 new StringFormat objects\n      StringFormat^ format1 = gcnew StringFormat( StringFormatFlags::NoClip );\n      StringFormat^ format2 = gcnew StringFormat( format1 );\n      \n      // Set the LineAlignment and Alignment properties for\n      // both StringFormat objects to different values.\n      format1-&gt;LineAlignment = StringAlignment::Near;\n      format1-&gt;Alignment = StringAlignment::Center;\n      format2-&gt;LineAlignment = StringAlignment::Center;\n      format2-&gt;Alignment = StringAlignment::Far;\n      \n      // Draw the bounding rectangle and a string for each\n      // StringFormat object.\n      e-&gt;Graphics-&gt;DrawRectangle( Pens::Black, displayRectangle );\n      e-&gt;Graphics-&gt;DrawString( &quot;Showing Format1&quot;, this-&gt;Font, Brushes::Red, displayRectangle, format1 );\n      e-&gt;Graphics-&gt;DrawString( &quot;Showing Format2&quot;, this-&gt;Font, Brushes::Red, displayRectangle, format2 );\n   }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat__ctor_System_Drawing_StringFormatFlags_\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringFormat(StringFormatFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object with the specified <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringFormat (System.Drawing.StringFormatFlags options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration for the new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the following members:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.drawing.rectangle#System_Drawing_Rectangle__ctor_\" data-linktype=\"relative-path\">Rectangle</a>  \n</li>\n<li><p>StringFormat  </p>\n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat__ctor_\" data-linktype=\"relative-path\">StringFormat</a>  \n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_Alignment_\" data-linktype=\"relative-path\">Alignment</a>  \n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_LineAlignment_\" data-linktype=\"relative-path\">LineAlignment</a>  \n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a>  \n</li>\n<li><a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a>  \n\n<p>This example is designed to be used with Windows Forms. Paste the code into a form and call the <code>ShowLineAndAlignment</code> method when handling the form&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event, passing <code>e</code> as <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Drawing.Misc2#1\">    private void ShowLineAndAlignment(PaintEventArgs e)\n    {\n\n        // Construct a new Rectangle .\n        Rectangle  displayRectangle = \n            new Rectangle (new Point(40, 40), new Size (80, 80));\n\n        // Construct 2 new StringFormat objects\n        StringFormat format1 = new StringFormat(StringFormatFlags.NoClip);\n        StringFormat format2 = new StringFormat(format1);\n\n        // Set the LineAlignment and Alignment properties for\n        // both StringFormat objects to different values.\n        format1.LineAlignment = StringAlignment.Near;\n        format1.Alignment = StringAlignment.Center;\n        format2.LineAlignment = StringAlignment.Center;\n        format2.Alignment = StringAlignment.Far;\n\n        // Draw the bounding rectangle and a string for each\n        // StringFormat object.\n        e.Graphics.DrawRectangle(Pens.Black, displayRectangle);\n        e.Graphics.DrawString(&quot;Showing Format1&quot;, this.Font, \n            Brushes.Red, (RectangleF)displayRectangle, format1);\n        e.Graphics.DrawString(&quot;Showing Format2&quot;, this.Font, \n            Brushes.Red, (RectangleF)displayRectangle, format2);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.Misc2#1\">    Private Sub ShowLineAndAlignment(ByVal e As PaintEventArgs)\n\n        &#39; Construct a new Rectangle.\n        Dim displayRectangle _\n            As New Rectangle(New Point(40, 40), New Size(80, 80))\n\n        &#39; Construct two new StringFormat objects\n        Dim format1 As New StringFormat(StringFormatFlags.NoClip)\n        Dim format2 As New StringFormat(format1)\n\n        &#39; Set the LineAlignment and Alignment properties for\n        &#39; both StringFormat objects to different values.\n        format1.LineAlignment = StringAlignment.Near\n        format1.Alignment = StringAlignment.Center\n        format2.LineAlignment = StringAlignment.Center\n        format2.Alignment = StringAlignment.Far\n\n        &#39; Draw the bounding rectangle and a string for each\n        &#39; StringFormat object.\n        e.Graphics.DrawRectangle(Pens.Black, displayRectangle)\n        e.Graphics.DrawString(&quot;Showing Format1&quot;, Me.Font, Brushes.Red, _\n            RectangleF.op_Implicit(displayRectangle), format1)\n        e.Graphics.DrawString(&quot;Showing Format2&quot;, Me.Font, Brushes.Red, _\n            RectangleF.op_Implicit(displayRectangle), format2)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Misc2#1\">private:\n   void ShowLineAndAlignment( PaintEventArgs^ e )\n   {\n      // Construct a new Rectangle .\n      Rectangle displayRectangle = Rectangle(Point(40,40),System::Drawing::Size( 80, 80 ));\n      \n      // Construct 2 new StringFormat objects\n      StringFormat^ format1 = gcnew StringFormat( StringFormatFlags::NoClip );\n      StringFormat^ format2 = gcnew StringFormat( format1 );\n      \n      // Set the LineAlignment and Alignment properties for\n      // both StringFormat objects to different values.\n      format1-&gt;LineAlignment = StringAlignment::Near;\n      format1-&gt;Alignment = StringAlignment::Center;\n      format2-&gt;LineAlignment = StringAlignment::Center;\n      format2-&gt;Alignment = StringAlignment::Far;\n      \n      // Draw the bounding rectangle and a string for each\n      // StringFormat object.\n      e-&gt;Graphics-&gt;DrawRectangle( Pens::Black, displayRectangle );\n      e-&gt;Graphics-&gt;DrawString( &quot;Showing Format1&quot;, this-&gt;Font, Brushes::Red, displayRectangle, format1 );\n      e-&gt;Graphics-&gt;DrawString( &quot;Showing Format2&quot;, this-&gt;Font, Brushes::Red, displayRectangle, format2 );\n   }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat__ctor_System_Drawing_StringFormatFlags_System_Int32_\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringFormat(StringFormatFlags,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object with the specified <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration and language.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringFormat (System.Drawing.StringFormatFlags options, int language);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration for the new <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that indicates the language of the text.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_Alignment\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_Alignment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Alignment</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets horizontal alignment of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.StringAlignment Alignment { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a> enumeration that specifies the horizontal  alignment of the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_LineAlignment_\" data-linktype=\"relative-path\">LineAlignment</a> to specify the vertical alignment of the string.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_LineAlignment_\" data-linktype=\"relative-path\">LineAlignment</a> and Alignment properties and the <a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a> enumeration to align strings. This example is designed to be used with Windows Forms. Paste the code into a form and call the <code>ShowLineAndAlignment</code> method when handling the form&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event, passing <code>e</code> as <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Drawing.Misc2#1\">    private void ShowLineAndAlignment(PaintEventArgs e)\n    {\n\n        // Construct a new Rectangle .\n        Rectangle  displayRectangle = \n            new Rectangle (new Point(40, 40), new Size (80, 80));\n\n        // Construct 2 new StringFormat objects\n        StringFormat format1 = new StringFormat(StringFormatFlags.NoClip);\n        StringFormat format2 = new StringFormat(format1);\n\n        // Set the LineAlignment and Alignment properties for\n        // both StringFormat objects to different values.\n        format1.LineAlignment = StringAlignment.Near;\n        format1.Alignment = StringAlignment.Center;\n        format2.LineAlignment = StringAlignment.Center;\n        format2.Alignment = StringAlignment.Far;\n\n        // Draw the bounding rectangle and a string for each\n        // StringFormat object.\n        e.Graphics.DrawRectangle(Pens.Black, displayRectangle);\n        e.Graphics.DrawString(&quot;Showing Format1&quot;, this.Font, \n            Brushes.Red, (RectangleF)displayRectangle, format1);\n        e.Graphics.DrawString(&quot;Showing Format2&quot;, this.Font, \n            Brushes.Red, (RectangleF)displayRectangle, format2);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.Misc2#1\">    Private Sub ShowLineAndAlignment(ByVal e As PaintEventArgs)\n\n        &#39; Construct a new Rectangle.\n        Dim displayRectangle _\n            As New Rectangle(New Point(40, 40), New Size(80, 80))\n\n        &#39; Construct two new StringFormat objects\n        Dim format1 As New StringFormat(StringFormatFlags.NoClip)\n        Dim format2 As New StringFormat(format1)\n\n        &#39; Set the LineAlignment and Alignment properties for\n        &#39; both StringFormat objects to different values.\n        format1.LineAlignment = StringAlignment.Near\n        format1.Alignment = StringAlignment.Center\n        format2.LineAlignment = StringAlignment.Center\n        format2.Alignment = StringAlignment.Far\n\n        &#39; Draw the bounding rectangle and a string for each\n        &#39; StringFormat object.\n        e.Graphics.DrawRectangle(Pens.Black, displayRectangle)\n        e.Graphics.DrawString(&quot;Showing Format1&quot;, Me.Font, Brushes.Red, _\n            RectangleF.op_Implicit(displayRectangle), format1)\n        e.Graphics.DrawString(&quot;Showing Format2&quot;, Me.Font, Brushes.Red, _\n            RectangleF.op_Implicit(displayRectangle), format2)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Misc2#1\">private:\n   void ShowLineAndAlignment( PaintEventArgs^ e )\n   {\n      // Construct a new Rectangle .\n      Rectangle displayRectangle = Rectangle(Point(40,40),System::Drawing::Size( 80, 80 ));\n      \n      // Construct 2 new StringFormat objects\n      StringFormat^ format1 = gcnew StringFormat( StringFormatFlags::NoClip );\n      StringFormat^ format2 = gcnew StringFormat( format1 );\n      \n      // Set the LineAlignment and Alignment properties for\n      // both StringFormat objects to different values.\n      format1-&gt;LineAlignment = StringAlignment::Near;\n      format1-&gt;Alignment = StringAlignment::Center;\n      format2-&gt;LineAlignment = StringAlignment::Center;\n      format2-&gt;Alignment = StringAlignment::Far;\n      \n      // Draw the bounding rectangle and a string for each\n      // StringFormat object.\n      e-&gt;Graphics-&gt;DrawRectangle( Pens::Black, displayRectangle );\n      e-&gt;Graphics-&gt;DrawString( &quot;Showing Format1&quot;, this-&gt;Font, Brushes::Red, displayRectangle, format1 );\n      e-&gt;Graphics-&gt;DrawString( &quot;Showing Format2&quot;, this-&gt;Font, Brushes::Red, displayRectangle, format2 );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_DigitSubstitutionLanguage\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_DigitSubstitutionLanguage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DigitSubstitutionLanguage</div>        \r\n          </div>\r\n    \r\n            <p>Gets the language that is used when local digits are substituted for western digits.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int DigitSubstitutionLanguage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A National Language Support (NLS) language identifier that identifies the language that will be used when local digits are substituted for western digits. You can pass the <span class=\"xref\">stem.Globalization.CultureInfo.LCID*</span> property of a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object as the NLS language identifier. For example, suppose you create a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object by passing the string &quot;ar-EG&quot; to a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> constructor. If you pass the <span class=\"xref\">stem.Globalization.CultureInfo.LCID*</span> property of that <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object along with.<a class=\"xref\" href=\"system.drawing.stringdigitsubstitute\" data-linktype=\"relative-path\">StringDigitSubstitute</a> to the <span class=\"xref\">stem.Drawing.StringFormat.SetDigitSubstitution*</span> method, then Arabic-Indic digits will be substituted for western digits at display time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_DigitSubstitutionMethod\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_DigitSubstitutionMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DigitSubstitutionMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method to be used for digit substitution.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.StringDigitSubstitute DigitSubstitutionMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringdigitsubstitute\" data-linktype=\"relative-path\">StringDigitSubstitute</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.stringdigitsubstitute\" data-linktype=\"relative-path\">StringDigitSubstitute</a> enumeration value that specifies how to substitute characters in a string that cannot be displayed because they are not supported by the current font.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_FormatFlags\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_FormatFlags_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FormatFlags</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration that contains formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.StringFormatFlags FormatFlags { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> enumeration that contains formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_GenericDefault\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_GenericDefault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenericDefault</div>        \r\n          </div>\r\n    \r\n            <p>Gets a generic default <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.StringFormat GenericDefault { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a></div>\r\n                  </div>\r\n                  <p>The generic default <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table shows initial property values for a generic default instance of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> class.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_FormatFlags_\" data-linktype=\"relative-path\">FormatFlags</a></td>\n<td>0</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_Alignment_\" data-linktype=\"relative-path\">Alignment</a></td>\n<td><a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_LineAlignment_\" data-linktype=\"relative-path\">LineAlignment</a></td>\n<td><a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_Trimming_\" data-linktype=\"relative-path\">Trimming</a></td>\n<td><a class=\"xref\" href=\"system.drawing.stringtrimming\" data-linktype=\"relative-path\">StringTrimming</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_HotkeyPrefix_\" data-linktype=\"relative-path\">HotkeyPrefix</a></td>\n<td><a class=\"xref\" href=\"system.drawing.text.hotkeyprefix\" data-linktype=\"relative-path\">HotkeyPrefix</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_DigitSubstitutionMethod_\" data-linktype=\"relative-path\">DigitSubstitutionMethod</a></td>\n<td><a class=\"xref\" href=\"system.drawing.stringdigitsubstitute\" data-linktype=\"relative-path\">StringDigitSubstitute</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_DigitSubstitutionLanguage_\" data-linktype=\"relative-path\">DigitSubstitutionLanguage</a></td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p> If you make changes to the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object returned from the GenericDefault property, these changes persist, and future calls to the GenericDefault property reflects these changes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_GenericTypographic\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_GenericTypographic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenericTypographic</div>        \r\n          </div>\r\n    \r\n            <p>Gets a generic typographic <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.StringFormat GenericTypographic { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a></div>\r\n                  </div>\r\n                  <p>A generic typographic <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table shows initial property values for a generic typographic instance of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> class.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_FormatFlags_\" data-linktype=\"relative-path\">FormatFlags</a></td>\n<td>24580 (<a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a>, <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a> and <a class=\"xref\" href=\"system.drawing.stringformatflags\" data-linktype=\"relative-path\">StringFormatFlags</a>.)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_Alignment_\" data-linktype=\"relative-path\">Alignment</a></td>\n<td><a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_LineAlignment_\" data-linktype=\"relative-path\">LineAlignment</a></td>\n<td><a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_Trimming_\" data-linktype=\"relative-path\">Trimming</a></td>\n<td><a class=\"xref\" href=\"system.drawing.stringtrimming\" data-linktype=\"relative-path\">StringTrimming</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_HotkeyPrefix_\" data-linktype=\"relative-path\">HotkeyPrefix</a></td>\n<td><a class=\"xref\" href=\"system.drawing.text.hotkeyprefix\" data-linktype=\"relative-path\">HotkeyPrefix</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_DigitSubstitutionMethod_\" data-linktype=\"relative-path\">DigitSubstitutionMethod</a></td>\n<td><a class=\"xref\" href=\"system.drawing.stringdigitsubstitute\" data-linktype=\"relative-path\">StringDigitSubstitute</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_DigitSubstitutionLanguage_\" data-linktype=\"relative-path\">DigitSubstitutionLanguage</a></td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_HotkeyPrefix\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_HotkeyPrefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HotkeyPrefix</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.drawing.text.hotkeyprefix\" data-linktype=\"relative-path\">HotkeyPrefix</a> object for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Text.HotkeyPrefix HotkeyPrefix { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.text.hotkeyprefix\" data-linktype=\"relative-path\">HotkeyPrefix</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.text.hotkeyprefix\" data-linktype=\"relative-path\">HotkeyPrefix</a> object for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object, the default is <a class=\"xref\" href=\"system.drawing.text.hotkeyprefix\" data-linktype=\"relative-path\">HotkeyPrefix</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a graphical user interface, a hot key is the underlined letter in a word (usually combined with another key, such as the Alt key) that you can press on the keyboard to activate the functionality that the word represents.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to set a keyboard shortcut using the HotkeyPrefix property. It also demonstrates how to use the <a class=\"xref\" href=\"system.drawing.systembrushes#System_Drawing_SystemBrushes_FromSystemColor_\" data-linktype=\"relative-path\">FromSystemColor</a> method. To run this example, paste the code into a form, handle the form&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event and call the following method, passing e as <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Drawing.MiscExamples#2\">    private void ShowHotKey(PaintEventArgs e)\n    {\n\n        // Declare the string with a keyboard shortcut.\n        string text = &quot;&amp;Click Here&quot;;\n\n        // Declare a new StringFormat.\n        StringFormat format = new StringFormat();\n\n        // Set the HotkeyPrefix property.\n        format.HotkeyPrefix = System.Drawing.Text.HotkeyPrefix.Show;\n\n        // Draw the string.\n        Brush theBrush = \n            SystemBrushes.FromSystemColor(SystemColors.Highlight);\n\n        e.Graphics.DrawString(text, this.Font, theBrush, 30, 40, format);\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.MiscExamples#2\">private:\n   void ShowHotKey( PaintEventArgs^ e )\n   {\n      // Declare the string with a keyboard shortcut.\n      String^ text = &quot;&amp;Click Here&quot;;\n\n      // Declare a new StringFormat.\n      StringFormat^ format = gcnew StringFormat;\n\n      // Set the HotkeyPrefix property.\n      format-&gt;HotkeyPrefix = System::Drawing::Text::HotkeyPrefix::Show;\n\n      // Draw the string.\n      Brush^ theBrush = SystemBrushes::FromSystemColor( SystemColors::Highlight );\n      e-&gt;Graphics-&gt;DrawString( text, this-&gt;Font, theBrush, 30, 40, format );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.MiscExamples#2\">    Private Sub ShowHotKey(ByVal e As PaintEventArgs)\n\n        &#39; Declare the string with keyboard shortcut.\n        Dim text As String = &quot;&amp;Click Here&quot;\n\n        &#39; Declare a new StringFormat.\n        Dim format As New StringFormat\n\n        &#39; Set the HotkeyPrefix property.\n        format.HotkeyPrefix = System.Drawing.Text.HotkeyPrefix.Show\n\n        &#39; Draw the string.\n        Dim theBrush As Brush = _\n            SystemBrushes.FromSystemColor(SystemColors.Highlight)\n        e.Graphics.DrawString(text, Me.Font, theBrush, 30, 40, format)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_LineAlignment\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_LineAlignment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LineAlignment</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the vertical alignment of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.StringAlignment LineAlignment { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a> enumeration that represents the vertical line alignment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_Alignment_\" data-linktype=\"relative-path\">Alignment</a> to specify the horizontal alignment of the string.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the LineAlignment and <a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_Alignment_\" data-linktype=\"relative-path\">Alignment</a> properties and the <a class=\"xref\" href=\"system.drawing.stringalignment\" data-linktype=\"relative-path\">StringAlignment</a> enumeration to align strings. This example is designed to be used with Windows Forms. Paste the code into a form and call the <code>ShowLineAndAlignment</code> method when handling the form&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event, passing <code>e</code> as <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Drawing.Misc2#1\">    private void ShowLineAndAlignment(PaintEventArgs e)\n    {\n\n        // Construct a new Rectangle .\n        Rectangle  displayRectangle = \n            new Rectangle (new Point(40, 40), new Size (80, 80));\n\n        // Construct 2 new StringFormat objects\n        StringFormat format1 = new StringFormat(StringFormatFlags.NoClip);\n        StringFormat format2 = new StringFormat(format1);\n\n        // Set the LineAlignment and Alignment properties for\n        // both StringFormat objects to different values.\n        format1.LineAlignment = StringAlignment.Near;\n        format1.Alignment = StringAlignment.Center;\n        format2.LineAlignment = StringAlignment.Center;\n        format2.Alignment = StringAlignment.Far;\n\n        // Draw the bounding rectangle and a string for each\n        // StringFormat object.\n        e.Graphics.DrawRectangle(Pens.Black, displayRectangle);\n        e.Graphics.DrawString(&quot;Showing Format1&quot;, this.Font, \n            Brushes.Red, (RectangleF)displayRectangle, format1);\n        e.Graphics.DrawString(&quot;Showing Format2&quot;, this.Font, \n            Brushes.Red, (RectangleF)displayRectangle, format2);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.Misc2#1\">    Private Sub ShowLineAndAlignment(ByVal e As PaintEventArgs)\n\n        &#39; Construct a new Rectangle.\n        Dim displayRectangle _\n            As New Rectangle(New Point(40, 40), New Size(80, 80))\n\n        &#39; Construct two new StringFormat objects\n        Dim format1 As New StringFormat(StringFormatFlags.NoClip)\n        Dim format2 As New StringFormat(format1)\n\n        &#39; Set the LineAlignment and Alignment properties for\n        &#39; both StringFormat objects to different values.\n        format1.LineAlignment = StringAlignment.Near\n        format1.Alignment = StringAlignment.Center\n        format2.LineAlignment = StringAlignment.Center\n        format2.Alignment = StringAlignment.Far\n\n        &#39; Draw the bounding rectangle and a string for each\n        &#39; StringFormat object.\n        e.Graphics.DrawRectangle(Pens.Black, displayRectangle)\n        e.Graphics.DrawString(&quot;Showing Format1&quot;, Me.Font, Brushes.Red, _\n            RectangleF.op_Implicit(displayRectangle), format1)\n        e.Graphics.DrawString(&quot;Showing Format2&quot;, Me.Font, Brushes.Red, _\n            RectangleF.op_Implicit(displayRectangle), format2)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Misc2#1\">private:\n   void ShowLineAndAlignment( PaintEventArgs^ e )\n   {\n      // Construct a new Rectangle .\n      Rectangle displayRectangle = Rectangle(Point(40,40),System::Drawing::Size( 80, 80 ));\n      \n      // Construct 2 new StringFormat objects\n      StringFormat^ format1 = gcnew StringFormat( StringFormatFlags::NoClip );\n      StringFormat^ format2 = gcnew StringFormat( format1 );\n      \n      // Set the LineAlignment and Alignment properties for\n      // both StringFormat objects to different values.\n      format1-&gt;LineAlignment = StringAlignment::Near;\n      format1-&gt;Alignment = StringAlignment::Center;\n      format2-&gt;LineAlignment = StringAlignment::Center;\n      format2-&gt;Alignment = StringAlignment::Far;\n      \n      // Draw the bounding rectangle and a string for each\n      // StringFormat object.\n      e-&gt;Graphics-&gt;DrawRectangle( Pens::Black, displayRectangle );\n      e-&gt;Graphics-&gt;DrawString( &quot;Showing Format1&quot;, this-&gt;Font, Brushes::Red, displayRectangle, format1 );\n      e-&gt;Graphics-&gt;DrawString( &quot;Showing Format2&quot;, this-&gt;Font, Brushes::Red, displayRectangle, format2 );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_Trimming\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_Trimming_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Trimming</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.drawing.stringtrimming\" data-linktype=\"relative-path\">StringTrimming</a> enumeration for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.StringTrimming Trimming { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringtrimming\" data-linktype=\"relative-path\">StringTrimming</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.stringtrimming\" data-linktype=\"relative-path\">StringTrimming</a> enumeration that indicates how text drawn with this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object is trimmed when it exceeds the edges of the layout rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to set the Trimming property and how to use the <a class=\"xref\" href=\"system.drawing.stringtrimming\" data-linktype=\"relative-path\">StringTrimming</a> enumeration. This example is designed to be used with a Windows Form. Paste this code into a form and call the <code>ShowStringTrimming</code> method when handling the form&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event, passing e as <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Drawing.Misc2#6\">    private void ShowStringTrimming(PaintEventArgs e)\n    {\n\n        StringFormat format1 = new StringFormat();\n        string quote = &quot;Not everything that can be counted counts,&quot; +\n            &quot; and not everything that counts can be counted.&quot;;\n        format1.Trimming = StringTrimming.EllipsisWord;\n        e.Graphics.DrawString(quote, this.Font, Brushes.Black, \n            new RectangleF(10.0F, 10.0F, 90.0F, 50.0F), format1);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.Misc2#6\">    Private Sub ShowStringTrimming(ByVal e As PaintEventArgs)\n\n        Dim format1 As New StringFormat\n        Dim quote As String = &quot;Not everything that can be counted counts,&quot; &amp; _\n            &quot; and not everything that counts can be counted.&quot;\n        format1.Trimming = StringTrimming.EllipsisWord\n        e.Graphics.DrawString(quote, Me.Font, Brushes.Black, _\n            New RectangleF(10.0F, 10.0F, 90.0F, 50.0F), format1)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Misc2#6\">private:\n   void ShowStringTrimming( PaintEventArgs^ e )\n   {\n      StringFormat^ format1 = gcnew StringFormat;\n      String^ quote = &quot;Not everything that can be counted counts,&quot;\n      &quot; and not everything that counts can be counted.&quot;;\n      format1-&gt;Trimming = StringTrimming::EllipsisWord;\n      e-&gt;Graphics-&gt;DrawString( quote, this-&gt;Font, Brushes::Black, RectangleF(10.0F,10.0F,90.0F,50.0F), format1 );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_Clone\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an exact copy of this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object this method creates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_Dispose\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling Dispose allows the resources used by this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object to be reallocated for other purposes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_Finalize\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~StringFormat ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_GetTabStops_System_Single__\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_GetTabStops_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTabStops(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the tab stops for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public float[] GetTabStops (out float firstTabOffset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>firstTabOffset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of spaces between the beginning of a text line and the first tab stop.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>[]</div>\r\n                  </div>\r\n                  <p>An array of distances (in number of spaces) between tab stops.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, which is a parameter of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event handler. The code performs the following actions:  </p>\n<ul>\n<li><p>Sets the tab stops of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a>.  </p>\n</li>\n<li><p>Draws the string and the layout rectangle. Note that the string contains tabs. The tab settings of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> specify the offsets of the tabbed text.  </p>\n</li>\n<li><p>Gets the tab stops and uses or inspects the values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Drawing.ClassicStringFormatExamples#1\">public:\n   void GetSetTabStopsExample1( PaintEventArgs^ e )\n   {\n      Graphics^ g = e-&gt;Graphics;\n\n      // Tools used for drawing, painting.\n      Pen^ redPen = gcnew Pen( Color::FromArgb( 255, 255, 0, 0 ) );\n      SolidBrush^ blueBrush = gcnew SolidBrush( Color::FromArgb( 255, 0, 0, 255 ) );\n\n      // Layout and format for text.\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,12 );\n      StringFormat^ myStringFormat = gcnew StringFormat;\n      Rectangle enclosingRectangle = Rectangle(20,20,500,100);\n      array&lt;Single&gt;^tabStops = {150.0f,100.0f,100.0f};\n\n      // Text with tabbed columns.\n      String^ myString = &quot;Name&nbsp;&nbsp;&nbsp;&nbsp;Tab 1&nbsp;&nbsp;&nbsp;&nbsp;Tab 2&nbsp;&nbsp;&nbsp;&nbsp;Tab 3<br>George Brown&nbsp;&nbsp;&nbsp;&nbsp;One&nbsp;&nbsp;&nbsp;&nbsp;Two&nbsp;&nbsp;&nbsp;&nbsp;Three&quot;;\n\n      // Set the tab stops, paint the text specified by myString, and draw the\n      // rectangle that encloses the text.\n      myStringFormat-&gt;SetTabStops( 0.0f, tabStops );\n      g-&gt;DrawString( myString, myFont, blueBrush, enclosingRectangle, myStringFormat );\n      g-&gt;DrawRectangle( redPen, enclosingRectangle );\n\n      // Get the tab stops.\n      float firstTabOffset;\n      array&lt;Single&gt;^tabStopsObtained = myStringFormat-&gt;GetTabStops( firstTabOffset );\n      for ( int j = 0; j &lt; tabStopsObtained-&gt;Length; j++ )\n      {\n         // Inspect or use the value in tabStopsObtained[j].\n         Console::WriteLine( &quot;<br>  Tab stop {0} = {1}&quot;, j, tabStopsObtained[ j ] );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.ClassicStringFormatExamples#1\">        public void GetSetTabStopsExample1(PaintEventArgs e)\n        {\n            Graphics     g = e.Graphics;\n                     \n            // Tools used for drawing, painting.\n            Pen          redPen = new Pen(Color.FromArgb(255, 255, 0, 0));\n            SolidBrush   blueBrush = new SolidBrush(Color.FromArgb(255, 0, 0, 255));\n                     \n            // Layout and format for text.\n            Font         myFont = new Font(&quot;Times New Roman&quot;, 12);\n            StringFormat myStringFormat = new StringFormat();\n            Rectangle    enclosingRectangle = new Rectangle(20, 20, 500, 100);\n            float[]      tabStops = {150.0f, 100.0f, 100.0f};\n                     \n            // Text with tabbed columns.\n            string       myString =\n                &quot;Name&nbsp;&nbsp;&nbsp;&nbsp;Tab 1&nbsp;&nbsp;&nbsp;&nbsp;Tab 2&nbsp;&nbsp;&nbsp;&nbsp;Tab 3<br>George Brown&nbsp;&nbsp;&nbsp;&nbsp;One&nbsp;&nbsp;&nbsp;&nbsp;Two&nbsp;&nbsp;&nbsp;&nbsp;Three&quot;;\n                     \n            // Set the tab stops, paint the text specified by myString, and draw the\n                     \n            // rectangle that encloses the text.\n            myStringFormat.SetTabStops(0.0f, tabStops);\n            g.DrawString(myString, myFont, blueBrush,\n                enclosingRectangle, myStringFormat);\n            g.DrawRectangle(redPen, enclosingRectangle);\n                     \n            // Get the tab stops.\n            float   firstTabOffset;\n            float[] tabStopsObtained = myStringFormat.GetTabStops(out firstTabOffset);\n            for(int j = 0; j &lt; tabStopsObtained.Length; j++)\n            {\n                     \n                // Inspect or use the value in tabStopsObtained[j].\n                Console.WriteLine(&quot;<br>  Tab stop {0} = {1}&quot;, j, tabStopsObtained[j]);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.ClassicStringFormatExamples#1\">    Public Sub GetSetTabStopsExample1(ByVal e As PaintEventArgs)\n        Dim g As Graphics = e.Graphics\n\n        &#39; Tools used for drawing, painting.\n        Dim redPen As New Pen(Color.FromArgb(255, 255, 0, 0))\n        Dim blueBrush As New SolidBrush(Color.FromArgb(255, 0, 0, 255))\n\n        &#39; Layout and format for text.\n        Dim myFont As New Font(&quot;Times New Roman&quot;, 12)\n        Dim myStringFormat As New StringFormat\n        Dim enclosingRectangle As New Rectangle(20, 20, 500, 100)\n        Dim tabStops As Single() = {150.0F, 100.0F, 100.0F}\n\n        &#39; Text with tabbed columns.\n        Dim myString As String = &quot;Name&quot; &amp; ControlChars.Tab &amp; &quot;Tab 1&quot; _\n        &amp; ControlChars.Tab &amp; &quot;Tab 2&quot; &amp; ControlChars.Tab &amp; &quot;Tab 3&quot; _\n        &amp; ControlChars.Cr &amp; &quot;George Brown&quot; &amp; ControlChars.Tab &amp; &quot;One&quot; _\n        &amp; ControlChars.Tab &amp; &quot;Two&quot; &amp; ControlChars.Tab &amp; &quot;Three&quot;\n\n        &#39; Set the tab stops, paint the text specified by myString,the\n\n        &#39;  and draw rectangle that encloses the text.\n        myStringFormat.SetTabStops(0.0F, tabStops)\n        g.DrawString(myString, myFont, blueBrush, _\n        RectangleF.op_Implicit(enclosingRectangle), myStringFormat)\n        g.DrawRectangle(redPen, enclosingRectangle)\n\n        &#39; Get the tab stops.\n        Dim firstTabOffset As Single\n        Dim tabStopsObtained As Single() = _\n        myStringFormat.GetTabStops(firstTabOffset)\n        Dim j As Integer\n        For j = 0 To tabStopsObtained.Length - 1\n\n            &#39; Inspect or use the value in tabStopsObtained[j].\n            Console.WriteLine(ControlChars.Cr &amp; &quot;  Tab stop {0} = {1}&quot;, _\n            j, tabStopsObtained(j))\n        Next j\n    End Sub\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_SetDigitSubstitution_System_Int32_System_Drawing_StringDigitSubstitute_\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_SetDigitSubstitution_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetDigitSubstitution(Int32,StringDigitSubstitute)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the language and method to be used when local digits are substituted for western digits.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetDigitSubstitution (int language, System.Drawing.StringDigitSubstitute substitute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A National Language Support (NLS) language identifier that identifies the language that will be used when local digits are substituted for western digits. You can pass the <span class=\"xref\">stem.Globalization.CultureInfo.LCID*</span> property of a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object as the NLS language identifier. For example, suppose you create a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object by passing the string &quot;ar-EG&quot; to a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> constructor. If you pass the <span class=\"xref\">stem.Globalization.CultureInfo.LCID*</span> property of that <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object along with <a class=\"xref\" href=\"system.drawing.stringdigitsubstitute\" data-linktype=\"relative-path\">StringDigitSubstitute</a> to the SetDigitSubstitution method, then Arabic-Indic digits will be substituted for western digits at display time.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>substitute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.stringdigitsubstitute\" data-linktype=\"relative-path\">StringDigitSubstitute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An element of the <a class=\"xref\" href=\"system.drawing.stringdigitsubstitute\" data-linktype=\"relative-path\">StringDigitSubstitute</a> enumeration that specifies how digits are displayed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, which is a parameter of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event handler. The code performs the following actions:  </p>\n<ul>\n<li><p>Sets, for the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a>, the language to be used and the substitution method to be used.  </p>\n</li>\n<li><p>Draws the string.  </p>\n</li>\n<li><p>Repeats the above two steps for two different languages (Arabic and Thai).  </p>\n<p>The National substitution method and Traditional substitution method are demonstrated for each of the two languages. The National method displays digits according to the official national language of the user&#39;s locale. The Traditional method displays digits according to the user&#39;s native script or language, which may be different from the official national language.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Drawing.ClassicStringFormatExamples#2\">public:\n   void SetDigitSubExample( PaintEventArgs^ e )\n   {\n      Graphics^ g = e-&gt;Graphics;\n      SolidBrush^ blueBrush = gcnew SolidBrush( Color::FromArgb( 255, 0, 0, 255 ) );\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Courier New&quot;,12 );\n      StringFormat^ myStringFormat = gcnew StringFormat;\n      String^ myString = &quot;0 1 2 3 4 5 6 7 8 9&quot;;\n\n      // Arabic (0x0C01) digits.\n      // Use National substitution method.\n      myStringFormat-&gt;SetDigitSubstitution( 0x0C01, StringDigitSubstitute::National );\n      g-&gt;DrawString( String::Format( &quot;Arabic:<br>Method of substitution = National:     {0}&quot;, myString ), myFont, blueBrush, PointF(10.0f,20.0f), myStringFormat );\n\n      // Use Traditional substitution method.\n      myStringFormat-&gt;SetDigitSubstitution( 0x0C01, StringDigitSubstitute::Traditional );\n      g-&gt;DrawString( String::Format( &quot;Method of substitution = Traditional:  {0}&quot;, myString ), myFont, blueBrush, PointF(10.0f,55.0f), myStringFormat );\n\n      // Thai (0x041E) digits.\n      // Use National substitution method.\n      myStringFormat-&gt;SetDigitSubstitution( 0x041E, StringDigitSubstitute::National );\n      g-&gt;DrawString( String::Format( &quot;Thai:<br>Method of substitution = National:     {0}&quot;, myString ), myFont, blueBrush, PointF(10.0f,85.0f), myStringFormat );\n\n      // Use Traditional substitution method.\n      myStringFormat-&gt;SetDigitSubstitution( 0x041E, StringDigitSubstitute::Traditional );\n      g-&gt;DrawString( String::Format( &quot;Method of substitution = Traditional:  {0}&quot;, myString ), myFont, blueBrush, PointF(10.0f,120.0f), myStringFormat );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.ClassicStringFormatExamples#2\">        public void SetDigitSubExample(PaintEventArgs e)\n        {\n            Graphics     g = e.Graphics;\n            SolidBrush   blueBrush = new SolidBrush(Color.FromArgb(255, 0, 0, 255));\n            Font         myFont = new Font(&quot;Courier New&quot;, 12);\n            StringFormat myStringFormat = new StringFormat();\n            string       myString = &quot;0 1 2 3 4 5 6 7 8 9&quot;;\n                     \n               \n            // Arabic (0x0C01) digits.\n                     \n            // Use National substitution method.\n            myStringFormat.SetDigitSubstitution(0x0C01,\n                StringDigitSubstitute.National);\n            g.DrawString(\n                &quot;Arabic:<br>Method of substitution = National:     &quot; + myString,\n                myFont, blueBrush, new PointF(10.0f, 20.0f), myStringFormat);\n                     \n            // Use Traditional substitution method.\n            myStringFormat.SetDigitSubstitution(0x0C01,\n                StringDigitSubstitute.Traditional);\n            g.DrawString(\n                &quot;Method of substitution = Traditional:  &quot; + myString,\n                myFont, blueBrush, new PointF(10.0f, 55.0f), myStringFormat);\n                     \n            // Thai (0x041E) digits.\n           \n            // Use National substitution method.\n            myStringFormat.SetDigitSubstitution(0x041E,\n                StringDigitSubstitute.National);\n            g.DrawString(\n                &quot;Thai:<br>Method of substitution = National:     &quot; + myString,\n                myFont, blueBrush, new PointF(10.0f, 85.0f), myStringFormat);\n                     \n            // Use Traditional substitution method.\n            myStringFormat.SetDigitSubstitution(0x041E,\n                StringDigitSubstitute.Traditional);\n            g.DrawString(\n                &quot;Method of substitution = Traditional:  &quot; + myString,\n                myFont, blueBrush, new PointF(10.0f, 120.0f), myStringFormat);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.ClassicStringFormatExamples#2\">    Public Sub SetDigitSubExample(ByVal e As PaintEventArgs)\n        Dim g As Graphics = e.Graphics\n        Dim blueBrush As New SolidBrush(Color.FromArgb(255, 0, 0, 255))\n        Dim myFont As New Font(&quot;Courier New&quot;, 12)\n        Dim myStringFormat As New StringFormat\n        Dim myString As String = &quot;0 1 2 3 4 5 6 7 8 9&quot;\n\n        &#39; Arabic (0x0C01) digits.\n\n        &#39; Use National substitution method.\n        myStringFormat.SetDigitSubstitution(&amp;HC01, _\n        StringDigitSubstitute.National)\n        g.DrawString(&quot;Arabic:&quot; &amp; ControlChars.Cr &amp; _\n        &quot;Method of substitution = National:     &quot; &amp; myString, _\n        myFont, blueBrush, New PointF(10.0F, 20.0F), myStringFormat)\n\n        &#39; Use Traditional substitution method.\n        myStringFormat.SetDigitSubstitution(&amp;HC01, _\n        StringDigitSubstitute.Traditional)\n        g.DrawString(&quot;Method of substitution = Traditional:  &quot; _\n        &amp; myString, myFont, blueBrush, New PointF(10.0F, 55.0F), _\n        myStringFormat)\n\n        &#39; Thai (0x041E) digits.\n\n        &#39; Use National substitution method.\n        myStringFormat.SetDigitSubstitution(&amp;H41E, _\n        StringDigitSubstitute.National)\n        g.DrawString(&quot;Thai:&quot; &amp; ControlChars.Cr &amp; _\n        &quot;Method of substitution = National:     &quot; &amp; myString, _\n        myFont, blueBrush, New PointF(10.0F, 85.0F), myStringFormat)\n\n        &#39; Use Traditional substitution method.\n        myStringFormat.SetDigitSubstitution(&amp;H41E, _\n        StringDigitSubstitute.Traditional)\n        g.DrawString(&quot;Method of substitution = Traditional:  &quot; _\n        &amp; myString, myFont, blueBrush, New PointF(10.0F, 120.0F), _\n        myStringFormat)\n    End Sub\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_SetMeasurableCharacterRanges_System_Drawing_CharacterRange___\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_SetMeasurableCharacterRanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetMeasurableCharacterRanges(CharacterRange[])</div>        \r\n          </div>\r\n    \r\n            <p>Specifies an array of <a class=\"xref\" href=\"system.drawing.characterrange\" data-linktype=\"relative-path\">CharacterRange</a> structures that represent the ranges of characters measured by a call to the <span class=\"xref\">stem.Drawing.Graphics.MeasureCharacterRanges*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetMeasurableCharacterRanges (System.Drawing.CharacterRange[] ranges);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ranges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.characterrange\" data-linktype=\"relative-path\">CharacterRange</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.drawing.characterrange\" data-linktype=\"relative-path\">CharacterRange</a> structures that specifies the ranges of characters measured by a call to the <span class=\"xref\">stem.Drawing.Graphics.MeasureCharacterRanges*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>More than 32 character ranges are set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting more than 32 character ranges is not allowed and will cause an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">System.OverflowException</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, which is a parameter of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event handler. The code performs the following actions:  </p>\n<ul>\n<li><p>Sets the character ranges of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a>.  </p>\n</li>\n<li><p>Measures the character ranges for a given string and layout rectangle.  </p>\n</li>\n<li><p>Draws the string and layout rectangle.  </p>\n</li>\n<li><p>Paints the regions. Each <a class=\"xref\" href=\"system.drawing.region\" data-linktype=\"relative-path\">Region</a> specifies an area that is occupied by a range of characters. The values in the regions are set when the character ranges are measured by the <a class=\"xref\" href=\"system.drawing.graphics#System_Drawing_Graphics_MeasureCharacterRanges_\" data-linktype=\"relative-path\">MeasureCharacterRanges</a> method.  </p>\n</li>\n<li><p>Repeats the first four steps, but includes trailing spaces in the measurement of each character range.  </p>\n</li>\n<li><p>Clears the format flags of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> so that trailing spaces are not included in the measurement of each character range.  </p>\n</li>\n<li><p>Repeats the first four steps, but uses a different layout rectangle just to demonstrate that the layout rectangle affects the measurements of the character ranges. The size of the font will also affect the measurement.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Drawing.ClassicStringFormatExamples#3\">   void SetMeasCharRangesExample( PaintEventArgs^ e )\n   {\n      Graphics^ g = e-&gt;Graphics;\n      SolidBrush^ redBrush = gcnew SolidBrush( Color::FromArgb( 50, 255, 0, 0 ) );\n\n      // Layout rectangles, font, and string format used for displaying string.\n      Rectangle layoutRectA = Rectangle(20,20,165,80);\n      Rectangle layoutRectB = Rectangle(20,110,165,80);\n      Rectangle layoutRectC = Rectangle(20,200,240,80);\n      System::Drawing::Font^ tnrFont = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,16 );\n      StringFormat^ strFormat = gcnew StringFormat;\n\n      // Ranges of character positions within a string.\n      array&lt;CharacterRange&gt;^ charRanges = {CharacterRange(3,5),CharacterRange(15,2),CharacterRange(30,15)};\n\n      // Each region specifies the area occupied by the characters within a\n      // range of positions. the values are obtained by using a method that\n      // measures the character ranges.\n      array&lt;System::Drawing::Region^&gt;^charRegions = gcnew array&lt;System::Drawing::Region^&gt;(charRanges-&gt;Length);\n\n      // String to be displayed.\n      String^ str = &quot;The quick, brown fox easily jumps over the lazy dog.&quot;;\n\n      // Set the char ranges for the string format.\n      strFormat-&gt;SetMeasurableCharacterRanges( charRanges );\n\n      // loop counter (unsigned 8-bit integer)\n      Byte i;\n\n      // Measure the char ranges for a given string and layout rectangle. Each\n      // area occupied by the characters in a range is stored as a region. Then\n      // draw the string and layout rectangle, and paint the regions.\n      charRegions = g-&gt;MeasureCharacterRanges( str, tnrFont, layoutRectA, strFormat );\n      g-&gt;DrawString( str, tnrFont, Brushes::Blue, layoutRectA, strFormat );\n      g-&gt;DrawRectangle( Pens::Black, layoutRectA );\n\n      // Paint the regions.\n      for ( i = 0; i &lt; charRegions-&gt;Length; i++ )\n         g-&gt;FillRegion( redBrush, charRegions[ i ] );\n\n      // Repeat the above steps, but include trailing spaces in the char\n      // range measurement by setting the appropriate string format flag.\n      strFormat-&gt;FormatFlags = StringFormatFlags::MeasureTrailingSpaces;\n      charRegions = g-&gt;MeasureCharacterRanges( str, tnrFont, layoutRectB, strFormat );\n      g-&gt;DrawString( str, tnrFont, Brushes::Blue, layoutRectB, strFormat );\n      g-&gt;DrawRectangle( Pens::Black, layoutRectB );\n      for ( i = 0; i &lt; charRegions-&gt;Length; i++ )\n         g-&gt;FillRegion( redBrush, charRegions[ i ] );\n\n      // Clear all the format flags.\n      strFormat-&gt;FormatFlags = StringFormatFlags(0);\n\n      // Repeat the steps, but use a different layout rectangle. the dimensions\n      // of the layout rectangle and the size of the font both affect the\n      // character range measurement.\n      charRegions = g-&gt;MeasureCharacterRanges( str, tnrFont, layoutRectC, strFormat );\n      g-&gt;DrawString( str, tnrFont, Brushes::Blue, layoutRectC, strFormat );\n      g-&gt;DrawRectangle( Pens::Black, layoutRectC );\n\n      // Paint the regions.\n      for ( i = 0; i &lt; charRegions-&gt;Length; i++ )\n         g-&gt;FillRegion( redBrush, charRegions[ i ] );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.ClassicStringFormatExamples#3\">        public void SetMeasCharRangesExample(PaintEventArgs e)\n        {\n            Graphics     g = e.Graphics;\n            SolidBrush   redBrush = new SolidBrush(Color.FromArgb(50, 255, 0, 0));\n                     \n            // Layout rectangles, font, and string format used for displaying string.\n            Rectangle    layoutRectA = new Rectangle(20, 20, 165, 80);\n            Rectangle    layoutRectB = new Rectangle(20, 110, 165, 80);\n            Rectangle    layoutRectC = new Rectangle(20, 200, 240, 80);\n            Font         tnrFont = new Font(&quot;Times New Roman&quot;, 16);\n            StringFormat strFormat = new StringFormat();\n                     \n            // Ranges of character positions within a string.\n            CharacterRange[] charRanges = { new CharacterRange(3, 5),\n                new CharacterRange(15, 2), new CharacterRange(30, 15)};\n                     \n            // Each region specifies the area occupied by the characters within a\n            // range of positions. the values are obtained by using a method that\n            // measures the character ranges.\n            Region[]     charRegions = new Region[charRanges.Length];\n                     \n            // String to be displayed.\n            string  str =\n                &quot;The quick, brown fox easily jumps over the lazy dog.&quot;;\n                     \n            // Set the char ranges for the string format.\n            strFormat.SetMeasurableCharacterRanges(charRanges);\n           \n            // loop counter (unsigned 8-bit integer)\n            byte  i;    \n           \n            // Measure the char ranges for a given string and layout rectangle. Each\n            // area occupied by the characters in a range is stored as a region. Then\n            // draw the string and layout rectangle, and paint the regions.\n            charRegions = g.MeasureCharacterRanges(str, tnrFont,\n                layoutRectA, strFormat);\n           g.DrawString(str, tnrFont, Brushes.Blue, layoutRectA, strFormat);\n            g.DrawRectangle(Pens.Black, layoutRectA);\n             \n            // Paint the regions.\n            for (i = 0; i &lt; charRegions.Length; i++)\n                g.FillRegion(redBrush, charRegions[i]);   \n           \n                     \n            // Repeat the above steps, but include trailing spaces in the char\n            // range measurement by setting the appropriate string format flag.\n            strFormat.FormatFlags = StringFormatFlags.MeasureTrailingSpaces;\n            charRegions = g.MeasureCharacterRanges(str, tnrFont,\n                layoutRectB, strFormat);\n            g.DrawString(str, tnrFont, Brushes.Blue, layoutRectB, strFormat);\n            g.DrawRectangle(Pens.Black, layoutRectB);\n             \n            \n            for (i = 0; i &lt; charRegions.Length; i++)\n                g.FillRegion(redBrush, charRegions[i]);   \n           \n            // Clear all the format flags.\n            strFormat.FormatFlags = 0;                   \n         \n            // Repeat the steps, but use a different layout rectangle. the dimensions\n            // of the layout rectangle and the size of the font both affect the\n            // character range measurement.\n            charRegions = g.MeasureCharacterRanges(str, tnrFont,\n                layoutRectC, strFormat);\n            g.DrawString(str, tnrFont, Brushes.Blue, layoutRectC, strFormat);\n            g.DrawRectangle(Pens.Black, layoutRectC);\n            \n            // Paint the regions.\n            for (i = 0; i &lt; charRegions.Length; i++)\n                g.FillRegion(redBrush, charRegions[i]);   \n            \n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.ClassicStringFormatExamples#3\">    Public Sub SetMeasCharRangesExample(ByVal e As PaintEventArgs)\n        Dim g As Graphics = e.Graphics\n        Dim redBrush As New SolidBrush(Color.FromArgb(50, 255, 0, 0))\n\n        &#39; Layout rectangles, font, and string format used for\n        &#39; displaying string.\n        Dim layoutRectA As New Rectangle(20, 20, 165, 80)\n        Dim layoutRectB As New Rectangle(20, 110, 165, 80)\n        Dim layoutRectC As New Rectangle(20, 200, 240, 80)\n        Dim tnrFont As New Font(&quot;Times New Roman&quot;, 16)\n        Dim strFormat As New StringFormat\n\n        &#39; Ranges of character positions within a string.\n        Dim charRanges As CharacterRange() = {New CharacterRange(3, 5), _\n        New CharacterRange(15, 2), New CharacterRange(30, 15)}\n\n        &#39; Each region specifies the area occupied by the characters within\n        &#39; a range of positions. The values are obtained by using a method\n        &#39; that measures the character ranges.\n        Dim charRegions(charRanges.Length) As [Region]\n\n        &#39; String to be displayed.\n        Dim str As String = _\n        &quot;The quick, brown fox easily jumps over the lazy dog.&quot;\n\n        &#39; Set the char ranges for the string format.\n        strFormat.SetMeasurableCharacterRanges(charRanges)\n\n        &#39; Loop counter (unsigned 8-bit integer).\n        Dim i As Byte\n\n\n        &#39; Measure the char ranges for a given string and layout rectangle.\n        &#39; Each area occupied by the characters in a range is stored as a\n        &#39; region. then draw the string and layout rectangle and paint the\n        &#39; regions.\n        charRegions = g.MeasureCharacterRanges(str, tnrFont, _\n        RectangleF.op_Implicit(layoutRectA), strFormat)\n        g.DrawString(str, tnrFont, Brushes.Blue, _\n        RectangleF.op_Implicit(layoutRectA), strFormat)\n        g.DrawRectangle(Pens.Black, layoutRectA)\n\n        &#39; Paint the regions.\n        For i = 0 To charRegions.Length - 1\n            g.FillRegion(redBrush, charRegions(i))\n        Next i\n\n        &#39; Repeat the above steps, but include trailing spaces in the char\n        &#39; range measurement by setting the appropriate string format flag.\n        strFormat.FormatFlags = StringFormatFlags.MeasureTrailingSpaces\n        charRegions = g.MeasureCharacterRanges(str, tnrFont, _\n        RectangleF.op_Implicit(layoutRectB), strFormat)\n        g.DrawString(str, tnrFont, Brushes.Blue, _\n        RectangleF.op_Implicit(layoutRectB), strFormat)\n        g.DrawRectangle(Pens.Black, layoutRectB)\n\n        &#39; Paint the regions.\n        For i = 0 To charRegions.Length - 1\n            g.FillRegion(redBrush, charRegions(i))\n        Next i\n\n        &#39; Clear all the format flags.\n        strFormat.FormatFlags = 0\n\n        &#39; Repeat the steps, but use a different layout rectangle. The\n        &#39; dimensions of the layout rectangle and the size of the font both\n        &#39; affect the character range measurement.\n        charRegions = g.MeasureCharacterRanges(str, tnrFont, _\n        RectangleF.op_Implicit(layoutRectC), strFormat)\n        g.DrawString(str, tnrFont, Brushes.Blue, _\n        RectangleF.op_Implicit(layoutRectC), strFormat)\n        g.DrawRectangle(Pens.Black, layoutRectC)\n\n        &#39; Paint the regions.\n        For i = 0 To charRegions.Length - 1\n            g.FillRegion(redBrush, charRegions(i))\n        Next i\n    End Sub\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_SetTabStops_System_Single_System_Single___\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_SetTabStops_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetTabStops(Single,Single[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets tab stops for this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetTabStops (float firstTabOffset, float[] tabStops);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>firstTabOffset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of spaces between the beginning of a line of text and the first tab stop.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tabStops</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of distances between tab stops in the units specified by the <span class=\"xref\">stem.Drawing.Graphics.PageUnit*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each tab-stop offset in the <code>tabStops</code> array, except the first one, is relative to the previous one. The first tab-stop offset is relative to the initial offset position specified by <code>firstTabOffset</code>. For example, if the initial offset position is 8 and the first tab-stop offset is 50, then the first tab stop is at position 58. If the initial offset position is zero, then the first tab-stop offset is relative to position 0, the string origin.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, which is a parameter of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event handler. The code performs the following actions:  </p>\n<ul>\n<li><p>Sets the tab stops of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a>.  </p>\n</li>\n<li><p>Draws the string and the layout rectangle. Note that the string contains tabs. The tab settings of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> specify the offsets of the tabbed text.  </p>\n</li>\n<li><p>Gets the tab stops and uses or inspects the values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Drawing.ClassicStringFormatExamples#4\">   void GetSetTabStopsExample2( PaintEventArgs^ e )\n   {\n      Graphics^ g = e-&gt;Graphics;\n\n      // Tools used for drawing, painting.\n      Pen^ redPen = gcnew Pen( Color::FromArgb( 255, 255, 0, 0 ) );\n      SolidBrush^ blueBrush = gcnew SolidBrush( Color::FromArgb( 255, 0, 0, 255 ) );\n\n      // Layout and format for text.\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,12 );\n      StringFormat^ myStringFormat = gcnew StringFormat;\n      Rectangle enclosingRectangle = Rectangle(20,20,500,100);\n      array&lt;Single&gt;^tabStops = {150.0f,100.0f,100.0f};\n\n      // Text with tabbed columns.\n      String^ myString = &quot;Name&nbsp;&nbsp;&nbsp;&nbsp;Tab 1&nbsp;&nbsp;&nbsp;&nbsp;Tab 2&nbsp;&nbsp;&nbsp;&nbsp;Tab 3<br>George Brown&nbsp;&nbsp;&nbsp;&nbsp;One&nbsp;&nbsp;&nbsp;&nbsp;Two&nbsp;&nbsp;&nbsp;&nbsp;Three&quot;;\n\n      // Set the tab stops, paint the text specified by myString, draw the\n      // rectangle that encloses the text.\n      myStringFormat-&gt;SetTabStops( 0.0f, tabStops );\n      g-&gt;DrawString( myString, myFont, blueBrush, enclosingRectangle, myStringFormat );\n      g-&gt;DrawRectangle( redPen, enclosingRectangle );\n\n      // Get the tab stops.\n      float firstTabOffset;\n      array&lt;Single&gt;^tabStopsObtained = myStringFormat-&gt;GetTabStops( firstTabOffset );\n      for ( int j = 0; j &lt; tabStopsObtained-&gt;Length; j++ )\n      {\n         // Inspect or use the value in tabStopsObtained[j].\n         Console::WriteLine( &quot;<br>  Tab stop {0} = {1}&quot;, j, tabStopsObtained[ j ] );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.ClassicStringFormatExamples#4\">        public void GetSetTabStopsExample2(PaintEventArgs e)\n        {\n            Graphics     g = e.Graphics;\n                     \n            // Tools used for drawing, painting.\n            Pen          redPen = new Pen(Color.FromArgb(255, 255, 0, 0));\n            SolidBrush   blueBrush = new SolidBrush(Color.FromArgb(255, 0, 0, 255));\n                     \n            // Layout and format for text.\n            Font         myFont = new Font(&quot;Times New Roman&quot;, 12);\n            StringFormat myStringFormat = new StringFormat();\n            Rectangle    enclosingRectangle = new Rectangle(20, 20, 500, 100);\n            float[]      tabStops = {150.0f, 100.0f, 100.0f};\n                     \n            // Text with tabbed columns.\n            string       myString =\n                &quot;Name&nbsp;&nbsp;&nbsp;&nbsp;Tab 1&nbsp;&nbsp;&nbsp;&nbsp;Tab 2&nbsp;&nbsp;&nbsp;&nbsp;Tab 3<br>George Brown&nbsp;&nbsp;&nbsp;&nbsp;One&nbsp;&nbsp;&nbsp;&nbsp;Two&nbsp;&nbsp;&nbsp;&nbsp;Three&quot;;\n                     \n            // Set the tab stops, paint the text specified by myString, draw the\n            // rectangle that encloses the text.\n            myStringFormat.SetTabStops(0.0f, tabStops);\n            g.DrawString(myString, myFont, blueBrush,\n                enclosingRectangle, myStringFormat);\n            g.DrawRectangle(redPen, enclosingRectangle);\n                     \n            // Get the tab stops.\n            float   firstTabOffset;\n            float[] tabStopsObtained = myStringFormat.GetTabStops(out firstTabOffset);\n            for(int j = 0; j &lt; tabStopsObtained.Length; j++)\n            {\n                     \n                // Inspect or use the value in tabStopsObtained[j].\n                Console.WriteLine(&quot;<br>  Tab stop {0} = {1}&quot;, j, tabStopsObtained[j]);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.ClassicStringFormatExamples#4\">    Public Sub GetSetTabStopsExample2(ByVal e As PaintEventArgs)\n        Dim g As Graphics = e.Graphics\n\n        &#39; Tools used for drawing, painting.\n        Dim redPen As New Pen(Color.FromArgb(255, 255, 0, 0))\n        Dim blueBrush As New SolidBrush(Color.FromArgb(255, 0, 0, 255))\n\n        &#39; Layout and format for text.\n        Dim myFont As New Font(&quot;Times New Roman&quot;, 12)\n        Dim myStringFormat As New StringFormat\n        Dim enclosingRectangle As New Rectangle(20, 20, 500, 100)\n        Dim tabStops As Single() = {150.0F, 100.0F, 100.0F}\n\n        &#39; Text with tabbed columns.\n        Dim myString As String = &quot;Name&quot; &amp; ControlChars.Tab &amp; &quot;Tab 1&quot; _\n        &amp; ControlChars.Tab &amp; &quot;Tab 2&quot; &amp; ControlChars.Tab &amp; &quot;Tab 3&quot; _\n        &amp; ControlChars.Cr &amp; &quot;George Brown&quot; &amp; ControlChars.Tab &amp; &quot;One&quot; _\n        &amp; ControlChars.Tab &amp; &quot;Two&quot; &amp; ControlChars.Tab &amp; &quot;Three&quot;\n\n        &#39; Set the tab stops, paint the text specified by myString,\n        &#39; and draw rectangle that encloses the text.\n        myStringFormat.SetTabStops(0.0F, tabStops)\n        g.DrawString(myString, myFont, blueBrush, _\n        RectangleF.op_Implicit(enclosingRectangle), myStringFormat)\n        g.DrawRectangle(redPen, enclosingRectangle)\n\n        &#39; Get the tab stops.\n        Dim firstTabOffset As Single\n        Dim tabStopsObtained As Single() = _\n        myStringFormat.GetTabStops(firstTabOffset)\n        Dim j As Integer\n        For j = 0 To tabStopsObtained.Length - 1\n\n            &#39; Inspect or use the value in tabStopsObtained[j].\n            Console.WriteLine(ControlChars.Cr &amp; &quot;  Tab stop {0} = {1}&quot;, _\n            j, tabStopsObtained(j))\n        Next j\n    End Sub\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_StringFormat_ToString\">\r\n    \r\n            <a id=\"System_Drawing_StringFormat_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object to a human-readable string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representation of this <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only the value of the <a class=\"xref\" href=\"system.drawing.stringformat#System_Drawing_StringFormat_FormatFlags_\" data-linktype=\"relative-path\">FormatFlags</a> property is converted.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, which is a parameter of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event handler. The code performs the following actions:  </p>\n<ul>\n<li><p>Converts a <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object to a string.  </p>\n</li>\n<li><p>Draws the string.  </p>\n</li>\n<li><p>Changes some properties in the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object.  </p>\n</li>\n<li><p>Draws the string. The string will be different because the properties of the <a class=\"xref\" href=\"system.drawing.stringformat\" data-linktype=\"relative-path\">StringFormat</a> object have changed.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Drawing.ClassicStringFormatExamples#5\">   void ToStringExample( PaintEventArgs^ e )\n   {\n      Graphics^ g = e-&gt;Graphics;\n      SolidBrush^ blueBrush = gcnew SolidBrush( Color::FromArgb( 255, 0, 0, 255 ) );\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,14 );\n      StringFormat^ myStringFormat = gcnew StringFormat;\n\n      // String variable to hold the values of the StringFormat object.\n      String^ strFmtString;\n\n      // Convert the string format object to a string (only certain information\n      // in the object is converted) and display the string.\n      strFmtString = myStringFormat-&gt;ToString();\n      g-&gt;DrawString( String::Format( &quot;Before changing properties:   {0}&quot;, myStringFormat ), myFont, blueBrush, 20, 40 );\n\n      // Change some properties of the string format\n      myStringFormat-&gt;Trimming = StringTrimming::None;\n      myStringFormat-&gt;FormatFlags = (StringFormatFlags)(StringFormatFlags::NoWrap | StringFormatFlags::NoClip);\n\n      // Convert the string format object to a string and display the string.\n      // The string will be different because the properties of the string\n      // format have changed.\n      strFmtString = myStringFormat-&gt;ToString();\n      g-&gt;DrawString( String::Format( &quot;After changing properties:   {0}&quot;, myStringFormat ), myFont, blueBrush, 20, 70 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.ClassicStringFormatExamples#5\">        public void ToStringExample(PaintEventArgs e)\n        {\n            Graphics     g = e.Graphics;\n            SolidBrush   blueBrush = new SolidBrush(Color.FromArgb(255, 0, 0, 255));\n            Font         myFont = new Font(&quot;Times New Roman&quot;, 14);\n            StringFormat myStringFormat = new StringFormat();\n                     \n            // String variable to hold the values of the StringFormat object.\n            string    strFmtString;\n                     \n            // Convert the string format object to a string (only certain information\n            // in the object is converted) and display the string.\n            strFmtString = myStringFormat.ToString();\n            g.DrawString(&quot;Before changing properties:   &quot; + myStringFormat,\n                myFont, blueBrush, 20, 40);\n                     \n            // Change some properties of the string format\n            myStringFormat.Trimming = StringTrimming.None;\n            myStringFormat.FormatFlags =   StringFormatFlags.NoWrap\n                | StringFormatFlags.NoClip;\n                     \n            // Convert the string format object to a string and display the string.\n            // The string will be different because the properties of the string\n            // format have changed.\n            strFmtString = myStringFormat.ToString();\n            g.DrawString(&quot;After changing properties:   &quot; + myStringFormat,\n                myFont, blueBrush, 20, 70);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Drawing.ClassicStringFormatExamples#5\">    Public Sub ToStringExample(ByVal e As PaintEventArgs)\n        Dim g As Graphics = e.Graphics\n        Dim blueBrush As New SolidBrush(Color.FromArgb(255, 0, 0, 255))\n        Dim myFont As New Font(&quot;Times New Roman&quot;, 14)\n        Dim myStringFormat As New StringFormat\n\n        &#39; String variable to hold the values of the StringFormat object.\n        Dim strFmtString As String\n\n        &#39; Convert the string format object to a string (only certain\n        &#39; information in the object is converted) and display the string.\n        strFmtString = myStringFormat.ToString()\n        g.DrawString(&quot;Before changing properties:   &quot;, myFont, blueBrush, _\n        20, 40, myStringFormat)\n\n        &#39; Change some properties of the string format.\n        myStringFormat.Trimming = StringTrimming.None\n        myStringFormat.FormatFlags = StringFormatFlags.NoWrap Or _\n        StringFormatFlags.NoClip\n\n        &#39; Convert the string format object to a string and display the\n        &#39; string. The string will be different because the properties of\n        &#39; the string format have changed.\n        strFmtString = myStringFormat.ToString()\n        g.DrawString(&quot;After changing properties:   &quot;, myFont, blueBrush, _\n        20, 70, myStringFormat)\n    End Sub\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Drawing.StringFormat.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Drawing.StringFormat.yml\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat..ctor\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.Alignment\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.Clone\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.DigitSubstitutionLanguage\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.DigitSubstitutionMethod\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.FormatFlags\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.GenericDefault\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.GenericTypographic\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.GetTabStops\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.HotkeyPrefix\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.LineAlignment\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.SetDigitSubstitution\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.SetMeasurableCharacterRanges\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.SetTabStops\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.ToString\">\r\n<meta name=\"APIName\" content=\"System.Drawing.StringFormat.Trimming\">\r\n<meta name=\"APILocation\" content=\"System.Drawing.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e3668929-1d29-eed7-76c0-291487524830\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features. This clas…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Drawing/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Drawing.StringFormat\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Drawing.StringFormat.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Drawing.StringFormat.yml","open_to_public_contributors":true,"api_name":["System.Drawing.StringFormat","System.Drawing.StringFormat..ctor","System.Drawing.StringFormat.Alignment","System.Drawing.StringFormat.Clone","System.Drawing.StringFormat.DigitSubstitutionLanguage","System.Drawing.StringFormat.DigitSubstitutionMethod","System.Drawing.StringFormat.Dispose","System.Drawing.StringFormat.Finalize","System.Drawing.StringFormat.FormatFlags","System.Drawing.StringFormat.GenericDefault","System.Drawing.StringFormat.GenericTypographic","System.Drawing.StringFormat.GetTabStops","System.Drawing.StringFormat.HotkeyPrefix","System.Drawing.StringFormat.LineAlignment","System.Drawing.StringFormat.SetDigitSubstitution","System.Drawing.StringFormat.SetMeasurableCharacterRanges","System.Drawing.StringFormat.SetTabStops","System.Drawing.StringFormat.ToString","System.Drawing.StringFormat.Trimming"],"api_location":["System.Drawing.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Drawing.StringFormat","System::Drawing::StringFormat","System.Drawing.StringFormat.#ctor","System::Drawing::StringFormat::#ctor","System.Drawing.StringFormat.Alignment","System::Drawing::StringFormat::Alignment","System.Drawing.StringFormat.Clone","System::Drawing::StringFormat::Clone","System.Drawing.StringFormat.DigitSubstitutionLanguage","System::Drawing::StringFormat::DigitSubstitutionLanguage","System.Drawing.StringFormat.DigitSubstitutionMethod","System::Drawing::StringFormat::DigitSubstitutionMethod","System.Drawing.StringFormat.Dispose","System::Drawing::StringFormat::Dispose","System.Drawing.StringFormat.Finalize","System::Drawing::StringFormat::Finalize","System.Drawing.StringFormat.FormatFlags","System::Drawing::StringFormat::FormatFlags","System.Drawing.StringFormat.GenericDefault","System::Drawing::StringFormat::GenericDefault","System.Drawing.StringFormat.GenericTypographic","System::Drawing::StringFormat::GenericTypographic","System.Drawing.StringFormat.GetTabStops","System::Drawing::StringFormat::GetTabStops","System.Drawing.StringFormat.HotkeyPrefix","System::Drawing::StringFormat::HotkeyPrefix","System.Drawing.StringFormat.LineAlignment","System::Drawing::StringFormat::LineAlignment","System.Drawing.StringFormat.SetDigitSubstitution","System::Drawing::StringFormat::SetDigitSubstitution","System.Drawing.StringFormat.SetMeasurableCharacterRanges","System::Drawing::StringFormat::SetMeasurableCharacterRanges","System.Drawing.StringFormat.SetTabStops","System::Drawing::StringFormat::SetTabStops","System.Drawing.StringFormat.ToString","System::Drawing::StringFormat::ToString","System.Drawing.StringFormat.Trimming","System::Drawing::StringFormat::Trimming"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e3668929-1d29-eed7-76c0-291487524830","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Drawing/StringFormat.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StringFormat class | Microsoft Docs","_op_ogTitle":"StringFormat class","description":"Encapsulates text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features. This clas…","toc_asset_id":"_splitted/System.Drawing/toc.json","toc_rel":"_splitted/System.Drawing/toc.json","source_url":"","ms.assetid":"System.Drawing.StringFormat","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.drawing.stringformat","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.drawing.stringformat","fileRelativePath":"System.Drawing.StringFormat.html"},"themesRelativePathToOutputRoot":"_themes/"}