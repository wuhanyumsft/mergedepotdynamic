{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_DynamicILInfo\">\r\n      <span class=\"lang-csharp\">DynamicILInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class DynamicILInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DynamicILInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The DynamicILInfo class allows developers to write their own MSIL generators instead of using <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a>.  </p>\n<p> To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities. The DynamicILInfo class provides several overloads of the <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo#System_Reflection_Emit_DynamicILInfo_GetTokenFor_\" data-linktype=\"relative-path\">GetTokenFor</a> method, which return tokens valid in the scope of the current DynamicILInfo. For example, if you need to call an overload of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method, you can obtain a <a class=\"xref\" href=\"system.runtimemethodhandle\" data-linktype=\"relative-path\">RuntimeMethodHandle</a> for that overload and pass it to the <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo#System_Reflection_Emit_DynamicILInfo_GetTokenFor_\" data-linktype=\"relative-path\">GetTokenFor</a> method to obtain a token to embed in your MSIL.  </p>\n<p> Once you have created <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays for your local variable signature, exceptions, and code body, you can use the <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo#System_Reflection_Emit_DynamicILInfo_SetCode_\" data-linktype=\"relative-path\">SetCode</a>, <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo#System_Reflection_Emit_DynamicILInfo_SetExceptions_\" data-linktype=\"relative-path\">SetExceptions</a>, and <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo#System_Reflection_Emit_DynamicILInfo_SetLocalSignature_\" data-linktype=\"relative-path\">SetLocalSignature</a> methods to insert them into the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> associated with your DynamicILInfo object.  </p>\n<p> Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not use DynamicILInfo to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly. Instead, use the <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod#System_Reflection_Emit_DynamicMethod_CreateDelegate_\" data-linktype=\"relative-path\">CreateDelegate</a> method to create the delegate. A delegate that is created with the delegate constructor does not have a reference to the target dynamic method. The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_DynamicMethod\" data-linktype=\"self-bookmark\">DynamicMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dynamic method whose body is generated by the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_Byte___\" data-linktype=\"self-bookmark\">GetTokenFor(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing the signature for the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_Reflection_Emit_DynamicMethod_\" data-linktype=\"self-bookmark\">GetTokenFor(DynamicMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a dynamic method to be called from the associated method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeFieldHandle_\" data-linktype=\"self-bookmark\">GetTokenFor(RuntimeFieldHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a field to be accessed from the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeMethodHandle_\" data-linktype=\"self-bookmark\">GetTokenFor(RuntimeMethodHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a method to be accessed from the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeTypeHandle_\" data-linktype=\"self-bookmark\">GetTokenFor(RuntimeTypeHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a type to be used in the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_String_\" data-linktype=\"self-bookmark\">GetTokenFor(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a string literal to be used in the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeFieldHandle_System_RuntimeTypeHandle_\" data-linktype=\"self-bookmark\">GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeMethodHandle_System_RuntimeTypeHandle_\" data-linktype=\"self-bookmark\">GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a method on a generic type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_SetCode_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">SetCode(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the code body of the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_SetCode_System_Byte__System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetCode(Byte*,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the code body of the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_SetExceptions_System_Byte___\" data-linktype=\"self-bookmark\">SetExceptions(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the exception metadata for the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_SetExceptions_System_Byte__System_Int32_\" data-linktype=\"self-bookmark\">SetExceptions(Byte*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the exception metadata for the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_SetLocalSignature_System_Byte___\" data-linktype=\"self-bookmark\">SetLocalSignature(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_DynamicILInfo_SetLocalSignature_System_Byte__System_Int32_\" data-linktype=\"self-bookmark\">SetLocalSignature(Byte*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_DynamicMethod\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_DynamicMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dynamic method whose body is generated by the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a> object representing the dynamic method for which the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object is generating code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object is always associated with a dynamic method. The purpose of the <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTokenFor(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing the signature for the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetTokenFor (byte[] signature);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>signature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the signature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_Reflection_Emit_DynamicMethod_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTokenFor(DynamicMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a dynamic method to be called from the associated method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dynamic method to call.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object. To call the associated dynamic method recursively, pass the value of the <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo#System_Reflection_Emit_DynamicILInfo_DynamicMethod_\" data-linktype=\"relative-path\">DynamicMethod</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeFieldHandle_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTokenFor(RuntimeFieldHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a field to be accessed from the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetTokenFor (RuntimeFieldHandle field);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>field</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The field to be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must obtain a token for any field that will be accessed by the dynamic method associated with the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object. Use the <a class=\"xref\" href=\"system.type#System_Type_GetField_\" data-linktype=\"relative-path\">GetField</a> method to get a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> for the field you want to access, then use the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_FieldHandle_\" data-linktype=\"relative-path\">FieldHandle</a> property to get the <a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeMethodHandle_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTokenFor(RuntimeMethodHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a method to be accessed from the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetTokenFor (RuntimeMethodHandle method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimemethodhandle\" data-linktype=\"relative-path\">RuntimeMethodHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Call\" data-linktype=\"relative-path\">Call</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldtoken\" data-linktype=\"relative-path\">Ldtoken</a>, in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must obtain a token for any method that will be accessed by the dynamic method associated with the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object. Use the <a class=\"xref\" href=\"system.type#System_Type_GetMethod_\" data-linktype=\"relative-path\">GetMethod</a> method to get a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> for the method you want to access, and then use the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_MethodHandle_\" data-linktype=\"relative-path\">MethodHandle</a> property to get the <a class=\"xref\" href=\"system.runtimemethodhandle\" data-linktype=\"relative-path\">RuntimeMethodHandle</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For a method that belongs to a generic type, use the <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo#System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeMethodHandle_System_RuntimeTypeHandle_\" data-linktype=\"relative-path\">GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)</a> method overload and specify a <a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a> for the generic type.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeTypeHandle_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTokenFor(RuntimeTypeHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a type to be used in the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetTokenFor (RuntimeTypeHandle type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to be used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object.  </p>\n<p> To get a <a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a> representing a type, use the <a class=\"xref\" href=\"system.type#System_Type_TypeHandle_\" data-linktype=\"relative-path\">TypeHandle</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTokenFor(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a string literal to be used in the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetTokenFor (string literal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>literal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to be used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeFieldHandle_System_RuntimeTypeHandle_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>field</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The field to be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contextType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The generic type the field belongs to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must obtain a token for any field that will be accessed by the dynamic method associated with the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object. Use the <a class=\"xref\" href=\"system.type#System_Type_GetField_\" data-linktype=\"relative-path\">GetField</a> method to get a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> for the field you want to access, and then use the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_FieldHandle_\" data-linktype=\"relative-path\">FieldHandle</a> property to get the <a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_System_RuntimeMethodHandle_System_RuntimeTypeHandle_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_GetTokenFor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token, valid in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a>, representing a method on a generic type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimemethodhandle\" data-linktype=\"relative-path\">RuntimeMethodHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contextType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The generic type the method belongs to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Call\" data-linktype=\"relative-path\">Call</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldtoken\" data-linktype=\"relative-path\">Ldtoken</a>, in the scope of the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must obtain a token for any method that will be called by the dynamic method associated with the current <a class=\"xref\" href=\"system.reflection.emit.dynamicilinfo\" data-linktype=\"relative-path\">DynamicILInfo</a> object. Use the <a class=\"xref\" href=\"system.type#System_Type_GetMethod_\" data-linktype=\"relative-path\">GetMethod</a> method to get a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> for the method you want to call, and then use the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_MethodHandle_\" data-linktype=\"relative-path\">MethodHandle</a> property to get the <a class=\"xref\" href=\"system.runtimemethodhandle\" data-linktype=\"relative-path\">RuntimeMethodHandle</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_SetCode_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_SetCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCode(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the code body of the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCode (byte[] code, int maxStackSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>code</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the MSIL stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxStackSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of items on the operand stack when the method is executing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No validity checks are performed on the MSIL stream.  </p>\n<p> Calling this method a second time replaces the first MSIL stream with the second.  </p>\n<p> Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_SetCode_System_Byte__System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_SetCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCode(Byte*,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the code body of the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCode (byte* code, int codeSize, int maxStackSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>code</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to a byte array containing the MSIL stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>codeSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the MSIL stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxStackSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of items on the operand stack when the method is executing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>code</code> is <code>null</code> and <code>codeSize</code> is greater than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>codeSize</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No validity checks are performed on the MSIL stream.  </p>\n<p> Calling this method a second time replaces the first MSIL stream with the second.  </p>\n<p> Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set.&quot; The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_SetExceptions_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_SetExceptions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetExceptions(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets the exception metadata for the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetExceptions (byte[] exceptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>exceptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the exception metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The exception metadata for a method defines the location and size of all <code>try</code>, <code>catch</code>, <code>finally</code>, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_SetExceptions_System_Byte__System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_SetExceptions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetExceptions(Byte*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the exception metadata for the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetExceptions (byte* exceptions, int exceptionsSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>exceptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to a byte array containing the exception metadata.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>exceptionsSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes of exception metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>exceptions</code> is <code>null</code> and <code>exceptionSize</code> is greater than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>exceptionSize</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The exception metadata for a method defines the location and size of all <code>try</code>, <code>catch</code>, <code>finally</code>, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_SetLocalSignature_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_SetLocalSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLocalSignature(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetLocalSignature (byte[] localSignature);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localSignature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the layout of local variables for the associated <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The local variable signature describes the layout of a method&#39;s local variables. To simplify construction of the local variable signature, use the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.reflection.emit.signaturehelper#System_Reflection_Emit_SignatureHelper_GetLocalVarSigHelper_\" data-linktype=\"relative-path\">GetLocalVarSigHelper</a> method to get a <a class=\"xref\" href=\"system.reflection.emit.signaturehelper\" data-linktype=\"relative-path\">SignatureHelper</a> for the local signature.  </p>\n<p> For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_DynamicILInfo_SetLocalSignature_System_Byte__System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_DynamicILInfo_SetLocalSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLocalSignature(Byte*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetLocalSignature (byte* localSignature, int signatureSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localSignature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the layout of local variables for the associated <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>signatureSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the signature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>localSignature</code> is <code>null</code> and <code>signatureSize</code> is greater than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>signatureSize</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The local variable signature describes the layout of a method&#39;s local variables. To simplify construction of the local variable signature, use the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.reflection.emit.signaturehelper#System_Reflection_Emit_SignatureHelper_GetLocalVarSigHelper_\" data-linktype=\"relative-path\">GetLocalVarSigHelper</a> method to get a <a class=\"xref\" href=\"system.reflection.emit.signaturehelper\" data-linktype=\"relative-path\">SignatureHelper</a> for the local signature.  </p>\n<p> For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.DynamicILInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.DynamicILInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicILInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicILInfo.DynamicMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicILInfo.GetTokenFor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicILInfo.SetCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicILInfo.SetExceptions\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.DynamicILInfo.SetLocalSignature\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4cf74918-e22a-aaab-92fa-909eb56d0722\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection.Emit\\DynamicILInfo.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, excepâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.DynamicILInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.DynamicILInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.DynamicILInfo.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.DynamicILInfo","System.Reflection.Emit.DynamicILInfo.DynamicMethod","System.Reflection.Emit.DynamicILInfo.GetTokenFor","System.Reflection.Emit.DynamicILInfo.SetCode","System.Reflection.Emit.DynamicILInfo.SetExceptions","System.Reflection.Emit.DynamicILInfo.SetLocalSignature"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.DynamicILInfo","System::Reflection::Emit::DynamicILInfo","System.Reflection.Emit.DynamicILInfo.DynamicMethod","System::Reflection::Emit::DynamicILInfo::DynamicMethod","System.Reflection.Emit.DynamicILInfo.GetTokenFor","System::Reflection::Emit::DynamicILInfo::GetTokenFor","System.Reflection.Emit.DynamicILInfo.SetCode","System::Reflection::Emit::DynamicILInfo::SetCode","System.Reflection.Emit.DynamicILInfo.SetExceptions","System::Reflection::Emit::DynamicILInfo::SetExceptions","System.Reflection.Emit.DynamicILInfo.SetLocalSignature","System::Reflection::Emit::DynamicILInfo::SetLocalSignature"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4cf74918-e22a-aaab-92fa-909eb56d0722","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection.Emit\\DynamicILInfo.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/DynamicILInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DynamicILInfo class | Microsoft Docs","_op_ogTitle":"DynamicILInfo class","description":"Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, excepâ€¦","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.DynamicILInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.dynamicilinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.dynamicilinfo","fileRelativePath":"System.Reflection.Emit.DynamicILInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}