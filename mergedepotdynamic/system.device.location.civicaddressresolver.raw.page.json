{"content":"    \r\n    <h1 id=\"System_Device_Location_CivicAddressResolver\">\r\n      <span class=\"lang-csharp\">CivicAddressResolver</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides functionality for resolving a coordinate-based location to a civic address.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class CivicAddressResolver : System.Device.Location.ICivicAddressResolver</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CivicAddressResolver</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The CivicAddressResolver class provides an implementation of <a class=\"xref\" href=\"system.device.location.icivicaddressresolver\" data-linktype=\"relative-path\">ICivicAddressResolver</a> that resolves a coordinate-based location to a civic address if the location provider provides both coordinates and civic address data.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Device_Location_CivicAddressResolver__ctor\" data-linktype=\"self-bookmark\">CivicAddressResolver()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.device.location.civicaddressresolver\" data-linktype=\"relative-path\">CivicAddressResolver</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Device_Location_CivicAddressResolver_ResolveAddress_System_Device_Location_GeoCoordinate_\" data-linktype=\"self-bookmark\">ResolveAddress(GeoCoordinate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Synchronously resolves a civic address from a location based on latitude and longitude. This call will block execution of the calling thread while the address is being resolved.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Device_Location_CivicAddressResolver_ResolveAddressAsync_System_Device_Location_GeoCoordinate_\" data-linktype=\"self-bookmark\">ResolveAddressAsync(GeoCoordinate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves an address asynchronously from a location that is based on latitude and longitude. The call does not block execution of the calling thread while the address is being resolved.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Device_Location_CivicAddressResolver_ResolveAddressCompleted\" data-linktype=\"self-bookmark\">ResolveAddressCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the address resolution that was initiated by a call to <span class=\"xref\">stem.Device.Location.CivicAddressResolver.ResolveAddressAsync*</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Device_Location_CivicAddressResolver__ctor\">\r\n    \r\n            <a id=\"System_Device_Location_CivicAddressResolver__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CivicAddressResolver()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.device.location.civicaddressresolver\" data-linktype=\"relative-path\">CivicAddressResolver</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CivicAddressResolver ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to initialize a new instance of the <a class=\"xref\" href=\"system.device.location.civicaddressresolver\" data-linktype=\"relative-path\">CivicAddressResolver</a> class.  </p>\n<pre><code class=\"lang-c#\">CivicAddressResolver resolver = new CivicAddressResolver();  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Device_Location_CivicAddressResolver_ResolveAddress_System_Device_Location_GeoCoordinate_\">\r\n    \r\n            <a id=\"System_Device_Location_CivicAddressResolver_ResolveAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveAddress(GeoCoordinate)</div>        \r\n          </div>\r\n    \r\n            <p>Synchronously resolves a civic address from a location based on latitude and longitude. This call will block execution of the calling thread while the address is being resolved.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Device.Location.CivicAddress ResolveAddress (System.Device.Location.GeoCoordinate coordinate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>coordinate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a> containing the location to resolve to a civic address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.device.location.civicaddress\" data-linktype=\"relative-path\">CivicAddress</a></div>\r\n                  </div>\r\n                  <p>The civic address that is resolved from the <code>coordinate</code> parameter. <a class=\"xref\" href=\"system.device.location.civicaddress\" data-linktype=\"relative-path\">CivicAddress</a> is returned if the address cannot be resolved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>coordinate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>coordinate</code> does not contain a valid latitude and longitude.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.device.location.icivicaddressresolver#System_Device_Location_ICivicAddressResolver_ResolveAddressCompleted\" data-linktype=\"relative-path\">ResolveAddressCompleted</a> event is raised when the address resolve operation completes. The civic address that is resolved from the <code>coordinate</code> parameter is returned by the <a class=\"xref\" href=\"system.device.location.resolveaddresscompletedeventargs#System_Device_Location_ResolveAddressCompletedEventArgs_Address_\" data-linktype=\"relative-path\">Address</a> member of the <a class=\"xref\" href=\"system.device.location.resolveaddresscompletedeventargs\" data-linktype=\"relative-path\">ResolveAddressCompletedEventArgs</a> object that is passed to the event handler.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following program demonstrates how to call ResolveAddress to resolve a civic address synchronously.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Device.Location.ResolveCivicAddressSync#1\">using System;\nusing System.Device.Location;\nnamespace ResolveAddressSync\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ResolveAddressSync();\n        }\n        static void ResolveAddressSync()\n        {\n            GeoCoordinateWatcher watcher = new GeoCoordinateWatcher(GeoPositionAccuracy.High);\n            watcher.MovementThreshold = 1.0; // set to one meter\n            watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));\n\n            CivicAddressResolver resolver = new CivicAddressResolver();\n\n            if (watcher.Position.Location.IsUnknown == false)\n            {\n                CivicAddress address = resolver.ResolveAddress(watcher.Position.Location);\n\n                if (!address.IsUnknown)\n                {\n                    Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                            address.CountryRegion,\n                            address.PostalCode);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Address unknown.&quot;);\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Device.Location.ResolveCivicAddressSync#1\">Imports System.Device.Location\nModule ResolveAddressSync\n\n    Public Sub ResolveAddressSync()\n        Dim watcher As GeoCoordinateWatcher\n        watcher = New System.Device.Location.GeoCoordinateWatcher(GeoPositionAccuracy.High)\n        Dim started As Boolean = False\n        watcher.MovementThreshold = 1.0     &#39;set to one meter\n        started = watcher.TryStart(False, TimeSpan.FromMilliseconds(1000))\n\n        Dim resolver As CivicAddressResolver = New CivicAddressResolver()\n        If started Then\n            If Not watcher.Position.Location.IsUnknown Then\n                Dim address As CivicAddress = resolver.ResolveAddress(watcher.Position.Location)\n                If Not address.IsUnknown Then\n                    Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                                address.CountryRegion,\n                                address.PostalCode)\n                Else\n                    Console.WriteLine(&quot;Address unknown.&quot;)\n                End If\n            End If\n        Else\n            Console.WriteLine(&quot;GeoCoordinateWatcher timed out on start.&quot;)\n        End If\n    End Sub\n\n\n    Public Sub Main()\n\n        ResolveAddressSync()\n        Console.WriteLine(&quot;Enter any key to quit.&quot;)\n        Console.ReadLine()\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Device_Location_CivicAddressResolver_ResolveAddressAsync_System_Device_Location_GeoCoordinate_\">\r\n    \r\n            <a id=\"System_Device_Location_CivicAddressResolver_ResolveAddressAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveAddressAsync(GeoCoordinate)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves an address asynchronously from a location that is based on latitude and longitude. The call does not block execution of the calling thread while the address is being resolved.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResolveAddressAsync (System.Device.Location.GeoCoordinate coordinate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>coordinate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a> containing the location to resolve to a civic address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>coordinate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>coordinate</code> does not contain a valid latitude and longitude.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following program shows how to call ResolveAddressAsync to resolve a civic address asynchronously.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Device.Location.ResolveCivicAddressAsync#1\">using System;\nusing System.Device.Location;\nnamespace ResolveAddressSync\n{\n    class Program\n    {\n        public static void Main(string[] args)\n        {\n            ResolveAddressAsync();\n        }\n        static void ResolveAddressAsync()\n        {\n            GeoCoordinateWatcher watcher = new GeoCoordinateWatcher(GeoPositionAccuracy.High);\n            bool started = false;\n            watcher.MovementThreshold = 1.0; // set to one meter\n            started = watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));\n\n            if (started)\n            {\n                CivicAddressResolver resolver = new CivicAddressResolver();\n\n                resolver.ResolveAddressCompleted += new EventHandler&lt;ResolveAddressCompletedEventArgs&gt;(resolver_ResolveAddressCompleted);\n\n                if (watcher.Position.Location.IsUnknown == false)\n                {\n                    resolver.ResolveAddressAsync(watcher.Position.Location);\n                }\n            }\n\n        }\n\n        static void resolver_ResolveAddressCompleted(object sender, ResolveAddressCompletedEventArgs e)\n        {\n            if (!e.Address.IsUnknown)\n            {\n                Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                           e.Address.CountryRegion,\n                           e.Address.PostalCode);\n            }\n            else\n            {\n                Console.WriteLine(&quot;Unknown address.&quot;);\n            }\n        }\n\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Device.Location.ResolveCivicAddressAsync#1\">Imports System.Device.Location\nModule ResolveCivicAddressAsync\n\n    Public Sub ResolveCivicAddressAsync()\n        Dim watcher As GeoCoordinateWatcher\n        watcher = New System.Device.Location.GeoCoordinateWatcher(GeoPositionAccuracy.High)\n        Dim started As Boolean = False\n        watcher.MovementThreshold = 1.0     &#39;set to one meter\n        started = watcher.TryStart(False, TimeSpan.FromMilliseconds(1000))\n        If started Then\n            Dim resolver As CivicAddressResolver = New CivicAddressResolver()\n            AddHandler resolver.ResolveAddressCompleted, AddressOf resolver_ResolveAddressCompleted\n            If Not watcher.Position.Location.IsUnknown Then\n                resolver.ResolveAddressAsync(watcher.Position.Location)\n            End If\n        End If\n\n        watcher.Start()\n\n    End Sub\n\n    Sub resolver_ResolveAddressCompleted(ByVal sender As Object, ByVal e As ResolveAddressCompletedEventArgs)\n        If Not e.Address.IsUnknown Then\n            Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                           e.Address.CountryRegion,\n                           e.Address.PostalCode)\n        Else\n            Console.WriteLine(&quot;Unknown address.&quot;)\n        End If\n    End Sub\n\n\n    Public Sub Main()\n\n        ResolveCivicAddressAsync()\n        Console.WriteLine(&quot;Enter any key to quit.&quot;)\n        Console.ReadLine()\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Device_Location_CivicAddressResolver_ResolveAddressCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveAddressCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the address resolution that was initiated by a call to <span class=\"xref\">stem.Device.Location.CivicAddressResolver.ResolveAddressAsync*</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Device.Location.ResolveAddressCompletedEventArgs&gt; ResolveAddressCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following program shows how to call <a class=\"xref\" href=\"system.device.location.civicaddressresolver#System_Device_Location_CivicAddressResolver_ResolveAddressAsync_\" data-linktype=\"relative-path\">ResolveAddressAsync</a> to resolve a civic address asynchronously.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Device.Location.ResolveCivicAddressAsync#1\">using System;\nusing System.Device.Location;\nnamespace ResolveAddressSync\n{\n    class Program\n    {\n        public static void Main(string[] args)\n        {\n            ResolveAddressAsync();\n        }\n        static void ResolveAddressAsync()\n        {\n            GeoCoordinateWatcher watcher = new GeoCoordinateWatcher(GeoPositionAccuracy.High);\n            bool started = false;\n            watcher.MovementThreshold = 1.0; // set to one meter\n            started = watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));\n\n            if (started)\n            {\n                CivicAddressResolver resolver = new CivicAddressResolver();\n\n                resolver.ResolveAddressCompleted += new EventHandler&lt;ResolveAddressCompletedEventArgs&gt;(resolver_ResolveAddressCompleted);\n\n                if (watcher.Position.Location.IsUnknown == false)\n                {\n                    resolver.ResolveAddressAsync(watcher.Position.Location);\n                }\n            }\n\n        }\n\n        static void resolver_ResolveAddressCompleted(object sender, ResolveAddressCompletedEventArgs e)\n        {\n            if (!e.Address.IsUnknown)\n            {\n                Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                           e.Address.CountryRegion,\n                           e.Address.PostalCode);\n            }\n            else\n            {\n                Console.WriteLine(&quot;Unknown address.&quot;);\n            }\n        }\n\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Device.Location.ResolveCivicAddressAsync#1\">Imports System.Device.Location\nModule ResolveCivicAddressAsync\n\n    Public Sub ResolveCivicAddressAsync()\n        Dim watcher As GeoCoordinateWatcher\n        watcher = New System.Device.Location.GeoCoordinateWatcher(GeoPositionAccuracy.High)\n        Dim started As Boolean = False\n        watcher.MovementThreshold = 1.0     &#39;set to one meter\n        started = watcher.TryStart(False, TimeSpan.FromMilliseconds(1000))\n        If started Then\n            Dim resolver As CivicAddressResolver = New CivicAddressResolver()\n            AddHandler resolver.ResolveAddressCompleted, AddressOf resolver_ResolveAddressCompleted\n            If Not watcher.Position.Location.IsUnknown Then\n                resolver.ResolveAddressAsync(watcher.Position.Location)\n            End If\n        End If\n\n        watcher.Start()\n\n    End Sub\n\n    Sub resolver_ResolveAddressCompleted(ByVal sender As Object, ByVal e As ResolveAddressCompletedEventArgs)\n        If Not e.Address.IsUnknown Then\n            Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                           e.Address.CountryRegion,\n                           e.Address.PostalCode)\n        Else\n            Console.WriteLine(&quot;Unknown address.&quot;)\n        End If\n    End Sub\n\n\n    Public Sub Main()\n\n        ResolveCivicAddressAsync()\n        Console.WriteLine(&quot;Enter any key to quit.&quot;)\n        Console.ReadLine()\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Device.Location.CivicAddressResolver.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Device.Location.CivicAddressResolver.yml\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.CivicAddressResolver\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.CivicAddressResolver..ctor\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.CivicAddressResolver.ResolveAddress\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.CivicAddressResolver.ResolveAddressAsync\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.CivicAddressResolver.ResolveAddressCompleted\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.CivicAddressResolver.add_ResolveAddressCompleted\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.CivicAddressResolver.remove_ResolveAddressCompleted\">\r\n<meta name=\"APILocation\" content=\"System.Device.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"29519040-de62-4035-7a96-78f108de6eb0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides functionality for resolving a coordinate-based location to a civic address.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Device.Location/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Device.Location.CivicAddressResolver\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Device.Location.CivicAddressResolver.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Device.Location.CivicAddressResolver.yml","open_to_public_contributors":true,"api_name":["System.Device.Location.CivicAddressResolver","System.Device.Location.CivicAddressResolver..ctor","System.Device.Location.CivicAddressResolver.ResolveAddress","System.Device.Location.CivicAddressResolver.ResolveAddressAsync","System.Device.Location.CivicAddressResolver.ResolveAddressCompleted","System.Device.Location.CivicAddressResolver.add_ResolveAddressCompleted","System.Device.Location.CivicAddressResolver.remove_ResolveAddressCompleted"],"api_location":["System.Device.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Device.Location.CivicAddressResolver","System::Device::Location::CivicAddressResolver","System.Device.Location.CivicAddressResolver.#ctor","System::Device::Location::CivicAddressResolver::#ctor","System.Device.Location.CivicAddressResolver.ResolveAddress","System::Device::Location::CivicAddressResolver::ResolveAddress","System.Device.Location.CivicAddressResolver.ResolveAddressAsync","System::Device::Location::CivicAddressResolver::ResolveAddressAsync","System.Device.Location.CivicAddressResolver.ResolveAddressCompleted","System::Device::Location::CivicAddressResolver::ResolveAddressCompleted"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"29519040-de62-4035-7a96-78f108de6eb0","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Device.Location/CivicAddressResolver.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CivicAddressResolver class | Microsoft Docs","_op_ogTitle":"CivicAddressResolver class","description":"Provides functionality for resolving a coordinate-based location to a civic address.\n","toc_asset_id":"_splitted/System.Device.Location/toc.json","toc_rel":"_splitted/System.Device.Location/toc.json","source_url":"","ms.assetid":"System.Device.Location.CivicAddressResolver","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.device.location.civicaddressresolver","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.device.location.civicaddressresolver","fileRelativePath":"System.Device.Location.CivicAddressResolver.html"},"themesRelativePathToOutputRoot":"_themes/"}