{"content":"    \r\n    <h1 id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs\">\r\n      <span class=\"lang-csharp\">DetailsViewUpdatedEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemUpdated\" data-linktype=\"relative-path\">ItemUpdated</a> event.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class DetailsViewUpdatedEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DetailsViewUpdatedEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemUpdated\" data-linktype=\"relative-path\">ItemUpdated</a> event when an Update button (a button with its <code>CommandName</code> property set to &quot;Update&quot;) within the control is clicked, but after the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control updates the record. This allows you to provide an event handler that performs a custom routine, such as checking the results of an update operation, whenever this event occurs.  </p>\n<p> A DetailsViewUpdatedEventArgs object is passed to the event handler, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the update operation, use the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_AffectedRows_\" data-linktype=\"relative-path\">AffectedRows</a> property. Use the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Exception_\" data-linktype=\"relative-path\">Exception</a> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event handler by setting the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_ExceptionHandled_\" data-linktype=\"relative-path\">ExceptionHandled</a> property. If you need to access the key field values for the updated record, use the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Keys_\" data-linktype=\"relative-path\">Keys</a> property. The original and updated non-key field values can be accessed using the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_OldValues_\" data-linktype=\"relative-path\">OldValues</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_NewValues_\" data-linktype=\"relative-path\">NewValues</a> properties, respectively.  </p>\n<p> By default, the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control returns to the mode specified by the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_DefaultMode_\" data-linktype=\"relative-path\">DefaultMode</a> property after an update operation. To keep the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control in edit mode, set the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_KeepInEditMode_\" data-linktype=\"relative-path\">KeepInEditMode</a> property to <code>true</code>.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.  </p>\n<p> For a list of initial property values for an instance of the DetailsViewUpdatedEventArgs class, see the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs__ctor_\" data-linktype=\"relative-path\">DetailsViewUpdatedEventArgs</a> constructor.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs__ctor_System_Int32_System_Exception_\" data-linktype=\"self-bookmark\">DetailsViewUpdatedEventArgs(Int32,Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs\" data-linktype=\"relative-path\">DetailsViewUpdatedEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_AffectedRows\" data-linktype=\"self-bookmark\">AffectedRows</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of rows affected by the update operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Exception\" data-linktype=\"self-bookmark\">Exception</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the exception (if any) that was raised during the update operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_ExceptionHandled\" data-linktype=\"self-bookmark\">ExceptionHandled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether an exception that was raised during the update operation was handled in the event handler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_KeepInEditMode\" data-linktype=\"self-bookmark\">KeepInEditMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control should remain in edit mode after an update operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Keys\" data-linktype=\"self-bookmark\">Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a dictionary that contains the key field name/value pairs for the updated record.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_NewValues\" data-linktype=\"self-bookmark\">NewValues</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a dictionary that contains the new field name/value pairs for the updated record.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_OldValues\" data-linktype=\"self-bookmark\">OldValues</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a dictionary that contains the original field name/value pairs for the updated record.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs__ctor_System_Int32_System_Exception_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DetailsViewUpdatedEventArgs(Int32,Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs\" data-linktype=\"relative-path\">DetailsViewUpdatedEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DetailsViewUpdatedEventArgs (int affectedRows, Exception e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>affectedRows</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of rows affected by the update operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> that represents the exception raised when the update operation was performed. If no exception is raised, use <code>null</code> for this parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this constructor to initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs\" data-linktype=\"relative-path\">DetailsViewUpdatedEventArgs</a> class.  </p>\n<p> The following table shows initial property values for an instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs\" data-linktype=\"relative-path\">DetailsViewUpdatedEventArgs</a> class.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_AffectedRows_\" data-linktype=\"relative-path\">AffectedRows</a></td>\n<td>The value of the <code>affectedRows</code> parameter.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Exception_\" data-linktype=\"relative-path\">Exception</a></td>\n<td>The <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">System.Exception</a> object contained in the <code>e</code> parameter.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_ExceptionHandled_\" data-linktype=\"relative-path\">ExceptionHandled</a></td>\n<td>Initialized to <code>false</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_KeepInEditMode_\" data-linktype=\"relative-path\">KeepInEditMode</a></td>\n<td>Initialized to <code>false</code>.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> This constructor is used primarily by control developers when raising events.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_AffectedRows\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_AffectedRows_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AffectedRows</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of rows affected by the update operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int AffectedRows { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of rows affected by the update operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the AffectedRows property to determine the number of rows affected by the update operation. This value is commonly used to verify that the appropriate number of rows was updated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AffectedRows property to determine the number of rows affected by an update operation.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void CustomerDetailsView_ItemUpdated(Object sender, \n    DetailsViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the insert operation.\n    if (e.Exception == null)\n    {\n      // Use the Values property to get the value entered by \n      // the user for the CompanyName field.\n      String keyFieldValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      // Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; + keyFieldValue + \n        &quot; updated successfully. &quot;;\n\n      // Display the old and new values.\n      DisplayValues(e);\n\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; record updated.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; records updated.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n\n      // Use the ExceptionHandled property to indicate that the \n      // exception is already handled.\n      e.ExceptionHandled = true;\n\n      // When an exception occurs, keep the DetailsView\n      // control in edit mode.\n      e.KeepInEditMode = true;\n    }\n  }\n\n  void DisplayValues(DetailsViewUpdatedEventArgs e)\n  {\n    \n    MessageLabel.Text += &quot;&lt;br/&gt;&lt;/br&gt;&quot;;\n    \n    // Iterate through the OldValue and NewValues\n    // properties and display the values.\n    for (int i = 0; i &lt; e.OldValues.Count; i++)\n    {\n      MessageLabel.Text += &quot;Old Value=&quot; + e.OldValues[i].ToString() +\n        &quot;, New Value=&quot; + e.NewValues[i].ToString() + &quot;&lt;br/&gt;&quot;;\n    }\n\n    MessageLabel.Text += &quot;&lt;/br&gt;&quot;;\n    \n  }\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub CustomerDetailsView_ItemUpdated(ByVal sender As Object, ByVal e As DetailsViewUpdatedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the insert operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the Values property to get the value entered by \n      &#39; the user for the CompanyName field.\n      Dim keyFieldValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      &#39; Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; &amp; keyFieldValue &amp; _\n        &quot; updated successfully. &quot;\n\n      &#39; Display the old and new values.\n      DisplayValues(e)\n\n      If e.AffectedRows = 1 Then\n\n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; record updated.&quot;\n      \n      Else\n      \n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; records updated.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n\n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception is already handled.\n      e.ExceptionHandled = True\n\n      &#39; When an exception occurs, keep the DetailsView\n      &#39; control in edit mode.\n      e.KeepInEditMode = True\n    \n    End If\n    \n  End Sub\n\n  Sub DisplayValues(ByVal e As DetailsViewUpdatedEventArgs)\n    \n    MessageLabel.Text &amp;= &quot;&lt;br/&gt;&lt;/br&gt;&quot;\n    \n    &#39; Iterate through the OldValue and NewValues\n    &#39; properties and display the values.\n    Dim i As Integer\n        \n    For i = 0 To e.OldValues.Count - 1\n    \n      MessageLabel.Text &amp;= &quot;Old Value=&quot; &amp; e.OldValues(i).ToString() &amp; _\n        &quot;, New Value=&quot; &amp; e.NewValues(i).ToString() &amp; &quot;&lt;br/&gt;&quot;\n    \n    Next\n\n    MessageLabel.Text &amp;= &quot;&lt;/br&gt;&quot;\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Exception\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Exception_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exception</div>        \r\n          </div>\r\n    \r\n            <p>Gets the exception (if any) that was raised during the update operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Exception Exception { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> that represents the exception that was raised during the update operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Exception property to determine the exception (if any) that was raised during the update operation. If no exceptions were raised, this property returns <code>null</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If an exception was raised and you decide to handle the exception in the event handler, be sure to set the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_ExceptionHandled_\" data-linktype=\"relative-path\">ExceptionHandled</a> property to <code>true</code>; otherwise, the exception is passed to the next method on the call stack for handling.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Exception property to determine whether an exception occurred during an update operation.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void CustomerDetailsView_ItemUpdated(Object sender, \n    DetailsViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the insert operation.\n    if (e.Exception == null)\n    {\n      // Use the Values property to get the value entered by \n      // the user for the CompanyName field.\n      String keyFieldValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      // Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; + keyFieldValue + \n        &quot; updated successfully. &quot;;\n\n      // Display the old and new values.\n      DisplayValues(e);\n\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; record updated.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; records updated.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n\n      // Use the ExceptionHandled property to indicate that the \n      // exception is already handled.\n      e.ExceptionHandled = true;\n\n      // When an exception occurs, keep the DetailsView\n      // control in edit mode.\n      e.KeepInEditMode = true;\n    }\n  }\n\n  void DisplayValues(DetailsViewUpdatedEventArgs e)\n  {\n    \n    MessageLabel.Text += &quot;&lt;br/&gt;&lt;/br&gt;&quot;;\n    \n    // Iterate through the OldValue and NewValues\n    // properties and display the values.\n    for (int i = 0; i &lt; e.OldValues.Count; i++)\n    {\n      MessageLabel.Text += &quot;Old Value=&quot; + e.OldValues[i].ToString() +\n        &quot;, New Value=&quot; + e.NewValues[i].ToString() + &quot;&lt;br/&gt;&quot;;\n    }\n\n    MessageLabel.Text += &quot;&lt;/br&gt;&quot;;\n    \n  }\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub CustomerDetailsView_ItemUpdated(ByVal sender As Object, ByVal e As DetailsViewUpdatedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the insert operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the Values property to get the value entered by \n      &#39; the user for the CompanyName field.\n      Dim keyFieldValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      &#39; Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; &amp; keyFieldValue &amp; _\n        &quot; updated successfully. &quot;\n\n      &#39; Display the old and new values.\n      DisplayValues(e)\n\n      If e.AffectedRows = 1 Then\n\n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; record updated.&quot;\n      \n      Else\n      \n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; records updated.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n\n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception is already handled.\n      e.ExceptionHandled = True\n\n      &#39; When an exception occurs, keep the DetailsView\n      &#39; control in edit mode.\n      e.KeepInEditMode = True\n    \n    End If\n    \n  End Sub\n\n  Sub DisplayValues(ByVal e As DetailsViewUpdatedEventArgs)\n    \n    MessageLabel.Text &amp;= &quot;&lt;br/&gt;&lt;/br&gt;&quot;\n    \n    &#39; Iterate through the OldValue and NewValues\n    &#39; properties and display the values.\n    Dim i As Integer\n        \n    For i = 0 To e.OldValues.Count - 1\n    \n      MessageLabel.Text &amp;= &quot;Old Value=&quot; &amp; e.OldValues(i).ToString() &amp; _\n        &quot;, New Value=&quot; &amp; e.NewValues(i).ToString() &amp; &quot;&lt;br/&gt;&quot;\n    \n    Next\n\n    MessageLabel.Text &amp;= &quot;&lt;/br&gt;&quot;\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_ExceptionHandled\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_ExceptionHandled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExceptionHandled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether an exception that was raised during the update operation was handled in the event handler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ExceptionHandled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the exception was handled in the event handler; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When an exception is raised during the update operation, use the ExceptionHandled property to indicate whether the exception was handled in the event handler. When this property is set to <code>true</code>, the exception is considered handled and is not passed further up the call stack. If this property is set to <code>false</code>, the exception is passed to the next method on the call stack for handling. To determine which exception was raised, use the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsviewupdatedeventargs#System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Exception_\" data-linktype=\"relative-path\">Exception</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ExceptionHandled property to indicate that the exception was handled in the event handler.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void CustomerDetailsView_ItemUpdated(Object sender, \n    DetailsViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the insert operation.\n    if (e.Exception == null)\n    {\n      // Use the Values property to get the value entered by \n      // the user for the CompanyName field.\n      String keyFieldValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      // Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; + keyFieldValue + \n        &quot; updated successfully. &quot;;\n\n      // Display the old and new values.\n      DisplayValues(e);\n\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; record updated.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; records updated.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n\n      // Use the ExceptionHandled property to indicate that the \n      // exception is already handled.\n      e.ExceptionHandled = true;\n\n      // When an exception occurs, keep the DetailsView\n      // control in edit mode.\n      e.KeepInEditMode = true;\n    }\n  }\n\n  void DisplayValues(DetailsViewUpdatedEventArgs e)\n  {\n    \n    MessageLabel.Text += &quot;&lt;br/&gt;&lt;/br&gt;&quot;;\n    \n    // Iterate through the OldValue and NewValues\n    // properties and display the values.\n    for (int i = 0; i &lt; e.OldValues.Count; i++)\n    {\n      MessageLabel.Text += &quot;Old Value=&quot; + e.OldValues[i].ToString() +\n        &quot;, New Value=&quot; + e.NewValues[i].ToString() + &quot;&lt;br/&gt;&quot;;\n    }\n\n    MessageLabel.Text += &quot;&lt;/br&gt;&quot;;\n    \n  }\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub CustomerDetailsView_ItemUpdated(ByVal sender As Object, ByVal e As DetailsViewUpdatedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the insert operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the Values property to get the value entered by \n      &#39; the user for the CompanyName field.\n      Dim keyFieldValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      &#39; Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; &amp; keyFieldValue &amp; _\n        &quot; updated successfully. &quot;\n\n      &#39; Display the old and new values.\n      DisplayValues(e)\n\n      If e.AffectedRows = 1 Then\n\n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; record updated.&quot;\n      \n      Else\n      \n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; records updated.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n\n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception is already handled.\n      e.ExceptionHandled = True\n\n      &#39; When an exception occurs, keep the DetailsView\n      &#39; control in edit mode.\n      e.KeepInEditMode = True\n    \n    End If\n    \n  End Sub\n\n  Sub DisplayValues(ByVal e As DetailsViewUpdatedEventArgs)\n    \n    MessageLabel.Text &amp;= &quot;&lt;br/&gt;&lt;/br&gt;&quot;\n    \n    &#39; Iterate through the OldValue and NewValues\n    &#39; properties and display the values.\n    Dim i As Integer\n        \n    For i = 0 To e.OldValues.Count - 1\n    \n      MessageLabel.Text &amp;= &quot;Old Value=&quot; &amp; e.OldValues(i).ToString() &amp; _\n        &quot;, New Value=&quot; &amp; e.NewValues(i).ToString() &amp; &quot;&lt;br/&gt;&quot;\n    \n    Next\n\n    MessageLabel.Text &amp;= &quot;&lt;/br&gt;&quot;\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_KeepInEditMode\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_KeepInEditMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeepInEditMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control should remain in edit mode after an update operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool KeepInEditMode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to remain in edit mode after an update operation; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control returns to the mode specified by the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_DefaultMode_\" data-linktype=\"relative-path\">DefaultMode</a> property after an update operation. Use the KeepInEditMode property to specify whether the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control should remain in edit mode. To keep the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control in edit mode, set this property to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property should be used if you want to override the default mode at a specific occasion. If the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control needs to remain in edit mode by default, set the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_DefaultMode_\" data-linktype=\"relative-path\">DefaultMode</a> property instead.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the KeepInEditMode property to keep a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control in edit mode after an update operation.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void CustomerDetailsView_ItemUpdated(Object sender, \n    DetailsViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the insert operation.\n    if (e.Exception == null)\n    {\n      // Use the Values property to get the value entered by \n      // the user for the CompanyName field.\n      String keyFieldValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      // Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; + keyFieldValue + \n        &quot; updated successfully. &quot;;\n\n      // Display the old and new values.\n      DisplayValues(e);\n\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; record updated.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; records updated.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n\n      // Use the ExceptionHandled property to indicate that the \n      // exception is already handled.\n      e.ExceptionHandled = true;\n\n      // When an exception occurs, keep the DetailsView\n      // control in edit mode.\n      e.KeepInEditMode = true;\n    }\n  }\n\n  void DisplayValues(DetailsViewUpdatedEventArgs e)\n  {\n    \n    MessageLabel.Text += &quot;&lt;br/&gt;&lt;/br&gt;&quot;;\n    \n    // Iterate through the OldValue and NewValues\n    // properties and display the values.\n    for (int i = 0; i &lt; e.OldValues.Count; i++)\n    {\n      MessageLabel.Text += &quot;Old Value=&quot; + e.OldValues[i].ToString() +\n        &quot;, New Value=&quot; + e.NewValues[i].ToString() + &quot;&lt;br/&gt;&quot;;\n    }\n\n    MessageLabel.Text += &quot;&lt;/br&gt;&quot;;\n    \n  }\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub CustomerDetailsView_ItemUpdated(ByVal sender As Object, ByVal e As DetailsViewUpdatedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the insert operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the Values property to get the value entered by \n      &#39; the user for the CompanyName field.\n      Dim keyFieldValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      &#39; Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; &amp; keyFieldValue &amp; _\n        &quot; updated successfully. &quot;\n\n      &#39; Display the old and new values.\n      DisplayValues(e)\n\n      If e.AffectedRows = 1 Then\n\n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; record updated.&quot;\n      \n      Else\n      \n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; records updated.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n\n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception is already handled.\n      e.ExceptionHandled = True\n\n      &#39; When an exception occurs, keep the DetailsView\n      &#39; control in edit mode.\n      e.KeepInEditMode = True\n    \n    End If\n    \n  End Sub\n\n  Sub DisplayValues(ByVal e As DetailsViewUpdatedEventArgs)\n    \n    MessageLabel.Text &amp;= &quot;&lt;br/&gt;&lt;/br&gt;&quot;\n    \n    &#39; Iterate through the OldValue and NewValues\n    &#39; properties and display the values.\n    Dim i As Integer\n        \n    For i = 0 To e.OldValues.Count - 1\n    \n      MessageLabel.Text &amp;= &quot;Old Value=&quot; &amp; e.OldValues(i).ToString() &amp; _\n        &quot;, New Value=&quot; &amp; e.NewValues(i).ToString() &amp; &quot;&lt;br/&gt;&quot;\n    \n    Next\n\n    MessageLabel.Text &amp;= &quot;&lt;/br&gt;&quot;\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Keys\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets a dictionary that contains the key field name/value pairs for the updated record.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Specialized.IOrderedDictionary Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> that contains a dictionary of key field name/value pairs for the updated record.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Keys property to access the values of the key field for an updated record. For example, you can use these values to keep a log of updated records.  </p>\n<p> The Keys property returns an object that implements the <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> interface. The object contains <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects that represent the fields of the updated record.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> As a shortcut, you can also use the indexer of the <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> object to access the field values directly.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Keys property to access the values of the key field for an updated record.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void CustomerDetailsView_ItemUpdated(Object sender, \n    DetailsViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the insert operation.\n    if (e.Exception == null)\n    {\n      // Use the Values property to get the value entered by \n      // the user for the CompanyName field.\n      String keyFieldValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      // Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; + keyFieldValue + \n        &quot; updated successfully. &quot;;\n\n      // Display the old and new values.\n      DisplayValues(e);\n\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; record updated.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; records updated.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n\n      // Use the ExceptionHandled property to indicate that the \n      // exception is already handled.\n      e.ExceptionHandled = true;\n\n      // When an exception occurs, keep the DetailsView\n      // control in edit mode.\n      e.KeepInEditMode = true;\n    }\n  }\n\n  void DisplayValues(DetailsViewUpdatedEventArgs e)\n  {\n    \n    MessageLabel.Text += &quot;&lt;br/&gt;&lt;/br&gt;&quot;;\n    \n    // Iterate through the OldValue and NewValues\n    // properties and display the values.\n    for (int i = 0; i &lt; e.OldValues.Count; i++)\n    {\n      MessageLabel.Text += &quot;Old Value=&quot; + e.OldValues[i].ToString() +\n        &quot;, New Value=&quot; + e.NewValues[i].ToString() + &quot;&lt;br/&gt;&quot;;\n    }\n\n    MessageLabel.Text += &quot;&lt;/br&gt;&quot;;\n    \n  }\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub CustomerDetailsView_ItemUpdated(ByVal sender As Object, ByVal e As DetailsViewUpdatedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the insert operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the Values property to get the value entered by \n      &#39; the user for the CompanyName field.\n      Dim keyFieldValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      &#39; Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; &amp; keyFieldValue &amp; _\n        &quot; updated successfully. &quot;\n\n      &#39; Display the old and new values.\n      DisplayValues(e)\n\n      If e.AffectedRows = 1 Then\n\n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; record updated.&quot;\n      \n      Else\n      \n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; records updated.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n\n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception is already handled.\n      e.ExceptionHandled = True\n\n      &#39; When an exception occurs, keep the DetailsView\n      &#39; control in edit mode.\n      e.KeepInEditMode = True\n    \n    End If\n    \n  End Sub\n\n  Sub DisplayValues(ByVal e As DetailsViewUpdatedEventArgs)\n    \n    MessageLabel.Text &amp;= &quot;&lt;br/&gt;&lt;/br&gt;&quot;\n    \n    &#39; Iterate through the OldValue and NewValues\n    &#39; properties and display the values.\n    Dim i As Integer\n        \n    For i = 0 To e.OldValues.Count - 1\n    \n      MessageLabel.Text &amp;= &quot;Old Value=&quot; &amp; e.OldValues(i).ToString() &amp; _\n        &quot;, New Value=&quot; &amp; e.NewValues(i).ToString() &amp; &quot;&lt;br/&gt;&quot;\n    \n    Next\n\n    MessageLabel.Text &amp;= &quot;&lt;/br&gt;&quot;\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_NewValues\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_NewValues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewValues</div>        \r\n          </div>\r\n    \r\n            <p>Gets a dictionary that contains the new field name/value pairs for the updated record.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Specialized.IOrderedDictionary NewValues { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> that contains a dictionary of the new field name/value pairs for the updated record.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the NewValues property to access the new field values for the updated record. For example, you can use these values to keep a log of updated records.  </p>\n<p> The NewValues property returns an object that implements the <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> interface. The object contains <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects that represent the fields of the updated record.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> As a shortcut, you can also use the indexer of the <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> object to access the field values directly.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the NewValues property to access the new values entered by the user for the non-key fields of the updated record.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void CustomerDetailsView_ItemUpdated(Object sender, \n    DetailsViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the insert operation.\n    if (e.Exception == null)\n    {\n      // Use the Values property to get the value entered by \n      // the user for the CompanyName field.\n      String keyFieldValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      // Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; + keyFieldValue + \n        &quot; updated successfully. &quot;;\n\n      // Display the old and new values.\n      DisplayValues(e);\n\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; record updated.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; records updated.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n\n      // Use the ExceptionHandled property to indicate that the \n      // exception is already handled.\n      e.ExceptionHandled = true;\n\n      // When an exception occurs, keep the DetailsView\n      // control in edit mode.\n      e.KeepInEditMode = true;\n    }\n  }\n\n  void DisplayValues(DetailsViewUpdatedEventArgs e)\n  {\n    \n    MessageLabel.Text += &quot;&lt;br/&gt;&lt;/br&gt;&quot;;\n    \n    // Iterate through the OldValue and NewValues\n    // properties and display the values.\n    for (int i = 0; i &lt; e.OldValues.Count; i++)\n    {\n      MessageLabel.Text += &quot;Old Value=&quot; + e.OldValues[i].ToString() +\n        &quot;, New Value=&quot; + e.NewValues[i].ToString() + &quot;&lt;br/&gt;&quot;;\n    }\n\n    MessageLabel.Text += &quot;&lt;/br&gt;&quot;;\n    \n  }\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub CustomerDetailsView_ItemUpdated(ByVal sender As Object, ByVal e As DetailsViewUpdatedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the insert operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the Values property to get the value entered by \n      &#39; the user for the CompanyName field.\n      Dim keyFieldValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      &#39; Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; &amp; keyFieldValue &amp; _\n        &quot; updated successfully. &quot;\n\n      &#39; Display the old and new values.\n      DisplayValues(e)\n\n      If e.AffectedRows = 1 Then\n\n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; record updated.&quot;\n      \n      Else\n      \n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; records updated.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n\n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception is already handled.\n      e.ExceptionHandled = True\n\n      &#39; When an exception occurs, keep the DetailsView\n      &#39; control in edit mode.\n      e.KeepInEditMode = True\n    \n    End If\n    \n  End Sub\n\n  Sub DisplayValues(ByVal e As DetailsViewUpdatedEventArgs)\n    \n    MessageLabel.Text &amp;= &quot;&lt;br/&gt;&lt;/br&gt;&quot;\n    \n    &#39; Iterate through the OldValue and NewValues\n    &#39; properties and display the values.\n    Dim i As Integer\n        \n    For i = 0 To e.OldValues.Count - 1\n    \n      MessageLabel.Text &amp;= &quot;Old Value=&quot; &amp; e.OldValues(i).ToString() &amp; _\n        &quot;, New Value=&quot; &amp; e.NewValues(i).ToString() &amp; &quot;&lt;br/&gt;&quot;\n    \n    Next\n\n    MessageLabel.Text &amp;= &quot;&lt;/br&gt;&quot;\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_OldValues\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DetailsViewUpdatedEventArgs_OldValues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OldValues</div>        \r\n          </div>\r\n    \r\n            <p>Gets a dictionary that contains the original field name/value pairs for the updated record.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Specialized.IOrderedDictionary OldValues { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> that contains a dictionary of the original field name/value pairs for the updated record.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OldValues property to access the original field values for the updated record. For example, you can use these values to keep a log of updated records.  </p>\n<p> The OldValues property returns an object that implements the <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> interface. The object contains <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects that represent the fields of the updated record.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> As a shortcut, you can also use the indexer of the <a class=\"xref\" href=\"system.collections.specialized.iordereddictionary\" data-linktype=\"relative-path\">IOrderedDictionary</a> object to access the field values directly.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the OldValues property to access the original values of the non-key fields for the updated record.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void CustomerDetailsView_ItemUpdated(Object sender, \n    DetailsViewUpdatedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the insert operation.\n    if (e.Exception == null)\n    {\n      // Use the Values property to get the value entered by \n      // the user for the CompanyName field.\n      String keyFieldValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      // Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; + keyFieldValue + \n        &quot; updated successfully. &quot;;\n\n      // Display the old and new values.\n      DisplayValues(e);\n\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; record updated.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text += e.AffectedRows.ToString() + \n          &quot; records updated.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n\n      // Use the ExceptionHandled property to indicate that the \n      // exception is already handled.\n      e.ExceptionHandled = true;\n\n      // When an exception occurs, keep the DetailsView\n      // control in edit mode.\n      e.KeepInEditMode = true;\n    }\n  }\n\n  void DisplayValues(DetailsViewUpdatedEventArgs e)\n  {\n    \n    MessageLabel.Text += &quot;&lt;br/&gt;&lt;/br&gt;&quot;;\n    \n    // Iterate through the OldValue and NewValues\n    // properties and display the values.\n    for (int i = 0; i &lt; e.OldValues.Count; i++)\n    {\n      MessageLabel.Text += &quot;Old Value=&quot; + e.OldValues[i].ToString() +\n        &quot;, New Value=&quot; + e.NewValues[i].ToString() + &quot;&lt;br/&gt;&quot;;\n    }\n\n    MessageLabel.Text += &quot;&lt;/br&gt;&quot;;\n    \n  }\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewUpdatedEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub CustomerDetailsView_ItemUpdated(ByVal sender As Object, ByVal e As DetailsViewUpdatedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the insert operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the Values property to get the value entered by \n      &#39; the user for the CompanyName field.\n      Dim keyFieldValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      &#39; Display a confirmation message.\n      MessageLabel.Text = &quot;Record &quot; &amp; keyFieldValue &amp; _\n        &quot; updated successfully. &quot;\n\n      &#39; Display the old and new values.\n      DisplayValues(e)\n\n      If e.AffectedRows = 1 Then\n\n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; record updated.&quot;\n      \n      Else\n      \n        MessageLabel.Text &amp;= e.AffectedRows.ToString() &amp; _\n          &quot; records updated.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n\n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception is already handled.\n      e.ExceptionHandled = True\n\n      &#39; When an exception occurs, keep the DetailsView\n      &#39; control in edit mode.\n      e.KeepInEditMode = True\n    \n    End If\n    \n  End Sub\n\n  Sub DisplayValues(ByVal e As DetailsViewUpdatedEventArgs)\n    \n    MessageLabel.Text &amp;= &quot;&lt;br/&gt;&lt;/br&gt;&quot;\n    \n    &#39; Iterate through the OldValue and NewValues\n    &#39; properties and display the values.\n    Dim i As Integer\n        \n    For i = 0 To e.OldValues.Count - 1\n    \n      MessageLabel.Text &amp;= &quot;Old Value=&quot; &amp; e.OldValues(i).ToString() &amp; _\n        &quot;, New Value=&quot; &amp; e.NewValues(i).ToString() &amp; &quot;&lt;br/&gt;&quot;\n    \n    Next\n\n    MessageLabel.Text &amp;= &quot;&lt;/br&gt;&quot;\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdatedEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdatedEventArgs Example&lt;/h3&gt;\n                       \n        &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n          datasourceid=&quot;DetailsViewSource&quot;\n          autogeneraterows=&quot;true&quot;\n          autogenerateeditbutton=&quot;true&quot;  \n          allowpaging=&quot;true&quot;\n          datakeynames=&quot;CustomerID&quot; \n          onitemupdated=&quot;CustomerDetailsView_ItemUpdated&quot;\n          runat=&quot;server&quot;&gt;\n            \n          &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                    \n        &lt;/asp:detailsview&gt;\n        \n        &lt;br/&gt;\n        \n        &lt;asp:label id=&quot;MessageLabel&quot;\n          forecolor=&quot;Red&quot;\n          runat=&quot;server&quot;/&gt;\n            \n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n          selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n            [City], [PostalCode], [Country] From [Customers]&quot;\n          updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n          connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n          runat=&quot;server&quot;/&gt;\n            \n      &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.AffectedRows\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.Exception\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.ExceptionHandled\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.KeepInEditMode\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.Keys\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.NewValues\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.OldValues\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e6fa696f-23f0-8a0b-a3b4-c2d44c32ff9d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Web.UI.WebControls\\DetailsViewUpdatedEventArgs.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI.WebControls/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.WebControls.DetailsViewUpdatedEventArgs","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs..ctor","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.AffectedRows","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.Exception","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.ExceptionHandled","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.KeepInEditMode","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.Keys","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.NewValues","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.OldValues"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.DetailsViewUpdatedEventArgs","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.#ctor","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs::#ctor","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.AffectedRows","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs::AffectedRows","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.Exception","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs::Exception","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.ExceptionHandled","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs::ExceptionHandled","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.KeepInEditMode","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs::KeepInEditMode","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.Keys","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs::Keys","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.NewValues","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs::NewValues","System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.OldValues","System::Web::UI::WebControls::DetailsViewUpdatedEventArgs::OldValues"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e6fa696f-23f0-8a0b-a3b4-c2d44c32ff9d","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Web.UI.WebControls\\DetailsViewUpdatedEventArgs.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI.WebControls/DetailsViewUpdatedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DetailsViewUpdatedEventArgs class | Microsoft Docs","_op_ogTitle":"DetailsViewUpdatedEventArgs class","description":"Provides data for the  event.\n","toc_asset_id":"_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.detailsviewupdatedeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.detailsviewupdatedeventargs","fileRelativePath":"System.Web.UI.WebControls.DetailsViewUpdatedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}