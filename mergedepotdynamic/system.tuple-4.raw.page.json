{"content":"    \r\n    <h1 id=\"System_Tuple_4\">\r\n      <span class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a 4-tuple, or quadruple.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Tuple&lt;T1,T2,T3,T4&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT1\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s first component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT2\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s second component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT3\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s third component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT4\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s fourth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents a 4-tuple, or quadruple, which is a tuple that has four components.  </p>\n<p> You can instantiate a Tuple(T1, object by calling either the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> constructor or the static <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__4___0___1___2___3_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4&gt;(T1,T2,T3,T4)</a> method. You can retrieve the value of the tuple&#39;s components by using the read-only <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item3_\" data-linktype=\"relative-path\">Item3</a>, and <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item4_\" data-linktype=\"relative-path\">Item4</a> instance properties.  </p>\n<p> Tuples are commonly used in four different ways:  </p>\n<ul>\n<li><p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  </p>\n</li>\n<li><p>To provide easy access to, and manipulation of, a data set. The following example defines an array of Tuple(T1, objects that contain the names of baseball pitchers, the number of innings they pitched, and the number of earned runs (runs that scored without fielding errors), and hits that they gave up. The array is passed to the <code>ComputeStatistics</code> method, which calculates each pitcher&#39;s earned run average (the average number of runs given up in a nine-inning game), and the average number of hits given up per inning. The method also uses these two averages to compute a hypothetical effectiveness average.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`4.Class#1\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim pitchers() =  \n               { Tuple.Create(&quot;McHale, Joe&quot;, 240.1d, 221, 96),\n                 Tuple.Create(&quot;Paul, Dave&quot;, 233.1d, 231, 84), \n                 Tuple.Create(&quot;Williams, Mike&quot;, 193.2d, 183, 86),\n                 Tuple.Create(&quot;Blair, Jack&quot;, 168.1d, 146, 65), \n                 Tuple.Create(&quot;Henry, Walt&quot;, 140.1d, 96, 30),\n                 Tuple.Create(&quot;Lee, Adam&quot;, 137.2d, 109, 45),\n                 Tuple.Create(&quot;Rohr, Don&quot;, 101.0d, 110, 42) }\n      Dim results() = ComputeStatistics(pitchers)\n\n      &#39; Display the results.\n      Console.WriteLine(&quot;{0,-20} {1,9} {2,11} {3,15}&quot;, &quot;Pitcher&quot;, &quot;ERA&quot;, &quot;Hits/Inn.&quot;, &quot;Effectiveness&quot;)\n      Console.WriteLine()\n      For Each result In results\n         Console.WriteLine(&quot;{0,-20} {1,9:F2} {2,11:F2} {3,15:F2}&quot;,  \n                        result.Item1, result.Item2, result.Item3, result.Item4)\n      Next\n   End Sub\n   \n   Private Function ComputeStatistics(pitchers() As Tuple(Of String, Decimal, Integer, Integer)) _ \n                                As Tuple(Of String, Double, Double, Double)()\n      Dim list As New List(Of Tuple(Of String, Double, Double, Double))\n      Dim result As Tuple(Of String, Double, Double, Double)\n\n      For Each pitcher As Tuple(Of String, Decimal, Integer, Integer) In pitchers\n         &#39; Decimal portion of innings pitched represents 1/3 of an inning\n         Dim innings As Double = CDbl(Math.Truncate(pitcher.Item2))\n         innings = innings + ((pitcher.Item2 - innings) * .33)\n         \n         Dim ERA As Double = pitcher.Item4/innings * 9\n         Dim hitsPerInning As Double = pitcher.Item3/innings\n         Dim EI As Double = (ERA * 2 + hitsPerInning * 9)/3\n         result = New Tuple(Of String, Double, Double, Double) _\n                           (pitcher.Item1, ERA, hitsPerInning, EI)\n         list.Add(result) \n      Next\n      Return list.ToArray()\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Pitcher                    ERA   Hits/Inn.   Effectiveness\n&#39;       \n&#39;       McHale, Joe               3.60        0.92            5.16\n&#39;       Paul, Dave                3.24        0.99            5.14\n&#39;       Williams, Mike            4.01        0.95            5.52\n&#39;       Blair, Jack               3.48        0.87            4.93\n&#39;       Henry, Walt               1.93        0.69            3.34\n&#39;       Lee, Adam                 2.95        0.80            4.36\n&#39;       Rohr, Don                 3.74        1.09            5.76\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`4.Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, decimal, int, int&gt;[] pitchers  =  \n           { Tuple.Create(&quot;McHale, Joe&quot;, 240.1m, 221, 96),\n             Tuple.Create(&quot;Paul, Dave&quot;, 233.1m, 231, 84), \n             Tuple.Create(&quot;Williams, Mike&quot;, 193.2m, 183, 86),\n             Tuple.Create(&quot;Blair, Jack&quot;, 168.1m, 146, 65), \n             Tuple.Create(&quot;Henry, Walt&quot;, 140.1m, 96, 30),\n             Tuple.Create(&quot;Lee, Adam&quot;, 137.2m, 109, 45),\n             Tuple.Create(&quot;Rohr, Don&quot;, 101.0m, 110, 42) };\n      Tuple&lt;string, double, double, double&gt;[] results= ComputeStatistics(pitchers);\n\n      // Display the results.\n      Console.WriteLine(&quot;{0,-20} {1,9} {2,11} {3,15}\\n&quot;, \n                        &quot;Pitcher&quot;, &quot;ERA&quot;, &quot;Hits/Inn.&quot;, &quot;Effectiveness&quot;);\n      foreach (var result in results)\n         Console.WriteLine(&quot;{0,-20} {1,9:F2} {2,11:F2} {3,15:F2}&quot;,  \n                        result.Item1, result.Item2, result.Item3, result.Item4);\n   }\n\n   private static Tuple&lt;string, double, double, double&gt;[] ComputeStatistics(Tuple&lt;string, decimal, int, int&gt;[] pitchers)\n   {    \n      var list = new List&lt;Tuple&lt;string, double, double, double&gt;&gt;();\n      Tuple&lt;string, double, double, double&gt; result;\n\n      foreach (var pitcher in pitchers)\n      {\n         // Decimal portion of innings pitched represents 1/3 of an inning\n         double innings = (double) Math.Truncate(pitcher.Item2);\n         innings = innings + (((double)pitcher.Item2 - innings) * .33);\n         \n         double ERA = pitcher.Item4/innings * 9;\n         double hitsPerInning = pitcher.Item3/innings;\n         double EI = (ERA * 2 + hitsPerInning * 9)/3;\n         result = new Tuple&lt;string, double, double, double&gt;\n                           (pitcher.Item1, ERA, hitsPerInning, EI);\n         list.Add(result);\n      }\n      return list.ToArray();\n   }\n}\n// The example displays the following output;\n//       Pitcher                    ERA   Hits/Inn.   Effectiveness\n//       \n//       McHale, Joe               3.60        0.92            5.16\n//       Paul, Dave                3.24        0.99            5.14\n//       Williams, Mike            4.01        0.95            5.52\n//       Blair, Jack               3.48        0.87            4.93\n//       Henry, Walt               1.93        0.69            3.34\n//       Lee, Adam                 2.95        0.80            4.36\n//       Rohr, Don                 3.74        1.09            5.76\n</code></pre></li>\n<li><p>To return multiple values from a method without the use of <code>out</code> parameters (in C#) or <code>ByRef</code> parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the name of the pitcher, in an array of Tuple(T1, objects.  </p>\n</li>\n<li><p>To pass multiple values to a method through a single parameter. For example, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">System.Threading.Thread.Start(Object)</a> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a Tuple(T1, object as the method argument, you can supply the thread’s startup routine with four items of data.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4__ctor__0__1__2__3_\" data-linktype=\"self-bookmark\">Tuple&lt;T1,T2,T3,T4&gt;(T1,T2,T3,T4)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`4</span> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_Item1\" data-linktype=\"self-bookmark\">Item1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s first component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_Item2\" data-linktype=\"self-bookmark\">Item2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s second component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_Item3\" data-linktype=\"self-bookmark\">Item3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s third component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_Item4\" data-linktype=\"self-bookmark\">Item4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s fourth component.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`4</span> object is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`4</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`4</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">IStructuralComparable.CompareTo(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`4</span> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`4</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.GetHashCode(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`4</span> object by using a specified computation method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_4_System_IComparable_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">IComparable.CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`4</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4__ctor__0__1__2__3_\">\r\n    \r\n            <a id=\"System_Tuple_4__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4&gt;(T1,T2,T3,T4)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`4</span> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Tuple (T1 item1, T2 item2, T3 item3, T4 item4);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s first component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s second component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s third component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item4</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T4</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s fourth component</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also use the static <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__4___0___1___2___3_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4&gt;(T1,T2,T3,T4)</a> method to instantiate a 4-tuple object without having to explicitly specify the types of its components. The following example uses the <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__4___0___1___2___3_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4&gt;(T1,T2,T3,T4)</a> method to instantiate a 4-tuple whose components are of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, and <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#7\">            var tuple4 = Tuple.Create(&quot;New York&quot;, 32.68, 51.87, 76.3);\n            Console.WriteLine(&quot;{0}: Hi {1}, Lo {2}, Ave {3}&quot;,\n                              tuple4.Item1, tuple4.Item4, tuple4.Item2,\n                              tuple4.Item3);\n            // Displays New York: Hi 76.3, Lo 32.68, Ave 51.87\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#7\">        Dim tuple4 = Tuple.Create(&quot;New York&quot;, 32.68, 51.87, 76.3)\n        Console.WriteLine(&quot;{0}: Hi {1}, Lo {2}, Ave {3}&quot;,\n                          tuple4.Item1, tuple4.Item4, tuple4.Item2,\n                          tuple4.Item3)\n        &#39; Displays New York: Hi 76.3, Lo 32.68, Ave 51.87\n</code></pre><p> This is equivalent to the following call to the Tuple(T1, class constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#8\">            var tuple4 = new Tuple&lt;string, double, double, double&gt;\n                                  (&quot;New York&quot;, 32.68, 51.87, 76.3);\n            Console.WriteLine(&quot;{0}: Hi {1}, Lo {2}, Ave {3}&quot;,\n                              tuple4.Item1, tuple4.Item4, tuple4.Item2,\n                              tuple4.Item3);\n            // Displays New York: Hi 76.3, Lo 32.68, Ave 51.87\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#8\">        Dim tuple4 = New Tuple(Of String, Double, Double, Double) _\n                              (&quot;New York&quot;, 32.68, 51.87, 76.3)\n        Console.WriteLine(&quot;{0}: Hi {1}, Lo {2}, Ave {3}&quot;,\n                          tuple4.Item1, tuple4.Item4, tuple4.Item2,\n                          tuple4.Item3)\n        &#39; Displays New York: Hi 76.3, Lo 32.68, Ave 51.87\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_Item1\">\r\n    \r\n            <a id=\"System_Tuple_4_Item1_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item1</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s first component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T1 Item1 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s first component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item1 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item1 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object, and retrieving the first element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects whose components contain the name of a city, a month of the year, and the average high and low temperatures for that month. It then retrieves and displays the value of each component.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`4.Item1#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, int, double, double&gt;[] temperatures = \n            { Tuple.Create(&quot;New York, NY&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Chicago, IL&quot;, 2, 34.0, 18.0), \n              Tuple.Create(&quot;Newark, NJ&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Boston, MA&quot;, 6, 77.0, 59.0),\n              Tuple.Create(&quot;Detroit, MI&quot;, 9, 74.0, 53.0),\n              Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81.0, 61.0) }; \n      // Display the array of 4-tuple objects.\n      Console.WriteLine(&quot;{0,41}&quot;, &quot;Temperatures&quot;);\n      Console.WriteLine(&quot;{0,-20} {1,5}    {2,4}  {3,4}<br>&quot;, \n                        &quot;City&quot;, &quot;Month&quot;, &quot;High&quot;, &quot;Low&quot;);\n      foreach (var temperature in temperatures)\n         Console.WriteLine(&quot;{0,-20} {1,5}    {2,4:N1}  {3,4:N1}&quot;, \n                           temperature.Item1, \n                           DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(temperature.Item2 - 1), \n                           temperature.Item3, temperature.Item4);\n   }\n}\n// The example displays the following output:\n//                                    Temperatures\n//       City                 Month    High   Low\n//       \n//       New York, NY           Mar    61.0  43.0\n//       Chicago, IL            Jan    34.0  18.0\n//       Newark, NJ             Mar    61.0  43.0\n//       Boston, MA             May    77.0  59.0\n//       Detroit, MI            Aug    74.0  53.0\n//       Minneapolis, MN        Jul    81.0  61.0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`4.Item1#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim temperatures() = \n             { Tuple.Create(&quot;New York, NY&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Chicago, IL&quot;, 2, 34, 18), _ \n               Tuple.Create(&quot;Newark, NJ&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Boston, MA&quot;, 6, 77, 59), _\n               Tuple.Create(&quot;Detroit, MI&quot;, 9, 74, 53), _\n               Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81, 61) } \n      &#39; Display the array of 4-tuples.\n      Console.WriteLine(&quot;{0,41}&quot;, &quot;Temperatures&quot;)\n      Console.WriteLine(&quot;{0,-20} {1,5}    {2,4}  {3,4}&quot;, \n                        &quot;City&quot;, &quot;Month&quot;, &quot;High&quot;, &quot;Low&quot;)\n      Console.WriteLine()\n      For Each temperature In temperatures\n         Console.WriteLine(&quot;{0,-20} {1,5}    {2,4:N1}  {3,4:N1}&quot;, \n                           temperature.Item1, \n                           DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(temperature.Item2 - 1), \n                           temperature.Item3, temperature.Item4)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;                                    Temperatures\n&#39;       City                 Month    High   Low\n&#39;       \n&#39;       New York, NY           Mar    61.0  43.0\n&#39;       Chicago, IL            Jan    34.0  18.0\n&#39;       Newark, NJ             Mar    61.0  43.0\n&#39;       Boston, MA             May    77.0  59.0\n&#39;       Detroit, MI            Aug    74.0  53.0\n&#39;       Minneapolis, MN        Jul    81.0  61.0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_Item2\">\r\n    \r\n            <a id=\"System_Tuple_4_Item2_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item2</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s second component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T2 Item2 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s second component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item2 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item2 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects whose components contain the name of a city, a month of the year, and the average high and low temperatures for that month. It then retrieves and displays the value of each component.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`4.Item1#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, int, double, double&gt;[] temperatures = \n            { Tuple.Create(&quot;New York, NY&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Chicago, IL&quot;, 2, 34.0, 18.0), \n              Tuple.Create(&quot;Newark, NJ&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Boston, MA&quot;, 6, 77.0, 59.0),\n              Tuple.Create(&quot;Detroit, MI&quot;, 9, 74.0, 53.0),\n              Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81.0, 61.0) }; \n      // Display the array of 4-tuple objects.\n      Console.WriteLine(&quot;{0,41}&quot;, &quot;Temperatures&quot;);\n      Console.WriteLine(&quot;{0,-20} {1,5}    {2,4}  {3,4}<br>&quot;, \n                        &quot;City&quot;, &quot;Month&quot;, &quot;High&quot;, &quot;Low&quot;);\n      foreach (var temperature in temperatures)\n         Console.WriteLine(&quot;{0,-20} {1,5}    {2,4:N1}  {3,4:N1}&quot;, \n                           temperature.Item1, \n                           DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(temperature.Item2 - 1), \n                           temperature.Item3, temperature.Item4);\n   }\n}\n// The example displays the following output:\n//                                    Temperatures\n//       City                 Month    High   Low\n//       \n//       New York, NY           Mar    61.0  43.0\n//       Chicago, IL            Jan    34.0  18.0\n//       Newark, NJ             Mar    61.0  43.0\n//       Boston, MA             May    77.0  59.0\n//       Detroit, MI            Aug    74.0  53.0\n//       Minneapolis, MN        Jul    81.0  61.0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`4.Item1#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim temperatures() = \n             { Tuple.Create(&quot;New York, NY&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Chicago, IL&quot;, 2, 34, 18), _ \n               Tuple.Create(&quot;Newark, NJ&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Boston, MA&quot;, 6, 77, 59), _\n               Tuple.Create(&quot;Detroit, MI&quot;, 9, 74, 53), _\n               Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81, 61) } \n      &#39; Display the array of 4-tuples.\n      Console.WriteLine(&quot;{0,41}&quot;, &quot;Temperatures&quot;)\n      Console.WriteLine(&quot;{0,-20} {1,5}    {2,4}  {3,4}&quot;, \n                        &quot;City&quot;, &quot;Month&quot;, &quot;High&quot;, &quot;Low&quot;)\n      Console.WriteLine()\n      For Each temperature In temperatures\n         Console.WriteLine(&quot;{0,-20} {1,5}    {2,4:N1}  {3,4:N1}&quot;, \n                           temperature.Item1, \n                           DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(temperature.Item2 - 1), \n                           temperature.Item3, temperature.Item4)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;                                    Temperatures\n&#39;       City                 Month    High   Low\n&#39;       \n&#39;       New York, NY           Mar    61.0  43.0\n&#39;       Chicago, IL            Jan    34.0  18.0\n&#39;       Newark, NJ             Mar    61.0  43.0\n&#39;       Boston, MA             May    77.0  59.0\n&#39;       Detroit, MI            Aug    74.0  53.0\n&#39;       Minneapolis, MN        Jul    81.0  61.0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_Item3\">\r\n    \r\n            <a id=\"System_Tuple_4_Item3_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item3</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s third component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T3 Item3 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s third component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item3 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item3 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object, and retrieving the third element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects whose components contain the name of a city, a month of the year, and the average high and low temperatures for that month. It then retrieves and displays the value of each component.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`4.Item1#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, int, double, double&gt;[] temperatures = \n            { Tuple.Create(&quot;New York, NY&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Chicago, IL&quot;, 2, 34.0, 18.0), \n              Tuple.Create(&quot;Newark, NJ&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Boston, MA&quot;, 6, 77.0, 59.0),\n              Tuple.Create(&quot;Detroit, MI&quot;, 9, 74.0, 53.0),\n              Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81.0, 61.0) }; \n      // Display the array of 4-tuple objects.\n      Console.WriteLine(&quot;{0,41}&quot;, &quot;Temperatures&quot;);\n      Console.WriteLine(&quot;{0,-20} {1,5}    {2,4}  {3,4}<br>&quot;, \n                        &quot;City&quot;, &quot;Month&quot;, &quot;High&quot;, &quot;Low&quot;);\n      foreach (var temperature in temperatures)\n         Console.WriteLine(&quot;{0,-20} {1,5}    {2,4:N1}  {3,4:N1}&quot;, \n                           temperature.Item1, \n                           DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(temperature.Item2 - 1), \n                           temperature.Item3, temperature.Item4);\n   }\n}\n// The example displays the following output:\n//                                    Temperatures\n//       City                 Month    High   Low\n//       \n//       New York, NY           Mar    61.0  43.0\n//       Chicago, IL            Jan    34.0  18.0\n//       Newark, NJ             Mar    61.0  43.0\n//       Boston, MA             May    77.0  59.0\n//       Detroit, MI            Aug    74.0  53.0\n//       Minneapolis, MN        Jul    81.0  61.0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`4.Item1#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim temperatures() = \n             { Tuple.Create(&quot;New York, NY&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Chicago, IL&quot;, 2, 34, 18), _ \n               Tuple.Create(&quot;Newark, NJ&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Boston, MA&quot;, 6, 77, 59), _\n               Tuple.Create(&quot;Detroit, MI&quot;, 9, 74, 53), _\n               Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81, 61) } \n      &#39; Display the array of 4-tuples.\n      Console.WriteLine(&quot;{0,41}&quot;, &quot;Temperatures&quot;)\n      Console.WriteLine(&quot;{0,-20} {1,5}    {2,4}  {3,4}&quot;, \n                        &quot;City&quot;, &quot;Month&quot;, &quot;High&quot;, &quot;Low&quot;)\n      Console.WriteLine()\n      For Each temperature In temperatures\n         Console.WriteLine(&quot;{0,-20} {1,5}    {2,4:N1}  {3,4:N1}&quot;, \n                           temperature.Item1, \n                           DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(temperature.Item2 - 1), \n                           temperature.Item3, temperature.Item4)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;                                    Temperatures\n&#39;       City                 Month    High   Low\n&#39;       \n&#39;       New York, NY           Mar    61.0  43.0\n&#39;       Chicago, IL            Jan    34.0  18.0\n&#39;       Newark, NJ             Mar    61.0  43.0\n&#39;       Boston, MA             May    77.0  59.0\n&#39;       Detroit, MI            Aug    74.0  53.0\n&#39;       Minneapolis, MN        Jul    81.0  61.0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_Item4\">\r\n    \r\n            <a id=\"System_Tuple_4_Item4_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item4</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s fourth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T4 Item4 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T4</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`4</span> object&#39;s fourth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item4 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item4 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object, and retrieving the fourth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects whose components contain the name of a city, a month of the year, and the average high and low temperatures for that month. It then retrieves and displays the value of each component.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`4.Item1#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, int, double, double&gt;[] temperatures = \n            { Tuple.Create(&quot;New York, NY&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Chicago, IL&quot;, 2, 34.0, 18.0), \n              Tuple.Create(&quot;Newark, NJ&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Boston, MA&quot;, 6, 77.0, 59.0),\n              Tuple.Create(&quot;Detroit, MI&quot;, 9, 74.0, 53.0),\n              Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81.0, 61.0) }; \n      // Display the array of 4-tuple objects.\n      Console.WriteLine(&quot;{0,41}&quot;, &quot;Temperatures&quot;);\n      Console.WriteLine(&quot;{0,-20} {1,5}    {2,4}  {3,4}<br>&quot;, \n                        &quot;City&quot;, &quot;Month&quot;, &quot;High&quot;, &quot;Low&quot;);\n      foreach (var temperature in temperatures)\n         Console.WriteLine(&quot;{0,-20} {1,5}    {2,4:N1}  {3,4:N1}&quot;, \n                           temperature.Item1, \n                           DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(temperature.Item2 - 1), \n                           temperature.Item3, temperature.Item4);\n   }\n}\n// The example displays the following output:\n//                                    Temperatures\n//       City                 Month    High   Low\n//       \n//       New York, NY           Mar    61.0  43.0\n//       Chicago, IL            Jan    34.0  18.0\n//       Newark, NJ             Mar    61.0  43.0\n//       Boston, MA             May    77.0  59.0\n//       Detroit, MI            Aug    74.0  53.0\n//       Minneapolis, MN        Jul    81.0  61.0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`4.Item1#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim temperatures() = \n             { Tuple.Create(&quot;New York, NY&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Chicago, IL&quot;, 2, 34, 18), _ \n               Tuple.Create(&quot;Newark, NJ&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Boston, MA&quot;, 6, 77, 59), _\n               Tuple.Create(&quot;Detroit, MI&quot;, 9, 74, 53), _\n               Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81, 61) } \n      &#39; Display the array of 4-tuples.\n      Console.WriteLine(&quot;{0,41}&quot;, &quot;Temperatures&quot;)\n      Console.WriteLine(&quot;{0,-20} {1,5}    {2,4}  {3,4}&quot;, \n                        &quot;City&quot;, &quot;Month&quot;, &quot;High&quot;, &quot;Low&quot;)\n      Console.WriteLine()\n      For Each temperature In temperatures\n         Console.WriteLine(&quot;{0,-20} {1,5}    {2,4:N1}  {3,4:N1}&quot;, \n                           temperature.Item1, \n                           DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(temperature.Item2 - 1), \n                           temperature.Item3, temperature.Item4)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;                                    Temperatures\n&#39;       City                 Month    High   Low\n&#39;       \n&#39;       New York, NY           Mar    61.0  43.0\n&#39;       Chicago, IL            Jan    34.0  18.0\n&#39;       Newark, NJ             Mar    61.0  43.0\n&#39;       Boston, MA             May    77.0  59.0\n&#39;       Detroit, MI            Aug    74.0  53.0\n&#39;       Minneapolis, MN        Jul    81.0  61.0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_4_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`4</span> object is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>obj</code> parameter is considered to be equal to the current instance under the following conditions:  </p>\n<ul>\n<li><p>It is a <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object.  </p>\n</li>\n<li><p>Its four components are of the same types as the current instance.  </p>\n</li>\n<li><p>Its four components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects that provide data on temperatures at three times during a particular day. The Equals method is called to compare every <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object with every other <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object. The output illustrates that the Equals method returns <code>true</code> only when all four components of the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects have equal values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`4.Equals#1\">using System;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      Tuple&lt;DateTime, double, double, double&gt;[] temperatures = \n            { Tuple.Create(new DateTime(2009, 1, 16), 3.0, 5.0, 4.0),\n              Tuple.Create(new DateTime(2009, 4, 22), 9.0, 14.0, 11.0), \n              Tuple.Create(new DateTime(2009, 4, 22), 9.0, 14.0, 10.0),\n              Tuple.Create(new DateTime(2009, 6, 1), 23.0, 28.0, 21.0),\n              Tuple.Create(new DateTime(2009, 4, 22), 9.0, 14.0, 11.0),\n              Tuple.Create(new DateTime(2009, 9, 6), 25.0, 30.0, 25.0) }; \n      // Compare each item with every other item for equality.\n      for (int ctr = 0; ctr &lt; temperatures.Length; ctr++)\n      {\n         var temperatureInfo = temperatures[ctr];\n         for (int ctr2 = ctr + 1; ctr2 &lt; temperatures.Length; ctr2++)\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, temperatureInfo, temperatures[ctr2], \n                                                temperatureInfo.Equals(temperatures[ctr2]));\n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output:\n//    (1/16/2009 12:00:00 AM, 3, 5, 4) = (4/22/2009 12:00:00 AM, 9, 14, 11): False\n//    (1/16/2009 12:00:00 AM, 3, 5, 4) = (4/22/2009 12:00:00 AM, 9, 14, 10): False\n//    (1/16/2009 12:00:00 AM, 3, 5, 4) = (6/1/2009 12:00:00 AM, 23, 28, 21): False\n//    (1/16/2009 12:00:00 AM, 3, 5, 4) = (4/22/2009 12:00:00 AM, 9, 14, 11): False\n//    (1/16/2009 12:00:00 AM, 3, 5, 4) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n//    \n//    (4/22/2009 12:00:00 AM, 9, 14, 11) = (4/22/2009 12:00:00 AM, 9, 14, 10): False\n//    (4/22/2009 12:00:00 AM, 9, 14, 11) = (6/1/2009 12:00:00 AM, 23, 28, 21): False\n//    (4/22/2009 12:00:00 AM, 9, 14, 11) = (4/22/2009 12:00:00 AM, 9, 14, 11): True\n//    (4/22/2009 12:00:00 AM, 9, 14, 11) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n//    \n//    (4/22/2009 12:00:00 AM, 9, 14, 10) = (6/1/2009 12:00:00 AM, 23, 28, 21): False\n//    (4/22/2009 12:00:00 AM, 9, 14, 10) = (4/22/2009 12:00:00 AM, 9, 14, 11): False\n//    (4/22/2009 12:00:00 AM, 9, 14, 10) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n//    \n//    (6/1/2009 12:00:00 AM, 23, 28, 21) = (4/22/2009 12:00:00 AM, 9, 14, 11): False\n//    (6/1/2009 12:00:00 AM, 23, 28, 21) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n//    \n//    (4/22/2009 12:00:00 AM, 9, 14, 11) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`4.Equals#1\">Module Example\n   Public Sub Main()\n      Dim temperatures() = \n              { Tuple.Create(#1/16/2009#, 3, 5, 4), _\n                Tuple.Create(#4/22/2009#, 9, 14, 11), _ \n                Tuple.Create(#4/22/2009#, 9, 14, 10), _\n                Tuple.Create(#6/01/2009#, 23, 28, 21), _\n                Tuple.Create(#4/22/2009#, 9, 14, 11), _\n                Tuple.Create(#9/06/2009#, 25, 30, 25) } \n      &#39; Compare each item with every other item for equality.\n      For ctr As Integer = 0 To temperatures.Length - 1\n         Dim temperatureInfo = temperatures(ctr)\n         For ctr2 As Integer = ctr + 1 To temperatures.Length - 1\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, temperatureInfo, temperatures(ctr2), \n                                                temperatureInfo.Equals(temperatures(ctr2)))\n         Next  \n         Console.WriteLine()                                               \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    (1/16/2009 12:00:00 AM, 3, 5, 4) = (4/22/2009 12:00:00 AM, 9, 14, 11): False\n&#39;    (1/16/2009 12:00:00 AM, 3, 5, 4) = (4/22/2009 12:00:00 AM, 9, 14, 10): False\n&#39;    (1/16/2009 12:00:00 AM, 3, 5, 4) = (6/1/2009 12:00:00 AM, 23, 28, 21): False\n&#39;    (1/16/2009 12:00:00 AM, 3, 5, 4) = (4/22/2009 12:00:00 AM, 9, 14, 11): False\n&#39;    (1/16/2009 12:00:00 AM, 3, 5, 4) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n&#39;    \n&#39;    (4/22/2009 12:00:00 AM, 9, 14, 11) = (4/22/2009 12:00:00 AM, 9, 14, 10): False\n&#39;    (4/22/2009 12:00:00 AM, 9, 14, 11) = (6/1/2009 12:00:00 AM, 23, 28, 21): False\n&#39;    (4/22/2009 12:00:00 AM, 9, 14, 11) = (4/22/2009 12:00:00 AM, 9, 14, 11): True\n&#39;    (4/22/2009 12:00:00 AM, 9, 14, 11) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n&#39;    \n&#39;    (4/22/2009 12:00:00 AM, 9, 14, 10) = (6/1/2009 12:00:00 AM, 23, 28, 21): False\n&#39;    (4/22/2009 12:00:00 AM, 9, 14, 10) = (4/22/2009 12:00:00 AM, 9, 14, 11): False\n&#39;    (4/22/2009 12:00:00 AM, 9, 14, 10) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n&#39;    \n&#39;    (6/1/2009 12:00:00 AM, 23, 28, 21) = (4/22/2009 12:00:00 AM, 9, 14, 11): False\n&#39;    (6/1/2009 12:00:00 AM, 23, 28, 21) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n&#39;    \n&#39;    (4/22/2009 12:00:00 AM, 9, 14, 11) = (9/6/2009 12:00:00 AM, 25, 30, 25): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_GetHashCode\">\r\n    \r\n            <a id=\"System_Tuple_4_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`4</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_ToString\">\r\n    \r\n            <a id=\"System_Tuple_4_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`4</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of this <span class=\"xref\">stem.Tuple`4</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string returned by this method takes the form (<em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>), where <em>Item1</em>, <em>Item2</em>, <em>Item3</em>, and <em>Item4</em> represent the values of the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item3_\" data-linktype=\"relative-path\">Item3</a>, and <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item4_\" data-linktype=\"relative-path\">Item4</a> properties, respectively. If any of the property values is <code>null</code>, it is represented as <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the ToString method. It displays the components of an array of 4-tuple objects that contain the name of a city, a month of the year, and the high and low average temperature for that month.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`4.ToString#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, int, int, int&gt;[] temperatures = \n            { Tuple.Create(&quot;New York, NY&quot;, 4, 61, 43),\n              Tuple.Create(&quot;Chicago, IL&quot;, 2, 34, 18), \n              Tuple.Create(&quot;Newark, NJ&quot;, 4, 61, 43),\n              Tuple.Create(&quot;Boston, MA&quot;, 6, 77, 59),\n              Tuple.Create(&quot;Detroit, MI&quot;, 9, 74, 53),\n              Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81, 61) }; \n      // Display the array of 4-tuple objects.\n      foreach (var temperature in temperatures)\n         Console.WriteLine(temperature.ToString()); \n   }\n}\n// The example displays the following output:\n//       (New York, NY, 4, 61, 43)\n//       (Chicago, IL, 2, 34, 18)\n//       (Newark, NJ, 4, 61, 43)\n//       (Boston, MA, 6, 77, 59)\n//       (Detroit, MI, 9, 74, 53)\n//       (Minneapolis, MN, 8, 81, 61)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`4.ToString#1\">Module Example\n   Public Sub Main()\n      Dim temperatures() = \n             { Tuple.Create(&quot;New York, NY&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Chicago, IL&quot;, 2, 34, 18), _ \n               Tuple.Create(&quot;Newark, NJ&quot;, 4, 61, 43), _\n               Tuple.Create(&quot;Boston, MA&quot;, 6, 77, 59), _\n               Tuple.Create(&quot;Detroit, MI&quot;, 9, 74, 53), _\n               Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81, 61) } \n      &#39; Display the array of 4-tuple objects.\n      For Each temperature In temperatures\n         Console.WriteLine(temperature.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (New York, NY, 4, 61, 43)\n&#39;       (Chicago, IL, 2, 34, 18)\n&#39;       (Newark, NJ, 4, 61, 43)\n&#39;       (Boston, MA, 6, 77, 59)\n&#39;       (Detroit, MI, 9, 74, 53)\n&#39;       (Minneapolis, MN, 8, 81, 61)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Tuple_4_System_Collections_IStructuralComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralComparable.CompareTo(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`4</span> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides custom rules for comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>other</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is not a <span class=\"xref\">stem.Tuple`4</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralcomparable\" data-linktype=\"relative-path\">IStructuralComparable</a> interface.  </p>\n<p> Although this method can be called directly, it is most commonly called by collection sorting methods that include <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> parameters to order the members of a collection. For example, it is called by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method and the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a> method of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object that is instantiated by using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList__ctor_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Collections.SortedList.SortedList(IComparer)</a> constructor.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"relative-path\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects that contain statistical data about baseball pitchers. The data items include the name of the pitcher, the number of innings pitched, the pitcher&#39;s earned run average (the average number of runs a pitcher allows per game), and the number of hits the pitcher has given up. The example displays the component of each tuple in the array in unsorted order, sorts the array, and then calls <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_ToString_\" data-linktype=\"relative-path\">ToString</a> to display the value of each tuple in sorted order. To sort the array, the example defines a generic <code>PitcherComparer</code> class that implements the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface and sorts the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects in ascending order by the value of their third component (the earned run average) rather than their first component. Note that the example does not directly call the IStructuralComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`4.CompareTo#2\">Imports System.Collections\nImports System.Collections.Generic\n\nPublic Class PitcherComparer(Of T1, T2, T3, T4) : Implements IComparer\n   Public Function Compare(x As Object, y As Object) As Integer _\n                   Implements IComparer.Compare\n      Dim tX As Tuple(Of T1, T2, T3) = TryCast(x, Tuple(Of T1, T2, T3))\n      If tX Is Nothing Then\n         Return 0\n      Else\n         Dim tY As Tuple(Of T1, T2, T3) = DirectCast(y, Tuple(Of T1, T2, T3))\n         Return Comparer(Of T3).Default.Compare(tx.Item3, tY.Item3)             \n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim pitchers() = \n                { Tuple.Create(&quot;McHale, Joe&quot;, 240.1, 3.60, 221),\n                  Tuple.Create(&quot;Paul, Dave&quot;, 233.1, 3.24, 231), \n                  Tuple.Create(&quot;Williams, Mike&quot;, 193.2, 4.00, 183),\n                  Tuple.Create(&quot;Blair, Jack&quot;, 168.1, 3.48, 146), \n                  Tuple.Create(&quot;Henry, Walt&quot;, 140.1, 1.92, 96),\n                  Tuple.Create(&quot;Lee, Adam&quot;, 137.2, 2.94, 109),\n                  Tuple.Create(&quot;Rohr, Don&quot;, 101.0, 3.74, 110) }\n\n      Console.WriteLine(&quot;The values in unsorted order:&quot;)\n      For Each pitcher In pitchers\n         Console.WriteLine(pitcher.ToString())\n      Next\n      Console.WriteLine()\n\n      Array.Sort(pitchers, New PitcherComparer(Of String, Double, Double, Integer)())\n\n      Console.WriteLine(&quot;The values sorted by earned run average (component 3):&quot;)\n      For Each pitcher In pitchers\n         Console.WriteLine(pitcher.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output;\n&#39;       The values in unsorted order:\n&#39;       (McHale, Joe, 240.1, 3.6, 221)\n&#39;       (Paul, Dave, 233.1, 3.24, 231)\n&#39;       (Williams, Mike, 193.2, 4, 183)\n&#39;       (Blair, Jack, 168.1, 3.48, 146)\n&#39;       (Henry, Walt, 140.1, 1.92, 96)\n&#39;       (Lee, Adam, 137.2, 2.94, 109)\n&#39;       (Rohr, Don, 101, 3.74, 110)\n&#39;       \n&#39;       The values sorted by earned run average (component 3):\n&#39;       (Henry, Walt, 140.1, 1.92, 96)\n&#39;       (Lee, Adam, 137.2, 2.94, 109)\n&#39;       (Rohr, Don, 101, 3.74, 110)\n&#39;       (Blair, Jack, 168.1, 3.48, 146)\n&#39;       (McHale, Joe, 240.1, 3.6, 221)\n&#39;       (Paul, Dave, 233.1, 3.24, 231)\n&#39;       (Williams, Mike, 193.2, 4, 183)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`4.CompareTo#2\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class PitcherComparer&lt;T1, T2, T3, T4&gt; : IComparer\n{\n   public int Compare(object x, object y)\n   {\n      Tuple&lt;T1, T2, T3, T4&gt; tX = x as Tuple&lt;T1, T2, T3, T4&gt;;\n      if (tX == null)\n      { \n         return 0;\n      }   \n      else\n      {\n         Tuple&lt;T1, T2, T3, T4&gt; tY = y as Tuple&lt;T1, T2, T3, T4&gt;;\n         return Comparer&lt;T3&gt;.Default.Compare(tX.Item3, tY.Item3);             \n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, double, int&gt;[] pitchers = \n                    { Tuple.Create(&quot;McHale, Joe&quot;, 240.1, 3.60, 221),\n                      Tuple.Create(&quot;Paul, Dave&quot;, 233.1, 3.24, 231), \n                      Tuple.Create(&quot;Williams, Mike&quot;, 193.2, 4.00, 183),\n                      Tuple.Create(&quot;Blair, Jack&quot;, 168.1, 3.48, 146), \n                      Tuple.Create(&quot;Henry, Walt&quot;, 140.1, 1.92, 96),\n                      Tuple.Create(&quot;Lee, Adam&quot;, 137.2, 2.94, 109),\n                      Tuple.Create(&quot;Rohr, Don&quot;, 101.0, 3.74, 110) };\n\n      Console.WriteLine(&quot;The values in unsorted order:&quot;);\n      foreach (var pitcher in pitchers)\n         Console.WriteLine(pitcher.ToString());\n\n      Console.WriteLine();\n\n      Array.Sort(pitchers, new PitcherComparer&lt;string, double, double, int&gt;());\n\n      Console.WriteLine(&quot;The values sorted by earned run average (component 3):&quot;);\n      foreach (var pitcher in pitchers)\n         Console.WriteLine(pitcher.ToString());\n   }\n}\n// The example displays the following output;\n//       The values in unsorted order:\n//       (McHale, Joe, 240.1, 3.6, 221)\n//       (Paul, Dave, 233.1, 3.24, 231)\n//       (Williams, Mike, 193.2, 4, 183)\n//       (Blair, Jack, 168.1, 3.48, 146)\n//       (Henry, Walt, 140.1, 1.92, 96)\n//       (Lee, Adam, 137.2, 2.94, 109)\n//       (Rohr, Don, 101, 3.74, 110)\n//       \n//       The values sorted by earned run average (component 3):\n//       (Henry, Walt, 140.1, 1.92, 96)\n//       (Lee, Adam, 137.2, 2.94, 109)\n//       (Rohr, Don, 101, 3.74, 110)\n//       (Blair, Jack, 168.1, 3.48, 146)\n//       (McHale, Joe, 240.1, 3.6, 221)\n//       (Paul, Dave, 233.1, 3.24, 231)\n//       (Williams, Mike, 193.2, 4, 183)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_4_System_Collections_IStructuralEquatable_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.Equals(Object,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`4</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation is called only if <code>other</code> is not <code>null</code>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object whose components are of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item1_\" data-linktype=\"relative-path\">Item1</a> values of the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects to be compared to the <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation. If this method call returns <code>true</code>, the method is called again and passed the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> values of the two <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects. If this method call returns <code>true</code> again, the method is called a third time and passed the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item3_\" data-linktype=\"relative-path\">Item3</a> values of the two <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects. If this method call returns <code>true</code> again, the method is called for the fourth and final time and passed the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item4_\" data-linktype=\"relative-path\">Item4</a> values of the two <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <code>Item3And4Comparer</code> class that implements the <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> interface and changes the way in which <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects are evaluated for equality. The method always returns <code>true</code> when it is passed the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item1_\" data-linktype=\"relative-path\">Item1</a> and <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> property values of two <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects, and it calls the <code>obj.Equals</code> method to evaluate their <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item3_\" data-linktype=\"relative-path\">Item3</a> property values. It this method call returns true, it also calls the <code>obj.Equals</code> method to evaluate the tuples&#39; <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item4_\" data-linktype=\"relative-path\">Item4</a> property values. As a result, the method tests for equality based only on the values of the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item3_\" data-linktype=\"relative-path\">Item3</a> and <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item4_\" data-linktype=\"relative-path\">Item4</a> properties. The output illustrates the result for a data set of <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects that record the name of a U.S. city, the month of a year, and the average high and low temperature for that month.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`4.Equals#2\">using System;\nusing System.Collections;\n\npublic class Item3And4Comparer&lt;T1, T2, T3, T4&gt; : IEqualityComparer\n{\n   private int argument = 0;\n   \n   new public bool Equals(object x, object y)\n   {\n      argument++;\n      \n      // Return true for all values of Item1, Item2.\n      if (argument &lt;= 2)\n         return true;\n      else\n         return x.Equals(y);\n   }\n   \n   public int GetHashCode(object obj)\n   {\n      if (obj is T1)\n         return ((T1) obj).GetHashCode();\n      else if (obj is T2)\n         return ((T2) obj).GetHashCode();\n      else if (obj is T3)\n         return ((T3) obj).GetHashCode();\n      else\n         return ((T4) obj).GetHashCode();\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, int, double, double&gt;[] temperatures = \n            { Tuple.Create(&quot;New York, NY&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Chicago, IL&quot;, 2, 34.0, 18.0), \n              Tuple.Create(&quot;Newark, NJ&quot;, 4, 61.0, 43.0),\n              Tuple.Create(&quot;Boston, MA&quot;, 6, 77.0, 59.0),\n              Tuple.Create(&quot;Detroit, MI&quot;, 9, 74.0, 53.0),\n              Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81.0, 61.0) }; \n      // Compare each item with every other item for equality.\n      for (int ctr = 0; ctr &lt; temperatures.Length; ctr++)\n      {\n         IStructuralEquatable temperatureInfo = temperatures[ctr];\n         for (int ctr2 = ctr + 1; ctr2 &lt; temperatures.Length; ctr2++)\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                              temperatureInfo, temperatures[ctr2], \n                              temperatureInfo.Equals(temperatures[ctr2], \n                                              new Item3And4Comparer&lt;string, int, double, double&gt;()));\n\n         Console.WriteLine();                                               \n      }\n   }\n}\n// The example displays the following output:\n//    (New York, NY, 4, 61, 43) = (Chicago, IL, 2, 34, 18): False\n//    (New York, NY, 4, 61, 43) = (Newark, NJ, 4, 61, 43): True\n//    (New York, NY, 4, 61, 43) = (Boston, MA, 6, 77, 59): False\n//    (New York, NY, 4, 61, 43) = (Detroit, MI, 9, 74, 53): False\n//    (New York, NY, 4, 61, 43) = (Minneapolis, MN, 8, 81, 61): False\n//    \n//    (Chicago, IL, 2, 34, 18) = (Newark, NJ, 4, 61, 43): False\n//    (Chicago, IL, 2, 34, 18) = (Boston, MA, 6, 77, 59): False\n//    (Chicago, IL, 2, 34, 18) = (Detroit, MI, 9, 74, 53): False\n//    (Chicago, IL, 2, 34, 18) = (Minneapolis, MN, 8, 81, 61): False\n//    \n//    (Newark, NJ, 4, 61, 43) = (Boston, MA, 6, 77, 59): False\n//    (Newark, NJ, 4, 61, 43) = (Detroit, MI, 9, 74, 53): False\n//    (Newark, NJ, 4, 61, 43) = (Minneapolis, MN, 8, 81, 61): False\n//    \n//    (Boston, MA, 6, 77, 59) = (Detroit, MI, 9, 74, 53): False\n//    (Boston, MA, 6, 77, 59) = (Minneapolis, MN, 8, 81, 61): False\n//    \n//    (Detroit, MI, 9, 74, 53) = (Minneapolis, MN, 8, 81, 61): False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`4.Equals#2\">Imports System.Collections\n\nPublic Class Item3And4Comparer(Of T1, T2, T3, T4) : Implements IEqualityComparer\n   \n   Private argument As Integer = 0\n   \n   Public Overloads Function Equals(x As Object, y As Object) As Boolean _\n                   Implements IEqualityComparer.Equals\n      argument += 1\n      \n      &#39; Return true for all values of Item1, Item2.\n      If argument &lt;= 2 Then\n         Return True\n      Else\n         Return x.Equals(y)\n      End If\n   End Function\n   \n   Public Overloads Function GetHashCode(obj As Object) As Integer _\n                    Implements IEqualityComparer.GetHashCode\n      If TypeOf obj Is T1 Then\n         Return CType(obj, T1).GetHashCode()\n      ElseIf TypeOf obj Is T2 Then\n         Return CType(obj, T2).GetHashCode()\n      ElseIf TypeOf obj Is T3 Then\n         REturn CType(Obj, T3).GetHashCode()\n      Else\t\n         Return CType(obj, T4).GetHashCode()\n      End If\n   End Function                \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim temperatures() = \n              { Tuple.Create(&quot;New York, NY&quot;, 4, 61, 43), _\n                Tuple.Create(&quot;Chicago, IL&quot;, 2, 34, 18), _ \n                Tuple.Create(&quot;Newark, NJ&quot;, 4, 61, 43), _\n                Tuple.Create(&quot;Boston, MA&quot;, 6, 77, 59), _\n                Tuple.Create(&quot;Detroit, MI&quot;, 9, 74, 53), _\n                Tuple.Create(&quot;Minneapolis, MN&quot;, 8, 81, 61) } \n      &#39; Compare each item with every other item for equality.\n      For ctr As Integer = 0 To temperatures.Length - 1\n         Dim temperatureInfo As IStructuralEquatable = temperatures(ctr)\n         For ctr2 As Integer = ctr + 1 To temperatures.Length - 1\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                              temperatureInfo, temperatures(ctr2), \n                              temperatureInfo.Equals(temperatures(ctr2), \n                                              New Item3And4Comparer(Of String, Integer, Double, Double)))\n         Next  \n         Console.WriteLine()                                               \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    (New York, NY, 4, 61, 43) = (Chicago, IL, 2, 34, 18): False\n&#39;    (New York, NY, 4, 61, 43) = (Newark, NJ, 4, 61, 43): True\n&#39;    (New York, NY, 4, 61, 43) = (Boston, MA, 6, 77, 59): False\n&#39;    (New York, NY, 4, 61, 43) = (Detroit, MI, 9, 74, 53): False\n&#39;    (New York, NY, 4, 61, 43) = (Minneapolis, MN, 8, 81, 61): False\n&#39;    \n&#39;    (Chicago, IL, 2, 34, 18) = (Newark, NJ, 4, 61, 43): False\n&#39;    (Chicago, IL, 2, 34, 18) = (Boston, MA, 6, 77, 59): False\n&#39;    (Chicago, IL, 2, 34, 18) = (Detroit, MI, 9, 74, 53): False\n&#39;    (Chicago, IL, 2, 34, 18) = (Minneapolis, MN, 8, 81, 61): False\n&#39;    \n&#39;    (Newark, NJ, 4, 61, 43) = (Boston, MA, 6, 77, 59): False\n&#39;    (Newark, NJ, 4, 61, 43) = (Detroit, MI, 9, 74, 53): False\n&#39;    (Newark, NJ, 4, 61, 43) = (Minneapolis, MN, 8, 81, 61): False\n&#39;    \n&#39;    (Boston, MA, 6, 77, 59) = (Detroit, MI, 9, 74, 53): False\n&#39;    (Boston, MA, 6, 77, 59) = (Minneapolis, MN, 8, 81, 61): False\n&#39;    \n&#39;    (Detroit, MI, 9, 74, 53) = (Minneapolis, MN, 8, 81, 61): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_4_System_Collections_IStructuralEquatable_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.GetHashCode(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`4</span> object by using a specified computation method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose <span class=\"xref\">stem.Collections.IEqualityComparer.GetHashCode*</span> method calculates the hash code of the current <span class=\"xref\">stem.Tuple`4</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The method simply wraps a call to the <code>comparer</code> object&#39;s <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> implementation.  </p>\n<p> The algorithm used to compute the hash code should return the same hash code for two <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects that are considered to be equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_4_System_IComparable_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_4_System_IComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IComparable.CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`4</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IComparable.CompareTo (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>obj</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>obj</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>obj</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a <span class=\"xref\">stem.Tuple`4</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> This method provides the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> implementation for the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> class. Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> and <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a>, to order the members of a collection.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> The IComparable.CompareTo method uses the default object comparer to compare each component.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> objects whose components consist of a baseball pitcher&#39;s name, number of innings pitched, and number of hits and earned runs given up. It displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_ToString_\" data-linktype=\"relative-path\">ToString</a> to display each tuple in sorted order. The output shows that the array has been sorted by name, which is the first component. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">Sort(Array)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`4.CompareTo#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, decimal, int, int&gt;[] pitchers  =  \n                      { Tuple.Create(&quot;McHale, Joe&quot;, 240.1m, 221, 96),\n                        Tuple.Create(&quot;Paul, Dave&quot;, 233.1m, 231, 84), \n                        Tuple.Create(&quot;Williams, Mike&quot;, 193.2m, 183, 86),\n                        Tuple.Create(&quot;Blair, Jack&quot;, 168.1m, 146, 65), \n                        Tuple.Create(&quot;Henry, Walt&quot;, 140.1m, 96, 30),\n                        Tuple.Create(&quot;Lee, Adam&quot;, 137.2m, 109, 45),\n                        Tuple.Create(&quot;Rohr, Don&quot;, 101.0m, 110, 42) };\n\n      // Display the array in unsorted order.\n      Console.WriteLine(&quot;The values in unsorted order:&quot;);\n      foreach (var pitcher in pitchers)\n         Console.WriteLine(pitcher.ToString());\n      Console.WriteLine();\n      \n      // Sort the array\n      Array.Sort(pitchers);\n      \n      // Display the array in sorted order.\n      Console.WriteLine(&quot;The values in sorted order:&quot;);\n      foreach (var pitcher in pitchers)\n         Console.WriteLine(pitcher.ToString());\n   }\n}\n// The example displays the following output;\n//       The values in unsorted order:\n//       (McHale, Joe, 240.1, 221, 96)\n//       (Paul, Dave, 233.1, 231, 84)\n//       (Williams, Mike, 193.2, 183, 86)\n//       (Blair, Jack, 168.1, 146, 65)\n//       (Henry, Walt, 140.1, 96, 30)\n//       (Lee, Adam, 137.2, 109, 45)\n//       (Rohr, Don, 101, 110, 42)\n//       \n//       The values in sorted order:\n//       (Blair, Jack, 168.1, 146, 65)\n//       (Henry, Walt, 140.1, 96, 30)\n//       (Lee, Adam, 137.2, 109, 45)\n//       (McHale, Joe, 240.1, 221, 96)\n//       (Paul, Dave, 233.1, 231, 84)\n//       (Rohr, Don, 101, 110, 42)\n//       (Williams, Mike, 193.2, 183, 86)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`4.CompareTo#1\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim pitchers() =  \n                { Tuple.Create(&quot;McHale, Joe&quot;, 240.1d, 221, 96),\n                  Tuple.Create(&quot;Paul, Dave&quot;, 233.1d, 231, 84), \n                  Tuple.Create(&quot;Williams, Mike&quot;, 193.2d, 183, 86),\n                  Tuple.Create(&quot;Blair, Jack&quot;, 168.1d, 146, 65), \n                  Tuple.Create(&quot;Henry, Walt&quot;, 140.1d, 96, 30),\n                  Tuple.Create(&quot;Lee, Adam&quot;, 137.2d, 109, 45),\n                  Tuple.Create(&quot;Rohr, Don&quot;, 101.0d, 110, 42) }\n\n      &#39; Display the array in unsorted order.\n      Console.WriteLine(&quot;The values in unsorted order:&quot;)\n      For Each pitcher In pitchers\n         Console.WriteLine(pitcher.ToString())\n      Next\n      Console.WriteLine()\n      \n      &#39; Sort the array\n      Array.Sort(pitchers)\n      \n      &#39; Display the array in sorted order.\n      Console.WriteLine(&quot;The values in sorted order:&quot;)\n      For Each pitcher In pitchers\n         Console.WriteLine(pitcher.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The values in unsorted order:\n&#39;       (McHale, Joe, 240.1, 221, 96)\n&#39;       (Paul, Dave, 233.1, 231, 84)\n&#39;       (Williams, Mike, 193.2, 183, 86)\n&#39;       (Blair, Jack, 168.1, 146, 65)\n&#39;       (Henry, Walt, 140.1, 96, 30)\n&#39;       (Lee, Adam, 137.2, 109, 45)\n&#39;       (Rohr, Don, 101, 110, 42)\n&#39;       \n&#39;       The values in sorted order:\n&#39;       (Blair, Jack, 168.1, 146, 65)\n&#39;       (Henry, Walt, 140.1, 96, 30)\n&#39;       (Lee, Adam, 137.2, 109, 45)\n&#39;       (McHale, Joe, 240.1, 221, 96)\n&#39;       (Paul, Dave, 233.1, 231, 84)\n&#39;       (Rohr, Don, 101, 110, 42)\n&#39;       (Williams, Mike, 193.2, 183, 86)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-4.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-4.yml\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.Item1\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.Item2\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.Item3\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.Item4\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.IStructuralComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.IStructuralEquatable.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.IStructuralEquatable.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.IComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4&gt;.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"86b9db3f-67d5-1639-b03b-93c94f341477\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a 4-tuple, or quadruple.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Tuple`4\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-4.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-4.yml","open_to_public_contributors":true,"api_name":["System.Tuple<T1,T2,T3,T4>","System.Tuple<T1,T2,T3,T4>..ctor","System.Tuple<T1,T2,T3,T4>.Equals","System.Tuple<T1,T2,T3,T4>.GetHashCode","System.Tuple<T1,T2,T3,T4>.Item1","System.Tuple<T1,T2,T3,T4>.Item2","System.Tuple<T1,T2,T3,T4>.Item3","System.Tuple<T1,T2,T3,T4>.Item4","System.Tuple<T1,T2,T3,T4>.IStructuralComparable.CompareTo","System.Tuple<T1,T2,T3,T4>.IStructuralEquatable.Equals","System.Tuple<T1,T2,T3,T4>.IStructuralEquatable.GetHashCode","System.Tuple<T1,T2,T3,T4>.IComparable.CompareTo","System.Tuple<T1,T2,T3,T4>.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Tuple`4","System::Tuple`4","System.Tuple`4.#ctor","System::Tuple`4::#ctor","System.Tuple`4.Equals","System::Tuple`4::Equals","System.Tuple`4.GetHashCode","System::Tuple`4::GetHashCode","System.Tuple`4.Item1","System::Tuple`4::Item1","System.Tuple`4.Item2","System::Tuple`4::Item2","System.Tuple`4.Item3","System::Tuple`4::Item3","System.Tuple`4.Item4","System::Tuple`4::Item4","System.Tuple`4.System#Collections#IStructuralComparable#CompareTo","System::Tuple`4::System#Collections#IStructuralComparable#CompareTo","System.Tuple`4.System#Collections#IStructuralEquatable#Equals","System::Tuple`4::System#Collections#IStructuralEquatable#Equals","System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode","System::Tuple`4::System#Collections#IStructuralEquatable#GetHashCode","System.Tuple`4.System#IComparable#CompareTo","System::Tuple`4::System#IComparable#CompareTo","System.Tuple`4.ToString","System::Tuple`4::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"86b9db3f-67d5-1639-b03b-93c94f341477","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Tuple`4.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Tuple<T1,T2,T3,T4> class | Microsoft Docs","_op_ogTitle":"Tuple<T1,T2,T3,T4> class","description":"Represents a 4-tuple, or quadruple.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Tuple`4","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-4","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-4","fileRelativePath":"System.Tuple-4.html"},"themesRelativePathToOutputRoot":"_themes/"}