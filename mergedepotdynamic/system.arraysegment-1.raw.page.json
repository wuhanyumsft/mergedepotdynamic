{"content":"    \r\n    <h1 id=\"System_ArraySegment_1\">\r\n      <span class=\"lang-csharp\">ArraySegment&lt;T&gt;</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Delimits a section of a one-dimensional array.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public struct ArraySegment&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the elements in the array segment.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ArraySegment&lt;T&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>ArraySegment(T) is a wrapper around an array that delimits a range of elements in that array. Multiple ArraySegment(T) instances can refer to the same original array and can overlap. The original array must be one-dimensional and must have zero-based indexing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> ArraySegment(T) implements the <a class=\"xref\" href=\"system.collections.generic.ireadonlycollection-1\" data-linktype=\"relative-path\">IReadOnlyCollection&lt;T&gt;</a> interface starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v46-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE -->; in previous versions of the .NET Framework, the ArraySegment(T) structure did not implement this interface.  </p>\n</div>\n<p> The ArraySegment(T) structure is useful whenever the elements of an array will be manipulated in distinct segments. For example:  </p>\n<ul>\n<li><p>You can pass an ArraySegment(T) object that represents only a portion of an array as an argument to a method, rather than call a relatively expensive method like <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to pass a copy of a portion of an array.  </p>\n</li>\n<li><p>In a multithreaded app, you can use the ArraySegment(T) structure to have each thread operate on only a portion of the array.  </p>\n</li>\n<li><p>For task-based asynchronous operations, you can use an ArraySegment(T) object to ensure that each task operates on a distinct segment of the array. The following example divides an array into individual segments with up to ten elements. Each element in the segment is multiplied by its segment number. The result shows that using the ArraySegment(T) class to manipulate elements in this way changes the values of its underlying array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ArraySegment#2\">using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   private const int segmentSize = 10;\n   \n   public static void Main()\n   {\n      List&lt;Task&gt; tasks = new List&lt;Task&gt;();\n\n      // Create array.\n      int[] arr = new int[50];\n      for (int ctr = 0; ctr &lt;= arr.GetUpperBound(0); ctr++)\n         arr[ctr] = ctr + 1;\n\n      // Handle array in segments of 10.\n      for (int ctr = 1; ctr &lt;= Math.Ceiling(((double)arr.Length)/segmentSize); ctr++) {\n         int multiplier = ctr;\n         int elements = (multiplier - 1) * 10 + segmentSize &gt; arr.Length ?\n                         arr.Length - (multiplier - 1) * 10 : segmentSize;\n         ArraySegment&lt;int&gt; segment = new ArraySegment&lt;int&gt;(arr, (ctr - 1) * 10, elements);\n         tasks.Add(Task.Run( () =&gt; { IList&lt;int&gt; list = (IList&lt;int&gt;) segment;\n                                     for (int index = 0; index &lt; list.Count; index++)\n                                        list[index] = list[index] * multiplier;\n                                   } ));\n      }\n      try {\n         Task.WaitAll(tasks.ToArray());\n         int elementsShown = 0;\n         foreach (var value in arr) {\n            Console.Write(&quot;{0,3} &quot;, value);\n            elementsShown++;\n            if (elementsShown % 18 == 0)\n               Console.WriteLine();\n         }\n      }\n      catch (AggregateException e) {\n         Console.WriteLine(&quot;Errors occurred when working with the array:&quot;);\n         foreach (var inner in e.InnerExceptions)\n            Console.WriteLine(&quot;{0}: {1}&quot;, inner.GetType().Name, inner.Message);\n      }\n   }\n}\n// The example displays the following output:\n//      1   2   3   4   5   6   7   8   9  10  22  24  26  28  30  32  34  36\n//     38  40  63  66  69  72  75  78  81  84  87  90 124 128 132 136 140 144\n//    148 152 156 160 205 210 215 220 225 230 235 240 245 250\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ArraySegment#2\">Imports System.Collections.Generic\nImports System.Threading.Tasks\n\nModule Example\n  Private Const SegmentSize As Integer = 10\n  \n   Public Sub Main()\n      Dim tasks As New List(Of Task)\n      \n       &#39; Create array.\n      Dim arr(49) As Integer\n      For ctr As Integer = 0 To arr.GetUpperBound(0)\n         arr(ctr) = ctr + 1\n      Next\n\n      &#39; Handle array in segments of 10.\n      For ctr As Integer = 1 To CInt(Math.Ceiling(arr.Length / segmentSize))\n         Dim multiplier As Integer = ctr\n         Dim elements As Integer = If((multiplier - 1) * 10 + segmentSize &gt; arr.Length,\n                                      arr.Length - (multiplier - 1) * 10,\n                                      segmentSize)\n         Dim segment As New ArraySegment(Of Integer)(arr, (ctr - 1) * 10, elements)\n         tasks.Add(Task.Run( Sub()\n                                Dim list As IList(Of Integer) = CType(segment, IList(Of Integer))\n                                For index As Integer = 0 To list.Count - 1\n                                   list(index) = list(index) * multiplier\n                                Next\n                             End Sub ))\n      Next\n      Try\n         Task.WaitAll(tasks.ToArray())\n         Dim elementsShown As Integer = 0\n         For Each value In arr\n            Console.Write(&quot;{0,3} &quot;, value)\n            elementsShown += 1\n            If elementsShown Mod 18 = 0 Then Console.WriteLine()\n         Next\n      Catch e As AggregateException\n         Console.WriteLine(&quot;Errors occurred when working with the array:&quot;)\n         For Each inner As Exception In e.InnerExceptions\n            Console.WriteLine(&quot;{0}: {1}&quot;, inner.GetType().Name, inner.Message)\n         Next\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;         1   2   3   4   5   6   7   8   9  10  22  24  26  28  30  32  34  36\n&#39;        38  40  63  66  69  72  75  78  81  84  87  90 124 128 132 136 140 144\n&#39;       148 152 156 160 205 210 215 220 225 230 235 240 245 250\n</code></pre><p>Note, however, that although the ArraySegment(T) structure can be used to divide an array into distinct segments, the segments are not completely independent of one another. The <a class=\"xref\" href=\"system.arraysegment-1#System_ArraySegment_1_Array_\" data-linktype=\"relative-path\">Array</a> property returns the entire original array, not a copy of the array; therefore, changes made to the array returned by the <a class=\"xref\" href=\"system.arraysegment-1#System_ArraySegment_1_Array_\" data-linktype=\"relative-path\">Array</a> property are made to the original array. If this is undesirable, you should perform operations on a copy of the array, rather than an ArraySegment(T) object that represents a portion of the array.  </p>\n<p>The<a class=\"xref\" href=\"system.arraysegment-1#System_ArraySegment_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method and the equality and inequality operators test for reference equality when they compare two ArraySegment(T) objects. For two ArraySegment(T) objects to be considered equal, they must meet all of the following conditions:  </p>\n</li>\n<li><p>Reference the same array.  </p>\n</li>\n<li><p>Begin at the same index in the array.  </p>\n</li>\n<li><p>Have the same number of elements.  </p>\n<p>If you want to retrieve an element by its index in the ArraySegment(T) object, you must cast it to an <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> object and retrieve it or modify it by using the <a class=\"xref\" href=\"system.collections.generic.ilist-1#System_Collections_Generic_IList_1_Item_\" data-linktype=\"relative-path\">Item</a> property. The following example retrieves the element in an ArraySegment(T) object that delimits a section of a string array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ArraySegment.Class#1\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim names() As String = { &quot;Adam&quot;, &quot;Bruce&quot;, &quot;Charles&quot;, &quot;Daniel&quot;, \n                                &quot;Ebenezer&quot;, &quot;Francis&quot;, &quot;Gilbert&quot;, \n                                &quot;Henry&quot;, &quot;Irving&quot;, &quot;John&quot;, &quot;Karl&quot;,\n                                &quot;Lucian&quot;, &quot;Michael&quot; }\n      Dim partNames As New ArraySegment(Of String)(names, 2, 5)\n      \n      &#39; Cast the ArraySegment object to an IList&lt;String&gt; and enumerate it.\n      Dim list = CType(partNames, IList(Of String))\n      For ctr As Integer = 0 To list.Count - 1\n         Console.WriteLine(list(ctr))\n      Next     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Charles\n&#39;    Daniel\n&#39;    Ebenezer\n&#39;    Francis\n&#39;    Gilbert\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ArraySegment.Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] names = { &quot;Adam&quot;, &quot;Bruce&quot;, &quot;Charles&quot;, &quot;Daniel&quot;, \n                         &quot;Ebenezer&quot;, &quot;Francis&quot;, &quot;Gilbert&quot;, \n                         &quot;Henry&quot;, &quot;Irving&quot;, &quot;John&quot;, &quot;Karl&quot;,\n                         &quot;Lucian&quot;, &quot;Michael&quot; };\n      var partNames = new ArraySegment&lt;String&gt;(names, 2, 5);\n      \n      // Cast the ArraySegment object to an IList&lt;String&gt; and enumerate it.\n      var list = (IList&lt;String&gt;) partNames;\n      for (int ctr = 0; ctr &lt;= list.Count - 1; ctr++)\n         Console.WriteLine(list[ctr]);\n   }\n}\n// The example displays the following output:\n//    Charles\n//    Daniel\n//    Ebenezer\n//    Francis\n//    Gilbert\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1__ctor__0___\" data-linktype=\"self-bookmark\">ArraySegment&lt;T&gt;(T[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.ArraySegment`1</span> structure that delimits all the elements in the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1__ctor__0___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ArraySegment&lt;T&gt;(T[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.ArraySegment`1</span> structure that delimits the specified range of the elements in the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_Array\" data-linktype=\"self-bookmark\">Array</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the original array containing the range of elements that the array segment delimits.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements in the range delimited by the array segment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_Offset\" data-linktype=\"self-bookmark\">Offset</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_Equals_System_ArraySegment__0__\" data-linktype=\"self-bookmark\">Equals(ArraySegment&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified <span class=\"xref\">stem.ArraySegment`1</span> structure is equal to the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object is equal to the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_op_Equality_System_ArraySegment__0__System_ArraySegment__0__\" data-linktype=\"self-bookmark\">op_Equality(ArraySegment&lt;T&gt;,ArraySegment&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <span class=\"xref\">stem.ArraySegment`1</span> structures are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_op_Inequality_System_ArraySegment__0__System_ArraySegment__0__\" data-linktype=\"self-bookmark\">op_Inequality(ArraySegment&lt;T&gt;,ArraySegment&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <span class=\"xref\">stem.ArraySegment`1</span> structures are unequal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_ICollection_T__Add__0_\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.Add(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an item to the array segment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_ICollection_T__Clear\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all items from the array segment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_ICollection_T__Contains__0_\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.Contains(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the array segment contains a specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_ICollection_T__CopyTo__0___System_Int32_\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.CopyTo(T[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the array segment to an array, starting at the specified array index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_ICollection_T__IsReadOnly\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the array segment  is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_ICollection_T__Remove__0_\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.Remove(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the array segment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_IEnumerable_T__GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable&lt;T&gt;.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the array segment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_IList_T__IndexOf__0_\" data-linktype=\"self-bookmark\">IList&lt;T&gt;.IndexOf(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the index of a specific item in the array segment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_IList_T__Insert_System_Int32__0_\" data-linktype=\"self-bookmark\">IList&lt;T&gt;.Insert(Int32,T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an item into the array segment at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_IList_T__Item_System_Int32_\" data-linktype=\"self-bookmark\">IList&lt;T&gt;.Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_IList_T__RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">IList&lt;T&gt;.RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the array segment item at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_Generic_IReadOnlyList_T__Item_System_Int32_\" data-linktype=\"self-bookmark\">IReadOnlyList&lt;T&gt;.Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the element at the specified index of the array segment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ArraySegment_1_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through an array segment.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1__ctor__0___\">\r\n    \r\n            <a id=\"System_ArraySegment_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArraySegment&lt;T&gt;(T[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.ArraySegment`1</span> structure that delimits all the elements in the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ArraySegment (T[] array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to wrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> that delimits all the elements of <code>array</code>. That is, the <a class=\"xref\" href=\"system.arraysegment-1#System_ArraySegment_1_Offset_\" data-linktype=\"relative-path\">Offset</a> property of the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> is 0 and its <a class=\"xref\" href=\"system.arraysegment-1#System_ArraySegment_1_Count_\" data-linktype=\"relative-path\">Count</a> property is the length of <code>array</code>. To create an <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> that delimits only part of an array, use the [ArraySegment&lt;T&gt;(T&lt;xref:System.ArraySegment%601.%23ctor%28%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; constructor.  </p>\n<p> The original array must be one-dimensional and must have zero-based indexing.  </p>\n<p> Multiple <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instances can refer to the same original array and can overlap.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example passes an <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> structure to a method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ArraySegment#1\">using System;\n\npublic class SamplesArray  {\n \n   public static void Main()  {\n \n      // Create and initialize a new string array.\n      String[] myArr = { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n \n      // Display the initial contents of the array.\n      Console.WriteLine( &quot;The original array initially contains:&quot; );\n      PrintIndexAndValues( myArr );\n\n      // Define an array segment that contains the entire array.\n      ArraySegment&lt;String&gt; myArrSegAll = new ArraySegment&lt;String&gt;( myArr );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The first array segment (with all the array&#39;s elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegAll );\n\n      // Define an array segment that contains the middle five values of the array.\n      ArraySegment&lt;String&gt; myArrSegMid = new ArraySegment&lt;String&gt;( myArr, 2, 5 );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The second array segment (with the middle five elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n      // Modify the fourth element of the first array segment myArrSegAll.\n      myArrSegAll.Array[3] = &quot;LION&quot;;\n\n      // Display the contents of the second array segment myArrSegMid.\n      // Note that the value of its second element also changed.\n      Console.WriteLine( &quot;After the first array segment is modified, the second array segment now contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n   }\n \n   public static void PrintIndexAndValues( ArraySegment&lt;String&gt; arrSeg )  {\n      for ( int i = arrSeg.Offset; i &lt; (arrSeg.Offset + arrSeg.Count); i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arrSeg.Array[i] );\n      }\n      Console.WriteLine();\n   }\n\n   public static void PrintIndexAndValues( String[] myArr )  {\n      for ( int i = 0; i &lt; myArr.Length; i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, myArr[i] );\n      }\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nThe original array initially contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe first array segment (with all the array&#39;s elements) contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe second array segment (with the middle five elements) contains:\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n\nAfter the first array segment is modified, the second array segment now contains:\n   [2] : brown\n   [3] : LION\n   [4] : jumps\n   [5] : over\n   [6] : the\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ArraySegment#1\">using namespace System;\n\n\nnamespace Sample\n{\n    public ref class SampleArray  \n    {\n    public:\n        static void Work()  \n        {\n\n            // Create and initialize a new string array.\n            array &lt;String^&gt;^ words = {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;,\n                &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;};\n\n            // Display the initial contents of the array.\n            Console::WriteLine(&quot;The first array segment&quot;\n\t\t        &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(words);\n\n            // Define an array segment that contains the entire array.\n            ArraySegment&lt;String^&gt; segment(words);\n\t\t\t\n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The first array segment&quot;\n                &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(segment);\n\n            // Define an array segment that contains the middle five \n            // values of the array.\n            ArraySegment&lt;String^&gt; middle(words, 2, 5);\n            \n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The second array segment&quot;\n                &quot; (with the middle five elements) contains:&quot;);\n            PrintIndexAndValues(middle);\n\n            // Modify the fourth element of the first array \n            // segment\n            segment.Array[3] = &quot;LION&quot;;\n\n            // Display the contents of the second array segment \n            // middle. Note that the value of its second element \n            // also changed.\n            Console::WriteLine(&quot;After the first array segment&quot;\n                &quot; is modified,the second array segment&quot;\n                &quot; now contains:&quot;);\n            PrintIndexAndValues(middle);\n            Console::ReadLine();\n        }\n\n        static void PrintIndexAndValues(ArraySegment&lt;String^&gt;^ segment)  \n        {\n            for (int i = segment-&gt;Offset; \n                i &lt; (segment-&gt;Offset + segment-&gt;Count); i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    segment-&gt;Array[i]);\n            }\n            Console::WriteLine();\n        }\n\n        static void PrintIndexAndValues(array&lt;String^&gt;^ words) \n        {\n            for (int i = 0; i &lt; words-&gt;Length; i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    words[i]);\n            }\n            Console::WriteLine();\n        }\n    };\n}\n\nint main()\n{\n    Sample::SampleArray::Work();\n    return 0; \n}\n\n\n    /* \n    This code produces the following output.\n\n    The original array initially contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The first array segment (with all the array&#39;s elements) contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The second array segment (with the middle five elements) contains:\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    After the first array segment is modified, the second array segment now contains:\n    [2] : brown\n    [3] : LION\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ArraySegment#1\">Imports System\n\nPublic Class SamplesArray\n\n    Public Shared Sub Main()\n\n        &#39; Create and initialize a new string array.\n        Dim myArr As String() =  {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;}\n\n        &#39; Display the initial contents of the array.\n        Console.WriteLine(&quot;The original array initially contains:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Define an array segment that contains the entire array.\n        Dim myArrSegAll As New ArraySegment(Of String)(myArr)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The first array segment (with all the array&#39;s elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegAll)\n\n        &#39; Define an array segment that contains the middle five values of the array.\n        Dim myArrSegMid As New ArraySegment(Of String)(myArr, 2, 5)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The second array segment (with the middle five elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n        &#39; Modify the fourth element of the first array segment myArrSegAll.\n        myArrSegAll.Array(3) = &quot;LION&quot;\n\n        &#39; Display the contents of the second array segment myArrSegMid.\n        &#39; Note that the value of its second element also changed.\n        Console.WriteLine(&quot;After the first array segment is modified, the second array segment now contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(arrSeg As ArraySegment(Of String))\n        Dim i As Integer\n        For i = arrSeg.Offset To (arrSeg.Offset + arrSeg.Count - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arrSeg.Array(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\n    Public Shared Sub PrintIndexAndValues(myArr as String())\n        Dim i As Integer\n        For i = 0 To (myArr.Length - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The original array initially contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The first array segment (with all the array&#39;s elements) contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The second array segment (with the middle five elements) contains:\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;\n&#39;After the first array segment is modified, the second array segment now contains:\n&#39;   [2] : brown\n&#39;   [3] : LION\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1__ctor__0___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_ArraySegment_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArraySegment&lt;T&gt;(T[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.ArraySegment`1</span> structure that delimits the specified range of the elements in the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ArraySegment (T[] array, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array containing the range of elements to delimit.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the first element in the range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> and <code>count</code> do not specify a valid range in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The original array must be one-dimensional and must have zero-based indexing.  </p>\n<p> Multiple <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instances can refer to the same original array and can overlap.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example passes an <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> structure to a method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ArraySegment#1\">using System;\n\npublic class SamplesArray  {\n \n   public static void Main()  {\n \n      // Create and initialize a new string array.\n      String[] myArr = { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n \n      // Display the initial contents of the array.\n      Console.WriteLine( &quot;The original array initially contains:&quot; );\n      PrintIndexAndValues( myArr );\n\n      // Define an array segment that contains the entire array.\n      ArraySegment&lt;String&gt; myArrSegAll = new ArraySegment&lt;String&gt;( myArr );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The first array segment (with all the array&#39;s elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegAll );\n\n      // Define an array segment that contains the middle five values of the array.\n      ArraySegment&lt;String&gt; myArrSegMid = new ArraySegment&lt;String&gt;( myArr, 2, 5 );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The second array segment (with the middle five elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n      // Modify the fourth element of the first array segment myArrSegAll.\n      myArrSegAll.Array[3] = &quot;LION&quot;;\n\n      // Display the contents of the second array segment myArrSegMid.\n      // Note that the value of its second element also changed.\n      Console.WriteLine( &quot;After the first array segment is modified, the second array segment now contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n   }\n \n   public static void PrintIndexAndValues( ArraySegment&lt;String&gt; arrSeg )  {\n      for ( int i = arrSeg.Offset; i &lt; (arrSeg.Offset + arrSeg.Count); i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arrSeg.Array[i] );\n      }\n      Console.WriteLine();\n   }\n\n   public static void PrintIndexAndValues( String[] myArr )  {\n      for ( int i = 0; i &lt; myArr.Length; i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, myArr[i] );\n      }\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nThe original array initially contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe first array segment (with all the array&#39;s elements) contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe second array segment (with the middle five elements) contains:\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n\nAfter the first array segment is modified, the second array segment now contains:\n   [2] : brown\n   [3] : LION\n   [4] : jumps\n   [5] : over\n   [6] : the\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ArraySegment#1\">using namespace System;\n\n\nnamespace Sample\n{\n    public ref class SampleArray  \n    {\n    public:\n        static void Work()  \n        {\n\n            // Create and initialize a new string array.\n            array &lt;String^&gt;^ words = {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;,\n                &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;};\n\n            // Display the initial contents of the array.\n            Console::WriteLine(&quot;The first array segment&quot;\n\t\t        &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(words);\n\n            // Define an array segment that contains the entire array.\n            ArraySegment&lt;String^&gt; segment(words);\n\t\t\t\n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The first array segment&quot;\n                &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(segment);\n\n            // Define an array segment that contains the middle five \n            // values of the array.\n            ArraySegment&lt;String^&gt; middle(words, 2, 5);\n            \n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The second array segment&quot;\n                &quot; (with the middle five elements) contains:&quot;);\n            PrintIndexAndValues(middle);\n\n            // Modify the fourth element of the first array \n            // segment\n            segment.Array[3] = &quot;LION&quot;;\n\n            // Display the contents of the second array segment \n            // middle. Note that the value of its second element \n            // also changed.\n            Console::WriteLine(&quot;After the first array segment&quot;\n                &quot; is modified,the second array segment&quot;\n                &quot; now contains:&quot;);\n            PrintIndexAndValues(middle);\n            Console::ReadLine();\n        }\n\n        static void PrintIndexAndValues(ArraySegment&lt;String^&gt;^ segment)  \n        {\n            for (int i = segment-&gt;Offset; \n                i &lt; (segment-&gt;Offset + segment-&gt;Count); i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    segment-&gt;Array[i]);\n            }\n            Console::WriteLine();\n        }\n\n        static void PrintIndexAndValues(array&lt;String^&gt;^ words) \n        {\n            for (int i = 0; i &lt; words-&gt;Length; i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    words[i]);\n            }\n            Console::WriteLine();\n        }\n    };\n}\n\nint main()\n{\n    Sample::SampleArray::Work();\n    return 0; \n}\n\n\n    /* \n    This code produces the following output.\n\n    The original array initially contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The first array segment (with all the array&#39;s elements) contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The second array segment (with the middle five elements) contains:\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    After the first array segment is modified, the second array segment now contains:\n    [2] : brown\n    [3] : LION\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ArraySegment#1\">Imports System\n\nPublic Class SamplesArray\n\n    Public Shared Sub Main()\n\n        &#39; Create and initialize a new string array.\n        Dim myArr As String() =  {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;}\n\n        &#39; Display the initial contents of the array.\n        Console.WriteLine(&quot;The original array initially contains:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Define an array segment that contains the entire array.\n        Dim myArrSegAll As New ArraySegment(Of String)(myArr)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The first array segment (with all the array&#39;s elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegAll)\n\n        &#39; Define an array segment that contains the middle five values of the array.\n        Dim myArrSegMid As New ArraySegment(Of String)(myArr, 2, 5)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The second array segment (with the middle five elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n        &#39; Modify the fourth element of the first array segment myArrSegAll.\n        myArrSegAll.Array(3) = &quot;LION&quot;\n\n        &#39; Display the contents of the second array segment myArrSegMid.\n        &#39; Note that the value of its second element also changed.\n        Console.WriteLine(&quot;After the first array segment is modified, the second array segment now contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(arrSeg As ArraySegment(Of String))\n        Dim i As Integer\n        For i = arrSeg.Offset To (arrSeg.Offset + arrSeg.Count - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arrSeg.Array(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\n    Public Shared Sub PrintIndexAndValues(myArr as String())\n        Dim i As Integer\n        For i = 0 To (myArr.Length - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The original array initially contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The first array segment (with all the array&#39;s elements) contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The second array segment (with the middle five elements) contains:\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;\n&#39;After the first array segment is modified, the second array segment now contains:\n&#39;   [2] : brown\n&#39;   [3] : LION\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_Array\">\r\n    \r\n            <a id=\"System_ArraySegment_1_Array_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Array</div>        \r\n          </div>\r\n    \r\n            <p>Gets the original array containing the range of elements that the array segment delimits.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T[] Array { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </div>\r\n                  <p>The original array that was passed to the constructor, and that contains the range delimited by the <span class=\"xref\">stem.ArraySegment`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Array property returns the original array, not a copy of the array; therefore, changes made through the property are made directly to the original array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example passes an <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> to a method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ArraySegment#1\">using System;\n\npublic class SamplesArray  {\n \n   public static void Main()  {\n \n      // Create and initialize a new string array.\n      String[] myArr = { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n \n      // Display the initial contents of the array.\n      Console.WriteLine( &quot;The original array initially contains:&quot; );\n      PrintIndexAndValues( myArr );\n\n      // Define an array segment that contains the entire array.\n      ArraySegment&lt;String&gt; myArrSegAll = new ArraySegment&lt;String&gt;( myArr );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The first array segment (with all the array&#39;s elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegAll );\n\n      // Define an array segment that contains the middle five values of the array.\n      ArraySegment&lt;String&gt; myArrSegMid = new ArraySegment&lt;String&gt;( myArr, 2, 5 );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The second array segment (with the middle five elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n      // Modify the fourth element of the first array segment myArrSegAll.\n      myArrSegAll.Array[3] = &quot;LION&quot;;\n\n      // Display the contents of the second array segment myArrSegMid.\n      // Note that the value of its second element also changed.\n      Console.WriteLine( &quot;After the first array segment is modified, the second array segment now contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n   }\n \n   public static void PrintIndexAndValues( ArraySegment&lt;String&gt; arrSeg )  {\n      for ( int i = arrSeg.Offset; i &lt; (arrSeg.Offset + arrSeg.Count); i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arrSeg.Array[i] );\n      }\n      Console.WriteLine();\n   }\n\n   public static void PrintIndexAndValues( String[] myArr )  {\n      for ( int i = 0; i &lt; myArr.Length; i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, myArr[i] );\n      }\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nThe original array initially contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe first array segment (with all the array&#39;s elements) contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe second array segment (with the middle five elements) contains:\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n\nAfter the first array segment is modified, the second array segment now contains:\n   [2] : brown\n   [3] : LION\n   [4] : jumps\n   [5] : over\n   [6] : the\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ArraySegment#1\">using namespace System;\n\n\nnamespace Sample\n{\n    public ref class SampleArray  \n    {\n    public:\n        static void Work()  \n        {\n\n            // Create and initialize a new string array.\n            array &lt;String^&gt;^ words = {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;,\n                &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;};\n\n            // Display the initial contents of the array.\n            Console::WriteLine(&quot;The first array segment&quot;\n\t\t        &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(words);\n\n            // Define an array segment that contains the entire array.\n            ArraySegment&lt;String^&gt; segment(words);\n\t\t\t\n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The first array segment&quot;\n                &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(segment);\n\n            // Define an array segment that contains the middle five \n            // values of the array.\n            ArraySegment&lt;String^&gt; middle(words, 2, 5);\n            \n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The second array segment&quot;\n                &quot; (with the middle five elements) contains:&quot;);\n            PrintIndexAndValues(middle);\n\n            // Modify the fourth element of the first array \n            // segment\n            segment.Array[3] = &quot;LION&quot;;\n\n            // Display the contents of the second array segment \n            // middle. Note that the value of its second element \n            // also changed.\n            Console::WriteLine(&quot;After the first array segment&quot;\n                &quot; is modified,the second array segment&quot;\n                &quot; now contains:&quot;);\n            PrintIndexAndValues(middle);\n            Console::ReadLine();\n        }\n\n        static void PrintIndexAndValues(ArraySegment&lt;String^&gt;^ segment)  \n        {\n            for (int i = segment-&gt;Offset; \n                i &lt; (segment-&gt;Offset + segment-&gt;Count); i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    segment-&gt;Array[i]);\n            }\n            Console::WriteLine();\n        }\n\n        static void PrintIndexAndValues(array&lt;String^&gt;^ words) \n        {\n            for (int i = 0; i &lt; words-&gt;Length; i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    words[i]);\n            }\n            Console::WriteLine();\n        }\n    };\n}\n\nint main()\n{\n    Sample::SampleArray::Work();\n    return 0; \n}\n\n\n    /* \n    This code produces the following output.\n\n    The original array initially contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The first array segment (with all the array&#39;s elements) contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The second array segment (with the middle five elements) contains:\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    After the first array segment is modified, the second array segment now contains:\n    [2] : brown\n    [3] : LION\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ArraySegment#1\">Imports System\n\nPublic Class SamplesArray\n\n    Public Shared Sub Main()\n\n        &#39; Create and initialize a new string array.\n        Dim myArr As String() =  {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;}\n\n        &#39; Display the initial contents of the array.\n        Console.WriteLine(&quot;The original array initially contains:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Define an array segment that contains the entire array.\n        Dim myArrSegAll As New ArraySegment(Of String)(myArr)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The first array segment (with all the array&#39;s elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegAll)\n\n        &#39; Define an array segment that contains the middle five values of the array.\n        Dim myArrSegMid As New ArraySegment(Of String)(myArr, 2, 5)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The second array segment (with the middle five elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n        &#39; Modify the fourth element of the first array segment myArrSegAll.\n        myArrSegAll.Array(3) = &quot;LION&quot;\n\n        &#39; Display the contents of the second array segment myArrSegMid.\n        &#39; Note that the value of its second element also changed.\n        Console.WriteLine(&quot;After the first array segment is modified, the second array segment now contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(arrSeg As ArraySegment(Of String))\n        Dim i As Integer\n        For i = arrSeg.Offset To (arrSeg.Offset + arrSeg.Count - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arrSeg.Array(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\n    Public Shared Sub PrintIndexAndValues(myArr as String())\n        Dim i As Integer\n        For i = 0 To (myArr.Length - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The original array initially contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The first array segment (with all the array&#39;s elements) contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The second array segment (with the middle five elements) contains:\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;\n&#39;After the first array segment is modified, the second array segment now contains:\n&#39;   [2] : brown\n&#39;   [3] : LION\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_Count\">\r\n    \r\n            <a id=\"System_ArraySegment_1_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements in the range delimited by the array segment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the range delimited by the <span class=\"xref\">stem.ArraySegment`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example passes an <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> structure to a method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ArraySegment#1\">using System;\n\npublic class SamplesArray  {\n \n   public static void Main()  {\n \n      // Create and initialize a new string array.\n      String[] myArr = { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n \n      // Display the initial contents of the array.\n      Console.WriteLine( &quot;The original array initially contains:&quot; );\n      PrintIndexAndValues( myArr );\n\n      // Define an array segment that contains the entire array.\n      ArraySegment&lt;String&gt; myArrSegAll = new ArraySegment&lt;String&gt;( myArr );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The first array segment (with all the array&#39;s elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegAll );\n\n      // Define an array segment that contains the middle five values of the array.\n      ArraySegment&lt;String&gt; myArrSegMid = new ArraySegment&lt;String&gt;( myArr, 2, 5 );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The second array segment (with the middle five elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n      // Modify the fourth element of the first array segment myArrSegAll.\n      myArrSegAll.Array[3] = &quot;LION&quot;;\n\n      // Display the contents of the second array segment myArrSegMid.\n      // Note that the value of its second element also changed.\n      Console.WriteLine( &quot;After the first array segment is modified, the second array segment now contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n   }\n \n   public static void PrintIndexAndValues( ArraySegment&lt;String&gt; arrSeg )  {\n      for ( int i = arrSeg.Offset; i &lt; (arrSeg.Offset + arrSeg.Count); i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arrSeg.Array[i] );\n      }\n      Console.WriteLine();\n   }\n\n   public static void PrintIndexAndValues( String[] myArr )  {\n      for ( int i = 0; i &lt; myArr.Length; i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, myArr[i] );\n      }\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nThe original array initially contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe first array segment (with all the array&#39;s elements) contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe second array segment (with the middle five elements) contains:\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n\nAfter the first array segment is modified, the second array segment now contains:\n   [2] : brown\n   [3] : LION\n   [4] : jumps\n   [5] : over\n   [6] : the\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ArraySegment#1\">using namespace System;\n\n\nnamespace Sample\n{\n    public ref class SampleArray  \n    {\n    public:\n        static void Work()  \n        {\n\n            // Create and initialize a new string array.\n            array &lt;String^&gt;^ words = {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;,\n                &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;};\n\n            // Display the initial contents of the array.\n            Console::WriteLine(&quot;The first array segment&quot;\n\t\t        &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(words);\n\n            // Define an array segment that contains the entire array.\n            ArraySegment&lt;String^&gt; segment(words);\n\t\t\t\n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The first array segment&quot;\n                &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(segment);\n\n            // Define an array segment that contains the middle five \n            // values of the array.\n            ArraySegment&lt;String^&gt; middle(words, 2, 5);\n            \n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The second array segment&quot;\n                &quot; (with the middle five elements) contains:&quot;);\n            PrintIndexAndValues(middle);\n\n            // Modify the fourth element of the first array \n            // segment\n            segment.Array[3] = &quot;LION&quot;;\n\n            // Display the contents of the second array segment \n            // middle. Note that the value of its second element \n            // also changed.\n            Console::WriteLine(&quot;After the first array segment&quot;\n                &quot; is modified,the second array segment&quot;\n                &quot; now contains:&quot;);\n            PrintIndexAndValues(middle);\n            Console::ReadLine();\n        }\n\n        static void PrintIndexAndValues(ArraySegment&lt;String^&gt;^ segment)  \n        {\n            for (int i = segment-&gt;Offset; \n                i &lt; (segment-&gt;Offset + segment-&gt;Count); i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    segment-&gt;Array[i]);\n            }\n            Console::WriteLine();\n        }\n\n        static void PrintIndexAndValues(array&lt;String^&gt;^ words) \n        {\n            for (int i = 0; i &lt; words-&gt;Length; i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    words[i]);\n            }\n            Console::WriteLine();\n        }\n    };\n}\n\nint main()\n{\n    Sample::SampleArray::Work();\n    return 0; \n}\n\n\n    /* \n    This code produces the following output.\n\n    The original array initially contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The first array segment (with all the array&#39;s elements) contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The second array segment (with the middle five elements) contains:\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    After the first array segment is modified, the second array segment now contains:\n    [2] : brown\n    [3] : LION\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ArraySegment#1\">Imports System\n\nPublic Class SamplesArray\n\n    Public Shared Sub Main()\n\n        &#39; Create and initialize a new string array.\n        Dim myArr As String() =  {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;}\n\n        &#39; Display the initial contents of the array.\n        Console.WriteLine(&quot;The original array initially contains:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Define an array segment that contains the entire array.\n        Dim myArrSegAll As New ArraySegment(Of String)(myArr)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The first array segment (with all the array&#39;s elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegAll)\n\n        &#39; Define an array segment that contains the middle five values of the array.\n        Dim myArrSegMid As New ArraySegment(Of String)(myArr, 2, 5)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The second array segment (with the middle five elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n        &#39; Modify the fourth element of the first array segment myArrSegAll.\n        myArrSegAll.Array(3) = &quot;LION&quot;\n\n        &#39; Display the contents of the second array segment myArrSegMid.\n        &#39; Note that the value of its second element also changed.\n        Console.WriteLine(&quot;After the first array segment is modified, the second array segment now contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(arrSeg As ArraySegment(Of String))\n        Dim i As Integer\n        For i = arrSeg.Offset To (arrSeg.Offset + arrSeg.Count - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arrSeg.Array(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\n    Public Shared Sub PrintIndexAndValues(myArr as String())\n        Dim i As Integer\n        For i = 0 To (myArr.Length - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The original array initially contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The first array segment (with all the array&#39;s elements) contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The second array segment (with the middle five elements) contains:\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;\n&#39;After the first array segment is modified, the second array segment now contains:\n&#39;   [2] : brown\n&#39;   [3] : LION\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_Offset\">\r\n    \r\n            <a id=\"System_ArraySegment_1_Offset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Offset</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Offset { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The position of the first element in the range delimited by the <span class=\"xref\">stem.ArraySegment`1</span>, relative to the start of the original array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example passes an <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> structure to a method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ArraySegment#1\">using System;\n\npublic class SamplesArray  {\n \n   public static void Main()  {\n \n      // Create and initialize a new string array.\n      String[] myArr = { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n \n      // Display the initial contents of the array.\n      Console.WriteLine( &quot;The original array initially contains:&quot; );\n      PrintIndexAndValues( myArr );\n\n      // Define an array segment that contains the entire array.\n      ArraySegment&lt;String&gt; myArrSegAll = new ArraySegment&lt;String&gt;( myArr );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The first array segment (with all the array&#39;s elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegAll );\n\n      // Define an array segment that contains the middle five values of the array.\n      ArraySegment&lt;String&gt; myArrSegMid = new ArraySegment&lt;String&gt;( myArr, 2, 5 );\n\n      // Display the contents of the ArraySegment.\n      Console.WriteLine( &quot;The second array segment (with the middle five elements) contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n      // Modify the fourth element of the first array segment myArrSegAll.\n      myArrSegAll.Array[3] = &quot;LION&quot;;\n\n      // Display the contents of the second array segment myArrSegMid.\n      // Note that the value of its second element also changed.\n      Console.WriteLine( &quot;After the first array segment is modified, the second array segment now contains:&quot; );\n      PrintIndexAndValues( myArrSegMid );\n\n   }\n \n   public static void PrintIndexAndValues( ArraySegment&lt;String&gt; arrSeg )  {\n      for ( int i = arrSeg.Offset; i &lt; (arrSeg.Offset + arrSeg.Count); i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arrSeg.Array[i] );\n      }\n      Console.WriteLine();\n   }\n\n   public static void PrintIndexAndValues( String[] myArr )  {\n      for ( int i = 0; i &lt; myArr.Length; i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, myArr[i] );\n      }\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nThe original array initially contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe first array segment (with all the array&#39;s elements) contains:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nThe second array segment (with the middle five elements) contains:\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n\nAfter the first array segment is modified, the second array segment now contains:\n   [2] : brown\n   [3] : LION\n   [4] : jumps\n   [5] : over\n   [6] : the\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ArraySegment#1\">using namespace System;\n\n\nnamespace Sample\n{\n    public ref class SampleArray  \n    {\n    public:\n        static void Work()  \n        {\n\n            // Create and initialize a new string array.\n            array &lt;String^&gt;^ words = {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;,\n                &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;};\n\n            // Display the initial contents of the array.\n            Console::WriteLine(&quot;The first array segment&quot;\n\t\t        &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(words);\n\n            // Define an array segment that contains the entire array.\n            ArraySegment&lt;String^&gt; segment(words);\n\t\t\t\n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The first array segment&quot;\n                &quot; (with all the array&#39;s elements) contains:&quot;);\n            PrintIndexAndValues(segment);\n\n            // Define an array segment that contains the middle five \n            // values of the array.\n            ArraySegment&lt;String^&gt; middle(words, 2, 5);\n            \n            // Display the contents of the ArraySegment.\n            Console::WriteLine(&quot;The second array segment&quot;\n                &quot; (with the middle five elements) contains:&quot;);\n            PrintIndexAndValues(middle);\n\n            // Modify the fourth element of the first array \n            // segment\n            segment.Array[3] = &quot;LION&quot;;\n\n            // Display the contents of the second array segment \n            // middle. Note that the value of its second element \n            // also changed.\n            Console::WriteLine(&quot;After the first array segment&quot;\n                &quot; is modified,the second array segment&quot;\n                &quot; now contains:&quot;);\n            PrintIndexAndValues(middle);\n            Console::ReadLine();\n        }\n\n        static void PrintIndexAndValues(ArraySegment&lt;String^&gt;^ segment)  \n        {\n            for (int i = segment-&gt;Offset; \n                i &lt; (segment-&gt;Offset + segment-&gt;Count); i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    segment-&gt;Array[i]);\n            }\n            Console::WriteLine();\n        }\n\n        static void PrintIndexAndValues(array&lt;String^&gt;^ words) \n        {\n            for (int i = 0; i &lt; words-&gt;Length; i++)  \n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i,\n                    words[i]);\n            }\n            Console::WriteLine();\n        }\n    };\n}\n\nint main()\n{\n    Sample::SampleArray::Work();\n    return 0; \n}\n\n\n    /* \n    This code produces the following output.\n\n    The original array initially contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The first array segment (with all the array&#39;s elements) contains:\n    [0] : The\n    [1] : quick\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n    [7] : lazy\n    [8] : dog\n\n    The second array segment (with the middle five elements) contains:\n    [2] : brown\n    [3] : fox\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    After the first array segment is modified, the second array segment now contains:\n    [2] : brown\n    [3] : LION\n    [4] : jumps\n    [5] : over\n    [6] : the\n\n    */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ArraySegment#1\">Imports System\n\nPublic Class SamplesArray\n\n    Public Shared Sub Main()\n\n        &#39; Create and initialize a new string array.\n        Dim myArr As String() =  {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;}\n\n        &#39; Display the initial contents of the array.\n        Console.WriteLine(&quot;The original array initially contains:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Define an array segment that contains the entire array.\n        Dim myArrSegAll As New ArraySegment(Of String)(myArr)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The first array segment (with all the array&#39;s elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegAll)\n\n        &#39; Define an array segment that contains the middle five values of the array.\n        Dim myArrSegMid As New ArraySegment(Of String)(myArr, 2, 5)\n\n        &#39; Display the contents of the ArraySegment.\n        Console.WriteLine(&quot;The second array segment (with the middle five elements) contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n        &#39; Modify the fourth element of the first array segment myArrSegAll.\n        myArrSegAll.Array(3) = &quot;LION&quot;\n\n        &#39; Display the contents of the second array segment myArrSegMid.\n        &#39; Note that the value of its second element also changed.\n        Console.WriteLine(&quot;After the first array segment is modified, the second array segment now contains:&quot;)\n        PrintIndexAndValues(myArrSegMid)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(arrSeg As ArraySegment(Of String))\n        Dim i As Integer\n        For i = arrSeg.Offset To (arrSeg.Offset + arrSeg.Count - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arrSeg.Array(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\n    Public Shared Sub PrintIndexAndValues(myArr as String())\n        Dim i As Integer\n        For i = 0 To (myArr.Length - 1)\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The original array initially contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The first array segment (with all the array&#39;s elements) contains:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;The second array segment (with the middle five elements) contains:\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;\n&#39;After the first array segment is modified, the second array segment now contains:\n&#39;   [2] : brown\n&#39;   [3] : LION\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_Equals_System_ArraySegment__0__\">\r\n    \r\n            <a id=\"System_ArraySegment_1_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(ArraySegment&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified <span class=\"xref\">stem.ArraySegment`1</span> structure is equal to the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (ArraySegment&lt;T&gt; obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The structure to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified <span class=\"xref\">stem.ArraySegment`1</span> structure is equal to the current instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> objects are considered to be equal if all the following conditions are met:  </p>\n<ul>\n<li><p>They reference the same array.  </p>\n</li>\n<li><p>They begin at the same index in the array.  </p>\n</li>\n<li><p>They have the same number of elements.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object is equal to the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be compared with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified object is a <span class=\"xref\">stem.ArraySegment`1</span> structure and is equal to the current instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> objects are considered to be equal if all the following conditions are met:  </p>\n<ul>\n<li><p>They reference the same array.  </p>\n</li>\n<li><p>They begin at the same index in the array.  </p>\n</li>\n<li><p>They have the same number of elements.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_GetHashCode\">\r\n    \r\n            <a id=\"System_ArraySegment_1_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_op_Equality_System_ArraySegment__0__System_ArraySegment__0__\">\r\n    \r\n            <a id=\"System_ArraySegment_1_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(ArraySegment&lt;T&gt;,ArraySegment&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <span class=\"xref\">stem.ArraySegment`1</span> structures are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (ArraySegment&lt;T&gt; a, ArraySegment&lt;T&gt; b);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The  structure on the left side of the equality operator.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The structure on the right side of the equality operator.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>a</code> is equal to <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> objects are considered to be equal if all the following conditions are met:  </p>\n<ul>\n<li><p>They reference the same array.  </p>\n</li>\n<li><p>They begin at the same index.  </p>\n</li>\n<li><p>They have the same number of elements.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_op_Inequality_System_ArraySegment__0__System_ArraySegment__0__\">\r\n    \r\n            <a id=\"System_ArraySegment_1_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(ArraySegment&lt;T&gt;,ArraySegment&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <span class=\"xref\">stem.ArraySegment`1</span> structures are unequal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (ArraySegment&lt;T&gt; a, ArraySegment&lt;T&gt; b);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The structure on the left side of the inequality operator.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The structure on the right side of the inequality operator.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>a</code> is not equal to <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> objects are considered to be unequal if they are of the same closed generic type but any of the following conditions is true:  </p>\n<ul>\n<li><p>They do not reference the same array.  </p>\n</li>\n<li><p>They have different starting indexes.  </p>\n</li>\n<li><p>They have a different number of elements.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__Add__0_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.Add(T)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an item to the array segment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection&lt;T&gt;.Add (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to add to the array segment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The array segment is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__Clear\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all items from the array segment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection&lt;T&gt;.Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The array segment is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__Contains__0_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.Contains(T)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the array segment contains a specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool ICollection&lt;T&gt;.Contains (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the array segment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> is found in the array segment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__CopyTo__0___System_Int32_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.CopyTo(T[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the array segment to an array, starting at the specified array index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection&lt;T&gt;.CopyTo (T[] array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array that is the destination of the elements copied from the array segment. The array must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source array segment is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  </p>\n<p> -or-  </p>\n<p> Type <code>T</code> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__IsReadOnly\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the array segment  is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the array segment is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__Remove__0_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_ICollection_T__Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.Remove(T)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the array segment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool ICollection&lt;T&gt;.Remove (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to remove from the array segment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> was successfully removed from the array segment; otherwise, <code>false</code>. This method also returns <code>false</code> if <code>item</code> is not found in the array segment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The array segment is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_IEnumerable_T__GetEnumerator\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_IEnumerable_T__GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable&lt;T&gt;.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the array segment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator<t></t></a></div>\r\n                  </div>\r\n                  <p>An enumerator that can be used to iterate through the array segment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_IList_T__IndexOf__0_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_IList_T__IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList&lt;T&gt;.IndexOf(T)</div>        \r\n          </div>\r\n    \r\n            <p>Determines the index of a specific item in the array segment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList&lt;T&gt;.IndexOf (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the array segment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of <code>item</code> if found in the list; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_IList_T__Insert_System_Int32__0_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_IList_T__Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList&lt;T&gt;.Insert(Int32,T)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an item into the array segment at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList&lt;T&gt;.Insert (int index, T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>item</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to insert into the array segment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the array segment.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The array segment is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_IList_T__Item_System_Int32_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_IList_T__Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList&lt;T&gt;.Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <span class=\"xref\">stem.ArraySegment`1</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The property is set and the array segment is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> interface, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ArraySegment.Class#1\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim names() As String = { &quot;Adam&quot;, &quot;Bruce&quot;, &quot;Charles&quot;, &quot;Daniel&quot;, \n                                &quot;Ebenezer&quot;, &quot;Francis&quot;, &quot;Gilbert&quot;, \n                                &quot;Henry&quot;, &quot;Irving&quot;, &quot;John&quot;, &quot;Karl&quot;,\n                                &quot;Lucian&quot;, &quot;Michael&quot; }\n      Dim partNames As New ArraySegment(Of String)(names, 2, 5)\n      \n      &#39; Cast the ArraySegment object to an IList&lt;String&gt; and enumerate it.\n      Dim list = CType(partNames, IList(Of String))\n      For ctr As Integer = 0 To list.Count - 1\n         Console.WriteLine(list(ctr))\n      Next     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Charles\n&#39;    Daniel\n&#39;    Ebenezer\n&#39;    Francis\n&#39;    Gilbert\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ArraySegment.Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] names = { &quot;Adam&quot;, &quot;Bruce&quot;, &quot;Charles&quot;, &quot;Daniel&quot;, \n                         &quot;Ebenezer&quot;, &quot;Francis&quot;, &quot;Gilbert&quot;, \n                         &quot;Henry&quot;, &quot;Irving&quot;, &quot;John&quot;, &quot;Karl&quot;,\n                         &quot;Lucian&quot;, &quot;Michael&quot; };\n      var partNames = new ArraySegment&lt;String&gt;(names, 2, 5);\n      \n      // Cast the ArraySegment object to an IList&lt;String&gt; and enumerate it.\n      var list = (IList&lt;String&gt;) partNames;\n      for (int ctr = 0; ctr &lt;= list.Count - 1; ctr++)\n         Console.WriteLine(list[ctr]);\n   }\n}\n// The example displays the following output:\n//    Charles\n//    Daniel\n//    Ebenezer\n//    Francis\n//    Gilbert\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_IList_T__RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_IList_T__RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList&lt;T&gt;.RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the array segment item at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList&lt;T&gt;.RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the item to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the array segment.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The array segment is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_Generic_IReadOnlyList_T__Item_System_Int32_\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_Generic_IReadOnlyList_T__Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IReadOnlyList&lt;T&gt;.Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the element at the specified index of the array segment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">T System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item[int index] { get; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <span class=\"xref\">stem.ArraySegment`1</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The property is set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.ireadonlylist-1\" data-linktype=\"relative-path\">IReadOnlyList&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ArraySegment_1_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_ArraySegment_1_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through an array segment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An enumerator that can be used to iterate through the array segment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.arraysegment-1\" data-linktype=\"relative-path\">ArraySegment&lt;T&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ArraySegment-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ArraySegment-1.yml\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.Array\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.Offset\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.ICollection&lt;T&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.ICollection&lt;T&gt;.Clear\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.ICollection&lt;T&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.ICollection&lt;T&gt;.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.ICollection&lt;T&gt;.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.ICollection&lt;T&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.IEnumerable&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.IList&lt;T&gt;.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.IList&lt;T&gt;.Insert\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.IList&lt;T&gt;.Item\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.IList&lt;T&gt;.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.IReadOnlyList&lt;T&gt;.Item\">\r\n<meta name=\"APIName\" content=\"System.ArraySegment&lt;T&gt;.IEnumerable.GetEnumerator\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"62b72233-3cfb-df08-1986-068c3eca0cd8\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\ArraySegment`1.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Delimits a section of a one-dimensional array.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ArraySegment`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ArraySegment-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ArraySegment-1.yml","open_to_public_contributors":true,"api_name":["System.ArraySegment<T>","System.ArraySegment<T>..ctor","System.ArraySegment<T>.Array","System.ArraySegment<T>.Count","System.ArraySegment<T>.Equals","System.ArraySegment<T>.GetHashCode","System.ArraySegment<T>.Offset","System.ArraySegment<T>.op_Equality","System.ArraySegment<T>.op_op_Equality","System.ArraySegment<T>.op_Inequality","System.ArraySegment<T>.op_op_Inequality","System.ArraySegment<T>.ICollection<T>.Add","System.ArraySegment<T>.ICollection<T>.Clear","System.ArraySegment<T>.ICollection<T>.Contains","System.ArraySegment<T>.ICollection<T>.CopyTo","System.ArraySegment<T>.ICollection<T>.IsReadOnly","System.ArraySegment<T>.ICollection<T>.Remove","System.ArraySegment<T>.IEnumerable<T>.GetEnumerator","System.ArraySegment<T>.IList<T>.IndexOf","System.ArraySegment<T>.IList<T>.Insert","System.ArraySegment<T>.IList<T>.Item","System.ArraySegment<T>.IList<T>.RemoveAt","System.ArraySegment<T>.IReadOnlyList<T>.Item","System.ArraySegment<T>.IEnumerable.GetEnumerator"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ArraySegment`1","System::ArraySegment`1","System.ArraySegment`1.#ctor","System::ArraySegment`1::#ctor","System.ArraySegment`1.Array","System::ArraySegment`1::Array","System.ArraySegment`1.Count","System::ArraySegment`1::Count","System.ArraySegment`1.Equals","System::ArraySegment`1::Equals","System.ArraySegment`1.GetHashCode","System::ArraySegment`1::GetHashCode","System.ArraySegment`1.Offset","System::ArraySegment`1::Offset","System.ArraySegment`1.op_Equality","System::ArraySegment`1::op_Equality","System.ArraySegment`1.op_Inequality","System::ArraySegment`1::op_Inequality","System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add","System::ArraySegment`1::System#Collections#Generic#ICollection{T}#Add","System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear","System::ArraySegment`1::System#Collections#Generic#ICollection{T}#Clear","System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains","System::ArraySegment`1::System#Collections#Generic#ICollection{T}#Contains","System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo","System::ArraySegment`1::System#Collections#Generic#ICollection{T}#CopyTo","System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly","System::ArraySegment`1::System#Collections#Generic#ICollection{T}#IsReadOnly","System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove","System::ArraySegment`1::System#Collections#Generic#ICollection{T}#Remove","System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator","System::ArraySegment`1::System#Collections#Generic#IEnumerable{T}#GetEnumerator","System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf","System::ArraySegment`1::System#Collections#Generic#IList{T}#IndexOf","System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert","System::ArraySegment`1::System#Collections#Generic#IList{T}#Insert","System.ArraySegment`1.System#Collections#Generic#IList{T}#Item","System::ArraySegment`1::System#Collections#Generic#IList{T}#Item","System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt","System::ArraySegment`1::System#Collections#Generic#IList{T}#RemoveAt","System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item","System::ArraySegment`1::System#Collections#Generic#IReadOnlyList{T}#Item","System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator","System::ArraySegment`1::System#Collections#IEnumerable#GetEnumerator"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"62b72233-3cfb-df08-1986-068c3eca0cd8","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\ArraySegment`1.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/ArraySegment`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ArraySegment<T> struct | Microsoft Docs","_op_ogTitle":"ArraySegment<T> struct","description":"Delimits a section of a one-dimensional array.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.ArraySegment`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.arraysegment-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.arraysegment-1","fileRelativePath":"System.ArraySegment-1.html"},"themesRelativePathToOutputRoot":"_themes/"}