{"content":"    \r\n    <h1 id=\"System_Net_IAuthenticationModule\">\r\n      <span class=\"lang-csharp\">IAuthenticationModule</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the base authentication interface for Web client authentication modules.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IAuthenticationModule</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The IAuthenticationModule interface defines the properties and methods that custom authentication modules must use.  </p>\n<p> Authentication modules conduct the entire authentication process with a server, responding to an authentication challenge as appropriate. This process may consist of requests to an authentication server separate from the resource server, as well as any other activities required to properly authenticate a request for a URI.  </p>\n<p> Custom authentication modules should implement the IAuthenticationModule interface and then register with the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method. Authentication modules are also registered at program initialization by reading the configuration file.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IAuthenticationModule_AuthenticationType\" data-linktype=\"self-bookmark\">AuthenticationType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the authentication type provided by this authentication module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IAuthenticationModule_CanPreAuthenticate\" data-linktype=\"self-bookmark\">CanPreAuthenticate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the authentication module supports preauthentication.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IAuthenticationModule_Authenticate_System_String_System_Net_WebRequest_System_Net_ICredentials_\" data-linktype=\"self-bookmark\">Authenticate(String,WebRequest,ICredentials)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class in respose to an authentication challenge from a server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IAuthenticationModule_PreAuthenticate_System_Net_WebRequest_System_Net_ICredentials_\" data-linktype=\"self-bookmark\">PreAuthenticate(WebRequest,ICredentials)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class for an authentication request to a server.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IAuthenticationModule_AuthenticationType\">\r\n    \r\n            <a id=\"System_Net_IAuthenticationModule_AuthenticationType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticationType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the authentication type provided by this authentication module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string AuthenticationType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string indicating the authentication type provided by this authentication module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AuthenticationType property identifies the authentication type implemented by this authentication module. The AuthenticationType property is used by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method to determine if the authentication module has been registered, and by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Unregister_\" data-linktype=\"relative-path\">Unregister</a> method to remove a registered authentication module.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the AuthenticationType property. For a complete example refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#7\">    private string m_authenticationType ;\n    private bool m_canPreAuthenticate ;\n\n    // The CustomBasic constructor initializes the properties of the customized \n    // authentication.\n    public CustomBasic()\n    {\n      m_authenticationType = &quot;Basic&quot;;\n      m_canPreAuthenticate = false;\n    }\n\n    // Define the authentication type. This type is then used to identify this\n    // custom authentication module. The default is set to Basic.\n    public string AuthenticationType\n    {\n      get\n      {\n        return m_authenticationType;\n      }\n    }\n\n    // Define the pre-authentication capabilities for the module. The default is set\n    // to false.\n    public bool CanPreAuthenticate\n    {\n      get\n      {\n        return m_canPreAuthenticate;\n      }\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#7\">   String^ m_authenticationType;\n   bool m_canPreAuthenticate;\n\npublic:\n\n   // The CustomBasic constructor initializes the properties of the customized\n   // authentication.\n   CustomBasic()\n   {\n      m_authenticationType = &quot;Basic&quot;;\n      m_canPreAuthenticate = false;\n   }\n\n\n   property String^ AuthenticationType \n   {\n\n      // Define the authentication type. This type is then used to identify this\n      // custom authentication module. The default is set to Basic.\n      virtual String^ get()\n      {\n         return m_authenticationType;\n      }\n\n   }\n\n   property bool CanPreAuthenticate \n   {\n\n      // Define the pre-authentication capabilities for the module. The default is set\n      // to false.\n      virtual bool get()\n      {\n         return m_canPreAuthenticate;\n      }\n\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#7\">      Private m_authenticationType As String\n      Private m_canPreAuthenticate As Boolean\n\n\n      &#39; The CustomBasic constructor initializes the properties of the customized \n      &#39; authentication.\n      Public Sub New()\n        m_authenticationType = &quot;Basic&quot;\n        m_canPreAuthenticate = False\n      End Sub &#39;New\n\n      &#39; Define the authentication type. This type is then used to identify this\n      &#39; custom authentication module. The default is set to Basic.\n\n      Public ReadOnly Property AuthenticationType() As String _\n       Implements IAuthenticationModule.AuthenticationType\n\n        Get\n          Return m_authenticationType\n        End Get\n      End Property\n\n      &#39; Define the pre-authentication capabilities for the module. The default is set\n      &#39; to false.\n\n      Public ReadOnly Property CanPreAuthenticate() As Boolean _\n       Implements IAuthenticationModule.CanPreAuthenticate\n\n\n        Get\n          Return m_canPreAuthenticate\n        End Get\n      End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IAuthenticationModule_CanPreAuthenticate\">\r\n    \r\n            <a id=\"System_Net_IAuthenticationModule_CanPreAuthenticate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanPreAuthenticate</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the authentication module supports preauthentication.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanPreAuthenticate { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the authorization module supports preauthentication; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CanPreAuthenticate property is set to <code>true</code> to indicate that the authentication module can respond with a valid <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance when the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_PreAuthenticate_\" data-linktype=\"relative-path\">PreAuthenticate</a> method is called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the CanPreAuthenticate property. For a complete example refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#7\">    private string m_authenticationType ;\n    private bool m_canPreAuthenticate ;\n\n    // The CustomBasic constructor initializes the properties of the customized \n    // authentication.\n    public CustomBasic()\n    {\n      m_authenticationType = &quot;Basic&quot;;\n      m_canPreAuthenticate = false;\n    }\n\n    // Define the authentication type. This type is then used to identify this\n    // custom authentication module. The default is set to Basic.\n    public string AuthenticationType\n    {\n      get\n      {\n        return m_authenticationType;\n      }\n    }\n\n    // Define the pre-authentication capabilities for the module. The default is set\n    // to false.\n    public bool CanPreAuthenticate\n    {\n      get\n      {\n        return m_canPreAuthenticate;\n      }\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#7\">   String^ m_authenticationType;\n   bool m_canPreAuthenticate;\n\npublic:\n\n   // The CustomBasic constructor initializes the properties of the customized\n   // authentication.\n   CustomBasic()\n   {\n      m_authenticationType = &quot;Basic&quot;;\n      m_canPreAuthenticate = false;\n   }\n\n\n   property String^ AuthenticationType \n   {\n\n      // Define the authentication type. This type is then used to identify this\n      // custom authentication module. The default is set to Basic.\n      virtual String^ get()\n      {\n         return m_authenticationType;\n      }\n\n   }\n\n   property bool CanPreAuthenticate \n   {\n\n      // Define the pre-authentication capabilities for the module. The default is set\n      // to false.\n      virtual bool get()\n      {\n         return m_canPreAuthenticate;\n      }\n\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#7\">      Private m_authenticationType As String\n      Private m_canPreAuthenticate As Boolean\n\n\n      &#39; The CustomBasic constructor initializes the properties of the customized \n      &#39; authentication.\n      Public Sub New()\n        m_authenticationType = &quot;Basic&quot;\n        m_canPreAuthenticate = False\n      End Sub &#39;New\n\n      &#39; Define the authentication type. This type is then used to identify this\n      &#39; custom authentication module. The default is set to Basic.\n\n      Public ReadOnly Property AuthenticationType() As String _\n       Implements IAuthenticationModule.AuthenticationType\n\n        Get\n          Return m_authenticationType\n        End Get\n      End Property\n\n      &#39; Define the pre-authentication capabilities for the module. The default is set\n      &#39; to false.\n\n      Public ReadOnly Property CanPreAuthenticate() As Boolean _\n       Implements IAuthenticationModule.CanPreAuthenticate\n\n\n        Get\n          Return m_canPreAuthenticate\n        End Get\n      End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IAuthenticationModule_Authenticate_System_String_System_Net_WebRequest_System_Net_ICredentials_\">\r\n    \r\n            <a id=\"System_Net_IAuthenticationModule_Authenticate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Authenticate(String,WebRequest,ICredentials)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class in respose to an authentication challenge from a server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>challenge</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The authentication challenge sent by the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>request</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> instance associated with the challenge.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>credentials</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The credentials associated with the challenge.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance containing the authorization message for the request, or <code>null</code> if the challenge cannot be handled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Authenticate method conducts the authentication process with the server and returns an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Authenticate method. For a complete example refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#3\">    // Authenticate is the core method for this custom authentication.\n    // When an Internet resource requests authentication, the WebRequest.GetResponse \n    // method calls the AuthenticationManager.Authenticate method. This method, in \n    // turn, calls the Authenticate method on each of the registered authentication\n    // modules, in the order in which they were registered. When the authentication is \n    // complete an Authorization object is returned to the WebRequest.\n    public Authorization Authenticate(String challenge, WebRequest request, ICredentials credentials) \n    {\n      Encoding ASCII = Encoding.ASCII;        \n\n      // Get the username and password from the credentials\n      NetworkCredential MyCreds = credentials.GetCredential(request.RequestUri, &quot;Basic&quot;);        \n\n      if (PreAuthenticate(request, credentials) == null)\n        Console.WriteLine(&quot;<br> Pre-authentication is not allowed.&quot;);\n      else\n        Console.WriteLine(&quot;<br> Pre-authentication is allowed.&quot;);\n\n      // Verify that the challenge satisfies the authorization requirements.\n      bool challengeOk = checkChallenge(challenge, MyCreds.Domain);\n\n      if (!challengeOk)\n        return null;\n\n      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate the username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 encoding to this array of bytes to obtain the encoded \n      // authorization.\n      string BasicEncrypt = MyCreds.UserName + &quot;:&quot; + MyCreds.Password;\n\n      string BasicToken = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt));\n\n      // Create an Authorization object using the encoded authorization above.\n      Authorization resourceAuthorization = new Authorization(BasicToken);\n\n      // Get the Message property, which contains the authorization string that the \n      // client returns to the server when accessing protected resources.\n      Console.WriteLine(&quot;<br> Authorization Message:{0}&quot;,resourceAuthorization.Message);\n\n      // Get the Complete property, which is set to true when the authentication process \n      // between the client and the server is finished.\n      Console.WriteLine(&quot;<br> Authorization Complete:{0}&quot;,resourceAuthorization.Complete);\n\n      Console.WriteLine(&quot;<br> Authorization ConnectionGroupId:{0}&quot;,resourceAuthorization.ConnectionGroupId);\n\n\n      return resourceAuthorization;\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#3\">   // Authenticate is the core method for this custom authentication.\n   // When an internet resource requests authentication, the WebRequest::GetResponse\n   // method calls the AuthenticationManager::Authenticate method. This method, in\n   // turn, calls the Authenticate method on each of the registered authentication\n   // modules, in the order they were registered. When the authentication is\n   // complete an Authorization object is returned to the WebRequest, as\n   // shown by this routine&#39;s retun type.\n   virtual Authorization^ Authenticate( String^ challenge, WebRequest^ request, ICredentials^ credentials )\n   {\n      Encoding^ ASCII = Encoding::ASCII;\n      \n      // Get the username and password from the credentials\n      NetworkCredential^ MyCreds = credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;Basic&quot; );\n      if ( PreAuthenticate( request, credentials ) == nullptr )\n            Console::WriteLine( &quot;<br> Pre-authentication is not allowed.&quot; );\n      else\n            Console::WriteLine( &quot;<br> Pre-authentication is allowed.&quot; );\n\n      \n      // Verify that the challenge satisfies the authorization requirements.\n      bool challengeOk = checkChallenge( challenge, MyCreds-&gt;Domain );\n      if (  !challengeOk )\n            return nullptr;\n\n      \n      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 Encoding to this array of bytes to obtain the encoded\n      // authorization.\n      String^ BasicEncrypt = String::Concat( MyCreds-&gt;UserName, &quot;:&quot;, MyCreds-&gt;Password );\n      String^ BasicToken = String::Concat( &quot;Basic &quot;, Convert::ToBase64String( ASCII-&gt;GetBytes( BasicEncrypt ) ) );\n      \n      // Create an Authorization object using the above encoded authorization.\n      Authorization^ resourceAuthorization = gcnew Authorization( BasicToken );\n      \n      // Get the Message property which contains the authorization string that the\n      // client returns to the server when accessing protected resources\n      Console::WriteLine( &quot;<br> Authorization Message: {0}&quot;, resourceAuthorization-&gt;Message );\n      \n      // Get the Complete property which is set to true when the authentication process\n      // between the client and the server is finished.\n      Console::WriteLine( &quot;<br> Authorization Complete: {0}&quot;, resourceAuthorization-&gt;Complete );\n      \n      Console::WriteLine( &quot;<br> Authorization ConnectionGroupId: {0}&quot;, resourceAuthorization-&gt;ConnectionGroupId );\n      return resourceAuthorization;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#3\">      &#39; Authenticate is the core method for this custom authentication.\n      &#39; When an Internet resource requests authentication, the WebRequest.GetResponse \n      &#39; method calls the AuthenticationManager.Authenticate method. This method, in \n      &#39; turn, calls the Authenticate method on each of the registered authentication\n      &#39; modules, in the order in which they were registered. When the authentication is \n      &#39; complete an Authorization object is returned to the WebRequest.\n      Public Function Authenticate(ByVal challenge As String, ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization _\n          Implements IAuthenticationModule.Authenticate\n\n\n        Dim ASCII As Encoding = Encoding.ASCII\n\n        &#39; Get the username and password from the credentials\n        Dim MyCreds As NetworkCredential = credentials.GetCredential(request.RequestUri, &quot;Basic&quot;)\n\n        If PreAuthenticate(request, credentials) Is Nothing Then\n          Console.WriteLine(ControlChars.Lf + &quot; Pre-authentication is not allowed.&quot;)\n        Else\n          Console.WriteLine(ControlChars.Lf + &quot; Pre-authentication is allowed.&quot;)\n        End If\n        &#39; Verify that the challenge satisfies the authorization requirements.\n        Dim challengeOk As Boolean = checkChallenge(challenge, MyCreds.Domain)\n\n        If Not challengeOk Then\n          Return Nothing\n        End If\n\n        &#39; Create the encrypted string according to the Basic authentication format as\n        &#39; follows:\n        &#39; a)Concatenate the username and password separated by colon;\n        &#39; b)Apply ASCII encoding to obtain a stream of bytes;\n        &#39; c)Apply Base64 encoding to this array of bytes to obtain the encoded \n        &#39; authorization.\n        Dim BasicEncrypt As String = MyCreds.UserName + &quot;:&quot; + MyCreds.Password\n\n        Dim BasicToken As String = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt))\n\n        &#39; Create an Authorization object using the encoded authorization above.\n        Dim resourceAuthorization As New Authorization(BasicToken)\n\n        &#39; Get the Message property, which contains the authorization string that the \n        &#39; client returns to the server when accessing protected resources.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Message:{0}&quot;, resourceAuthorization.Message)\n\n        &#39; Get the Complete property, which is set to true when the authentication process \n        &#39; between the client and the server is finished.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Complete:{0}&quot;, resourceAuthorization.Complete)\n\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization ConnectionGroupId:{0}&quot;, resourceAuthorization.ConnectionGroupId)\n\n\n        Return resourceAuthorization\n      End Function &#39;Authenticate\n    End Class &#39;CustomBasic \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IAuthenticationModule_PreAuthenticate_System_Net_WebRequest_System_Net_ICredentials_\">\r\n    \r\n            <a id=\"System_Net_IAuthenticationModule_PreAuthenticate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreAuthenticate(WebRequest,ICredentials)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class for an authentication request to a server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>request</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> instance associated with the authentication request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>credentials</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The credentials associated with the authentication request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance containing the authorization message for the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_CanPreAuthenticate_\" data-linktype=\"relative-path\">CanPreAuthenticate</a> property is <code>true</code>, the PreAuthenticate method will return an instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class containing an authentication message.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the PreAuthenticate method. For a complete example refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#4\">    // The PreAuthenticate method specifies whether the authentication implemented \n    // by this class allows pre-authentication. \n    // Even if you do not use it, this method must be implemented to obey to the rules \n    // of interface implementation.\n    // In this case it always returns null. \n    public Authorization PreAuthenticate(WebRequest request, ICredentials credentials) \n    {                \n      return null;\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#4\">   // The PreAuthenticate method specifies if the authentication implemented\n   // by this class allows pre-authentication.\n   // Even if you do not use it, this method must be implemented to obey to the rules\n   // of interface implemebtation.\n   // In this case it always returns null.\n   virtual Authorization^ PreAuthenticate( WebRequest^ request, ICredentials^ credentials )\n   {\n      return nullptr;\n   }\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#4\">      &#39; The PreAuthenticate method specifies whether the authentication implemented \n      &#39; by this class allows pre-authentication. \n      &#39; Even if you do not use it, this method must be implemented to obey to the rules \n      &#39; of interface implementation.\n      &#39; In this case it always returns null. \n      Public Function PreAuthenticate(ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization _\n          Implements IAuthenticationModule.PreAuthenticate\n\n        Return Nothing\n      End Function &#39;PreAuthenticate\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.IAuthenticationModule.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.IAuthenticationModule.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule.Authenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule.AuthenticationType\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule.CanPreAuthenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule.PreAuthenticate\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e3423320-9d3f-414f-723d-8843b6fbb0cd\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\IAuthenticationModule.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base authentication interface for Web client authentication modules.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.IAuthenticationModule\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.IAuthenticationModule.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.IAuthenticationModule.yml","open_to_public_contributors":true,"api_name":["System.Net.IAuthenticationModule","System.Net.IAuthenticationModule.Authenticate","System.Net.IAuthenticationModule.AuthenticationType","System.Net.IAuthenticationModule.CanPreAuthenticate","System.Net.IAuthenticationModule.PreAuthenticate"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.IAuthenticationModule","System::Net::IAuthenticationModule","System.Net.IAuthenticationModule.Authenticate","System::Net::IAuthenticationModule::Authenticate","System.Net.IAuthenticationModule.AuthenticationType","System::Net::IAuthenticationModule::AuthenticationType","System.Net.IAuthenticationModule.CanPreAuthenticate","System::Net::IAuthenticationModule::CanPreAuthenticate","System.Net.IAuthenticationModule.PreAuthenticate","System::Net::IAuthenticationModule::PreAuthenticate"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e3423320-9d3f-414f-723d-8843b6fbb0cd","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\IAuthenticationModule.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/IAuthenticationModule.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IAuthenticationModule interface | Microsoft Docs","_op_ogTitle":"IAuthenticationModule interface","description":"Provides the base authentication interface for Web client authentication modules.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.IAuthenticationModule","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.iauthenticationmodule","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.iauthenticationmodule","fileRelativePath":"System.Net.IAuthenticationModule.html"},"themesRelativePathToOutputRoot":"_themes/"}