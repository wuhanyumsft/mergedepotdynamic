{"content":"    \r\n    <h1 id=\"System_Runtime_Remoting_Channels_IClientChannelSink\">\r\n      <span class=\"lang-csharp\">IClientChannelSink</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides required functions and properties for client channel sinks.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IClientChannelSink : System.Runtime.Remoting.Channels.IChannelSinkBase</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are linked together in a chain of channel sink providers and all channel messages flow through this chain of sinks before they are serialized and transported.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IClientChannelSink_NextChannelSink\" data-linktype=\"self-bookmark\">NextChannelSink</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the next client channel sink in the client sink chain.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IClientChannelSink_AsyncProcessRequest_System_Runtime_Remoting_Channels_IClientChannelSinkStack_System_Runtime_Remoting_Messaging_IMessage_System_Runtime_Remoting_Channels_ITransportHeaders_System_IO_Stream_\" data-linktype=\"self-bookmark\">AsyncProcessRequest(IClientChannelSinkStack,IMessage,ITransportHeaders,Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Requests asynchronous processing of a method call on the current sink.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IClientChannelSink_AsyncProcessResponse_System_Runtime_Remoting_Channels_IClientResponseChannelSinkStack_System_Object_System_Runtime_Remoting_Channels_ITransportHeaders_System_IO_Stream_\" data-linktype=\"self-bookmark\">AsyncProcessResponse(IClientResponseChannelSinkStack,Object,ITransportHeaders,Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Requests asynchronous processing of a response to a method call on the current sink.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IClientChannelSink_GetRequestStream_System_Runtime_Remoting_Messaging_IMessage_System_Runtime_Remoting_Channels_ITransportHeaders_\" data-linktype=\"self-bookmark\">GetRequestStream(IMessage,ITransportHeaders)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> onto which the provided message is to be serialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IClientChannelSink_ProcessMessage_System_Runtime_Remoting_Messaging_IMessage_System_Runtime_Remoting_Channels_ITransportHeaders_System_IO_Stream_System_Runtime_Remoting_Channels_ITransportHeaders__System_IO_Stream__\" data-linktype=\"self-bookmark\">ProcessMessage(IMessage,ITransportHeaders,Stream,ITransportHeaders,Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Requests message processing from the current sink.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IClientChannelSink_NextChannelSink\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IClientChannelSink_NextChannelSink_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextChannelSink</div>        \r\n          </div>\r\n    \r\n            <p>Gets the next client channel sink in the client sink chain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.Channels.IClientChannelSink NextChannelSink { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.channels.iclientchannelsink\" data-linktype=\"relative-path\">IClientChannelSink</a></div>\r\n                  </div>\r\n                  <p>The next client channel sink in the client sink chain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Channel sinks are linked together in a chain of sink providers and all channel messages flow through this chain before they are serialized and transported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates an implementation of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Remoting_Sinks#22\">    public IClientChannelSink NextChannelSink\n    {\n        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]\n        get\n        {\n            return(nextSink);\n        }\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Remoting_Sinks#22\">public:\n   property IClientChannelSink^ NextChannelSink \n   {\n      virtual IClientChannelSink^ get()\n      {\n         return (nextSink);\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IClientChannelSink_AsyncProcessRequest_System_Runtime_Remoting_Channels_IClientChannelSinkStack_System_Runtime_Remoting_Messaging_IMessage_System_Runtime_Remoting_Channels_ITransportHeaders_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IClientChannelSink_AsyncProcessRequest_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncProcessRequest(IClientChannelSinkStack,IMessage,ITransportHeaders,Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Requests asynchronous processing of a method call on the current sink.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AsyncProcessRequest (System.Runtime.Remoting.Channels.IClientChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sinkStack</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.channels.iclientchannelsinkstack\" data-linktype=\"relative-path\">IClientChannelSinkStack</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A stack of channel sinks that called this sink.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>headers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The headers to add to the outgoing message heading to the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream headed to the transport sink.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"SoapClientFormatterSinkProvider_BaseChannelSinkWithProperties#2\">[SecurityPermission(SecurityAction::Demand, Flags = SecurityPermissionFlag::Infrastructure)]\nprivate ref class MyClientFormatterChannelSink: public BaseChannelSinkWithProperties, public IClientChannelSink, public IMessageSink\n{\nprivate:\n   IClientChannelSink^ nextClientSink;\n   IMessageSink^ nextMessageSink;\n\npublic:\n   MyClientFormatterChannelSink()\n      : nextClientSink( nullptr ), nextMessageSink( nullptr )\n   {}\n\n   MyClientFormatterChannelSink( IClientChannelSink^ nextSink, IMessageSink^ nextMsgSink )\n      : BaseChannelSinkWithProperties()\n   {\n      nextClientSink = nextSink;\n      nextMessageSink = nextMsgSink;\n   }\n\n\tvirtual void ProcessMessage( IMessage^ message, ITransportHeaders^ requestHeaders, Stream^ requestStream, [Out]ITransportHeaders^% responseHeaders, [Out]Stream^% responseStream )\n\t{\n      nextClientSink-&gt;ProcessMessage( message, requestHeaders, requestStream, responseHeaders, responseStream );\n\t}\n\n\n\n   virtual void AsyncProcessRequest( IClientChannelSinkStack^ sinkStack, IMessage^ msg, ITransportHeaders^ headers, Stream^ myStream )\n   {\n      sinkStack-&gt;Push( this, nullptr );\n      nextClientSink-&gt;AsyncProcessRequest( sinkStack, msg, headers, myStream );\n   }\n\n   virtual void AsyncProcessResponse( IClientResponseChannelSinkStack^ sinkStack, Object^ /*state*/, ITransportHeaders^ headers, Stream^ myStream )\n   {\n      sinkStack-&gt;AsyncProcessResponse( headers, myStream );\n   }\n\n   virtual Stream^ GetRequestStream( IMessage^ /*msg*/, ITransportHeaders^ /*headers*/ )\n   {\n      return nullptr;\n   }\n\n\n   property IClientChannelSink^ NextChannelSink \n   {\n      virtual IClientChannelSink^ get()\n      {\n         return nextClientSink;\n      }\n\n   }\n\n   property IMessageSink^ NextSink \n   {\n      virtual IMessageSink^ get()\n      {\n         return nextMessageSink;\n      }\n\n   }\n\n   virtual IMessageCtrl^ AsyncProcessMessage( IMessage^ /*msg*/, IMessageSink^ /*replySink*/ )\n   {\n      return nullptr;\n   }\n\n   virtual IMessage^ SyncProcessMessage( IMessage^ msg )\n   {\n      return nextMessageSink-&gt;SyncProcessMessage( msg );\n   }\n\n\n   property Object^ Item [Object^]\n   {\n      virtual Object^ get( Object^ key ) override\n      {\n\t\t  if ( key == MyKey::typeid )\n                  return this;\n\n         return nullptr;\n      }\n\n      virtual void set( Object^ /*value*/, Object^ /*key*/ ) override\n      {\n         throw gcnew NotSupportedException;\n      }\n\n   }\n\n   property ICollection^ Keys \n   {\n      virtual ICollection^ get() override\n      {\n         ArrayList^ myKeys = gcnew ArrayList( 1 );\n\t\t myKeys-&gt;Add( MyKey::typeid );\n         return myKeys;\n      }\n\n   }\n\n};\n\n\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapClientFormatterSinkProvider_BaseChannelSinkWithProperties#2\">&lt;PermissionSet(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\nFriend Class MyClientFormatterChannelSink\n   Inherits BaseChannelSinkWithProperties\n   Implements IClientChannelSink, IMessageSink\n   Private nextClientSink As IClientChannelSink = Nothing\n   Private nextMessageSink As IMessageSink = Nothing\n\n   Public Sub New(nextSink As IClientChannelSink, nextMsgSink As IMessageSink)\n      MyBase.New()\n      nextClientSink = nextSink\n      nextMessageSink = nextMsgSink\n   End Sub &#39;New\n\n   Public Sub ProcessMessage(msg As IMessage, requestHeaders As ITransportHeaders, _\n               requestStream As Stream, ByRef responseHeaders As ITransportHeaders, _\n               ByRef responseStream As Stream) _\n               Implements IClientChannelSink.ProcessMessage\n      nextClientSink.ProcessMessage(msg, requestHeaders, requestStream, _\n                                    responseHeaders, responseStream)\n   End Sub &#39;ProcessMessage\n\n   Public Sub AsyncProcessRequest(sinkStack As IClientChannelSinkStack, _\n            msg As IMessage, headers As ITransportHeaders, myStream As Stream) _\n            Implements IClientChannelSink.AsyncProcessRequest\n      sinkStack.Push(Me, Nothing)\n      nextClientSink.AsyncProcessRequest(sinkStack, msg, headers, myStream)\n   End Sub &#39;AsyncProcessRequest\n\n   Public Sub AsyncProcessResponse(sinkStack As IClientResponseChannelSinkStack, _\n            state As Object, headers As ITransportHeaders, myStream As Stream) _\n            Implements IClientChannelSink.AsyncProcessResponse\n      sinkStack.AsyncProcessResponse(headers, myStream)\n   End Sub &#39;AsyncProcessResponse\n\n   Public Function GetRequestStream(msg As IMessage, headers As ITransportHeaders) As Stream _\n         Implements IClientChannelSink.GetRequestStream\n      Return Nothing\n   End Function &#39;GetRequestStream\n\n   Public ReadOnly Property NextChannelSink() As IClientChannelSink _\n         Implements IClientChannelSink.NextChannelSink\n      Get\n         Return nextClientSink\n      End Get\n   End Property\n\n   Public ReadOnly Property NextSink() As IMessageSink _\n         Implements IMessageSink.NextSink\n      Get\n         Return nextMessageSink\n      End Get\n   End Property\n\n   Public Overrides ReadOnly Property Properties() As Collections.IDictionary _\n            Implements IClientChannelSink.Properties\n      Get\n      End Get\n   End Property\n\n   Public Function AsyncProcessMessage(msg As IMessage, replySink As IMessageSink) As IMessageCtrl _\n            Implements IMessageSink.AsyncProcessMessage\n      Return Nothing\n   End Function &#39;AsyncProcessMessage\n\n   Public Function SyncProcessMessage(msg As IMessage) As IMessage _\n            Implements IMessageSink.SyncProcessMessage\n      Return nextMessageSink.SyncProcessMessage(msg)\n   End Function &#39;SyncProcessMessage\n\n   Default Public Overrides Property Item(key As Object) As Object\n      Get\n         If key Is GetType(MyKey) Then\n            Return Me\n         End If\n         Return Nothing\n      End Get\n      Set\n         Throw New NotSupportedException()\n      End Set\n   End Property\n\n   Public Overrides ReadOnly Property Keys() As ICollection\n      Get\n         Dim myKeys As New ArrayList(0)\n         myKeys.Add(GetType(MyKey))\n         Return myKeys\n      End Get\n   End Property\nEnd Class &#39;MyClientFormatterChannelSink\n\nPublic Class MyKey\nEnd Class &#39;MyKey\n</code></pre><pre><code class=\"lang-cs\" name=\"SoapClientFormatterSinkProvider_BaseChannelSinkWithProperties#2\">[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.Infrastructure)]\ninternal class MyClientFormatterChannelSink :\n         BaseChannelSinkWithProperties, IClientChannelSink, IMessageSink\n{\n   private IClientChannelSink nextClientSink=null;\n   private IMessageSink nextMessageSink = null;\n\n   public MyClientFormatterChannelSink(IClientChannelSink nextSink,\n                                       IMessageSink nextMsgSink) : base()\n   {\n      nextClientSink = nextSink;\n      nextMessageSink = nextMsgSink;\n   }\n\n   public void ProcessMessage(IMessage msg,\n         ITransportHeaders requestHeaders, Stream requestStream,\n         out ITransportHeaders responseHeaders, out Stream responseStream)\n   {\n      nextClientSink.ProcessMessage(msg, requestHeaders, requestStream,\n               out responseHeaders, out responseStream);\n   }\n\n   public void AsyncProcessRequest(IClientChannelSinkStack sinkStack,\n                  IMessage msg, ITransportHeaders headers, Stream myStream)\n   {\n      sinkStack.Push(this, null);\n      nextClientSink.AsyncProcessRequest(sinkStack,msg,headers,myStream);\n   }\n\n   public void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack,\n         Object state, ITransportHeaders headers, Stream myStream)\n   {\n      sinkStack.AsyncProcessResponse(headers, myStream);\n   }\n\n   public Stream GetRequestStream(IMessage msg,ITransportHeaders headers)\n   {\n      return null;\n   }\n\n   public IClientChannelSink NextChannelSink\n   {\n      get\n      {\n         return nextClientSink;\n      }\n   }\n\n   public IMessageSink NextSink\n   {\n      get\n      {\n         return nextMessageSink;\n      }\n   }\n\n   public IMessageCtrl AsyncProcessMessage(IMessage msg,\n                                                IMessageSink replySink)\n   {\n      return null;\n   }\n\n   public IMessage SyncProcessMessage(IMessage msg)\n   {\n      return nextMessageSink.SyncProcessMessage(msg);\n   }\n\n   public override Object this[Object key]\n   {\n      get\n      {\n         if (key == typeof(MyKey))\n            return this;\n         return null;\n      }\n      set\n      {\n         throw new NotSupportedException();\n      }\n   }\n   public override ICollection Keys\n   {\n      get\n      {\n         ArrayList myKeys = new ArrayList(1);\n         myKeys.Add(typeof(MyKey));\n         return myKeys;\n      }\n   }\n}\npublic class MyKey\n{\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IClientChannelSink_AsyncProcessResponse_System_Runtime_Remoting_Channels_IClientResponseChannelSinkStack_System_Object_System_Runtime_Remoting_Channels_ITransportHeaders_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IClientChannelSink_AsyncProcessResponse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncProcessResponse(IClientResponseChannelSinkStack,Object,ITransportHeaders,Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Requests asynchronous processing of a response to a method call on the current sink.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sinkStack</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.channels.iclientresponsechannelsinkstack\" data-linktype=\"relative-path\">IClientResponseChannelSinkStack</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A stack of sinks that called this sink.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Information generated on the request side that is associated with this sink.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>headers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The headers retrieved from the server response stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream coming back from the transport sink.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"CommonTransportKeys#1\">   [PermissionSet(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n   private ref class LoggingServerChannelSink: public BaseChannelObjectWithProperties, public IServerChannelSink\n   {\n   private:\n      IServerChannelSink^ nextSink2;\n      bool bEnabled2;\n\n   public:\n      LoggingServerChannelSink()\n         : nextSink2( nullptr ), bEnabled2( true )\n      {}\n\n      LoggingServerChannelSink( IServerChannelSink^ localNextSink )\n         : BaseChannelObjectWithProperties()\n      {\n         nextSink2 = localNextSink;\n      }\n\n      virtual ServerProcessing ProcessMessage( IServerChannelSinkStack^ sinkStack, IMessage^ requestMsg, ITransportHeaders^ requestHeaders, Stream^ requestStream, [Out]IMessage^% responseMsg, [Out]ITransportHeaders^% responseHeaders, [Out]Stream^% responseStream ) = IServerChannelSink::ProcessMessage\n      {\n         if ( bEnabled2 )\n         {\n            Console::WriteLine( &quot;----------Request Headers-----------&quot; );\n            \n            Console::WriteLine( &quot;{0}:{1}&quot;, CommonTransportKeys::IPAddress,\n               requestHeaders[ CommonTransportKeys::IPAddress ] );\n            Console::WriteLine( &quot;{0}:{1}&quot;, CommonTransportKeys::ConnectionId,\n               requestHeaders[ CommonTransportKeys::ConnectionId ] );\n            Console::WriteLine( &quot;{0}:{1}&quot;, CommonTransportKeys::RequestUri,\n               requestHeaders[ CommonTransportKeys::RequestUri ] );\n         }\n\n         sinkStack-&gt;Push( this, nullptr );\n         ServerProcessing processing = nextSink2-&gt;ProcessMessage( sinkStack, requestMsg, requestHeaders, requestStream, responseMsg, responseHeaders, responseStream );\n         switch ( processing )\n         {\n            case ServerProcessing::Complete:\n               sinkStack-&gt;Pop( this );\n               break;\n\n            case ServerProcessing::OneWay:\n               sinkStack-&gt;Pop( this );\n               break;\n\n            case ServerProcessing::Async:\n               sinkStack-&gt;Store( this, nullptr );\n               break;\n         }\n         return processing;\n      }\n\n      virtual void AsyncProcessResponse( IServerResponseChannelSinkStack^ sinkStack, Object^ /*state*/, IMessage^ msg, ITransportHeaders^ headers, Stream^ stream1 )\n      {\n         sinkStack-&gt;AsyncProcessResponse( msg, headers, stream1 );\n      }\n\n      virtual Stream^ GetResponseStream( IServerResponseChannelSinkStack^ /*sinkStack*/, Object^ /*state*/, IMessage^ /*msg*/, ITransportHeaders^ /*headers*/ )\n      {\n         return nullptr;\n      }\n\n      property IServerChannelSink^ NextChannelSink \n      {\n         virtual IServerChannelSink^ get()\n         {\n            return nextSink2;\n         }\n      }\n   };\n\n   [PermissionSet(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n   public ref class LoggingServerChannelSinkProvider: public IServerChannelSinkProvider\n   {\n   private:\n      IServerChannelSinkProvider^ next2;\n\n   public:\n      LoggingServerChannelSinkProvider()\n         : next2( nullptr )\n      {}\n\n      LoggingServerChannelSinkProvider( IDictionary^ /*properties*/, ICollection^ /*providerData*/ ){}\n\n      virtual void GetChannelData( IChannelDataStore^ /*channelData*/ ){}\n\n      virtual IServerChannelSink^ CreateSink( IChannelReceiver^ channel1 )\n      {\n         IServerChannelSink^ localNextSink = nullptr;\n         if ( next2 != nullptr )\n                  localNextSink = next2-&gt;CreateSink( channel1 );\n\n         return gcnew LoggingServerChannelSink( localNextSink );\n      }\n\n      property IServerChannelSinkProvider^ Next \n      {\n         virtual IServerChannelSinkProvider^ get()\n         {\n            return next2;\n         }\n\n         virtual void set( IServerChannelSinkProvider^ value )\n         {\n            next2 = value;\n         }\n      }\n   };\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CommonTransportKeys#1\">   [PermissionSet(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public class LoggingServerChannelSinkProvider : IServerChannelSinkProvider\n   {\n      private IServerChannelSinkProvider next2 = null;\n      public LoggingServerChannelSinkProvider(IDictionary properties, ICollection providerData)\n      {\n      }\n      public void GetChannelData(IChannelDataStore channelData)\n      {\n      }\n      public IServerChannelSink CreateSink(IChannelReceiver channel1)\n      {\n         IServerChannelSink localNextSink = null;\n         if (next2 != null)\n            localNextSink = next2.CreateSink(channel1);\n         return new LoggingServerChannelSink(localNextSink);\n      }\n      public IServerChannelSinkProvider Next\n      {\n         get\n         {\n            return next2;\n         }\n         set\n         {\n            next2 = value;\n         }\n      }\n   }\n   [PermissionSet(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   internal class LoggingServerChannelSink : BaseChannelObjectWithProperties, IServerChannelSink\n   {\n      private IServerChannelSink nextSink2 = null;\n      private bool bEnabled2 = true;\n      public LoggingServerChannelSink(IServerChannelSink localNextSink) : base()\n      {\n         nextSink2 = localNextSink;\n      }\n      public ServerProcessing ProcessMessage(   IServerChannelSinkStack sinkStack,\n   IMessage requestMsg,\n   ITransportHeaders requestHeaders,\n   Stream requestStream,\n   out IMessage responseMsg,\n   out ITransportHeaders responseHeaders,\n   out Stream responseStream\n)\n      {\n         if (bEnabled2)\n         {\n            Console.WriteLine(&quot;----------Request Headers-----------&quot;);\n            Console.WriteLine( CommonTransportKeys.IPAddress + &quot;:&quot; +\n               requestHeaders[CommonTransportKeys.IPAddress]);\n            Console.WriteLine( CommonTransportKeys.ConnectionId + &quot;:&quot; +\n               requestHeaders[CommonTransportKeys.ConnectionId]);\n            Console.WriteLine( CommonTransportKeys.RequestUri + &quot;:&quot; +\n               requestHeaders[CommonTransportKeys.RequestUri]);\n\n         }\n         sinkStack.Push(this, null);\n         ServerProcessing processing =\n            nextSink2.ProcessMessage(sinkStack, requestMsg, requestHeaders, requestStream, out responseMsg,\n            out responseHeaders, out responseStream);\n\n         switch (processing)\n         {\n            case ServerProcessing.Complete :\n            {\n               sinkStack.Pop(this);\n               break;\n            }\n            case ServerProcessing.OneWay:\n            {\n               sinkStack.Pop(this);\n               break;\n            }\n            case ServerProcessing.Async:\n            {\n               sinkStack.Store(this, null);\n               break;\n            }\n         }\n         return processing;\n      }\n      public void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, Object state,\n         IMessage msg, ITransportHeaders headers, Stream stream1)\n      {\n         sinkStack.AsyncProcessResponse(msg, headers, stream1);\n      }\n      public Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, Object state,\n         IMessage msg, ITransportHeaders headers)\n      {\n         return null;\n      }\n      public IServerChannelSink NextChannelSink\n      {\n         get\n         {\n            return nextSink2;\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"CommonTransportKeys#1\">   &lt;PermissionSet(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Class LoggingServerChannelSinkProvider\n      Implements IServerChannelSinkProvider \n      Private next2 As IServerChannelSinkProvider = Nothing\n      \n      Public Sub New(properties As IDictionary, providerData As ICollection)\n      End Sub &#39;New\n      \n      Public Sub GetChannelData(channelData As IChannelDataStore) _ \n                                  Implements IServerChannelSinkProvider.GetChannelData\n      End Sub &#39;GetChannelData\n      \n      Public Function CreateSink(channel1 As IChannelReceiver) As IServerChannelSink _ \n                                        Implements IServerChannelSinkProvider.CreateSink\n         Dim localNextSink As IServerChannelSink = Nothing\n         If Not (next2 Is Nothing) Then\n            localNextSink = next2.CreateSink(channel1)\n         End If\n         Return New LoggingServerChannelSink(localNextSink)\n      End Function &#39;CreateSink\n      \n      Public Property [Next]() As IServerChannelSinkProvider Implements _ \n                                                        IServerChannelSinkProvider.Next\n         Get\n            Return next2\n         End Get\n         Set\n            next2 = value\n         End Set\n      End Property\n   End Class &#39;LoggingServerChannelSinkProvider\n   \n   &lt;PermissionSet(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _ \n   Friend Class LoggingServerChannelSink\n      Inherits BaseChannelObjectWithProperties\n      Implements IServerChannelSink \n      Private nextSink2 As IServerChannelSink = Nothing\n      Private bEnabled2 As Boolean = True\n      \n      Public Sub New(localNextSink As IServerChannelSink)\n         MyBase.new()\n         nextSink2 = localNextSink\n      End Sub &#39;New\n      \n     Public Function ProcessMessage(   ByVal sinkStack As IServerChannelSinkStack, _\n         ByVal requestMsg As IMessage, _\n         ByVal requestHeaders As ITransportHeaders, _\n         ByVal requestStream As Stream, _\n         &lt;Out&gt; ByRef responseMsg As IMessage, _\n         &lt;Out&gt; ByRef responseHeaders As ITransportHeaders, _\n         &lt;Out&gt; ByRef responseStream As Stream _\n      ) As ServerProcessing _ \n         Implements IServerChannelSink.ProcessMessage\n         If bEnabled2 Then\n            Console.WriteLine(&quot;----------Request Headers-----------&quot;)\n            Console.WriteLine(CommonTransportKeys.IPAddress.ToString() + &quot;:&quot; + _ \n                                 requestHeaders(CommonTransportKeys.IPAddress).ToString())\n         Console.WriteLine(CommonTransportKeys.ConnectionId.ToString() + &quot;:&quot; + _ \n                                 requestHeaders(CommonTransportKeys.ConnectionId).ToString())\n         Console.WriteLine(CommonTransportKeys.RequestUri.ToString() + &quot;:&quot; + _ \n                                 requestHeaders(CommonTransportKeys.RequestUri).ToString())\n         End If\n         sinkStack.Push(Me, Nothing)\n         Dim processing As ServerProcessing = _ \n                                      nextSink2.ProcessMessage _ \n                  (sinkStack, requestMsg, requestHeaders, requestStream, responseMsg, responseHeaders, responseStream)\n         \n         Select Case processing\n            Case ServerProcessing.Complete\n                  sinkStack.Pop(Me)\n            Case ServerProcessing.OneWay\n                  sinkStack.Pop(Me)\n            Case ServerProcessing.Async\n                  sinkStack.Store(Me, Nothing)\n         End Select\n         Return processing\n      End Function &#39;ProcessMessage\n      \n      Public Sub AsyncProcessResponse(sinkStack As IServerResponseChannelSinkStack, _ \n              state As Object, msg As IMessage, headers As ITransportHeaders, stream1 As Stream) _ \n                                       Implements IServerChannelSink.AsyncProcessResponse\n         sinkStack.AsyncProcessResponse(msg, headers, stream1)\n      End Sub &#39;AsyncProcessResponse\n      \n      Public Function GetResponseStream(sinkStack As IServerResponseChannelSinkStack, _ \n                  state As Object, msg As IMessage, headers As ITransportHeaders) As Stream _ \n                                       Implements IServerChannelSink.GetResponseStream\n         Return Nothing\n      End Function &#39;GetResponseStream\n      \n      Public ReadOnly Property NextChannelSink() As IServerChannelSink _ \n                                          Implements IServerChannelSink.NextChannelSink\n         Get\n            Return nextSink2\n         End Get\n      End Property\n\n      Public Overrides ReadOnly Property Properties() As Collections.IDictionary _ \n                  Implements IServerChannelSink.Properties\n         Get\n\t\treturn nothing\t\t\n         End Get\n      End Property\n   End Class &#39;LoggingServerChannelSink\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IClientChannelSink_GetRequestStream_System_Runtime_Remoting_Messaging_IMessage_System_Runtime_Remoting_Channels_ITransportHeaders_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IClientChannelSink_GetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRequestStream(IMessage,ITransportHeaders)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> onto which the provided message is to be serialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Stream GetRequestStream (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodcallmessage\" data-linktype=\"relative-path\">IMethodCallMessage</a> containing details about the method call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>headers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The headers to add to the outgoing message heading to the server.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> onto which the provided message is to be serialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetRequestStream method is called by the formatter sink before it serializes the message.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates an implementation of this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Remoting_Sinks#23\">    [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]\n    public Stream GetRequestStream (IMessage message, ITransportHeaders requestHeaders)\n    {\n        // Get the request stream from the next sink in the chain.\n        return( nextSink.GetRequestStream(message, requestHeaders) );\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Remoting_Sinks#23\">   virtual Stream^ GetRequestStream( IMessage^ message, ITransportHeaders^ requestHeaders )\n   {\n      // Get the request stream from the next sink in the chain.\n      return (nextSink-&gt;GetRequestStream( message, requestHeaders ));\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IClientChannelSink_ProcessMessage_System_Runtime_Remoting_Messaging_IMessage_System_Runtime_Remoting_Channels_ITransportHeaders_System_IO_Stream_System_Runtime_Remoting_Channels_ITransportHeaders__System_IO_Stream__\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IClientChannelSink_ProcessMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessMessage(IMessage,ITransportHeaders,Stream,ITransportHeaders,Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Requests message processing from the current sink.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestHeaders</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The headers to add to the outgoing message heading to the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream headed to the transport sink.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>responseHeaders</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains a <a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a> interface that holds the headers that the server returned. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>responseStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> coming back from the transport sink. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates an implementation of this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Remoting_Sinks#24\">    [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]\n    public void ProcessMessage (IMessage message,\n                                ITransportHeaders requestHeaders,\n                                Stream requestStream,\n                                out ITransportHeaders responseHeaders,\n                                out Stream responseStream)\n    {\n        // Print the request message properties.\n        Console.WriteLine(&quot;---- Message from the client ----&quot;);\n        IDictionary dictionary = message.Properties;\n        foreach (Object key in dictionary.Keys)\n        {\n            Console.WriteLine(&quot;{0} = {1}&quot;, key, dictionary[key]);\n        }\n        Console.WriteLine(&quot;---------------------------------&quot;);\n\n        // Hand off to the next sink in the chain.\n        nextSink.ProcessMessage(message, requestHeaders, requestStream, out responseHeaders, out responseStream);\n    } \n</code></pre><pre><code class=\"lang-cpp\" name=\"Remoting_Sinks#24\">   virtual void ProcessMessage( IMessage^ message, ITransportHeaders^ requestHeaders, Stream^ requestStream, [Out]ITransportHeaders^% responseHeaders, [Out]Stream^% responseStream )\n   {\n      // Print the request message properties.\n      Console::WriteLine( &quot;---- Message from the client ----&quot; );\n      IDictionary^ dictionary = message-&gt;Properties;\n      IEnumerator^ myEnum = dictionary-&gt;Keys-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Object^ key = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( &quot;{0} = {1}&quot;, key, dictionary[ key ] );\n      }\n\n      Console::WriteLine( &quot;---------------------------------&quot; );\n\n      // Hand off to the next sink in the chain.\n      nextSink-&gt;ProcessMessage( message, requestHeaders, requestStream, responseHeaders, responseStream );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Channels.IClientChannelSink.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Channels.IClientChannelSink.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IClientChannelSink\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IClientChannelSink.NextChannelSink\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ae781e27-a920-653b-9128-964647650496\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides required functions and properties for client channel sinks.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Remoting.Channels/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Channels.IClientChannelSink\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Channels.IClientChannelSink.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Channels.IClientChannelSink.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Remoting.Channels.IClientChannelSink","System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest","System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse","System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream","System.Runtime.Remoting.Channels.IClientChannelSink.NextChannelSink","System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Channels.IClientChannelSink","System::Runtime::Remoting::Channels::IClientChannelSink","System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest","System::Runtime::Remoting::Channels::IClientChannelSink::AsyncProcessRequest","System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse","System::Runtime::Remoting::Channels::IClientChannelSink::AsyncProcessResponse","System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream","System::Runtime::Remoting::Channels::IClientChannelSink::GetRequestStream","System.Runtime.Remoting.Channels.IClientChannelSink.NextChannelSink","System::Runtime::Remoting::Channels::IClientChannelSink::NextChannelSink","System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage","System::Runtime::Remoting::Channels::IClientChannelSink::ProcessMessage"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ae781e27-a920-653b-9128-964647650496","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Remoting.Channels/IClientChannelSink.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IClientChannelSink interface | Microsoft Docs","_op_ogTitle":"IClientChannelSink interface","description":"Provides required functions and properties for client channel sinks.\n","toc_asset_id":"_splitted/System.Runtime.Remoting.Channels/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Channels/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Channels.IClientChannelSink","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.channels.iclientchannelsink","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.channels.iclientchannelsink","fileRelativePath":"System.Runtime.Remoting.Channels.IClientChannelSink.html"},"themesRelativePathToOutputRoot":"_themes/"}