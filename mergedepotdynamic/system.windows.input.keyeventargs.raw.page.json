{"content":"    \r\n    <h1 id=\"System_Windows_Input_KeyEventArgs\">\r\n      <span class=\"lang-csharp\">KeyEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> routed events, as well as related attached and Preview events.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.input.inputeventargs\" data-linktype=\"relative-path\">InputEventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l4\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.input.keyboardeventargs\" data-linktype=\"relative-path\">System.Windows.Input.KeyboardEventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l5\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">KeyEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.input.inputeventargs#System_Windows_Input_InputEventArgs_Device\" data-linktype=\"relative-path\">Device</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.input.inputeventargs#System_Windows_Input_InputEventArgs_Timestamp\" data-linktype=\"relative-path\">Timestamp</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.input.keyboardeventargs#System_Windows_Input_KeyboardEventArgs_KeyboardDevice\" data-linktype=\"relative-path\">KeyboardDevice</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Handled\" data-linktype=\"relative-path\">Handled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_OnSetSource_System_Object_\" data-linktype=\"relative-path\">OnSetSource(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_OriginalSource\" data-linktype=\"relative-path\">OriginalSource</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_RoutedEvent\" data-linktype=\"relative-path\">RoutedEvent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source\" data-linktype=\"relative-path\">Source</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This event data class is used with the following attached events:  </p>\n<ul>\n<li>&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;  \n</li>\n<li>&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;  \n</li>\n<li>&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;  \n</li>\n<li>&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;  \n\n<p>This event data class is also used with the following routed events on base elements. These routed events forward the previously listed attached events to make them more accessible to the general element model in WPF.  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyUp\" data-linktype=\"relative-path\">System.Windows.UIElement.KeyUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyDown\" data-linktype=\"relative-path\">System.Windows.UIElement.KeyDown</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyUp\" data-linktype=\"relative-path\">System.Windows.UIElement.PreviewKeyUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyDown\" data-linktype=\"relative-path\">System.Windows.UIElement.PreviewKeyDown</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyUp\" data-linktype=\"relative-path\">System.Windows.ContentElement.KeyUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_KeyDown\" data-linktype=\"relative-path\">System.Windows.ContentElement.KeyDown</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewKeyUp\" data-linktype=\"relative-path\">System.Windows.ContentElement.PreviewKeyUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.contentelement#System_Windows_ContentElement_PreviewKeyDown\" data-linktype=\"relative-path\">System.Windows.ContentElement.PreviewKeyDown</a>  \n\n<p>The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data. This can affect the handled characteristics of the event as it travels the event route. For details, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p>A key can be in both the up and toggled states or the down and toggled states. For this reason, determining whether a key is up or down is not as simple as checking the <a class=\"xref\" href=\"system.windows.input.keyeventargs#System_Windows_Input_KeyEventArgs_KeyStates_\" data-linktype=\"relative-path\">KeyStates</a> value as a numeric value. Instead, you should check the value by treating it as a flag enumeration. Use an <code>AND</code> comparison of the first bit. Alternatively, use the helper properties <a class=\"xref\" href=\"system.windows.input.keyeventargs#System_Windows_Input_KeyEventArgs_IsUp_\" data-linktype=\"relative-path\">IsUp</a>, <a class=\"xref\" href=\"system.windows.input.keyeventargs#System_Windows_Input_KeyEventArgs_IsDown_\" data-linktype=\"relative-path\">IsDown</a>, and <a class=\"xref\" href=\"system.windows.input.keyeventargs#System_Windows_Input_KeyEventArgs_IsToggled_\" data-linktype=\"relative-path\">IsToggled</a> to determine whether a given key is up, down, or toggled.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs__ctor_System_Windows_Input_KeyboardDevice_System_Windows_PresentationSource_System_Int32_System_Windows_Input_Key_\" data-linktype=\"self-bookmark\">KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_DeadCharProcessedKey\" data-linktype=\"self-bookmark\">DeadCharProcessedKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the key that is part of dead key composition to create a single combined character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_ImeProcessedKey\" data-linktype=\"self-bookmark\">ImeProcessedKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keyboard key referenced by the event, if the key will be processed by an Input Method Editor (IME).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_InputSource\" data-linktype=\"self-bookmark\">InputSource</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the input source that provided this input.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_IsDown\" data-linktype=\"self-bookmark\">IsDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the key referenced by the event is in the down state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_IsRepeat\" data-linktype=\"self-bookmark\">IsRepeat</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_IsToggled\" data-linktype=\"self-bookmark\">IsToggled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the key referenced by the event is in the toggled state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_IsUp\" data-linktype=\"self-bookmark\">IsUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the key referenced by the event is in the up state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_Key\" data-linktype=\"self-bookmark\">Key</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keyboard key associated with the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_KeyStates\" data-linktype=\"self-bookmark\">KeyStates</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the state of the keyboard key associated with this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_SystemKey\" data-linktype=\"self-bookmark\">SystemKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keyboard key referenced by the event, if the key will be processed by the system.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Input_KeyEventArgs_InvokeEventHandler_System_Delegate_System_Object_\" data-linktype=\"self-bookmark\">InvokeEventHandler(Delegate,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes event handlers in a type-specific way, which can increase event system efficiency.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs__ctor_System_Windows_Input_KeyboardDevice_System_Windows_PresentationSource_System_Int32_System_Windows_Input_Key_\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyboard</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboarddevice\" data-linktype=\"relative-path\">KeyboardDevice</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The logical keyboard device associated with this event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputSource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.presentationsource\" data-linktype=\"relative-path\">PresentationSource</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timestamp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time when the input occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key referenced by the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_DeadCharProcessedKey\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_DeadCharProcessedKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeadCharProcessedKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets the key that is part of dead key composition to create a single combined character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.Key DeadCharProcessedKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a></div>\r\n                  </div>\r\n                  <p>The key that is part of dead key composition to create a single combined character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.  If <a class=\"xref\" href=\"system.windows.input.keyeventargs#System_Windows_Input_KeyEventArgs_Key_\" data-linktype=\"relative-path\">Key</a> returns <a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">System.Windows.Input.Key</a>, you can use this property to get the actual key that was entered.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_ImeProcessedKey\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_ImeProcessedKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImeProcessedKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keyboard key referenced by the event, if the key will be processed by an Input Method Editor (IME).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.Key ImeProcessedKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a> referenced by the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_InputSource\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_InputSource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputSource</div>        \r\n          </div>\r\n    \r\n            <p>Gets the input source that provided this input.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.PresentationSource InputSource { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.presentationsource\" data-linktype=\"relative-path\">PresentationSource</a></div>\r\n                  </div>\r\n                  <p>The input source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_IsDown\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_IsDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDown</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the key referenced by the event is in the down state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsDown { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is down; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.input.keyboard\" data-linktype=\"relative-path\">Keyboard</a> class also provides information about the state of the keys on the keyboard. For instance, the <a class=\"xref\" href=\"system.windows.input.keyboard#System_Windows_Input_Keyboard_IsKeyDown_\" data-linktype=\"relative-path\">IsKeyDown</a> method returns whether a specified key is down.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether the key associated with an instance of <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> is down by obtaining the state of the IsDown property.  </p>\n<pre><code class=\"lang-cs\" name=\"keyargssnippetsample#KeyEventArgsIsDown\">// e is an instance of KeyEventArgs.\n// btnIsDown is a Button.\nif (e.IsDown)\n{\n    btnIsDown.Background = Brushes.Red;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"keyargssnippetsample#KeyEventArgsIsDown\">&#39; e is an instance of KeyEventArgs.\n&#39; btnIsDown is a Button.\nIf e.IsDown Then\n\tbtnIsDown.Background = Brushes.Red\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_IsRepeat\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_IsRepeat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsRepeat</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsRepeat { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is repeated; otherwise, <code>false</code>.  There is no default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether the key associated with an instance of <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> is a repeated key by obtaining the state of the IsRepeat property.  </p>\n<pre><code class=\"lang-cs\" name=\"keyargssnippetsample#KeyEventArgsIsRepeat\">// e is an instance of KeyEventArgs.\n// btnIsRepeat is a Button.\nif (e.IsRepeat)\n{\n    btnIsRepeat.Background = Brushes.AliceBlue;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"keyargssnippetsample#KeyEventArgsIsRepeat\">&#39; e is an instance of KeyEventArgs.\n&#39; btnIsRepeat is a Button.\nIf e.IsRepeat Then\n\tbtnIsRepeat.Background = Brushes.AliceBlue\nEnd If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_IsToggled\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_IsToggled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsToggled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the key referenced by the event is in the toggled state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsToggled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is toggled; otherwise, <code>false</code>.  There is no default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.input.keyboard\" data-linktype=\"relative-path\">Keyboard</a> class also provides information about the state of the keys on the keyboard. For instance, the <a class=\"xref\" href=\"system.windows.input.keyboard#System_Windows_Input_Keyboard_IsKeyToggled_\" data-linktype=\"relative-path\">IsKeyToggled</a> method returns whether a specified key is toggled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether the key associated with an instance of <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> is toggled by obtaining the state of the IsToggled property.  </p>\n<pre><code class=\"lang-cs\" name=\"keyargssnippetsample#KeyEventArgsIsToggled\">// e is a instance of KeyEventArgs.\n// btnIsToggled is a Button.\nif (e.IsToggled)\n{\n    btnIsToggle.Background = Brushes.Red;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"keyargssnippetsample#KeyEventArgsIsToggled\">&#39; e is a instance of KeyEventArgs.\n&#39; btnIsToggled is a Button.\nIf e.IsToggled Then\n\tbtnIsToggle.Background = Brushes.Red\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_IsUp\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_IsUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUp</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the key referenced by the event is in the up state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsUp { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is up; otherwise, <code>false</code>.  There is no default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.input.keyboard\" data-linktype=\"relative-path\">Keyboard</a> class also provides information about the state of the keys on the keyboard.  For instance, the <a class=\"xref\" href=\"system.windows.input.keyboard#System_Windows_Input_Keyboard_IsKeyUp_\" data-linktype=\"relative-path\">IsKeyUp</a> method returns whether a specified is up.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether the key associated with an instance of <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> is up by obtaining the state of the IsUp property.  </p>\n<pre><code class=\"lang-cs\" name=\"keyargssnippetsample#KeyEventArgsIsUp\">// e is an instance of KeyEventArgs.\n// btnIsUp is a Button.\nif (e.IsUp)\n{\n    btnIsUp.Background = Brushes.Red;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"keyargssnippetsample#KeyEventArgsIsUp\">&#39; e is an instance of KeyEventArgs.\n&#39; btnIsUp is a Button.\nIf e.IsUp Then\n\tbtnIsUp.Background = Brushes.Red\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_Key\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_Key_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Key</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keyboard key associated with the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.Key Key { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a> referenced by the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a> and checks whether the key associated with the <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> is the <a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a> key.  </p>\n<pre><code class=\"lang-cs\" name=\"keydown#KeyDownSample\">private void OnKeyDownHandler(object sender, KeyEventArgs e)\n{\n    if (e.Key == Key.Return)\n    {\n        textBlock1.Text = &quot;You Entered: &quot; + textBox1.Text;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"keydown#KeyDownSample\">Private Sub OnKeyDownHandler(ByVal sender As Object, ByVal e As KeyEventArgs)\n    If (e.Key = Key.Return) Then\n        textBlock1.Text = &quot;You Entered: &quot; + textBox1.Text\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_KeyStates\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_KeyStates_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyStates</div>        \r\n          </div>\r\n    \r\n            <p>Gets the state of the keyboard key associated with this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.KeyStates KeyStates { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keystates\" data-linktype=\"relative-path\">KeyStates</a></div>\r\n                  </div>\r\n                  <p>The state of the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A key can be in both the up and toggled states or the down and toggled states. For this reason, determining whether a key is up or down is not as simple as checking the KeyStates value as a numeric value. Instead, you should check the value by treating it as a flag enumeration. Use an <code>AND</code> comparison of the first bit. Alternatively, use the helper properties <a class=\"xref\" href=\"system.windows.input.keyeventargs#System_Windows_Input_KeyEventArgs_IsUp_\" data-linktype=\"relative-path\">IsUp</a>, <a class=\"xref\" href=\"system.windows.input.keyeventargs#System_Windows_Input_KeyEventArgs_IsDown_\" data-linktype=\"relative-path\">IsDown</a>, and <a class=\"xref\" href=\"system.windows.input.keyeventargs#System_Windows_Input_KeyEventArgs_IsToggled_\" data-linktype=\"relative-path\">IsToggled</a> to determine whether a given key is up, down, or toggled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether a key associated with an instance of <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> is down by performing a bitwise <code>AND</code> comparison on the KeyStates of the key and the <a class=\"xref\" href=\"system.windows.input.keystates\" data-linktype=\"relative-path\">KeyStates</a> enumeration value.  </p>\n<pre><code class=\"lang-cs\" name=\"keyargssnippetsample#KeyEventArgsKeyStatesDown\">// A bitwise AND operation is used in the comparison.\n// e is an instance of KeyEventArgs.\n// btnDown is a Button.\nif ((e.KeyStates &amp; KeyStates.Down) &gt; 0)\n{\n    btnDown.Background = Brushes.Red;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"keyargssnippetsample#KeyEventArgsKeyStatesDown\">&#39; A bitwise AND operation is used in the comparison.\n&#39; e is an instance of KeyEventArgs.\n&#39; btnDown is a Button.\nIf (e.KeyStates And KeyStates.Down) &gt; 0 Then\n\tbtnDown.Background = Brushes.Red\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_SystemKey\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_SystemKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SystemKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keyboard key referenced by the event, if the key will be processed by the system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.Key SystemKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a> referenced by the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Input_KeyEventArgs_InvokeEventHandler_System_Delegate_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Input_KeyEventArgs_InvokeEventHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeEventHandler(Delegate,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes event handlers in a type-specific way, which can increase event system efficiency.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The generic handler to call in a type-specific way.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTarget</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The target to call the handler on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation casts the generic handler as a <a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a> and then invokes it. For details on this implementation pattern and the reasons for it, see <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_InvokeEventHandler_\" data-linktype=\"relative-path\">InvokeEventHandler</a> and <a href=\"../Topic/Routed%20Events%20Overview.md\" data-linktype=\"relative-path\">Routed Events Overview</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Input.KeyEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Input.KeyEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.DeadCharProcessedKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.ImeProcessedKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.InputSource\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.InvokeEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.IsDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.IsRepeat\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.IsToggled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.IsUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.Key\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.KeyStates\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.KeyEventArgs.SystemKey\">\r\n<meta name=\"APILocation\" content=\"PresentationCore.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"aa2a469d-12dc-0cd3-e1e4-b0bce74e6102\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  and  routed events, as well as related attached and Preview events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Input/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Input.KeyEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Input.KeyEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Input.KeyEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Input.KeyEventArgs","System.Windows.Input.KeyEventArgs..ctor","System.Windows.Input.KeyEventArgs.DeadCharProcessedKey","System.Windows.Input.KeyEventArgs.ImeProcessedKey","System.Windows.Input.KeyEventArgs.InputSource","System.Windows.Input.KeyEventArgs.InvokeEventHandler","System.Windows.Input.KeyEventArgs.IsDown","System.Windows.Input.KeyEventArgs.IsRepeat","System.Windows.Input.KeyEventArgs.IsToggled","System.Windows.Input.KeyEventArgs.IsUp","System.Windows.Input.KeyEventArgs.Key","System.Windows.Input.KeyEventArgs.KeyStates","System.Windows.Input.KeyEventArgs.SystemKey"],"api_location":["PresentationCore.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Input.KeyEventArgs","System::Windows::Input::KeyEventArgs","System.Windows.Input.KeyEventArgs.#ctor","System::Windows::Input::KeyEventArgs::#ctor","System.Windows.Input.KeyEventArgs.DeadCharProcessedKey","System::Windows::Input::KeyEventArgs::DeadCharProcessedKey","System.Windows.Input.KeyEventArgs.ImeProcessedKey","System::Windows::Input::KeyEventArgs::ImeProcessedKey","System.Windows.Input.KeyEventArgs.InputSource","System::Windows::Input::KeyEventArgs::InputSource","System.Windows.Input.KeyEventArgs.InvokeEventHandler","System::Windows::Input::KeyEventArgs::InvokeEventHandler","System.Windows.Input.KeyEventArgs.IsDown","System::Windows::Input::KeyEventArgs::IsDown","System.Windows.Input.KeyEventArgs.IsRepeat","System::Windows::Input::KeyEventArgs::IsRepeat","System.Windows.Input.KeyEventArgs.IsToggled","System::Windows::Input::KeyEventArgs::IsToggled","System.Windows.Input.KeyEventArgs.IsUp","System::Windows::Input::KeyEventArgs::IsUp","System.Windows.Input.KeyEventArgs.Key","System::Windows::Input::KeyEventArgs::Key","System.Windows.Input.KeyEventArgs.KeyStates","System::Windows::Input::KeyEventArgs::KeyStates","System.Windows.Input.KeyEventArgs.SystemKey","System::Windows::Input::KeyEventArgs::SystemKey"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"aa2a469d-12dc-0cd3-e1e4-b0bce74e6102","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Input/KeyEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"KeyEventArgs class | Microsoft Docs","_op_ogTitle":"KeyEventArgs class","description":"Provides data for the  and  routed events, as well as related attached and Preview events.\n","toc_asset_id":"_splitted/System.Windows.Input/toc.json","toc_rel":"_splitted/System.Windows.Input/toc.json","source_url":"","ms.assetid":"System.Windows.Input.KeyEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.input.keyeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.input.keyeventargs","fileRelativePath":"System.Windows.Input.KeyEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}