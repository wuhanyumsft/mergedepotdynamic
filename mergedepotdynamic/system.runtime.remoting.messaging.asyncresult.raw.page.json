{"content":"    \r\n    <h1 id=\"System_Runtime_Remoting_Messaging_AsyncResult\">\r\n      <span class=\"lang-csharp\">AsyncResult</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Encapsulates the results of an asynchronous operation on a delegate.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AsyncResult</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The AsyncResult class is used in conjunction with asynchronous method calls made using delegates. The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned from the delegate&#39;s <code>BeginInvoke</code> method can be cast to an AsyncResult. The AsyncResult has the <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult#System_Runtime_Remoting_Messaging_AsyncResult_AsyncDelegate_\" data-linktype=\"relative-path\">AsyncDelegate</a> property that holds the delegate object on which the asynchronous call was invoked.  </p>\n<p> For more information about <code>BeginInvoke</code> and asynchronous calls using delegates, see <a href=\"../Topic/Asynchronous%20Programming%20Using%20Delegates.md\" data-linktype=\"relative-path\">Asynchronous Programming Using Delegates</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_AsyncDelegate\" data-linktype=\"self-bookmark\">AsyncDelegate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the delegate object on which the asynchronous call was invoked.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_AsyncState\" data-linktype=\"self-bookmark\">AsyncState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the object provided as the last parameter of a <code>BeginInvoke</code> method call.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_AsyncWaitHandle\" data-linktype=\"self-bookmark\">AsyncWaitHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_CompletedSynchronously\" data-linktype=\"self-bookmark\">CompletedSynchronously</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <code>BeginInvoke</code> call completed synchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_EndInvokeCalled\" data-linktype=\"self-bookmark\">EndInvokeCalled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether <code>EndInvoke</code> has been called on the current <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_IsCompleted\" data-linktype=\"self-bookmark\">IsCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the server has completed the call.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_NextSink\" data-linktype=\"self-bookmark\">NextSink</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the next message sink in the sink chain.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_AsyncProcessMessage_System_Runtime_Remoting_Messaging_IMessage_System_Runtime_Remoting_Messaging_IMessageSink_\" data-linktype=\"self-bookmark\">AsyncProcessMessage(IMessage,IMessageSink)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_GetReplyMessage\" data-linktype=\"self-bookmark\">GetReplyMessage()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the response message for the asynchronous call.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_SetMessageCtrl_System_Runtime_Remoting_Messaging_IMessageCtrl_\" data-linktype=\"self-bookmark\">SetMessageCtrl(IMessageCtrl)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets an <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagectrl\" data-linktype=\"relative-path\">IMessageCtrl</a> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_AsyncResult_SyncProcessMessage_System_Runtime_Remoting_Messaging_IMessage_\" data-linktype=\"self-bookmark\">SyncProcessMessage(IMessage)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Synchronously processes a response message returned by a method call on a remote object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_AsyncDelegate\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_AsyncDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncDelegate</div>        \r\n          </div>\r\n    \r\n            <p>Gets the delegate object on which the asynchronous call was invoked.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object AsyncDelegate { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The delegate object on which the asynchronous call was invoked.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AsyncDelegate property can be cast to the actual class of the user-defined delegate.  </p>\n<p> For example, if the delegate that was used to make the asynchronous call is of type <code>MyDelegate</code>, the delegate that is returned by this property must be cast to <code>MyDelegate</code>. The callback method can then call the delegate&#39;s <code>EndInvoke</code> method with the correct signature, in order to obtain the results of the asynchronous method call.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AsyncDelegate property to get the delegate that was used to make the asynchronous call, in order to call <code>EndInvoke</code>. The example casts the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a>, which is the only parameter of the callback method, to an <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a> object.  </p>\n<p> The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <code>Main</code> method that makes the call.  </p>\n<p> For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"AsyncDelegateExamples#1\">Imports System\nImports System.Threading\nImports System.Runtime.InteropServices \n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n    Public Class AsyncDemo \n        &#39; The method to be executed asynchronously.\n        Public Function TestMethod(ByVal callDuration As Integer, _\n                &lt;Out&gt; ByRef threadId As Integer) As String\n            Console.WriteLine(&quot;Test method begins.&quot;)\n            Thread.Sleep(callDuration)\n            threadId = Thread.CurrentThread.ManagedThreadId()\n            return String.Format(&quot;My call time was {0}.&quot;, callDuration.ToString())\n        End Function\n    End Class\n\n    &#39; The delegate must have the same signature as the method\n    &#39; it will call asynchronously.\n    Public Delegate Function AsyncMethodCaller(ByVal callDuration As Integer, _\n        &lt;Out&gt; ByRef threadId As Integer) As String\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncDelegateExamples#1\">using System;\nusing System.Threading; \n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class AsyncDemo \n    {\n        // The method to be executed asynchronously.\n        public string TestMethod(int callDuration, out int threadId) \n        {\n            Console.WriteLine(&quot;Test method begins.&quot;);\n            Thread.Sleep(callDuration);\n            threadId = Thread.CurrentThread.ManagedThreadId;\n            return String.Format(&quot;My call time was {0}.&quot;, callDuration.ToString());\n        }\n    }\n    // The delegate must have the same signature as the method\n    // it will call asynchronously.\n    public delegate string AsyncMethodCaller(int callDuration, out int threadId);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AsyncDelegateExamples#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Runtime::InteropServices; \n\nnamespace Examples {\nnamespace AdvancedProgramming {\nnamespace AsynchronousOperations\n{\n    public ref class AsyncDemo \n    {\n    public:\n        // The method to be executed asynchronously.\n        String^ TestMethod(int callDuration, [OutAttribute] int% threadId) \n        {\n            Console::WriteLine(&quot;Test method begins.&quot;);\n            Thread::Sleep(callDuration);\n            threadId = Thread::CurrentThread-&gt;ManagedThreadId;\n            return String::Format(&quot;My call time was {0}.&quot;, callDuration);\n        }\n    };\n\n    // The delegate must have the same signature as the method\n    // it will call asynchronously.\n    public delegate String^ AsyncMethodCaller(int callDuration, [OutAttribute] int% threadId);\n}}}\n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncDelegateExamples#5\">using System;\nusing System.Threading;\nusing System.Runtime.Remoting.Messaging;\n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class AsyncMain \n    {\n        static void Main() \n        {\n            // Create an instance of the test class.\n            AsyncDemo ad = new AsyncDemo();\n\n            // Create the delegate.\n            AsyncMethodCaller caller = new AsyncMethodCaller(ad.TestMethod);\n       \n            // The threadId parameter of TestMethod is an out parameter, so\n            // its input value is never used by TestMethod. Therefore, a dummy\n            // variable can be passed to the BeginInvoke call. If the threadId\n            // parameter were a ref parameter, it would have to be a class-\n            // level field so that it could be passed to both BeginInvoke and \n            // EndInvoke.\n            int dummy = 0;\n\n            // Initiate the asynchronous call, passing three seconds (3000 ms)\n            // for the callDuration parameter of TestMethod; a dummy variable \n            // for the out parameter (threadId); the callback delegate; and\n            // state information that can be retrieved by the callback method.\n            // In this case, the state information is a string that can be used\n            // to format a console message.\n            IAsyncResult result = caller.BeginInvoke(3000,\n                out dummy, \n                new AsyncCallback(CallbackMethod),\n                &quot;The call executed on thread {0}, with return value \\&quot;{1}\\&quot;.&quot;);\n\n            Console.WriteLine(&quot;The main thread {0} continues to execute...&quot;, \n                Thread.CurrentThread.ManagedThreadId);\n\n            // The callback is made on a ThreadPool thread. ThreadPool threads\n            // are background threads, which do not keep the application running\n            // if the main thread ends. Comment out the next line to demonstrate\n            // this.\n            Thread.Sleep(4000);\n\n            Console.WriteLine(&quot;The main thread ends.&quot;);\n        }\n        \n        // The callback method must have the same signature as the\n        // AsyncCallback delegate.\n        static void CallbackMethod(IAsyncResult ar) \n        {\n            // Retrieve the delegate.\n            AsyncResult result = (AsyncResult) ar;\n            AsyncMethodCaller caller = (AsyncMethodCaller) result.AsyncDelegate;\n\n            // Retrieve the format string that was passed as state \n            // information.\n            string formatString = (string) ar.AsyncState;\n\n            // Define a variable to receive the value of the out parameter.\n            // If the parameter were ref rather than out then it would have to\n            // be a class-level field so it could also be passed to BeginInvoke.\n            int threadId = 0;\n\n            // Call EndInvoke to retrieve the results.\n            string returnValue = caller.EndInvoke(out threadId, ar);\n\n            // Use the format string to format the output message.\n            Console.WriteLine(formatString, threadId, returnValue);\n        }\n    }\n}\n\n/* This example produces output similar to the following:\n\nThe main thread 1 continues to execute...\nTest method begins.\nThe call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\nThe main thread ends.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"AsyncDelegateExamples#5\">#using &lt;TestMethod.dll&gt;\n\nusing namespace System;\nusing namespace System::Threading;\nusing namespace System::Runtime::Remoting::Messaging;\nusing namespace Examples::AdvancedProgramming::AsynchronousOperations;\n\n// The callback method must have the same signature as the\n// AsyncCallback delegate.\nvoid CallbackMethod(IAsyncResult^ ar) \n{\n    // Retrieve the delegate.\n    AsyncResult^ result = (AsyncResult^) ar;\n    AsyncMethodCaller^ caller = (AsyncMethodCaller^) result-&gt;AsyncDelegate;\n\n    // Retrieve the format string that was passed as state \n    // information.\n    String^ formatString = (String^) ar-&gt;AsyncState;\n\n    // Define a variable to receive the value of the out parameter.\n    // If the parameter were ref rather than out then it would have to\n    // be a class-level field so it could also be passed to BeginInvoke.\n    int threadId = 0;\n\n    // Call EndInvoke to retrieve the results.\n    String^ returnValue = caller-&gt;EndInvoke(threadId, ar);\n\n    // Use the format string to format the output message.\n    Console::WriteLine(formatString, threadId, returnValue);\n};\n\nvoid main() \n{\n    // Create an instance of the test class.\n    AsyncDemo^ ad = gcnew AsyncDemo();\n\n    // Create the delegate.\n    AsyncMethodCaller^ caller = gcnew AsyncMethodCaller(ad, &amp;AsyncDemo::TestMethod);\n       \n    // The threadId parameter of TestMethod is an out parameter, so\n    // its input value is never used by TestMethod. Therefore, a dummy\n    // variable can be passed to the BeginInvoke call. If the threadId\n    // parameter were a ref parameter, it would have to be a class-\n    // level field so that it could be passed to both BeginInvoke and \n    // EndInvoke.\n    int dummy = 0;\n\n    // Initiate the asynchronous call, passing three seconds (3000 ms)\n    // for the callDuration parameter of TestMethod; a dummy variable \n    // for the out parameter (threadId); the callback delegate; and\n    // state information that can be retrieved by the callback method.\n    // In this case, the state information is a string that can be used\n    // to format a console message.\n    IAsyncResult^ result = caller-&gt;BeginInvoke(3000,\n        dummy, \n        gcnew AsyncCallback(&amp;CallbackMethod),\n        &quot;The call executed on thread {0}, with return value \\&quot;{1}\\&quot;.&quot;);\n\n    Console::WriteLine(&quot;The main thread {0} continues to execute...&quot;, \n        Thread::CurrentThread-&gt;ManagedThreadId);\n\n    // The callback is made on a ThreadPool thread. ThreadPool threads\n    // are background threads, which do not keep the application running\n    // if the main thread ends. Comment out the next line to demonstrate\n    // this.\n    Thread::Sleep(4000);\n    Console::WriteLine(&quot;The main thread ends.&quot;);\n}\n\n/* This example produces output similar to the following:\n\nThe main thread 1 continues to execute...\nTest method begins.\nThe call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\nThe main thread ends.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"AsyncDelegateExamples#5\">Imports System\nImports System.Threading\nImports System.Runtime.Remoting.Messaging\n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n\n    Public Class AsyncMain \n        \n        Shared Sub Main() \n\n            &#39; Create an instance of the test class.\n            Dim ad As New AsyncDemo()\n\n            &#39; Create the delegate.\n            Dim caller As New AsyncMethodCaller(AddressOf ad.TestMethod)\n\n            &#39; The threadId parameter of TestMethod is an &lt;Out&gt; parameter, so\n            &#39; its input value is never used by TestMethod. Therefore, a dummy\n            &#39; variable can be passed to the BeginInvoke call. If the threadId\n            &#39; parameter were a ByRef parameter, it would have to be a class-\n            &#39; level field so that it could be passed to both BeginInvoke and \n            &#39; EndInvoke.\n            Dim dummy As Integer = 0\n\n            &#39; Initiate the asynchronous call, passing three seconds (3000 ms)\n            &#39; for the callDuration parameter of TestMethod; a dummy variable \n            &#39; for the &lt;Out&gt; parameter (threadId); the callback delegate; and\n            &#39; state information that can be retrieved by the callback method.\n            &#39; In this case, the state information is a string that can be used\n            &#39; to format a console message.\n            Dim result As IAsyncResult = caller.BeginInvoke(3000, _\n                dummy, _\n                AddressOf CallbackMethod, _\n                &quot;The call executed on thread {0}, with return value &quot;&quot;{1}&quot;&quot;.&quot;)\n\n            Console.WriteLine(&quot;The main thread {0} continues to execute...&quot;, _\n                Thread.CurrentThread.ManagedThreadId)\n\n            &#39; The callback is made on a ThreadPool thread. ThreadPool threads\n            &#39; are background threads, which do not keep the application running\n            &#39; if the main thread ends. Comment out the next line to demonstrate\n            &#39; this.\n            Thread.Sleep(4000)\n\n            Console.WriteLine(&quot;The main thread ends.&quot;)\n        End Sub\n\n        &#39; The callback method must have the same signature as the\n        &#39; AsyncCallback delegate.\n        Shared Sub CallbackMethod(ByVal ar As IAsyncResult)\n            &#39; Retrieve the delegate.\n            Dim result As AsyncResult = CType(ar, AsyncResult)\n            Dim caller As AsyncMethodCaller = CType(result.AsyncDelegate, AsyncMethodCaller)\n\n            &#39; Retrieve the format string that was passed as state \n            &#39; information.\n            Dim formatString As String = CType(ar.AsyncState, String)\n\n            &#39; Define a variable to receive the value of the &lt;Out&gt; parameter.\n            &#39; If the parameter were ByRef rather than &lt;Out&gt; then it would have to\n            &#39; be a class-level field so it could also be passed to BeginInvoke.\n            Dim threadId As Integer = 0\n\n            &#39; Call EndInvoke to retrieve the results.\n            Dim returnValue As String = caller.EndInvoke(threadId, ar)\n\n            &#39; Use the format string to format the output message.\n            Console.WriteLine(formatString, threadId, returnValue)\n        End Sub\n    End Class\nEnd Namespace\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;The main thread 1 continues to execute...\n&#39;Test method begins.\n&#39;The call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\n&#39;The main thread ends.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_AsyncState\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_AsyncState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the object provided as the last parameter of a <code>BeginInvoke</code> method call.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object AsyncState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object provided as the last parameter of a <code>BeginInvoke</code> method call.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about the <code>BeginInvoke</code> method, see <a href=\"../Topic/Asynchronous%20Programming%20Using%20Delegates.md\" data-linktype=\"relative-path\">Asynchronous Programming Using Delegates</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how the AsyncState property is used to pass information to a callback method. The last parameter of the <code>BeginInvoke</code> method call is a format string, which the callback method uses to format an output message.  </p>\n<p> The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <code>Main</code> method that makes the call.  </p>\n<p> For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"AsyncDelegateExamples#1\">Imports System\nImports System.Threading\nImports System.Runtime.InteropServices \n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n    Public Class AsyncDemo \n        &#39; The method to be executed asynchronously.\n        Public Function TestMethod(ByVal callDuration As Integer, _\n                &lt;Out&gt; ByRef threadId As Integer) As String\n            Console.WriteLine(&quot;Test method begins.&quot;)\n            Thread.Sleep(callDuration)\n            threadId = Thread.CurrentThread.ManagedThreadId()\n            return String.Format(&quot;My call time was {0}.&quot;, callDuration.ToString())\n        End Function\n    End Class\n\n    &#39; The delegate must have the same signature as the method\n    &#39; it will call asynchronously.\n    Public Delegate Function AsyncMethodCaller(ByVal callDuration As Integer, _\n        &lt;Out&gt; ByRef threadId As Integer) As String\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncDelegateExamples#1\">using System;\nusing System.Threading; \n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class AsyncDemo \n    {\n        // The method to be executed asynchronously.\n        public string TestMethod(int callDuration, out int threadId) \n        {\n            Console.WriteLine(&quot;Test method begins.&quot;);\n            Thread.Sleep(callDuration);\n            threadId = Thread.CurrentThread.ManagedThreadId;\n            return String.Format(&quot;My call time was {0}.&quot;, callDuration.ToString());\n        }\n    }\n    // The delegate must have the same signature as the method\n    // it will call asynchronously.\n    public delegate string AsyncMethodCaller(int callDuration, out int threadId);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AsyncDelegateExamples#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Runtime::InteropServices; \n\nnamespace Examples {\nnamespace AdvancedProgramming {\nnamespace AsynchronousOperations\n{\n    public ref class AsyncDemo \n    {\n    public:\n        // The method to be executed asynchronously.\n        String^ TestMethod(int callDuration, [OutAttribute] int% threadId) \n        {\n            Console::WriteLine(&quot;Test method begins.&quot;);\n            Thread::Sleep(callDuration);\n            threadId = Thread::CurrentThread-&gt;ManagedThreadId;\n            return String::Format(&quot;My call time was {0}.&quot;, callDuration);\n        }\n    };\n\n    // The delegate must have the same signature as the method\n    // it will call asynchronously.\n    public delegate String^ AsyncMethodCaller(int callDuration, [OutAttribute] int% threadId);\n}}}\n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncDelegateExamples#5\">using System;\nusing System.Threading;\nusing System.Runtime.Remoting.Messaging;\n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class AsyncMain \n    {\n        static void Main() \n        {\n            // Create an instance of the test class.\n            AsyncDemo ad = new AsyncDemo();\n\n            // Create the delegate.\n            AsyncMethodCaller caller = new AsyncMethodCaller(ad.TestMethod);\n       \n            // The threadId parameter of TestMethod is an out parameter, so\n            // its input value is never used by TestMethod. Therefore, a dummy\n            // variable can be passed to the BeginInvoke call. If the threadId\n            // parameter were a ref parameter, it would have to be a class-\n            // level field so that it could be passed to both BeginInvoke and \n            // EndInvoke.\n            int dummy = 0;\n\n            // Initiate the asynchronous call, passing three seconds (3000 ms)\n            // for the callDuration parameter of TestMethod; a dummy variable \n            // for the out parameter (threadId); the callback delegate; and\n            // state information that can be retrieved by the callback method.\n            // In this case, the state information is a string that can be used\n            // to format a console message.\n            IAsyncResult result = caller.BeginInvoke(3000,\n                out dummy, \n                new AsyncCallback(CallbackMethod),\n                &quot;The call executed on thread {0}, with return value \\&quot;{1}\\&quot;.&quot;);\n\n            Console.WriteLine(&quot;The main thread {0} continues to execute...&quot;, \n                Thread.CurrentThread.ManagedThreadId);\n\n            // The callback is made on a ThreadPool thread. ThreadPool threads\n            // are background threads, which do not keep the application running\n            // if the main thread ends. Comment out the next line to demonstrate\n            // this.\n            Thread.Sleep(4000);\n\n            Console.WriteLine(&quot;The main thread ends.&quot;);\n        }\n        \n        // The callback method must have the same signature as the\n        // AsyncCallback delegate.\n        static void CallbackMethod(IAsyncResult ar) \n        {\n            // Retrieve the delegate.\n            AsyncResult result = (AsyncResult) ar;\n            AsyncMethodCaller caller = (AsyncMethodCaller) result.AsyncDelegate;\n\n            // Retrieve the format string that was passed as state \n            // information.\n            string formatString = (string) ar.AsyncState;\n\n            // Define a variable to receive the value of the out parameter.\n            // If the parameter were ref rather than out then it would have to\n            // be a class-level field so it could also be passed to BeginInvoke.\n            int threadId = 0;\n\n            // Call EndInvoke to retrieve the results.\n            string returnValue = caller.EndInvoke(out threadId, ar);\n\n            // Use the format string to format the output message.\n            Console.WriteLine(formatString, threadId, returnValue);\n        }\n    }\n}\n\n/* This example produces output similar to the following:\n\nThe main thread 1 continues to execute...\nTest method begins.\nThe call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\nThe main thread ends.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"AsyncDelegateExamples#5\">#using &lt;TestMethod.dll&gt;\n\nusing namespace System;\nusing namespace System::Threading;\nusing namespace System::Runtime::Remoting::Messaging;\nusing namespace Examples::AdvancedProgramming::AsynchronousOperations;\n\n// The callback method must have the same signature as the\n// AsyncCallback delegate.\nvoid CallbackMethod(IAsyncResult^ ar) \n{\n    // Retrieve the delegate.\n    AsyncResult^ result = (AsyncResult^) ar;\n    AsyncMethodCaller^ caller = (AsyncMethodCaller^) result-&gt;AsyncDelegate;\n\n    // Retrieve the format string that was passed as state \n    // information.\n    String^ formatString = (String^) ar-&gt;AsyncState;\n\n    // Define a variable to receive the value of the out parameter.\n    // If the parameter were ref rather than out then it would have to\n    // be a class-level field so it could also be passed to BeginInvoke.\n    int threadId = 0;\n\n    // Call EndInvoke to retrieve the results.\n    String^ returnValue = caller-&gt;EndInvoke(threadId, ar);\n\n    // Use the format string to format the output message.\n    Console::WriteLine(formatString, threadId, returnValue);\n};\n\nvoid main() \n{\n    // Create an instance of the test class.\n    AsyncDemo^ ad = gcnew AsyncDemo();\n\n    // Create the delegate.\n    AsyncMethodCaller^ caller = gcnew AsyncMethodCaller(ad, &amp;AsyncDemo::TestMethod);\n       \n    // The threadId parameter of TestMethod is an out parameter, so\n    // its input value is never used by TestMethod. Therefore, a dummy\n    // variable can be passed to the BeginInvoke call. If the threadId\n    // parameter were a ref parameter, it would have to be a class-\n    // level field so that it could be passed to both BeginInvoke and \n    // EndInvoke.\n    int dummy = 0;\n\n    // Initiate the asynchronous call, passing three seconds (3000 ms)\n    // for the callDuration parameter of TestMethod; a dummy variable \n    // for the out parameter (threadId); the callback delegate; and\n    // state information that can be retrieved by the callback method.\n    // In this case, the state information is a string that can be used\n    // to format a console message.\n    IAsyncResult^ result = caller-&gt;BeginInvoke(3000,\n        dummy, \n        gcnew AsyncCallback(&amp;CallbackMethod),\n        &quot;The call executed on thread {0}, with return value \\&quot;{1}\\&quot;.&quot;);\n\n    Console::WriteLine(&quot;The main thread {0} continues to execute...&quot;, \n        Thread::CurrentThread-&gt;ManagedThreadId);\n\n    // The callback is made on a ThreadPool thread. ThreadPool threads\n    // are background threads, which do not keep the application running\n    // if the main thread ends. Comment out the next line to demonstrate\n    // this.\n    Thread::Sleep(4000);\n    Console::WriteLine(&quot;The main thread ends.&quot;);\n}\n\n/* This example produces output similar to the following:\n\nThe main thread 1 continues to execute...\nTest method begins.\nThe call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\nThe main thread ends.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"AsyncDelegateExamples#5\">Imports System\nImports System.Threading\nImports System.Runtime.Remoting.Messaging\n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n\n    Public Class AsyncMain \n        \n        Shared Sub Main() \n\n            &#39; Create an instance of the test class.\n            Dim ad As New AsyncDemo()\n\n            &#39; Create the delegate.\n            Dim caller As New AsyncMethodCaller(AddressOf ad.TestMethod)\n\n            &#39; The threadId parameter of TestMethod is an &lt;Out&gt; parameter, so\n            &#39; its input value is never used by TestMethod. Therefore, a dummy\n            &#39; variable can be passed to the BeginInvoke call. If the threadId\n            &#39; parameter were a ByRef parameter, it would have to be a class-\n            &#39; level field so that it could be passed to both BeginInvoke and \n            &#39; EndInvoke.\n            Dim dummy As Integer = 0\n\n            &#39; Initiate the asynchronous call, passing three seconds (3000 ms)\n            &#39; for the callDuration parameter of TestMethod; a dummy variable \n            &#39; for the &lt;Out&gt; parameter (threadId); the callback delegate; and\n            &#39; state information that can be retrieved by the callback method.\n            &#39; In this case, the state information is a string that can be used\n            &#39; to format a console message.\n            Dim result As IAsyncResult = caller.BeginInvoke(3000, _\n                dummy, _\n                AddressOf CallbackMethod, _\n                &quot;The call executed on thread {0}, with return value &quot;&quot;{1}&quot;&quot;.&quot;)\n\n            Console.WriteLine(&quot;The main thread {0} continues to execute...&quot;, _\n                Thread.CurrentThread.ManagedThreadId)\n\n            &#39; The callback is made on a ThreadPool thread. ThreadPool threads\n            &#39; are background threads, which do not keep the application running\n            &#39; if the main thread ends. Comment out the next line to demonstrate\n            &#39; this.\n            Thread.Sleep(4000)\n\n            Console.WriteLine(&quot;The main thread ends.&quot;)\n        End Sub\n\n        &#39; The callback method must have the same signature as the\n        &#39; AsyncCallback delegate.\n        Shared Sub CallbackMethod(ByVal ar As IAsyncResult)\n            &#39; Retrieve the delegate.\n            Dim result As AsyncResult = CType(ar, AsyncResult)\n            Dim caller As AsyncMethodCaller = CType(result.AsyncDelegate, AsyncMethodCaller)\n\n            &#39; Retrieve the format string that was passed as state \n            &#39; information.\n            Dim formatString As String = CType(ar.AsyncState, String)\n\n            &#39; Define a variable to receive the value of the &lt;Out&gt; parameter.\n            &#39; If the parameter were ByRef rather than &lt;Out&gt; then it would have to\n            &#39; be a class-level field so it could also be passed to BeginInvoke.\n            Dim threadId As Integer = 0\n\n            &#39; Call EndInvoke to retrieve the results.\n            Dim returnValue As String = caller.EndInvoke(threadId, ar)\n\n            &#39; Use the format string to format the output message.\n            Console.WriteLine(formatString, threadId, returnValue)\n        End Sub\n    End Class\nEnd Namespace\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;The main thread 1 continues to execute...\n&#39;Test method begins.\n&#39;The call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\n&#39;The main thread ends.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_AsyncWaitHandle\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_AsyncWaitHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncWaitHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> returned by this method is automatically signaled when the asynchronous operation has completed.  </p>\n<p> The wait handle is not closed automatically when you call <code>EndInvoke</code> on the delegate that was used to make the asynchronous method call. If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle. To free the system resources as soon as you are finished using the wait handle, call the <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Close_\" data-linktype=\"relative-path\">Close</a> method. Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> contained in the AsyncWaitHandle property can be used to block the current thread until the asynchronous call is complete. However the <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> will ignore the <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a>, if one was specified during the <code>BeginInvoke</code> call. Therefore, a situation can occur where the application shuts down before the <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> has finished executing, even if a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> is used to block until the asynchronous call completion. For an example of such a situation, see the example for the <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a> class, and remove the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> statement.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the AsyncWaitHandle property to get a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a>, and how to wait for an asynchronous call on a delegate. The <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> is signaled when the asynchronous call completes, and you can wait for it by calling the <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a> method.  </p>\n<p> The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <code>Main</code> method that makes the call.  </p>\n<p> For more information and more examples of calling methods asynchronously by using delegates, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"AsyncDelegateExamples#1\">Imports System\nImports System.Threading\nImports System.Runtime.InteropServices \n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n    Public Class AsyncDemo \n        &#39; The method to be executed asynchronously.\n        Public Function TestMethod(ByVal callDuration As Integer, _\n                &lt;Out&gt; ByRef threadId As Integer) As String\n            Console.WriteLine(&quot;Test method begins.&quot;)\n            Thread.Sleep(callDuration)\n            threadId = Thread.CurrentThread.ManagedThreadId()\n            return String.Format(&quot;My call time was {0}.&quot;, callDuration.ToString())\n        End Function\n    End Class\n\n    &#39; The delegate must have the same signature as the method\n    &#39; it will call asynchronously.\n    Public Delegate Function AsyncMethodCaller(ByVal callDuration As Integer, _\n        &lt;Out&gt; ByRef threadId As Integer) As String\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncDelegateExamples#1\">using System;\nusing System.Threading; \n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class AsyncDemo \n    {\n        // The method to be executed asynchronously.\n        public string TestMethod(int callDuration, out int threadId) \n        {\n            Console.WriteLine(&quot;Test method begins.&quot;);\n            Thread.Sleep(callDuration);\n            threadId = Thread.CurrentThread.ManagedThreadId;\n            return String.Format(&quot;My call time was {0}.&quot;, callDuration.ToString());\n        }\n    }\n    // The delegate must have the same signature as the method\n    // it will call asynchronously.\n    public delegate string AsyncMethodCaller(int callDuration, out int threadId);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AsyncDelegateExamples#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Runtime::InteropServices; \n\nnamespace Examples {\nnamespace AdvancedProgramming {\nnamespace AsynchronousOperations\n{\n    public ref class AsyncDemo \n    {\n    public:\n        // The method to be executed asynchronously.\n        String^ TestMethod(int callDuration, [OutAttribute] int% threadId) \n        {\n            Console::WriteLine(&quot;Test method begins.&quot;);\n            Thread::Sleep(callDuration);\n            threadId = Thread::CurrentThread-&gt;ManagedThreadId;\n            return String::Format(&quot;My call time was {0}.&quot;, callDuration);\n        }\n    };\n\n    // The delegate must have the same signature as the method\n    // it will call asynchronously.\n    public delegate String^ AsyncMethodCaller(int callDuration, [OutAttribute] int% threadId);\n}}}\n</code></pre><pre><code class=\"lang-vb\" name=\"AsyncDelegateExamples#3\">Imports System\nImports System.Threading\nImports System.Runtime.InteropServices \n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n\n    Public Class AsyncMain \n        Shared Sub Main() \n            &#39; The asynchronous method puts the thread id here.\n            Dim threadId As Integer\n\n            &#39; Create an instance of the test class.\n            Dim ad As New AsyncDemo()\n\n            &#39; Create the delegate.\n            Dim caller As New AsyncMethodCaller(AddressOf ad.TestMethod)\n       \n            &#39; Initiate the asynchronous call.\n            Dim result As IAsyncResult = caller.BeginInvoke(3000, _\n                threadId, Nothing, Nothing)\n\n            Thread.Sleep(0)\n            Console.WriteLine(&quot;Main thread {0} does some work.&quot;, _\n                Thread.CurrentThread.ManagedThreadId)\n            &#39; Perform additional processing here and then\n            &#39; wait for the WaitHandle to be signaled.\n            result.AsyncWaitHandle.WaitOne()\n\n            &#39; Call EndInvoke to retrieve the results.\n            Dim returnValue As String = caller.EndInvoke(threadId, result)\n\n            &#39; Close the wait handle.\n            result.AsyncWaitHandle.Close()\n\n            Console.WriteLine(&quot;The call executed on thread {0}, with return value &quot;&quot;{1}&quot;&quot;.&quot;, _\n                threadId, returnValue)\n        End Sub\n    End Class\nEnd Namespace\n\n&#39;This example produces output similar to the following:\n&#39;\n&#39;Main thread 1 does some work.\n&#39;Test method begins.\n&#39;The call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\n</code></pre><pre><code class=\"lang-cpp\" name=\"AsyncDelegateExamples#3\">#using &lt;TestMethod.dll&gt;\n\nusing namespace System;\nusing namespace System::Threading;\nusing namespace Examples::AdvancedProgramming::AsynchronousOperations;\n\nvoid main() \n{\n    // The asynchronous method puts the thread id here.\n    int threadId;\n\n    // Create an instance of the test class.\n    AsyncDemo^ ad = gcnew AsyncDemo();\n\n    // Create the delegate.\n    AsyncMethodCaller^ caller = gcnew AsyncMethodCaller(ad, &amp;AsyncDemo::TestMethod);\n       \n    // Initiate the asychronous call.\n    IAsyncResult^ result = caller-&gt;BeginInvoke(3000, \n        threadId, nullptr, nullptr);\n\n    Thread::Sleep(0);\n    Console::WriteLine(&quot;Main thread {0} does some work.&quot;,\n        Thread::CurrentThread-&gt;ManagedThreadId);\n\n    // Wait for the WaitHandle to become signaled.\n    result-&gt;AsyncWaitHandle-&gt;WaitOne();\n\n    // Perform additional processing here.\n    // Call EndInvoke to retrieve the results.\n    String^ returnValue = caller-&gt;EndInvoke(threadId, result);\n\n    // Close the wait handle.\n    result-&gt;AsyncWaitHandle-&gt;Close();\n\n    Console::WriteLine(&quot;The call executed on thread {0}, with return value \\&quot;{1}\\&quot;.&quot;,\n        threadId, returnValue);\n}\n\n/* This example produces output similar to the following:\n\nMain thread 1 does some work.\nTest method begins.\nThe call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncDelegateExamples#3\">using System;\nusing System.Threading;\n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class AsyncMain \n    {\n        static void Main() \n        {\n            // The asynchronous method puts the thread id here.\n            int threadId;\n\n            // Create an instance of the test class.\n            AsyncDemo ad = new AsyncDemo();\n\n            // Create the delegate.\n            AsyncMethodCaller caller = new AsyncMethodCaller(ad.TestMethod);\n       \n            // Initiate the asychronous call.\n            IAsyncResult result = caller.BeginInvoke(3000, \n                out threadId, null, null);\n\n            Thread.Sleep(0);\n            Console.WriteLine(&quot;Main thread {0} does some work.&quot;,\n                Thread.CurrentThread.ManagedThreadId);\n\n            // Wait for the WaitHandle to become signaled.\n            result.AsyncWaitHandle.WaitOne();\n\n            // Perform additional processing here.\n            // Call EndInvoke to retrieve the results.\n            string returnValue = caller.EndInvoke(out threadId, result);\n\n            // Close the wait handle.\n            result.AsyncWaitHandle.Close();\n\n            Console.WriteLine(&quot;The call executed on thread {0}, with return value \\&quot;{1}\\&quot;.&quot;,\n                threadId, returnValue);\n        }\n    }\n}\n\n/* This example produces output similar to the following:\n\nMain thread 1 does some work.\nTest method begins.\nThe call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_CompletedSynchronously\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_CompletedSynchronously_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompletedSynchronously</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <code>BeginInvoke</code> call completed synchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CompletedSynchronously { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>BeginInvoke</code> call completed synchronously; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If it is detected that the <code>BeginInvoke</code> call completed synchronously in the <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate, it is probable that the thread that called BeginInvoke is the current thread. Most providers of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> interface will not use the capability and will return a default <code>false</code>.  </p>\n<p> Current implementation of CompletedSynchronously always returns <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_EndInvokeCalled\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_EndInvokeCalled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndInvokeCalled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether <code>EndInvoke</code> has been called on the current <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EndInvokeCalled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>EndInvoke</code> has been called on the current <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_IsCompleted\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_IsCompleted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the server has completed the call.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsCompleted { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> after the server has completed the call; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to <code>true</code>. Thus, it is safe for the client to destroy the resources after the IsCompleted property returns <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property of the <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a> returned by <code>BeginInvoke</code> to discover when an asynchronous call completes. You might do this when making the asynchronous call from a thread that services the user interface. Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread.  </p>\n<p> The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <code>Main</code> method that makes the call.  </p>\n<p> For more information and more examples of calling methods asynchronously by using delegates, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"AsyncDelegateExamples#1\">Imports System\nImports System.Threading\nImports System.Runtime.InteropServices \n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n    Public Class AsyncDemo \n        &#39; The method to be executed asynchronously.\n        Public Function TestMethod(ByVal callDuration As Integer, _\n                &lt;Out&gt; ByRef threadId As Integer) As String\n            Console.WriteLine(&quot;Test method begins.&quot;)\n            Thread.Sleep(callDuration)\n            threadId = Thread.CurrentThread.ManagedThreadId()\n            return String.Format(&quot;My call time was {0}.&quot;, callDuration.ToString())\n        End Function\n    End Class\n\n    &#39; The delegate must have the same signature as the method\n    &#39; it will call asynchronously.\n    Public Delegate Function AsyncMethodCaller(ByVal callDuration As Integer, _\n        &lt;Out&gt; ByRef threadId As Integer) As String\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncDelegateExamples#1\">using System;\nusing System.Threading; \n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class AsyncDemo \n    {\n        // The method to be executed asynchronously.\n        public string TestMethod(int callDuration, out int threadId) \n        {\n            Console.WriteLine(&quot;Test method begins.&quot;);\n            Thread.Sleep(callDuration);\n            threadId = Thread.CurrentThread.ManagedThreadId;\n            return String.Format(&quot;My call time was {0}.&quot;, callDuration.ToString());\n        }\n    }\n    // The delegate must have the same signature as the method\n    // it will call asynchronously.\n    public delegate string AsyncMethodCaller(int callDuration, out int threadId);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AsyncDelegateExamples#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Runtime::InteropServices; \n\nnamespace Examples {\nnamespace AdvancedProgramming {\nnamespace AsynchronousOperations\n{\n    public ref class AsyncDemo \n    {\n    public:\n        // The method to be executed asynchronously.\n        String^ TestMethod(int callDuration, [OutAttribute] int% threadId) \n        {\n            Console::WriteLine(&quot;Test method begins.&quot;);\n            Thread::Sleep(callDuration);\n            threadId = Thread::CurrentThread-&gt;ManagedThreadId;\n            return String::Format(&quot;My call time was {0}.&quot;, callDuration);\n        }\n    };\n\n    // The delegate must have the same signature as the method\n    // it will call asynchronously.\n    public delegate String^ AsyncMethodCaller(int callDuration, [OutAttribute] int% threadId);\n}}}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AsyncDelegateExamples#4\">#using &lt;TestMethod.dll&gt;\n\nusing namespace System;\nusing namespace System::Threading;\nusing namespace Examples::AdvancedProgramming::AsynchronousOperations;\n\nvoid main() \n{\n    // The asynchronous method puts the thread id here.\n    int threadId;\n\n    // Create an instance of the test class.\n    AsyncDemo^ ad = gcnew AsyncDemo();\n\n    // Create the delegate.\n    AsyncMethodCaller^ caller = gcnew AsyncMethodCaller(ad, &amp;AsyncDemo::TestMethod);\n       \n    // Initiate the asychronous call.\n    IAsyncResult^ result = caller-&gt;BeginInvoke(3000, \n        threadId, nullptr, nullptr);\n\n    // Poll while simulating work.\n    while(result-&gt;IsCompleted == false)\n    {\n        Thread::Sleep(250);\n        Console::Write(&quot;.&quot;);\n    }\n\n    // Call EndInvoke to retrieve the results.\n    String^ returnValue = caller-&gt;EndInvoke(threadId, result);\n\n    Console::WriteLine(&quot;<br>The call executed on thread {0}, with return value \\&quot;{1}\\&quot;.&quot;,\n        threadId, returnValue);\n}\n\n/* This example produces output similar to the following:\n\nTest method begins.\n.............\nThe call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncDelegateExamples#4\">using System;\nusing System.Threading;\n\nnamespace Examples.AdvancedProgramming.AsynchronousOperations\n{\n    public class AsyncMain \n    {\n        static void Main() {\n            // The asynchronous method puts the thread id here.\n            int threadId;\n\n            // Create an instance of the test class.\n            AsyncDemo ad = new AsyncDemo();\n\n            // Create the delegate.\n            AsyncMethodCaller caller = new AsyncMethodCaller(ad.TestMethod);\n       \n            // Initiate the asychronous call.\n            IAsyncResult result = caller.BeginInvoke(3000, \n                out threadId, null, null);\n\n            // Poll while simulating work.\n            while(result.IsCompleted == false) {\n                Thread.Sleep(250);\n                Console.Write(&quot;.&quot;);\n            }\n\n            // Call EndInvoke to retrieve the results.\n            string returnValue = caller.EndInvoke(out threadId, result);\n\n            Console.WriteLine(&quot;<br>The call executed on thread {0}, with return value \\&quot;{1}\\&quot;.&quot;,\n                threadId, returnValue);\n        }\n    }\n}\n\n/* This example produces output similar to the following:\n\nTest method begins.\n.............\nThe call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"AsyncDelegateExamples#4\">Imports System\nImports System.Threading\nImports System.Runtime.InteropServices \n\nNamespace Examples.AdvancedProgramming.AsynchronousOperations\n\n    Public Class AsyncMain \n        Shared Sub Main() \n            &#39; The asynchronous method puts the thread id here.\n            Dim threadId As Integer\n\n            &#39; Create an instance of the test class.\n            Dim ad As New AsyncDemo()\n\n            &#39; Create the delegate.\n            Dim caller As New AsyncMethodCaller(AddressOf ad.TestMethod)\n       \n            &#39; Initiate the asynchronous call.\n            Dim result As IAsyncResult = caller.BeginInvoke(3000, _\n                threadId, Nothing, Nothing)\n\n            &#39; Poll while simulating work.\n            While result.IsCompleted = False\n                Thread.Sleep(250)\n                Console.Write(&quot;.&quot;)\n            End While\n\n            &#39; Call EndInvoke to retrieve the results.\n            Dim returnValue As String = caller.EndInvoke(threadId, result)\n\n            Console.WriteLine(vbCrLf &amp; _\n                &quot;The call executed on thread {0}, with return value &quot;&quot;{1}&quot;&quot;.&quot;, _\n                threadId, returnValue)\n        End Sub\n    End Class\nEnd Namespace\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Test method begins.\n&#39;.............\n&#39;The call executed on thread 3, with return value &quot;My call time was 3000.&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_NextSink\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_NextSink_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextSink</div>        \r\n          </div>\r\n    \r\n            <p>Gets the next message sink in the sink chain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a> interface that represents the next message sink in the sink chain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current implementation of NextSink returns <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_AsyncProcessMessage_System_Runtime_Remoting_Messaging_IMessage_System_Runtime_Remoting_Messaging_IMessageSink_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_AsyncProcessMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncProcessMessage(IMessage,IMessageSink)</div>        \r\n          </div>\r\n    \r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The request <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>replySink</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The response <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagectrl\" data-linktype=\"relative-path\">IMessageCtrl</a></div>\r\n                  </div>\r\n                  <p>No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AsyncProcessMessage method of the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a> interface is not relevant to the <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a> class. Implementation by <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a> throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. Instead, obtain an <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a> by casting the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> interface returned by an asynchronous call made using a delegate.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_GetReplyMessage\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_GetReplyMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetReplyMessage()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the response message for the asynchronous call.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a></div>\r\n                  </div>\r\n                  <p>A remoting message that should represent a response to a method call on a remote object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetReplyMessage method can return an object after the <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult#System_Runtime_Remoting_Messaging_AsyncResult_SyncProcessMessage_\" data-linktype=\"relative-path\">SyncProcessMessage</a> method is called. The <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a> return value can be cast to an <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodreturnmessage\" data-linktype=\"relative-path\">IMethodReturnMessage</a>.  </p>\n<p> However, you do not need to call either of these methods directly. They are intended for use by the remoting infrastructure of the .NET Framework.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_SetMessageCtrl_System_Runtime_Remoting_Messaging_IMessageCtrl_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_SetMessageCtrl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetMessageCtrl(IMessageCtrl)</div>        \r\n          </div>\r\n    \r\n            <p>Sets an <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagectrl\" data-linktype=\"relative-path\">IMessageCtrl</a> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagectrl\" data-linktype=\"relative-path\">IMessageCtrl</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagectrl\" data-linktype=\"relative-path\">IMessageCtrl</a> for the current remote method call.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You do not need to call the SetMessageCtrl method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_AsyncResult_SyncProcessMessage_System_Runtime_Remoting_Messaging_IMessage_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_AsyncResult_SyncProcessMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncProcessMessage(IMessage)</div>        \r\n          </div>\r\n    \r\n            <p>Synchronously processes a response message returned by a method call on a remote object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A response message to a method call on a remote object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a></div>\r\n                  </div>\r\n                  <p>Returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SyncProcessMessage method implements the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a> interface. You do not need to call this method directly. It is intended for use by the remoting infrastructure of the .NET Framework.  </p>\n<p> SyncProcessMessage invokes the consumer code&#39;s <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate. It also sets the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodreturnmessage\" data-linktype=\"relative-path\">IMethodReturnMessage</a> instance returned by the <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult#System_Runtime_Remoting_Messaging_AsyncResult_GetReplyMessage_\" data-linktype=\"relative-path\">GetReplyMessage</a> method. If the <code>msg</code> parameter is of type <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodreturnmessage\" data-linktype=\"relative-path\">IMethodReturnMessage</a>, the same object is returned by <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult#System_Runtime_Remoting_Messaging_AsyncResult_GetReplyMessage_\" data-linktype=\"relative-path\">GetReplyMessage</a>. Otherwise, a reply message that contains a remoting exception is returned.  </p>\n<p> SyncProcessMessage also modifies the value returned by the <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult#System_Runtime_Remoting_Messaging_AsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Messaging.AsyncResult.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Messaging.AsyncResult.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.AsyncState\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.NextSink\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"02c1ae69-b079-9dd6-b6bf-891589b64059\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates the results of an asynchronous operation on a delegate.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Remoting.Messaging/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Messaging.AsyncResult\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Messaging.AsyncResult.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Messaging.AsyncResult.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Remoting.Messaging.AsyncResult","System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate","System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage","System.Runtime.Remoting.Messaging.AsyncResult.AsyncState","System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle","System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously","System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled","System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage","System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted","System.Runtime.Remoting.Messaging.AsyncResult.NextSink","System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl","System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Messaging.AsyncResult","System::Runtime::Remoting::Messaging::AsyncResult","System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate","System::Runtime::Remoting::Messaging::AsyncResult::AsyncDelegate","System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage","System::Runtime::Remoting::Messaging::AsyncResult::AsyncProcessMessage","System.Runtime.Remoting.Messaging.AsyncResult.AsyncState","System::Runtime::Remoting::Messaging::AsyncResult::AsyncState","System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle","System::Runtime::Remoting::Messaging::AsyncResult::AsyncWaitHandle","System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously","System::Runtime::Remoting::Messaging::AsyncResult::CompletedSynchronously","System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled","System::Runtime::Remoting::Messaging::AsyncResult::EndInvokeCalled","System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage","System::Runtime::Remoting::Messaging::AsyncResult::GetReplyMessage","System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted","System::Runtime::Remoting::Messaging::AsyncResult::IsCompleted","System.Runtime.Remoting.Messaging.AsyncResult.NextSink","System::Runtime::Remoting::Messaging::AsyncResult::NextSink","System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl","System::Runtime::Remoting::Messaging::AsyncResult::SetMessageCtrl","System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage","System::Runtime::Remoting::Messaging::AsyncResult::SyncProcessMessage"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"02c1ae69-b079-9dd6-b6bf-891589b64059","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Remoting.Messaging/AsyncResult.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsyncResult class | Microsoft Docs","_op_ogTitle":"AsyncResult class","description":"Encapsulates the results of an asynchronous operation on a delegate.\n","toc_asset_id":"_splitted/System.Runtime.Remoting.Messaging/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Messaging/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Messaging.AsyncResult","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.messaging.asyncresult","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.messaging.asyncresult","fileRelativePath":"System.Runtime.Remoting.Messaging.AsyncResult.html"},"themesRelativePathToOutputRoot":"_themes/"}