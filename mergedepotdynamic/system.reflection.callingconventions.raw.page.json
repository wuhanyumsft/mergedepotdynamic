{"content":"    <!-- ENUM -->\r\n    <h1 id=\"System_Reflection_CallingConventions\">\r\n      <span class=\"lang-csharp\">CallingConventions</span>\r\n        Enum\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines the valid calling conventions for a method.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Flags]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic enum CallingConventions</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CallingConventions</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods. It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.</p>\n\r\n        <header class=\"header\" id=\"fields\">\r\n          <h2>Fields\r\n        </h2>\r\n        </header>\r\n        <table class=\"nameValue\">\r\n            <tbody>\r\n              <tr>\r\n                <td id=\"System_Reflection_CallingConventions_Any\">\r\n            <div class=\"lang-csharp\">Any</div>\r\n          </td>\r\n                <td><p>Specifies that either the <code>Standard</code> or the <code>VarArgs</code> calling convention may be used.</p>\n</td>\r\n              </tr>\r\n              <tr>\r\n                <td id=\"System_Reflection_CallingConventions_ExplicitThis\">\r\n            <div class=\"lang-csharp\">ExplicitThis</div>\r\n          </td>\r\n                <td><p>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If <code>ExplicitThis</code> is set, <code>HasThis</code> must also be set. The first argument passed to the called method is still a <code>this</code> pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the <code>this</code> pointer is explicitly stored into its metadata signature.</p>\n</td>\r\n              </tr>\r\n              <tr>\r\n                <td id=\"System_Reflection_CallingConventions_HasThis\">\r\n            <div class=\"lang-csharp\">HasThis</div>\r\n          </td>\r\n                <td><p>Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the <code>this</code> pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</p>\n</td>\r\n              </tr>\r\n              <tr>\r\n                <td id=\"System_Reflection_CallingConventions_Standard\">\r\n            <div class=\"lang-csharp\">Standard</div>\r\n          </td>\r\n                <td><p>Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use <code>HasThis</code>.</p>\n</td>\r\n              </tr>\r\n              <tr>\r\n                <td id=\"System_Reflection_CallingConventions_VarArgs\">\r\n            <div class=\"lang-csharp\">VarArgs</div>\r\n          </td>\r\n                <td><p>Specifies the calling convention for methods with variable arguments.</p>\n</td>\r\n              </tr>\r\n            </tbody>\r\n        </table>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.CallingConventions.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.CallingConventions.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CallingConventions\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CallingConventions.Any\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CallingConventions.ExplicitThis\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CallingConventions.HasThis\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CallingConventions.Standard\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CallingConventions.VarArgs\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6508bb52-ed92-6d2b-f72c-86353c71b586\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection\\CallingConventions.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the valid calling conventions for a method.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.CallingConventions\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.CallingConventions.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.CallingConventions.yml","open_to_public_contributors":true,"api_name":["System.Reflection.CallingConventions","System.Reflection.CallingConventions.Any","System.Reflection.CallingConventions.ExplicitThis","System.Reflection.CallingConventions.HasThis","System.Reflection.CallingConventions.Standard","System.Reflection.CallingConventions.VarArgs"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.CallingConventions","System::Reflection::CallingConventions","System.Reflection.CallingConventions.Any","System::Reflection::CallingConventions::Any","System.Reflection.CallingConventions.ExplicitThis","System::Reflection::CallingConventions::ExplicitThis","System.Reflection.CallingConventions.HasThis","System::Reflection::CallingConventions::HasThis","System.Reflection.CallingConventions.Standard","System::Reflection::CallingConventions::Standard","System.Reflection.CallingConventions.VarArgs","System::Reflection::CallingConventions::VarArgs"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6508bb52-ed92-6d2b-f72c-86353c71b586","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection\\CallingConventions.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/CallingConventions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CallingConventions enum | Microsoft Docs","_op_ogTitle":"CallingConventions enum","description":"Defines the valid calling conventions for a method.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.CallingConventions","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.callingconventions","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.callingconventions","fileRelativePath":"System.Reflection.CallingConventions.html"},"themesRelativePathToOutputRoot":"_themes/"}