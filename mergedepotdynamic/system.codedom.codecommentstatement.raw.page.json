{"content":"    \r\n    <h1 id=\"System_CodeDom_CodeCommentStatement\">\r\n      <span class=\"lang-csharp\">CodeCommentStatement</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a statement consisting of a single comment.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class CodeCommentStatement : System.CodeDom.CodeStatement</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.codedom.codeobject\" data-linktype=\"relative-path\">CodeObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.codedom.codestatement\" data-linktype=\"relative-path\">System.CodeDom.CodeStatement</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CodeCommentStatement</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.codedom.codeobject#System_CodeDom_CodeObject_UserData\" data-linktype=\"relative-path\">UserData</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.codedom.codestatement#System_CodeDom_CodeStatement_EndDirectives\" data-linktype=\"relative-path\">EndDirectives</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.codedom.codestatement#System_CodeDom_CodeStatement_LinePragma\" data-linktype=\"relative-path\">LinePragma</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.codedom.codestatement#System_CodeDom_CodeStatement_StartDirectives\" data-linktype=\"relative-path\">StartDirectives</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>CodeCommentStatement can be used to represent a single-line comment statement. CodeCommentStatement is a statement, so it can be inserted into a statements collection and will appear on its own line. CodeCommentStatement can also be added to the comments collection of <a class=\"xref\" href=\"system.codedom.codenamespace\" data-linktype=\"relative-path\">CodeNamespace</a> or any object that derives from <a class=\"xref\" href=\"system.codedom.codetypemember\" data-linktype=\"relative-path\">CodeTypeMember</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_CodeCommentStatement__ctor\" data-linktype=\"self-bookmark\">CodeCommentStatement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_CodeCommentStatement__ctor_System_CodeDom_CodeComment_\" data-linktype=\"self-bookmark\">CodeCommentStatement(CodeComment)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> class using the specified comment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_CodeCommentStatement__ctor_System_String_\" data-linktype=\"self-bookmark\">CodeCommentStatement(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> class using the specified text as contents.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_CodeCommentStatement__ctor_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">CodeCommentStatement(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> class using the specified text and documentation comment flag.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_CodeCommentStatement_Comment\" data-linktype=\"self-bookmark\">Comment</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the contents of the comment.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_CodeCommentStatement__ctor\">\r\n    \r\n            <a id=\"System_CodeDom_CodeCommentStatement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeCommentStatement()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CodeCommentStatement ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_CodeCommentStatement__ctor_System_CodeDom_CodeComment_\">\r\n    \r\n            <a id=\"System_CodeDom_CodeCommentStatement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeCommentStatement(CodeComment)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> class using the specified comment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CodeCommentStatement (System.CodeDom.CodeComment comment);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comment</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecomment\" data-linktype=\"relative-path\">CodeComment</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codecomment\" data-linktype=\"relative-path\">CodeComment</a> that indicates the comment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_CodeCommentStatement__ctor_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_CodeCommentStatement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeCommentStatement(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> class using the specified text as contents.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CodeCommentStatement (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contents of the comment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_CodeCommentStatement__ctor_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_CodeDom_CodeCommentStatement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeCommentStatement(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> class using the specified text and documentation comment flag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CodeCommentStatement (string text, bool docComment);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contents of the comment.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>docComment</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the comment is a documentation comment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>docComment</code> parameter is <code>true</code>, the <a class=\"xref\" href=\"system.codedom.codecommentstatement\" data-linktype=\"relative-path\">CodeCommentStatement</a> is a documentation comment and the comment is structured using triple delimiter characters. For example, in C# the comment is &quot;<code>///</code>&quot;, in Visual Basic &quot;<code>&#39;&#39;&#39;</code>&quot;. Documentation comments are used to identify an XML comment field, such as a type or member summary identified by the <code>&lt;summary&gt;</code> element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the CodeCommentStatement constructor to create a comment statement to be used as an XML comment field. This example is part of a larger example that follows.  </p>\n<pre><code class=\"lang-cs\" name=\"CodeDomHelloWorldSample#3\">            // Declare a new code entry point method.\n            CodeEntryPointMethod start = new CodeEntryPointMethod();\n            start.Comments.Add(new CodeCommentStatement(&quot;&lt;summary&gt;&quot;, true));\n            start.Comments.Add(new CodeCommentStatement(\n                &quot;Main method for HelloWorld application.&quot;, true));\n            start.Comments.Add(new CodeCommentStatement(\n                @&quot;&lt;para&gt;Add a new paragraph to the description.&lt;/para&gt;&quot;, true));\n            start.Comments.Add(new CodeCommentStatement(&quot;&lt;/summary&gt;&quot;, true));\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDomHelloWorldSample#3\">        &#39; Declare a new code entry point method.\n        Dim start As New CodeEntryPointMethod()\n        start.Comments.Add(New CodeCommentStatement(&quot;&lt;summary&gt;&quot;, True))\n        start.Comments.Add(New CodeCommentStatement( _\n            &quot;Main method for HelloWorld application.&quot;, True))\n        start.Comments.Add(New CodeCommentStatement( _\n            &quot;&lt;para&gt;Add a new paragraph to the description.&lt;/para&gt;&quot;, True))\n        start.Comments.Add(New CodeCommentStatement(&quot;&lt;/summary&gt;&quot;, True))\n</code></pre><p> The following code example demonstrates the creation of a simple &quot;Hello World&quot; console application and the generation of an XML documentation file for the compiled application.  </p>\n<pre><code class=\"lang-cs\" name=\"CodeDomHelloWorldSample#1\">using System;\nusing System.CodeDom;\nusing System.CodeDom.Compiler;\nusing System.IO;\nusing System.Text.RegularExpressions;\n\nnamespace BasicCodeDomApp\n{\n    class Program\n    {\n        static string providerName = &quot;cs&quot;;\n        static string sourceFileName = &quot;test.cs&quot;;\n        static void Main(string[] args)\n        {\n            CodeDomProvider provider = \n                CodeDomProvider.CreateProvider(providerName);\n\n            LogMessage(&quot;Building CodeDOM graph...&quot;);\n\n            CodeCompileUnit cu = new CodeCompileUnit();\n\n            cu = BuildHelloWorldGraph();\n\n            StreamWriter sourceFile = new StreamWriter(sourceFileName);\n            provider.GenerateCodeFromCompileUnit(cu, sourceFile, null);\n            sourceFile.Close();\n\n            CompilerParameters opt = new CompilerParameters(new string[]{\n                                      &quot;System.dll&quot; });\n            opt.GenerateExecutable = true;\n            opt.OutputAssembly = &quot;HelloWorld.exe&quot;;\n            opt.TreatWarningsAsErrors = true;\n            opt.IncludeDebugInformation = true;\n            opt.GenerateInMemory = true;\n            opt.CompilerOptions = &quot;/doc:HelloWorldDoc.xml&quot;;\n\n            CompilerResults results;\n\n            LogMessage(&quot;Compiling with &quot; + providerName);\n            results = provider.CompileAssemblyFromFile(opt, sourceFileName);\n\n            OutputResults(results);\n            if (results.NativeCompilerReturnValue != 0)\n            {\n                LogMessage(&quot;&quot;);\n                LogMessage(&quot;Compilation failed.&quot;);\n            }\n            else\n            {\n                LogMessage(&quot;&quot;);\n                LogMessage(&quot;Demo completed successfully.&quot;);\n            }\n            File.Delete(sourceFileName);\n        }\n\n        // Build a Hello World program graph using \n        // System.CodeDom types.\n        public static CodeCompileUnit BuildHelloWorldGraph()\n        {\n            // Create a new CodeCompileUnit to contain \n            // the program graph.\n            CodeCompileUnit compileUnit = new CodeCompileUnit();\n\n            // Declare a new namespace called Samples.\n            CodeNamespace samples = new CodeNamespace(&quot;Samples&quot;);\n            // Add the new namespace to the compile unit.\n            compileUnit.Namespaces.Add(samples);\n\n            // Add the new namespace import for the System namespace.\n            samples.Imports.Add(new CodeNamespaceImport(&quot;System&quot;));\n\n            // Declare a new type called Class1.\n            CodeTypeDeclaration class1 = new CodeTypeDeclaration(&quot;Class1&quot;);\n\n            class1.Comments.Add(new CodeCommentStatement(&quot;&lt;summary&gt;&quot;, true));\n            class1.Comments.Add(new CodeCommentStatement(\n                &quot;Create a Hello World application.&quot;, true));\n            class1.Comments.Add(new CodeCommentStatement(\n                @&quot;&lt;seealso cref=&quot; + &#39;&quot;&#39; + &quot;Class1.Main&quot; + &#39;&quot;&#39; + &quot;/&gt;&quot;, true));\n            class1.Comments.Add(new CodeCommentStatement(&quot;&lt;/summary&gt;&quot;, true));\n\n            // Add the new type to the namespace type collection.\n            samples.Types.Add(class1);\n\n            // Declare a new code entry point method.\n            CodeEntryPointMethod start = new CodeEntryPointMethod();\n            start.Comments.Add(new CodeCommentStatement(&quot;&lt;summary&gt;&quot;, true));\n            start.Comments.Add(new CodeCommentStatement(\n                &quot;Main method for HelloWorld application.&quot;, true));\n            start.Comments.Add(new CodeCommentStatement(\n                @&quot;&lt;para&gt;Add a new paragraph to the description.&lt;/para&gt;&quot;, true));\n            start.Comments.Add(new CodeCommentStatement(&quot;&lt;/summary&gt;&quot;, true));\n\n            // Create a type reference for the System.Console class.\n            CodeTypeReferenceExpression csSystemConsoleType = \n                new CodeTypeReferenceExpression(&quot;System.Console&quot;);\n\n            // Build a Console.WriteLine statement.\n            CodeMethodInvokeExpression cs1 = new CodeMethodInvokeExpression(\n                csSystemConsoleType, &quot;WriteLine&quot;,\n                new CodePrimitiveExpression(&quot;Hello World!&quot;));\n\n            // Add the WriteLine call to the statement collection.\n            start.Statements.Add(cs1);\n\n            // Build another Console.WriteLine statement.\n            CodeMethodInvokeExpression cs2 = new CodeMethodInvokeExpression(\n                csSystemConsoleType, &quot;WriteLine&quot;, new CodePrimitiveExpression(\n                &quot;Press the ENTER key to continue.&quot;));\n\n            // Add the WriteLine call to the statement collection.\n            start.Statements.Add(cs2);\n\n            // Build a call to System.Console.ReadLine.\n            CodeMethodInvokeExpression csReadLine = \n                new CodeMethodInvokeExpression(csSystemConsoleType, &quot;ReadLine&quot;);\n\n            // Add the ReadLine statement.\n            start.Statements.Add(csReadLine);\n\n            // Add the code entry point method to\n            // the Members collection of the type.\n            class1.Members.Add(start);\n\n            return compileUnit;\n        }\n        static void LogMessage(string text)\n        {\n            Console.WriteLine(text);\n        }\n\n        static void OutputResults(CompilerResults results)\n        {\n            LogMessage(&quot;NativeCompilerReturnValue=&quot; +\n                results.NativeCompilerReturnValue.ToString());\n            foreach (string s in results.Output)\n            {\n                LogMessage(s);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDomHelloWorldSample#1\">Imports System\nImports System.CodeDom\nImports System.CodeDom.Compiler\nImports System.IO\nImports System.Text.RegularExpressions\n\n\n\nClass Program\n    Private Shared providerName As String = &quot;vb&quot;\n    Private Shared sourceFileName As String = &quot;test.vb&quot;\n\n    Shared Sub Main(ByVal args() As String)\n        Dim provider As CodeDomProvider = _\n            CodeDomProvider.CreateProvider(providerName)\n\n        LogMessage(&quot;Building CodeDOM graph...&quot;)\n\n        Dim cu As New CodeCompileUnit()\n\n        cu = BuildHelloWorldGraph()\n\n\n        Dim sourceFile As New StreamWriter(sourceFileName)\n\n        LogMessage(&quot;Generating code...&quot;)\n        provider.GenerateCodeFromCompileUnit(cu, sourceFile, Nothing)\n        sourceFile.Close()\n\n        Dim opt As New CompilerParameters(New String() {&quot;System.dll&quot;})\n        opt.GenerateExecutable = True\n        opt.OutputAssembly = &quot;HelloWorld.exe&quot;\n        opt.TreatWarningsAsErrors = True\n        opt.IncludeDebugInformation = True\n        opt.GenerateInMemory = True\n        opt.CompilerOptions = &quot;/doc&quot;\n\n        Dim results As CompilerResults\n\n        LogMessage((&quot;Compiling with &quot; &amp; providerName))\n        results = provider.CompileAssemblyFromFile(opt, sourceFileName)\n\n        OutputResults(results)\n        If results.NativeCompilerReturnValue &lt;&gt; 0 Then\n            LogMessage(&quot;&quot;)\n            LogMessage(&quot;Compilation failed.&quot;)\n        Else\n            LogMessage(&quot;&quot;)\n            LogMessage(&quot;Demo completed successfully.&quot;)\n        End If\n        File.Delete(sourceFileName)\n\n    End Sub &#39;Main\n\n\n    &#39; Build a Hello World program graph using \n    &#39; System.CodeDom types.\n    Public Shared Function BuildHelloWorldGraph() As CodeCompileUnit\n        &#39; Create a new CodeCompileUnit to contain \n        &#39; the program graph.\n        Dim compileUnit As New CodeCompileUnit()\n\n        &#39; Declare a new namespace called Samples.\n        Dim samples As New CodeNamespace(&quot;Samples&quot;)\n        &#39; Add the new namespace to the compile unit.\n        compileUnit.Namespaces.Add(samples)\n\n        &#39; Add the new namespace import for the System namespace.\n        samples.Imports.Add(New CodeNamespaceImport(&quot;System&quot;))\n\n        &#39; Declare a new type called Class1.\n        Dim class1 As New CodeTypeDeclaration(&quot;Class1&quot;)\n\n        class1.Comments.Add(New CodeCommentStatement(&quot;&lt;summary&gt;&quot;, True))\n        class1.Comments.Add(New CodeCommentStatement( _\n            &quot;Create a Hello World application.&quot;, True))\n        class1.Comments.Add(New CodeCommentStatement( _\n            &quot;&lt;seealso cref=&quot; &amp; ControlChars.Quote &amp; &quot;Class1.Main&quot; &amp; _\n            ControlChars.Quote &amp; &quot;/&gt;&quot;, True))\n        class1.Comments.Add(New CodeCommentStatement(&quot;&lt;/summary&gt;&quot;, True))\n\n        &#39; Add the new type to the namespace type collection.\n        samples.Types.Add(class1)\n\n        &#39; Declare a new code entry point method.\n        Dim start As New CodeEntryPointMethod()\n        start.Comments.Add(New CodeCommentStatement(&quot;&lt;summary&gt;&quot;, True))\n        start.Comments.Add(New CodeCommentStatement( _\n            &quot;Main method for HelloWorld application.&quot;, True))\n        start.Comments.Add(New CodeCommentStatement( _\n            &quot;&lt;para&gt;Add a new paragraph to the description.&lt;/para&gt;&quot;, True))\n        start.Comments.Add(New CodeCommentStatement(&quot;&lt;/summary&gt;&quot;, True))\n        &#39; Create a type reference for the System.Console class.\n        Dim csSystemConsoleType As New CodeTypeReferenceExpression( _\n            &quot;System.Console&quot;)\n\n        &#39; Build a Console.WriteLine statement.\n        Dim cs1 As New CodeMethodInvokeExpression(csSystemConsoleType, _\n            &quot;WriteLine&quot;, New CodePrimitiveExpression(&quot;Hello World!&quot;))\n\n        &#39; Add the WriteLine call to the statement collection.\n        start.Statements.Add(cs1)\n\n        &#39; Build another Console.WriteLine statement.\n        Dim cs2 As New CodeMethodInvokeExpression(csSystemConsoleType, _\n            &quot;WriteLine&quot;, New CodePrimitiveExpression( _\n            &quot;Press the ENTER key to continue.&quot;))\n\n        &#39; Add the WriteLine call to the statement collection.\n        start.Statements.Add(cs2)\n\n        &#39; Build a call to System.Console.ReadLine.\n        Dim csReadLine As New CodeMethodInvokeExpression( _\n            csSystemConsoleType, &quot;ReadLine&quot;)\n\n        &#39; Add the ReadLine statement.\n        start.Statements.Add(csReadLine)\n\n        &#39; Add the code entry point method to\n        &#39; the Members collection of the type.\n        class1.Members.Add(start)\n\n        Return compileUnit\n\n    End Function &#39;BuildHelloWorldGraph\n\n    Shared Sub LogMessage(ByVal [text] As String)\n        Console.WriteLine([text])\n\n    End Sub &#39;LogMessage\n\n\n    Shared Sub OutputResults(ByVal results As CompilerResults)\n        LogMessage((&quot;NativeCompilerReturnValue=&quot; &amp; _\n            results.NativeCompilerReturnValue.ToString()))\n        Dim s As String\n        For Each s In results.Output\n            LogMessage(s)\n        Next s\n\n    End Sub &#39;OutputResults\nEnd Class &#39;Program\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_CodeCommentStatement_Comment\">\r\n    \r\n            <a id=\"System_CodeDom_CodeCommentStatement_Comment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Comment</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the contents of the comment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.CodeDom.CodeComment Comment { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecomment\" data-linktype=\"relative-path\">CodeComment</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codecomment\" data-linktype=\"relative-path\">CodeComment</a> that indicates the comment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.CodeDom.CodeCommentStatement.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.CodeDom.CodeCommentStatement.yml\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeCommentStatement\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeCommentStatement..ctor\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.CodeCommentStatement.Comment\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b12cb173-7380-f78d-f98f-8914108ac8d7\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.CodeDom\\CodeCommentStatement.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a statement consisting of a single comment.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.CodeDom/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CodeDom.CodeCommentStatement\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.CodeDom.CodeCommentStatement.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.CodeDom.CodeCommentStatement.yml","open_to_public_contributors":true,"api_name":["System.CodeDom.CodeCommentStatement","System.CodeDom.CodeCommentStatement..ctor","System.CodeDom.CodeCommentStatement.Comment"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CodeDom.CodeCommentStatement","System::CodeDom::CodeCommentStatement","System.CodeDom.CodeCommentStatement.#ctor","System::CodeDom::CodeCommentStatement::#ctor","System.CodeDom.CodeCommentStatement.Comment","System::CodeDom::CodeCommentStatement::Comment"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b12cb173-7380-f78d-f98f-8914108ac8d7","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.CodeDom\\CodeCommentStatement.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.CodeDom/CodeCommentStatement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CodeCommentStatement class | Microsoft Docs","_op_ogTitle":"CodeCommentStatement class","description":"Represents a statement consisting of a single comment.\n","toc_asset_id":"_splitted/System.CodeDom/toc.json","toc_rel":"_splitted/System.CodeDom/toc.json","source_url":"","ms.assetid":"System.CodeDom.CodeCommentStatement","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.codedom.codecommentstatement","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.codedom.codecommentstatement","fileRelativePath":"System.CodeDom.CodeCommentStatement.html"},"themesRelativePathToOutputRoot":"_themes/"}