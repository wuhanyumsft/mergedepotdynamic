{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_X509Certificates_X509Certificate2\">\r\n      <span class=\"lang-csharp\">X509Certificate2</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an X.509 certificate.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">System.Security.Cryptography.X509Certificates.X509Certificate</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">X509Certificate2</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_CreateFromCertFile_System_String_\" data-linktype=\"relative-path\">CreateFromCertFile(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_CreateFromSignedFile_System_String_\" data-linktype=\"relative-path\">CreateFromSignedFile(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Equals_System_Security_Cryptography_X509Certificates_X509Certificate_\" data-linktype=\"relative-path\">Equals(X509Certificate)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Export_System_Security_Cryptography_X509Certificates_X509ContentType_\" data-linktype=\"relative-path\">Export(X509ContentType)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Export_System_Security_Cryptography_X509Certificates_X509ContentType_System_Security_SecureString_\" data-linktype=\"relative-path\">Export(X509ContentType,SecureString)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Export_System_Security_Cryptography_X509Certificates_X509ContentType_System_String_\" data-linktype=\"relative-path\">Export(X509ContentType,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_FormatDate_System_DateTime_\" data-linktype=\"relative-path\">FormatDate(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetCertHash\" data-linktype=\"relative-path\">GetCertHash()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetCertHashString\" data-linktype=\"relative-path\">GetCertHashString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetEffectiveDateString\" data-linktype=\"relative-path\">GetEffectiveDateString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetExpirationDateString\" data-linktype=\"relative-path\">GetExpirationDateString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetFormat\" data-linktype=\"relative-path\">GetFormat()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetIssuerName\" data-linktype=\"relative-path\">GetIssuerName()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetKeyAlgorithm\" data-linktype=\"relative-path\">GetKeyAlgorithm()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetKeyAlgorithmParameters\" data-linktype=\"relative-path\">GetKeyAlgorithmParameters()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetKeyAlgorithmParametersString\" data-linktype=\"relative-path\">GetKeyAlgorithmParametersString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetName\" data-linktype=\"relative-path\">GetName()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetPublicKey\" data-linktype=\"relative-path\">GetPublicKey()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetPublicKeyString\" data-linktype=\"relative-path\">GetPublicKeyString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetRawCertData\" data-linktype=\"relative-path\">GetRawCertData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetRawCertDataString\" data-linktype=\"relative-path\">GetRawCertDataString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetSerialNumber\" data-linktype=\"relative-path\">GetSerialNumber()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetSerialNumberString\" data-linktype=\"relative-path\">GetSerialNumberString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Handle\" data-linktype=\"relative-path\">Handle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Issuer\" data-linktype=\"relative-path\">Issuer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Subject\" data-linktype=\"relative-path\">Subject</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\" data-linktype=\"relative-path\">IDeserializationCallback.OnDeserialization(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The X.509 structure originated in the International Organization for Standardization (ISO) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth). Although the ISO specifications are most informative on the structure itself, the X509Certificate2 class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group. The most informative of these specifications is RFC 3280, &quot;<a href=\"http://go.microsoft.com/fwlink/?LinkId=45286\" data-linktype=\"external\">Certificate and Certificate Revocation List (CRL) Profile</a>.&quot;  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.6, this type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n<p> For apps that target the .NET Framework 4.5.2 and earlier versions, the X509Certificate2 class does not implement the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface and therefore does not have a <code>Dispose</code> method.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor\" data-linktype=\"self-bookmark\">X509Certificate2()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___\" data-linktype=\"self-bookmark\">X509Certificate2(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using information from a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_IntPtr_\" data-linktype=\"self-bookmark\">X509Certificate2(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using an unmanaged handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Security_Cryptography_X509Certificates_X509Certificate_\" data-linktype=\"self-bookmark\">X509Certificate2(X509Certificate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_\" data-linktype=\"self-bookmark\">X509Certificate2(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_Security_SecureString_\" data-linktype=\"self-bookmark\">X509Certificate2(Byte[],SecureString)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array and a password.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_String_\" data-linktype=\"self-bookmark\">X509Certificate2(Byte[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array and a password.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">X509Certificate2(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using the specified serialization and stream context information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_Security_SecureString_\" data-linktype=\"self-bookmark\">X509Certificate2(String,SecureString)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name and a password.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_String_\" data-linktype=\"self-bookmark\">X509Certificate2(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name and a password used to access the certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\" data-linktype=\"self-bookmark\">X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array, a password, and a key storage flag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\" data-linktype=\"self-bookmark\">X509Certificate2(Byte[],String,X509KeyStorageFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array, a password, and a key storage flag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\" data-linktype=\"self-bookmark\">X509Certificate2(String,SecureString,X509KeyStorageFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name, a password, and a key storage flag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\" data-linktype=\"self-bookmark\">X509Certificate2(String,String,X509KeyStorageFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name, a password used to access the certificate, and a key storage flag.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Archived\" data-linktype=\"self-bookmark\">Archived</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating that an X.509 certificate is archived.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Extensions\" data-linktype=\"self-bookmark\">Extensions</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509extension\" data-linktype=\"relative-path\">X509Extension</a> objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_FriendlyName\" data-linktype=\"self-bookmark\">FriendlyName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the associated alias for a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_HasPrivateKey\" data-linktype=\"self-bookmark\">HasPrivateKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object contains a private key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_IssuerName\" data-linktype=\"self-bookmark\">IssuerName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the distinguished name of the certificate issuer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_NotAfter\" data-linktype=\"self-bookmark\">NotAfter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the date in local time after which a certificate is no longer valid.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_NotBefore\" data-linktype=\"self-bookmark\">NotBefore</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the date in local time on which a certificate becomes valid.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_PrivateKey\" data-linktype=\"self-bookmark\">PrivateKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object that represents the private key associated with a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_PublicKey\" data-linktype=\"self-bookmark\">PublicKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a PublicKey object associated with a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_RawData\" data-linktype=\"self-bookmark\">RawData</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the raw data of a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_SerialNumber\" data-linktype=\"self-bookmark\">SerialNumber</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the serial number of a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_SignatureAlgorithm\" data-linktype=\"self-bookmark\">SignatureAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the algorithm used to create the signature of a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_SubjectName\" data-linktype=\"self-bookmark\">SubjectName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the subject distinguished name from a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Thumbprint\" data-linktype=\"self-bookmark\">Thumbprint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the thumbprint of a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Version\" data-linktype=\"self-bookmark\">Version</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the X.509 format version of a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_GetCertContentType_System_Byte___\" data-linktype=\"self-bookmark\">GetCertContentType(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the type of certificate contained in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_GetCertContentType_System_String_\" data-linktype=\"self-bookmark\">GetCertContentType(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the type of certificate contained in a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_GetNameInfo_System_Security_Cryptography_X509Certificates_X509NameType_System_Boolean_\" data-linktype=\"self-bookmark\">GetNameInfo(X509NameType,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the subject and issuer names from a certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___\" data-linktype=\"self-bookmark\">Import(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with data from a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_\" data-linktype=\"self-bookmark\">Import(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\" data-linktype=\"self-bookmark\">Import(Byte[],SecureString,X509KeyStorageFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using data from a byte array, a password, and a key storage flag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\" data-linktype=\"self-bookmark\">Import(Byte[],String,X509KeyStorageFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using data from a byte array, a password, and flags for determining how to import the private key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\" data-linktype=\"self-bookmark\">Import(String,SecureString,X509KeyStorageFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file, a password, and a key storage flag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\" data-linktype=\"self-bookmark\">Import(String,String,X509KeyStorageFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file, a password, and a <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Reset\" data-linktype=\"self-bookmark\">Reset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the state of an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Displays an X.509 certificate in text format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_ToString_System_Boolean_\" data-linktype=\"self-bookmark\">ToString(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Displays an X.509 certificate in text format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_X509Certificate2_Verify\" data-linktype=\"self-bookmark\">Verify()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a X.509 chain validation using basic validation policy.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an empty <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using information from a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (byte[] rawData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing data from an X.509 certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.  </p>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using an unmanaged handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (IntPtr handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to a certificate context in unmanaged code. The C structure is called <code>PCCERT_CONTEXT</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a handle for the Microsoft Cryptographic API certificate context, <code>PCCERT_CONTEXT</code>. Note that the immediate caller of this constructor requires unmanaged code permission.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current <code>PCCERT_CONTEXT</code> structure from the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Handle_\" data-linktype=\"relative-path\">Handle</a> property, but it is valid only during the lifetime of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Security_Cryptography_X509Certificates_X509Certificate_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(X509Certificate)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>certificate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">System.Security.Cryptography.X509Certificates.X509Certificate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.  </p>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_Security_SecureString_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(Byte[],SecureString)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array and a password.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (byte[] rawData, System.Security.SecureString password);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that contains data from an X.509 certificate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(Byte[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array and a password.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (byte[] rawData, string password);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing data from an X.509 certificate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using the specified serialization and stream context information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The serialization information required to deserialize the new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Contextual information about the source of the stream to be deserialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_Security_SecureString_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(String,SecureString)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name and a password.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (string fileName, System.Security.SecureString password);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name and a password used to access the certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (string fileName, string password);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array, a password, and a key storage flag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that contains data from an X.509 certificate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyStorageFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(Byte[],String,X509KeyStorageFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array, a password, and a key storage flag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing data from an X.509 certificate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyStorageFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(String,SecureString,X509KeyStorageFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name, a password, and a key storage flag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyStorageFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X509Certificate2(String,String,X509KeyStorageFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name, a password used to access the certificate, and a key storage flag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyStorageFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a certificate file name, a password needed to access the certificate, and a key storage flag.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Archived\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Archived_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Archived</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating that an X.509 certificate is archived.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Archived { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the certificate is archived, <code>false</code> if the certificate is not archived.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.  </p>\n<p> In an X.509 store, archived certificates are not included in the returned <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2collection\" data-linktype=\"relative-path\">X509Certificate2Collection</a> object unless the Archived property is set to <code>true</code>. No physical archival activity occurs when the Archived value is set or unset.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Extensions\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Extensions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Extensions</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509extension\" data-linktype=\"relative-path\">X509Extension</a> objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509extensioncollection\" data-linktype=\"relative-path\">X509ExtensionCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509extensioncollection\" data-linktype=\"relative-path\">X509ExtensionCollection</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate. A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, &quot;<a href=\"http://go.microsoft.com/fwlink/?LinkId=45286\" data-linktype=\"external\">Certificate and Certificate Revocation List (CRL) Profile</a>.&quot; Common extensions include information regarding key usage (<a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keyusageextension\" data-linktype=\"relative-path\">X509KeyUsageExtension</a>), key identifiers (<a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509subjectkeyidentifierextension\" data-linktype=\"relative-path\">X509SubjectKeyIdentifierExtension</a>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_FriendlyName\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_FriendlyName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FriendlyName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the associated alias for a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string FriendlyName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The certificate&#39;s friendly name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.  </p>\n<p> If no friendly name exists for the certificate, an empty string (&quot;&quot;) is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_HasPrivateKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_HasPrivateKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasPrivateKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object contains a private key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasPrivateKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object contains a private key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate context is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_IssuerName\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_IssuerName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IssuerName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the distinguished name of the certificate issuer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x500distinguishedname\" data-linktype=\"relative-path\">X500DistinguishedName</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x500distinguishedname\" data-linktype=\"relative-path\">X500DistinguishedName</a> object that contains the name of the certificate issuer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate context is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2#System_Security_Cryptography_X509Certificates_X509Certificate2_GetNameInfo_\" data-linktype=\"relative-path\">GetNameInfo</a> method.  </p>\n<p> The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, &quot;CN=MyName, OU=MyOrgUnit, C=US&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable file that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_NotAfter\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_NotAfter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NotAfter</div>        \r\n          </div>\r\n    \r\n            <p>Gets the date in local time after which a certificate is no longer valid.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime NotAfter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object that represents the expiration date for the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates an expiration date on which the certificate becomes invalid.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_NotBefore\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_NotBefore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NotBefore</div>        \r\n          </div>\r\n    \r\n            <p>Gets the date in local time on which a certificate becomes valid.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime NotBefore { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object that represents the effective date of the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property indicates the date on which the certificate becomes valid.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_PrivateKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_PrivateKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrivateKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object that represents the private key associated with a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object, which is either an RSA or DSA cryptographic service provider.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The key value is not an RSA or DSA key, or the key is unreadable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value being set for this property is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The key algorithm for this private key is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicunexpectedoperationexception\" data-linktype=\"relative-path\">CryptographicUnexpectedOperationException</a></div>\r\n                  </div>\r\n                  <p>The X.509 keys do not match.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider key is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Currently this property supports only RSA or DSA keys, so it returns either an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> or a <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a> object. If no private key is associated with the certificate, it returns <code>null</code>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> If you set this property to <code>null</code> or to another key without first deleting it, a private key file is left on the disk.  </p>\n</div>\n<p> To properly delete the private key associated with this property, set <code>PersistKeyInCsp</code> to <code>false</code>, and then call the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Clear_\" data-linktype=\"relative-path\">Clear</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_PublicKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_PublicKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PublicKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets a PublicKey object associated with a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.publickey\" data-linktype=\"relative-path\">PublicKey</a></div>\r\n                  </div>\r\n                  <p>A PublicKey object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The key value is not an RSA or DSA key, or the key is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns a PublicKey object, which contains the object identifier (<a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.  </p>\n<p> You can also obtain the key as an <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object by referencing the PublicKey property. This property supports only RSA or DSA keys, so it returns either an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> or a <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a> object that represents the public key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_RawData\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_RawData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RawData</div>        \r\n          </div>\r\n    \r\n            <p>Gets the raw data of a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] RawData { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The raw data of the certificate as a byte array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SerialNumber\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SerialNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SerialNumber</div>        \r\n          </div>\r\n    \r\n            <p>Gets the serial number of a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SerialNumber { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The serial number of the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SignatureAlgorithm\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SignatureAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignatureAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>Gets the algorithm used to create the signature of a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.Oid SignatureAlgorithm { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a></div>\r\n                  </div>\r\n                  <p>Returns the object identifier (<a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a>) of the signature algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The object identifier (<a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a>) identifies the type of signature algorithm used by the certificate.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SubjectName\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SubjectName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubjectName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the subject distinguished name from a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x500distinguishedname\" data-linktype=\"relative-path\">X500DistinguishedName</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x500distinguishedname\" data-linktype=\"relative-path\">X500DistinguishedName</a> object that represents the name of the certificate subject.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate context is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, &quot;CN=MyName, OU=MyOrgUnit, C=US&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Thumbprint\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Thumbprint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Thumbprint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the thumbprint of a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Thumbprint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The thumbprint of the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Version\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Version_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Version</div>        \r\n          </div>\r\n    \r\n            <p>Gets the X.509 format version of a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Version { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The certificate format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, &quot;3&quot; is returned for a version 3 certificate.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetCertContentType_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetCertContentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCertContentType(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the type of certificate contained in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing data from an X.509 certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509contenttype\" data-linktype=\"relative-path\">X509ContentType</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509contenttype\" data-linktype=\"relative-path\">X509ContentType</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rawData</code> has a zero length or is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method enables you to discover the type of certificate in a file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetCertContentType_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetCertContentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCertContentType(String)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the type of certificate contained in a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509contenttype\" data-linktype=\"relative-path\">X509ContentType</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509contenttype\" data-linktype=\"relative-path\">X509ContentType</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method enables you to discover the type of certificate in a file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetNameInfo_System_Security_Cryptography_X509Certificates_X509NameType_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetNameInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNameInfo(X509NameType,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the subject and issuer names from a certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nameType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509nametype\" data-linktype=\"relative-path\">X509NameType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509nametype\" data-linktype=\"relative-path\">X509NameType</a> value for the subject.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>forIssuer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include the issuer name; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Import(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with data from a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Import (byte[] rawData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing data from an X.509 certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to take a raw byte array of an X.509 certificate and populate the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with its associated values.  </p>\n<p> Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Import(String)</div>        \r\n          </div>\r\n    \r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Import (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with the certificate the file contains.  </p>\n<p> This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Import(Byte[],SecureString,X509KeyStorageFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using data from a byte array, a password, and a key storage flag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that contains data from an X.509 certificate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyStorageFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Import(Byte[],String,X509KeyStorageFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using data from a byte array, a password, and flags for determining how to import the private key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing data from an X.509 certificate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyStorageFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to populate an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a password for the certificate represented by the byte array. The <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a> value can be used to control where and how to import the private key.  </p>\n<p> This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Import(String,SecureString,X509KeyStorageFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file, a password, and a key storage flag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyStorageFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><strong>Security Note</strong> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Import(String,String,X509KeyStorageFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file, a password, and a <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a certificate file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password required to access the X.509 certificate data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyStorageFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used populate an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file, a password, and an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a> value.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Reset\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Reset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reset()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the state of an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Reset ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to reset the state of the certificate. It also frees any resources associated with the certificate.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_ToString\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Displays an X.509 certificate in text format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The certificate information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As with all <code>ToString</code> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object to obtain precise information about the content or use the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2#System_Security_Cryptography_X509Certificates_X509Certificate2_ToString_\" data-linktype=\"relative-path\">ToString</a> method to obtain information about the certificate.  </p>\n<p> This method displays the certificate in text format.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_ToString_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Displays an X.509 certificate in text format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString (bool verbose);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>verbose</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to display the public key, private key, extensions, and so forth; <code>false</code> to display information that is similar to the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class, including thumbprint, serial number, subject and issuer names, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The certificate information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As with all <code>ToString</code> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object to obtain precise information.  </p>\n<p> This method displays the certificate in text format. If the <code>verbose</code> parameter is set to <code>true</code>, the text display includes the public key, private key, and extensions. If <code>verbose</code> is set to <code>false</code>, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Verify\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Verify_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Verify()</div>        \r\n          </div>\r\n    \r\n            <p>Performs a X.509 chain validation using basic validation policy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Verify ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the validation succeeds; <code>false</code> if the validation fails.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The certificate is unreadable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method builds a simple chain for the certificate and applies the base policy to that chain. If you need more information about a failure, validate the certificate directly using the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509chain\" data-linktype=\"relative-path\">X509Chain</a> object.  </p>\n<p> Note that the default chaining engine can be overridden using the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig\" data-linktype=\"relative-path\">CryptoConfig</a> class. On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, &quot;<a href=\"http://go.microsoft.com/fwlink/?LinkId=45286\" data-linktype=\"external\">Certificate and Certificate Revocation List (CRL) Profile</a>.&quot;</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.X509Certificates.X509Certificate2.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.X509Certificates.X509Certificate2.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Import\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Reset\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Verify\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Version\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a3c72e24-6972-84ff-0ce7-c739ca955e88\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an X.509 certificate.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography.X509Certificates/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.X509Certificates.X509Certificate2.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.X509Certificates.X509Certificate2.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.X509Certificates.X509Certificate2","System.Security.Cryptography.X509Certificates.X509Certificate2..ctor","System.Security.Cryptography.X509Certificates.X509Certificate2.Archived","System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions","System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName","System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType","System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo","System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey","System.Security.Cryptography.X509Certificates.X509Certificate2.Import","System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName","System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter","System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore","System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey","System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey","System.Security.Cryptography.X509Certificates.X509Certificate2.RawData","System.Security.Cryptography.X509Certificates.X509Certificate2.Reset","System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber","System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm","System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName","System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint","System.Security.Cryptography.X509Certificates.X509Certificate2.ToString","System.Security.Cryptography.X509Certificates.X509Certificate2.Verify","System.Security.Cryptography.X509Certificates.X509Certificate2.Version"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.X509Certificates.X509Certificate2","System::Security::Cryptography::X509Certificates::X509Certificate2","System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor","System::Security::Cryptography::X509Certificates::X509Certificate2::#ctor","System.Security.Cryptography.X509Certificates.X509Certificate2.Archived","System::Security::Cryptography::X509Certificates::X509Certificate2::Archived","System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions","System::Security::Cryptography::X509Certificates::X509Certificate2::Extensions","System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName","System::Security::Cryptography::X509Certificates::X509Certificate2::FriendlyName","System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType","System::Security::Cryptography::X509Certificates::X509Certificate2::GetCertContentType","System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo","System::Security::Cryptography::X509Certificates::X509Certificate2::GetNameInfo","System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey","System::Security::Cryptography::X509Certificates::X509Certificate2::HasPrivateKey","System.Security.Cryptography.X509Certificates.X509Certificate2.Import","System::Security::Cryptography::X509Certificates::X509Certificate2::Import","System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName","System::Security::Cryptography::X509Certificates::X509Certificate2::IssuerName","System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter","System::Security::Cryptography::X509Certificates::X509Certificate2::NotAfter","System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore","System::Security::Cryptography::X509Certificates::X509Certificate2::NotBefore","System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey","System::Security::Cryptography::X509Certificates::X509Certificate2::PrivateKey","System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey","System::Security::Cryptography::X509Certificates::X509Certificate2::PublicKey","System.Security.Cryptography.X509Certificates.X509Certificate2.RawData","System::Security::Cryptography::X509Certificates::X509Certificate2::RawData","System.Security.Cryptography.X509Certificates.X509Certificate2.Reset","System::Security::Cryptography::X509Certificates::X509Certificate2::Reset","System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber","System::Security::Cryptography::X509Certificates::X509Certificate2::SerialNumber","System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm","System::Security::Cryptography::X509Certificates::X509Certificate2::SignatureAlgorithm","System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName","System::Security::Cryptography::X509Certificates::X509Certificate2::SubjectName","System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint","System::Security::Cryptography::X509Certificates::X509Certificate2::Thumbprint","System.Security.Cryptography.X509Certificates.X509Certificate2.ToString","System::Security::Cryptography::X509Certificates::X509Certificate2::ToString","System.Security.Cryptography.X509Certificates.X509Certificate2.Verify","System::Security::Cryptography::X509Certificates::X509Certificate2::Verify","System.Security.Cryptography.X509Certificates.X509Certificate2.Version","System::Security::Cryptography::X509Certificates::X509Certificate2::Version"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a3c72e24-6972-84ff-0ce7-c739ca955e88","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"X509Certificate2 class | Microsoft Docs","_op_ogTitle":"X509Certificate2 class","description":"Represents an X.509 certificate.\n","toc_asset_id":"_splitted/System.Security.Cryptography.X509Certificates/toc.json","toc_rel":"_splitted/System.Security.Cryptography.X509Certificates/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.X509Certificates.X509Certificate2","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.x509certificates.x509certificate2","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.x509certificates.x509certificate2","fileRelativePath":"System.Security.Cryptography.X509Certificates.X509Certificate2.html"},"themesRelativePathToOutputRoot":"_themes/"}