{"content":"    \r\n    <h1 id=\"System_Net_Mime_ContentType\">\r\n      <span class=\"lang-csharp\">ContentType</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a MIME protocol Content-Type header.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class ContentType</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ContentType</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The information in the ContentType class is used to describe the data contained in an e-mail message in such a way that software that displays e-mail can present the content in an appropriate manner. ContentType is used with the <a class=\"xref\" href=\"system.net.mail.attachment\" data-linktype=\"relative-path\">Attachment</a> class to specify the type of content in the attachment.  </p>\n<p> The syntax of the Content-Type header is described in RFC 2045 Section 5.1. RFC 2046 provides detailed information about MIME media types and their parameters. These RFCs are available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType__ctor\" data-linktype=\"self-bookmark\">ContentType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new default instance of the <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType__ctor_System_String_\" data-linktype=\"self-bookmark\">ContentType(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> class using the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType_Boundary\" data-linktype=\"self-bookmark\">Boundary</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the boundary parameter included in the Content-Type header represented by this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType_CharSet\" data-linktype=\"self-bookmark\">CharSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the charset parameter included in the Content-Type header represented by this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType_MediaType\" data-linktype=\"self-bookmark\">MediaType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the media type value included in the Content-Type header represented by this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the name parameter included in the Content-Type header represented by this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType_Parameters\" data-linktype=\"self-bookmark\">Parameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dictionary that contains the parameters included in the Content-Type header represented by this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the content-type header of the specified <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> object is equal to the content-type header of this object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the hash code of the specified <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> object</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mime_ContentType_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representation of this <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType__ctor\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentType()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new default instance of the <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ContentType ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.net.mime.contenttype#System_Net_Mime_ContentType_MediaType_\" data-linktype=\"relative-path\">MediaType</a> property to <code>&quot;application/octet-stream&quot;</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call this constructor.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#15\">   // The following example sends a summary of a log file as the message\n   // and the log as an e-mail attachment.\n   static void SendNamedErrorLog( String^ server, String^ recipientList )\n   {\n      \n      // Create a message from logMailer@contoso.com to recipientList.\n      MailMessage^ message = gcnew MailMessage( L&quot;logMailer@contoso.com&quot;,recipientList );\n      message-&gt;Subject = L&quot;Error Log report&quot;;\n      String^ fileName = L&quot;log.txt&quot;;\n      \n      // Get the file stream for the error log.\n      // Requires the System.IO namespace.\n      FileStream^ fs = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n      StreamReader^ s = gcnew StreamReader( fs );\n      int errors = 0;\n      while ( s-&gt;ReadLine() != nullptr )\n      {\n         \n         // Process each line from the log file here.\n         errors++;\n      }\n\n      message-&gt;Body = String::Format( L&quot;{0} errors in log as of {1}&quot;, errors, DateTime::Now );\n      \n      // Close the stream reader. This also closes the file.\n      s-&gt;Close();\n      \n      // Re-open the file at the beginning to make the attachment.\n      fs = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n      \n      // Make a ContentType indicating that the log data\n      // that is attached is plain text and is named.\n      ContentType^ ct = gcnew ContentType;\n      ct-&gt;MediaType = MediaTypeNames::Text::Plain;\n      ct-&gt;Name = String::Format( L&quot;log{0}.txt&quot;, DateTime::Now );\n      \n      // Create the attachment.\n      Attachment^ data = gcnew Attachment( fs,ct );\n      \n      // Add the attachment to the message.\n      message-&gt;Attachments-&gt;Add( data );\n      \n      // Send the message.\n      // Include credentials if the server requires them.\n      SmtpClient^ client = gcnew SmtpClient( server );\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n      data-&gt;~Attachment();\n      client-&gt;~SmtpClient();\n      \n      // Close the log file.\n      fs-&gt;Close();\n      return;\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#15\">\t\t// The following example sends a summary of a log file as the message\n\t\t// and the log as an e-mail attachment.\n\t\tpublic static void SendNamedErrorLog(string server, string recipientList)\n\t\t{\n\t\t\t// Create a message from logMailer@contoso.com to recipientList.\n\t\t\tMailMessage message = new MailMessage(\n\t\t\t   &quot;logMailer@contoso.com&quot;, recipientList);\n\n\t\t\tmessage.Subject = &quot;Error Log report&quot;;\n\t\t\tstring fileName = &quot;log.txt&quot;;\n\t\t\t// Get the file stream for the error log.\n\t\t\t// Requires the System.IO namespace.\n\t\t\tFileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\t\tStreamReader s = new StreamReader(fs);\n\t\t\tint errors = 0;\n\t\t\twhile (s.ReadLine() != null)\n\t\t\t{\n\t\t\t\t// Process each line from the log file here.\n\t\t\t\terrors++;\n\t\t\t}\n\t\t\t// The e-mail message summarizes the data found in the log.\n\t\t\tmessage.Body = String.Format(&quot;{0} errors in log as of {1}&quot;,\n\t\t\t\terrors, DateTime.Now);\n\t\t\t// Close the stream reader. This also closes the file.\n\t\t\ts.Close();\n\t\t\t// Re-open the file at the beginning to make the attachment.\n\t\t\tfs = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\t\t// Make a ContentType indicating that the log data\n\t\t\t// that is attached is plain text and is named.\n\t\t\tContentType ct = new ContentType();\n\t\t\tct.MediaType = MediaTypeNames.Text.Plain;\n\t\t\tct.Name = &quot;log&quot; + DateTime.Now.ToString() + &quot;.txt&quot;;\n\t\t\t// Create the attachment.\n\t\t\tAttachment data = new Attachment(fs, ct);\n\t\t\t// Add the attachment to the message.\n\t\t\tmessage.Attachments.Add(data);\n\t\t\t// Send the message.\n\t\t\t// Include credentials if the server requires them.\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n\t    try {\n        client.Send(message);\n      }\n      catch (Exception ex) {\n        Console.WriteLine(&quot;Exception caught in SendNamedErrorLog: {0}&quot;, \n                    ex.ToString() );\n      }\n\t\t\tdata.Dispose();\n\t\t\t// Close the log file.\n\t\t\tfs.Close();\n\t\t\treturn;\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentType(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> class using the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ContentType (string contentType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>contentType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, for example, <code>&quot;text/plain; charset=us-ascii&quot;</code>, that contains the MIME media type, subtype, and optional parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>contentType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>contentType</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>contentType</code> is in a form that cannot be parsed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The syntax of the <code>contentType</code> string is described in RFC 2045 Section 5.1 available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call this constructor.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#15\">   // The following example sends a summary of a log file as the message\n   // and the log as an e-mail attachment.\n   static void SendNamedErrorLog( String^ server, String^ recipientList )\n   {\n      \n      // Create a message from logMailer@contoso.com to recipientList.\n      MailMessage^ message = gcnew MailMessage( L&quot;logMailer@contoso.com&quot;,recipientList );\n      message-&gt;Subject = L&quot;Error Log report&quot;;\n      String^ fileName = L&quot;log.txt&quot;;\n      \n      // Get the file stream for the error log.\n      // Requires the System.IO namespace.\n      FileStream^ fs = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n      StreamReader^ s = gcnew StreamReader( fs );\n      int errors = 0;\n      while ( s-&gt;ReadLine() != nullptr )\n      {\n         \n         // Process each line from the log file here.\n         errors++;\n      }\n\n      message-&gt;Body = String::Format( L&quot;{0} errors in log as of {1}&quot;, errors, DateTime::Now );\n      \n      // Close the stream reader. This also closes the file.\n      s-&gt;Close();\n      \n      // Re-open the file at the beginning to make the attachment.\n      fs = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n      \n      // Make a ContentType indicating that the log data\n      // that is attached is plain text and is named.\n      ContentType^ ct = gcnew ContentType;\n      ct-&gt;MediaType = MediaTypeNames::Text::Plain;\n      ct-&gt;Name = String::Format( L&quot;log{0}.txt&quot;, DateTime::Now );\n      \n      // Create the attachment.\n      Attachment^ data = gcnew Attachment( fs,ct );\n      \n      // Add the attachment to the message.\n      message-&gt;Attachments-&gt;Add( data );\n      \n      // Send the message.\n      // Include credentials if the server requires them.\n      SmtpClient^ client = gcnew SmtpClient( server );\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n      data-&gt;~Attachment();\n      client-&gt;~SmtpClient();\n      \n      // Close the log file.\n      fs-&gt;Close();\n      return;\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#15\">\t\t// The following example sends a summary of a log file as the message\n\t\t// and the log as an e-mail attachment.\n\t\tpublic static void SendNamedErrorLog(string server, string recipientList)\n\t\t{\n\t\t\t// Create a message from logMailer@contoso.com to recipientList.\n\t\t\tMailMessage message = new MailMessage(\n\t\t\t   &quot;logMailer@contoso.com&quot;, recipientList);\n\n\t\t\tmessage.Subject = &quot;Error Log report&quot;;\n\t\t\tstring fileName = &quot;log.txt&quot;;\n\t\t\t// Get the file stream for the error log.\n\t\t\t// Requires the System.IO namespace.\n\t\t\tFileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\t\tStreamReader s = new StreamReader(fs);\n\t\t\tint errors = 0;\n\t\t\twhile (s.ReadLine() != null)\n\t\t\t{\n\t\t\t\t// Process each line from the log file here.\n\t\t\t\terrors++;\n\t\t\t}\n\t\t\t// The e-mail message summarizes the data found in the log.\n\t\t\tmessage.Body = String.Format(&quot;{0} errors in log as of {1}&quot;,\n\t\t\t\terrors, DateTime.Now);\n\t\t\t// Close the stream reader. This also closes the file.\n\t\t\ts.Close();\n\t\t\t// Re-open the file at the beginning to make the attachment.\n\t\t\tfs = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\t\t// Make a ContentType indicating that the log data\n\t\t\t// that is attached is plain text and is named.\n\t\t\tContentType ct = new ContentType();\n\t\t\tct.MediaType = MediaTypeNames.Text.Plain;\n\t\t\tct.Name = &quot;log&quot; + DateTime.Now.ToString() + &quot;.txt&quot;;\n\t\t\t// Create the attachment.\n\t\t\tAttachment data = new Attachment(fs, ct);\n\t\t\t// Add the attachment to the message.\n\t\t\tmessage.Attachments.Add(data);\n\t\t\t// Send the message.\n\t\t\t// Include credentials if the server requires them.\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n\t    try {\n        client.Send(message);\n      }\n      catch (Exception ex) {\n        Console.WriteLine(&quot;Exception caught in SendNamedErrorLog: {0}&quot;, \n                    ex.ToString() );\n      }\n\t\t\tdata.Dispose();\n\t\t\t// Close the log file.\n\t\t\tfs.Close();\n\t\t\treturn;\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType_Boundary\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType_Boundary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Boundary</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the boundary parameter included in the Content-Type header represented by this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Boundary { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the value associated with the boundary parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the following example of a Content-Type header, the value of the Boundary parameter is &quot;<code>-----boundary---0</code>&quot;.  </p>\n<p> <code>content-type: multipart/mixed; boundary=-----boundary---0</code>  </p>\n<p> Set this property to <code>null</code> or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> to remove the boundary information from the header.  </p>\n<p> The syntax of the Content-Type header is described in RFC 2045 Section 5.1. An in-depth discussion of the boundary parameter is contained in RFC 2046 Section 5.1.1. These RFCs are available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of the Boundary property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#5\">   static void CreateMessageWithMultipleViews( String^ server, String^ recipients )\n   {\n      \n      // Create a message and set up the recipients.\n      MailMessage^ message = gcnew MailMessage( L&quot;jane@contoso.com&quot;,recipients,L&quot;This e-mail message has multiple views.&quot;,L&quot;This is some plain text.&quot; );\n      \n      // Construct the alternate body as HTML.\n      String^ body = L&quot;&lt;!DOCTYPE HTML PUBLIC \\&quot;-//W3C//DTD HTML 4.0 Transitional//EN\\&quot;&gt;&quot;;\n      body = String::Concat( body, L&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;META http-equiv=Content-Type content=\\&quot;text/html; charset=iso-8859-1\\&quot;&gt;&quot; );\n      body = String::Concat( body, L&quot;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV&gt;&lt;FONT face=Arial color=#ff0000 size=2&gt;this is some HTML text&quot; );\n      body = String::Concat( body, L&quot;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot; );\n      \n      // Add the alternate body to the message.\n      AlternateView^ alternate = AlternateView::CreateAlternateViewFromString(body);\n      message-&gt;AlternateViews-&gt;Add(alternate);\n\n      // Send the message.\n      SmtpClient^ client = gcnew SmtpClient( server );\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n      \n      // Display the values in the ContentType for the attachment.\n      ContentType^ c = alternate-&gt;ContentType;\n      Console::WriteLine( L&quot;Content type&quot; );\n      Console::WriteLine( c );\n      Console::WriteLine( L&quot;Boundary {0}&quot;, c-&gt;Boundary );\n      Console::WriteLine( L&quot;CharSet {0}&quot;, c-&gt;CharSet );\n      Console::WriteLine( L&quot;MediaType {0}&quot;, c-&gt;MediaType );\n      Console::WriteLine( L&quot;Name {0}&quot;, c-&gt;Name );\n      Console::WriteLine( L&quot;Parameters: {0}&quot;, c-&gt;Parameters-&gt;Count );\n      IEnumerator^ myEnum = c-&gt;Parameters-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         DictionaryEntry^ d = safe_cast&lt;DictionaryEntry^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( L&quot;{0} = {1}&quot;, d-&gt;Key, d-&gt;Value );\n      }\n\n      Console::WriteLine();\n      alternate-&gt;~AlternateView();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#5\">\t\tpublic static void CreateMessageWithMultipleViews(string server, string recipients)\n\t\t{\n\t\t\t// Create a message and set up the recipients.\n\t\t\tMailMessage message = new MailMessage(\n\t\t\t\t&quot;jane@contoso.com&quot;,\n\t\t\t\trecipients,\n\t\t\t\t&quot;This e-mail message has multiple views.&quot;,\n\t\t\t\t&quot;This is some plain text.&quot;);\n\n\t\t\t// Construct the alternate body as HTML.\n\t\t\tstring body = &quot;&lt;!DOCTYPE HTML PUBLIC \\&quot;-//W3C//DTD HTML 4.0 Transitional//EN\\&quot;&gt;&quot;;\n\t\t\tbody += &quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;META http-equiv=Content-Type content=\\&quot;text/html; charset=iso-8859-1\\&quot;&gt;&quot;;\n\t\t\tbody += &quot;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV&gt;&lt;FONT face=Arial color=#ff0000 size=2&gt;this is some HTML text&quot;;\n\t\t\tbody += &quot;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n\n\t\t\tContentType mimeType = new System.Net.Mime.ContentType(&quot;text/html&quot;);\n\t\t\t// Add the alternate body to the message.\n\t\t\t\n\t\t\tAlternateView alternate = AlternateView.CreateAlternateViewFromString(body, mimeType);\n\t\t\tmessage.AlternateViews.Add(alternate);\n\n\t\t\t// Send the message.\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateMessageWithMultipleViews(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n      }\n\t\t\t// Display the values in the ContentType for the attachment.\n\t\t\tContentType c = alternate.ContentType;\n\t\t\tConsole.WriteLine(&quot;Content type&quot;);\n\t\t\tConsole.WriteLine(c.ToString());\n\t\t\tConsole.WriteLine(&quot;Boundary {0}&quot;, c.Boundary);\n\t\t\tConsole.WriteLine(&quot;CharSet {0}&quot;, c.CharSet);\n\t\t\tConsole.WriteLine(&quot;MediaType {0}&quot;, c.MediaType);\n\t\t\tConsole.WriteLine(&quot;Name {0}&quot;, c.Name);\n\t\t\tConsole.WriteLine(&quot;Parameters: {0}&quot;, c.Parameters.Count);\n\t\t\tforeach (DictionaryEntry d in c.Parameters)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;{0} = {1}&quot;, d.Key, d.Value);\n\t\t\t}\n\t\t\tConsole.WriteLine();\n\t\t\talternate.Dispose();\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType_CharSet\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType_CharSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CharSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the charset parameter included in the Content-Type header represented by this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string CharSet { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the value associated with the charset parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the following example of a Content-Type header, the value of the CharSet property is &quot;<code>us-ascii</code>&quot;.  </p>\n<p> <code>content-type: application/x-myType; charset=us-ascii</code>  </p>\n<p> Set this property to <code>null</code> or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> to remove the charset information from the header.  </p>\n<p> A grammar that details the syntax of the Content-Type header is described in RFC 2045 Section 5.1. An in-depth discussion of the charset parameter is contained in RFC 2046 Section 4.1.2. These RFCs are available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of the property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#5\">   static void CreateMessageWithMultipleViews( String^ server, String^ recipients )\n   {\n      \n      // Create a message and set up the recipients.\n      MailMessage^ message = gcnew MailMessage( L&quot;jane@contoso.com&quot;,recipients,L&quot;This e-mail message has multiple views.&quot;,L&quot;This is some plain text.&quot; );\n      \n      // Construct the alternate body as HTML.\n      String^ body = L&quot;&lt;!DOCTYPE HTML PUBLIC \\&quot;-//W3C//DTD HTML 4.0 Transitional//EN\\&quot;&gt;&quot;;\n      body = String::Concat( body, L&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;META http-equiv=Content-Type content=\\&quot;text/html; charset=iso-8859-1\\&quot;&gt;&quot; );\n      body = String::Concat( body, L&quot;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV&gt;&lt;FONT face=Arial color=#ff0000 size=2&gt;this is some HTML text&quot; );\n      body = String::Concat( body, L&quot;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot; );\n      \n      // Add the alternate body to the message.\n      AlternateView^ alternate = AlternateView::CreateAlternateViewFromString(body);\n      message-&gt;AlternateViews-&gt;Add(alternate);\n\n      // Send the message.\n      SmtpClient^ client = gcnew SmtpClient( server );\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n      \n      // Display the values in the ContentType for the attachment.\n      ContentType^ c = alternate-&gt;ContentType;\n      Console::WriteLine( L&quot;Content type&quot; );\n      Console::WriteLine( c );\n      Console::WriteLine( L&quot;Boundary {0}&quot;, c-&gt;Boundary );\n      Console::WriteLine( L&quot;CharSet {0}&quot;, c-&gt;CharSet );\n      Console::WriteLine( L&quot;MediaType {0}&quot;, c-&gt;MediaType );\n      Console::WriteLine( L&quot;Name {0}&quot;, c-&gt;Name );\n      Console::WriteLine( L&quot;Parameters: {0}&quot;, c-&gt;Parameters-&gt;Count );\n      IEnumerator^ myEnum = c-&gt;Parameters-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         DictionaryEntry^ d = safe_cast&lt;DictionaryEntry^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( L&quot;{0} = {1}&quot;, d-&gt;Key, d-&gt;Value );\n      }\n\n      Console::WriteLine();\n      alternate-&gt;~AlternateView();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#5\">\t\tpublic static void CreateMessageWithMultipleViews(string server, string recipients)\n\t\t{\n\t\t\t// Create a message and set up the recipients.\n\t\t\tMailMessage message = new MailMessage(\n\t\t\t\t&quot;jane@contoso.com&quot;,\n\t\t\t\trecipients,\n\t\t\t\t&quot;This e-mail message has multiple views.&quot;,\n\t\t\t\t&quot;This is some plain text.&quot;);\n\n\t\t\t// Construct the alternate body as HTML.\n\t\t\tstring body = &quot;&lt;!DOCTYPE HTML PUBLIC \\&quot;-//W3C//DTD HTML 4.0 Transitional//EN\\&quot;&gt;&quot;;\n\t\t\tbody += &quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;META http-equiv=Content-Type content=\\&quot;text/html; charset=iso-8859-1\\&quot;&gt;&quot;;\n\t\t\tbody += &quot;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV&gt;&lt;FONT face=Arial color=#ff0000 size=2&gt;this is some HTML text&quot;;\n\t\t\tbody += &quot;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n\n\t\t\tContentType mimeType = new System.Net.Mime.ContentType(&quot;text/html&quot;);\n\t\t\t// Add the alternate body to the message.\n\t\t\t\n\t\t\tAlternateView alternate = AlternateView.CreateAlternateViewFromString(body, mimeType);\n\t\t\tmessage.AlternateViews.Add(alternate);\n\n\t\t\t// Send the message.\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateMessageWithMultipleViews(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n      }\n\t\t\t// Display the values in the ContentType for the attachment.\n\t\t\tContentType c = alternate.ContentType;\n\t\t\tConsole.WriteLine(&quot;Content type&quot;);\n\t\t\tConsole.WriteLine(c.ToString());\n\t\t\tConsole.WriteLine(&quot;Boundary {0}&quot;, c.Boundary);\n\t\t\tConsole.WriteLine(&quot;CharSet {0}&quot;, c.CharSet);\n\t\t\tConsole.WriteLine(&quot;MediaType {0}&quot;, c.MediaType);\n\t\t\tConsole.WriteLine(&quot;Name {0}&quot;, c.Name);\n\t\t\tConsole.WriteLine(&quot;Parameters: {0}&quot;, c.Parameters.Count);\n\t\t\tforeach (DictionaryEntry d in c.Parameters)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;{0} = {1}&quot;, d.Key, d.Value);\n\t\t\t}\n\t\t\tConsole.WriteLine();\n\t\t\talternate.Dispose();\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType_MediaType\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType_MediaType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MediaType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the media type value included in the Content-Type header represented by this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MediaType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the media type and subtype value. This value does not include the semicolon (;) separator that follows the subtype.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is in a form that cannot be parsed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the following example of a Content-Type header, the value of the MediaType property is <code>&quot;application/x-myType&quot;</code>.  </p>\n<p> <code>content-type: application/x-myType; name=data.xyz</code>  </p>\n<p> Set this property to <code>null</code> or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> to remove the name information from the header.  </p>\n<p> The syntax of the Content-Type header is described in RFC 2045 Section 5.1. RFC 2046 provides detailed information on MIME media types. These RFCs are available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the value of this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#13\">   static void CreateMessageInlineAttachment2( String^ server, String^ textMessage )\n   {\n      \n      // Create a message and set up the recipients.\n      MailMessage^ message = gcnew MailMessage( L&quot;jane@contoso.com&quot;,L&quot;ben@contoso.com&quot;,L&quot;A text message for you.&quot;,L&quot;Message: &quot; );\n      \n      // Attach the message string to this e-mail message.\n      Attachment^ data = gcnew Attachment( textMessage );\n      \n      // Send textMessage as part of the e-mail body.\n      message-&gt;Attachments-&gt;Add( data );\n      ContentType^ content = data-&gt;ContentType;\n      content-&gt;MediaType = MediaTypeNames::Text::Plain;\n      \n      //Send the message.\n      // Include credentials if the server requires them.\n      SmtpClient^ client = gcnew SmtpClient( server );\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n      data-&gt;~Attachment();\n      client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#13\">\t\tpublic static void CreateMessageInlineAttachment2(string server, string\n\t\ttextMessage)\n\t\t{\n\t\t\t// Create a message and set up the recipients.\n\t\t\tMailMessage message = new MailMessage(\n\t\t\t   &quot;jane@contoso.com&quot;,\n\t\t\t   &quot;ben@contoso.com&quot;,\n\t\t\t   &quot;A text message for you.&quot;,\n\t\t\t   &quot;Message: &quot;);\n\n\t\t\t// Attach the message string to this e-mail message.\n\t\t\tAttachment data = new Attachment(textMessage);\n\t\t\t// Send textMessage as part of the e-mail body.\n\t\t\tmessage.Attachments.Add(data);\n\t\t\tContentType content = data.ContentType;\n\t\t\tcontent.MediaType = MediaTypeNames.Text.Plain;\n\t\t\t//Send the message.\n\t\t\t// Include credentials if the server requires them.\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n\t    try { \n        client.Send(message);\n      }\n      catch (Exception ex) {\n        Console.WriteLine(&quot;Exception caught in CreateMessageInlineAttachment2: {0}&quot;, \n                    ex.ToString() );\n      }\n\t\t\tdata.Dispose();\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType_Name\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the name parameter included in the Content-Type header represented by this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the value associated with the name parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the following example of a Content-Type header, the value of the Name property is <code>&quot;data.xyz&quot;</code>.  </p>\n<p> <code>content-type: application/x-myType; name=data.xyz</code>  </p>\n<p> A grammar that details the syntax of the Content-Type header is described in RFC 2045 Section 5.1, available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.  </p>\n<p> When specifying content for a <a class=\"xref\" href=\"system.net.mail.attachment\" data-linktype=\"relative-path\">Attachment</a> as a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, you can use Name to set the name of the file that stores the content on the recipient&#39;s system.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the value of the property to specify a name for a file being attached as a stream.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#15\">   // The following example sends a summary of a log file as the message\n   // and the log as an e-mail attachment.\n   static void SendNamedErrorLog( String^ server, String^ recipientList )\n   {\n      \n      // Create a message from logMailer@contoso.com to recipientList.\n      MailMessage^ message = gcnew MailMessage( L&quot;logMailer@contoso.com&quot;,recipientList );\n      message-&gt;Subject = L&quot;Error Log report&quot;;\n      String^ fileName = L&quot;log.txt&quot;;\n      \n      // Get the file stream for the error log.\n      // Requires the System.IO namespace.\n      FileStream^ fs = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n      StreamReader^ s = gcnew StreamReader( fs );\n      int errors = 0;\n      while ( s-&gt;ReadLine() != nullptr )\n      {\n         \n         // Process each line from the log file here.\n         errors++;\n      }\n\n      message-&gt;Body = String::Format( L&quot;{0} errors in log as of {1}&quot;, errors, DateTime::Now );\n      \n      // Close the stream reader. This also closes the file.\n      s-&gt;Close();\n      \n      // Re-open the file at the beginning to make the attachment.\n      fs = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n      \n      // Make a ContentType indicating that the log data\n      // that is attached is plain text and is named.\n      ContentType^ ct = gcnew ContentType;\n      ct-&gt;MediaType = MediaTypeNames::Text::Plain;\n      ct-&gt;Name = String::Format( L&quot;log{0}.txt&quot;, DateTime::Now );\n      \n      // Create the attachment.\n      Attachment^ data = gcnew Attachment( fs,ct );\n      \n      // Add the attachment to the message.\n      message-&gt;Attachments-&gt;Add( data );\n      \n      // Send the message.\n      // Include credentials if the server requires them.\n      SmtpClient^ client = gcnew SmtpClient( server );\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n      data-&gt;~Attachment();\n      client-&gt;~SmtpClient();\n      \n      // Close the log file.\n      fs-&gt;Close();\n      return;\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#15\">\t\t// The following example sends a summary of a log file as the message\n\t\t// and the log as an e-mail attachment.\n\t\tpublic static void SendNamedErrorLog(string server, string recipientList)\n\t\t{\n\t\t\t// Create a message from logMailer@contoso.com to recipientList.\n\t\t\tMailMessage message = new MailMessage(\n\t\t\t   &quot;logMailer@contoso.com&quot;, recipientList);\n\n\t\t\tmessage.Subject = &quot;Error Log report&quot;;\n\t\t\tstring fileName = &quot;log.txt&quot;;\n\t\t\t// Get the file stream for the error log.\n\t\t\t// Requires the System.IO namespace.\n\t\t\tFileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\t\tStreamReader s = new StreamReader(fs);\n\t\t\tint errors = 0;\n\t\t\twhile (s.ReadLine() != null)\n\t\t\t{\n\t\t\t\t// Process each line from the log file here.\n\t\t\t\terrors++;\n\t\t\t}\n\t\t\t// The e-mail message summarizes the data found in the log.\n\t\t\tmessage.Body = String.Format(&quot;{0} errors in log as of {1}&quot;,\n\t\t\t\terrors, DateTime.Now);\n\t\t\t// Close the stream reader. This also closes the file.\n\t\t\ts.Close();\n\t\t\t// Re-open the file at the beginning to make the attachment.\n\t\t\tfs = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\t\t// Make a ContentType indicating that the log data\n\t\t\t// that is attached is plain text and is named.\n\t\t\tContentType ct = new ContentType();\n\t\t\tct.MediaType = MediaTypeNames.Text.Plain;\n\t\t\tct.Name = &quot;log&quot; + DateTime.Now.ToString() + &quot;.txt&quot;;\n\t\t\t// Create the attachment.\n\t\t\tAttachment data = new Attachment(fs, ct);\n\t\t\t// Add the attachment to the message.\n\t\t\tmessage.Attachments.Add(data);\n\t\t\t// Send the message.\n\t\t\t// Include credentials if the server requires them.\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n\t    try {\n        client.Send(message);\n      }\n      catch (Exception ex) {\n        Console.WriteLine(&quot;Exception caught in SendNamedErrorLog: {0}&quot;, \n                    ex.ToString() );\n      }\n\t\t\tdata.Dispose();\n\t\t\t// Close the log file.\n\t\t\tfs.Close();\n\t\t\treturn;\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType_Parameters\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType_Parameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dictionary that contains the parameters included in the Content-Type header represented by this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Specialized.StringDictionary Parameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a></div>\r\n                  </div>\r\n                  <p>A writable <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> that contains name and value pairs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can set the parameters by specifying the entire Content-Header value when constructing a <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> object or you can add parameters to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> returned by the Parameters property.  </p>\n<p> When adding a parameter entry to the dictionary, the name of the parameter is the entry&#39;s key and the value of the parameter is the entry&#39;s value.  </p>\n<p> A grammar that details the syntax of the Content-Type header is described in RFC 2045 Section 5.1. RFC 2046 provides detailed information on MIME media types and their associated parameters. These RFCs are available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values in the dictionary returned by this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#5\">   static void CreateMessageWithMultipleViews( String^ server, String^ recipients )\n   {\n      \n      // Create a message and set up the recipients.\n      MailMessage^ message = gcnew MailMessage( L&quot;jane@contoso.com&quot;,recipients,L&quot;This e-mail message has multiple views.&quot;,L&quot;This is some plain text.&quot; );\n      \n      // Construct the alternate body as HTML.\n      String^ body = L&quot;&lt;!DOCTYPE HTML PUBLIC \\&quot;-//W3C//DTD HTML 4.0 Transitional//EN\\&quot;&gt;&quot;;\n      body = String::Concat( body, L&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;META http-equiv=Content-Type content=\\&quot;text/html; charset=iso-8859-1\\&quot;&gt;&quot; );\n      body = String::Concat( body, L&quot;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV&gt;&lt;FONT face=Arial color=#ff0000 size=2&gt;this is some HTML text&quot; );\n      body = String::Concat( body, L&quot;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot; );\n      \n      // Add the alternate body to the message.\n      AlternateView^ alternate = AlternateView::CreateAlternateViewFromString(body);\n      message-&gt;AlternateViews-&gt;Add(alternate);\n\n      // Send the message.\n      SmtpClient^ client = gcnew SmtpClient( server );\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n      \n      // Display the values in the ContentType for the attachment.\n      ContentType^ c = alternate-&gt;ContentType;\n      Console::WriteLine( L&quot;Content type&quot; );\n      Console::WriteLine( c );\n      Console::WriteLine( L&quot;Boundary {0}&quot;, c-&gt;Boundary );\n      Console::WriteLine( L&quot;CharSet {0}&quot;, c-&gt;CharSet );\n      Console::WriteLine( L&quot;MediaType {0}&quot;, c-&gt;MediaType );\n      Console::WriteLine( L&quot;Name {0}&quot;, c-&gt;Name );\n      Console::WriteLine( L&quot;Parameters: {0}&quot;, c-&gt;Parameters-&gt;Count );\n      IEnumerator^ myEnum = c-&gt;Parameters-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         DictionaryEntry^ d = safe_cast&lt;DictionaryEntry^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( L&quot;{0} = {1}&quot;, d-&gt;Key, d-&gt;Value );\n      }\n\n      Console::WriteLine();\n      alternate-&gt;~AlternateView();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#5\">\t\tpublic static void CreateMessageWithMultipleViews(string server, string recipients)\n\t\t{\n\t\t\t// Create a message and set up the recipients.\n\t\t\tMailMessage message = new MailMessage(\n\t\t\t\t&quot;jane@contoso.com&quot;,\n\t\t\t\trecipients,\n\t\t\t\t&quot;This e-mail message has multiple views.&quot;,\n\t\t\t\t&quot;This is some plain text.&quot;);\n\n\t\t\t// Construct the alternate body as HTML.\n\t\t\tstring body = &quot;&lt;!DOCTYPE HTML PUBLIC \\&quot;-//W3C//DTD HTML 4.0 Transitional//EN\\&quot;&gt;&quot;;\n\t\t\tbody += &quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;META http-equiv=Content-Type content=\\&quot;text/html; charset=iso-8859-1\\&quot;&gt;&quot;;\n\t\t\tbody += &quot;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV&gt;&lt;FONT face=Arial color=#ff0000 size=2&gt;this is some HTML text&quot;;\n\t\t\tbody += &quot;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n\n\t\t\tContentType mimeType = new System.Net.Mime.ContentType(&quot;text/html&quot;);\n\t\t\t// Add the alternate body to the message.\n\t\t\t\n\t\t\tAlternateView alternate = AlternateView.CreateAlternateViewFromString(body, mimeType);\n\t\t\tmessage.AlternateViews.Add(alternate);\n\n\t\t\t// Send the message.\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateMessageWithMultipleViews(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n      }\n\t\t\t// Display the values in the ContentType for the attachment.\n\t\t\tContentType c = alternate.ContentType;\n\t\t\tConsole.WriteLine(&quot;Content type&quot;);\n\t\t\tConsole.WriteLine(c.ToString());\n\t\t\tConsole.WriteLine(&quot;Boundary {0}&quot;, c.Boundary);\n\t\t\tConsole.WriteLine(&quot;CharSet {0}&quot;, c.CharSet);\n\t\t\tConsole.WriteLine(&quot;MediaType {0}&quot;, c.MediaType);\n\t\t\tConsole.WriteLine(&quot;Name {0}&quot;, c.Name);\n\t\t\tConsole.WriteLine(&quot;Parameters: {0}&quot;, c.Parameters.Count);\n\t\t\tforeach (DictionaryEntry d in c.Parameters)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;{0} = {1}&quot;, d.Key, d.Value);\n\t\t\t}\n\t\t\tConsole.WriteLine();\n\t\t\talternate.Dispose();\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the content-type header of the specified <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> object is equal to the content-type header of this object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object rparam);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rparam</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> object to compare with this object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the content-type headers are the same; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType_GetHashCode\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Determines the hash code of the specified <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> object</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer hash value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mime_ContentType_ToString\">\r\n    \r\n            <a id=\"System_Net_Mime_ContentType_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representation of this <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the current settings for this <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the ToString method contains the string used to create this <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a>, if one was specified and no property values have been changed. If no string was specified, or one or more property values have changed since this <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a> was created, the value of ToString is a string in the format of a Content-Type header that is composed using the current property values. The string does not include the <code>&quot;Content-type:&quot;</code> prefix.  </p>\n<p> The syntax of the Content-Type header is described in RFC 2045 Section 5.1, available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the string representation of a <a class=\"xref\" href=\"system.net.mime.contenttype\" data-linktype=\"relative-path\">ContentType</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#13\">   static void CreateMessageInlineAttachment2( String^ server, String^ textMessage )\n   {\n      \n      // Create a message and set up the recipients.\n      MailMessage^ message = gcnew MailMessage( L&quot;jane@contoso.com&quot;,L&quot;ben@contoso.com&quot;,L&quot;A text message for you.&quot;,L&quot;Message: &quot; );\n      \n      // Attach the message string to this e-mail message.\n      Attachment^ data = gcnew Attachment( textMessage );\n      \n      // Send textMessage as part of the e-mail body.\n      message-&gt;Attachments-&gt;Add( data );\n      ContentType^ content = data-&gt;ContentType;\n      content-&gt;MediaType = MediaTypeNames::Text::Plain;\n      \n      //Send the message.\n      // Include credentials if the server requires them.\n      SmtpClient^ client = gcnew SmtpClient( server );\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n      data-&gt;~Attachment();\n      client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#13\">\t\tpublic static void CreateMessageInlineAttachment2(string server, string\n\t\ttextMessage)\n\t\t{\n\t\t\t// Create a message and set up the recipients.\n\t\t\tMailMessage message = new MailMessage(\n\t\t\t   &quot;jane@contoso.com&quot;,\n\t\t\t   &quot;ben@contoso.com&quot;,\n\t\t\t   &quot;A text message for you.&quot;,\n\t\t\t   &quot;Message: &quot;);\n\n\t\t\t// Attach the message string to this e-mail message.\n\t\t\tAttachment data = new Attachment(textMessage);\n\t\t\t// Send textMessage as part of the e-mail body.\n\t\t\tmessage.Attachments.Add(data);\n\t\t\tContentType content = data.ContentType;\n\t\t\tcontent.MediaType = MediaTypeNames.Text.Plain;\n\t\t\t//Send the message.\n\t\t\t// Include credentials if the server requires them.\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n\t    try { \n        client.Send(message);\n      }\n      catch (Exception ex) {\n        Console.WriteLine(&quot;Exception caught in CreateMessageInlineAttachment2: {0}&quot;, \n                    ex.ToString() );\n      }\n\t\t\tdata.Dispose();\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Mime.ContentType.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Mime.ContentType.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType.Boundary\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType.CharSet\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType.Equals\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType.MediaType\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType.Name\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType.Parameters\">\r\n<meta name=\"APIName\" content=\"System.Net.Mime.ContentType.ToString\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8df08c40-49f6-0721-a202-87ccfc586786\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a MIME protocol Content-Type header.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.Mime/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Mime.ContentType\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Mime.ContentType.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Mime.ContentType.yml","open_to_public_contributors":true,"api_name":["System.Net.Mime.ContentType","System.Net.Mime.ContentType..ctor","System.Net.Mime.ContentType.Boundary","System.Net.Mime.ContentType.CharSet","System.Net.Mime.ContentType.Equals","System.Net.Mime.ContentType.GetHashCode","System.Net.Mime.ContentType.MediaType","System.Net.Mime.ContentType.Name","System.Net.Mime.ContentType.Parameters","System.Net.Mime.ContentType.ToString"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Mime.ContentType","System::Net::Mime::ContentType","System.Net.Mime.ContentType.#ctor","System::Net::Mime::ContentType::#ctor","System.Net.Mime.ContentType.Boundary","System::Net::Mime::ContentType::Boundary","System.Net.Mime.ContentType.CharSet","System::Net::Mime::ContentType::CharSet","System.Net.Mime.ContentType.Equals","System::Net::Mime::ContentType::Equals","System.Net.Mime.ContentType.GetHashCode","System::Net::Mime::ContentType::GetHashCode","System.Net.Mime.ContentType.MediaType","System::Net::Mime::ContentType::MediaType","System.Net.Mime.ContentType.Name","System::Net::Mime::ContentType::Name","System.Net.Mime.ContentType.Parameters","System::Net::Mime::ContentType::Parameters","System.Net.Mime.ContentType.ToString","System::Net::Mime::ContentType::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8df08c40-49f6-0721-a202-87ccfc586786","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.Mime/ContentType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ContentType class | Microsoft Docs","_op_ogTitle":"ContentType class","description":"Represents a MIME protocol Content-Type header.\n","toc_asset_id":"_splitted/System.Net.Mime/toc.json","toc_rel":"_splitted/System.Net.Mime/toc.json","source_url":"","ms.assetid":"System.Net.Mime.ContentType","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.mime.contenttype","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.mime.contenttype","fileRelativePath":"System.Net.Mime.ContentType.html"},"themesRelativePathToOutputRoot":"_themes/"}