{"content":"    \r\n    <h1 id=\"System_Globalization_CompareInfo\">\r\n      <span class=\"lang-csharp\">CompareInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Implements a set of methods for culture-sensitive string comparisons.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class CompareInfo : System.Runtime.Serialization.IDeserializationCallback</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CompareInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Conventions for comparing and sorting data vary from culture to culture. For example, sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an &quot;Ã†&quot; character that it sorts after &quot;Z&quot; in the alphabet. In addition, comparisons may be case-sensitive or case-insensitive, and casing rules may also differ by culture. The CompareInfo class is responsible for maintaining this culture-sensitive string comparison data and for performing culture-sensitive string operations.  </p>\n<p> Typically, you do not have to instantiate a CompareInfo object directly, because one is used implicitly by all non-ordinal string comparison operations, including calls to the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method. However, if you do want to retrieve a CompareInfo object, you can do it in one of these ways:  </p>\n<ul>\n<li><p>By retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CompareInfo_\" data-linktype=\"relative-path\">CompareInfo</a> property for a particular culture.  </p>\n</li>\n<li><p>By calling the static <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_GetCompareInfo_\" data-linktype=\"relative-path\">GetCompareInfo</a> method with a culture name. This allows for late-bound access to a CompareInfo object.  </p>\n</li>\n</ul>\n<h2 id=\"ignored-search-values\">Ignored search values</h2>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. Comparison methods such as <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> do not consider such characters when they perform a culture-sensitive comparison. Ignorable characters include:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. Culture-sensitive comparison methods will always find an empty string at the beginning (index zero) of the string being searched.  </p>\n</li>\n<li><p>A character or string consisting of characters with code points that are not considered in the operation because of comparison options, In particular, the  <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> options produce searches in which symbols and nonspacing combining characters are ignored.  </p>\n</li>\n<li><p>A string with code points that have no linguistic significance. For example, a soft hyphen (U+00AD) is always ignored in a culture-sensitive string comparison.  </p>\n</li>\n</ul>\n<h2 id=\"security-considerations\">Security considerations</h2>\n<p> If a security decision depends on a string comparison or a case change, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior is consistent, regardless of the culture settings of the operating system.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should use string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LCID\" data-linktype=\"self-bookmark\">LCID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the properly formed culture identifier for the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the culture used for sorting operations by this <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Version\" data-linktype=\"self-bookmark\">Version</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets information about the version of Unicode used for comparing and sorting strings.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Compare_System_String_System_String_\" data-linktype=\"self-bookmark\">Compare(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two strings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Compare_System_String_System_String_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">Compare(String,String,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two strings using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Compare_System_String_System_Int32_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Compare(String,Int32,String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the end section of a string with the end section of another string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Compare_System_String_System_Int32_System_String_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">Compare(String,Int32,String,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the end section of a string with the end section of another string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Compare_System_String_System_Int32_System_Int32_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Compare(String,Int32,Int32,String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares a section of one string with a section of another string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Compare_System_String_System_Int32_System_Int32_System_String_System_Int32_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">Compare(String,Int32,Int32,String,Int32,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares a section of one string with a section of another string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object is equal to the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_GetCompareInfo_System_Int32_\" data-linktype=\"self-bookmark\">GetCompareInfo(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that is associated with the culture with the specified identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_GetCompareInfo_System_String_\" data-linktype=\"self-bookmark\">GetCompareInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that is associated with the culture with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_GetCompareInfo_System_Int32_System_Reflection_Assembly_\" data-linktype=\"self-bookmark\">GetCompareInfo(Int32,Assembly)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that is associated with the specified culture and that uses string comparison methods in the specified <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_GetCompareInfo_System_String_System_Reflection_Assembly_\" data-linktype=\"self-bookmark\">GetCompareInfo(String,Assembly)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that is associated with the specified culture and that uses string comparison methods in the specified <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> for hashing algorithms and data structures, such as a hash table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_GetHashCode_System_String_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">GetHashCode(String,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the hash code for a string based on specified comparison options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_GetSortKey_System_String_\" data-linktype=\"self-bookmark\">GetSortKey(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the sort key for the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_GetSortKey_System_String_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">GetSortKey(String,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object for the specified string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_\" data-linktype=\"self-bookmark\">IndexOf(String,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_String_\" data-linktype=\"self-bookmark\">IndexOf(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">IndexOf(String,Char,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(String,Char,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">IndexOf(String,String,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(String,String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">IndexOf(String,Char,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(String,Char,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">IndexOf(String,String,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(String,String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Int32_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">IndexOf(String,Char,Int32,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Int32_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">IndexOf(String,String,Int32,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IsPrefix_System_String_System_String_\" data-linktype=\"self-bookmark\">IsPrefix(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified source string starts with the specified prefix.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IsPrefix_System_String_System_String_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">IsPrefix(String,String,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified source string starts with the specified prefix using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IsSortable_System_Char_\" data-linktype=\"self-bookmark\">IsSortable(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified Unicode character is sortable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IsSortable_System_String_\" data-linktype=\"self-bookmark\">IsSortable(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified Unicode string is sortable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IsSuffix_System_String_System_String_\" data-linktype=\"self-bookmark\">IsSuffix(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified source string ends with the specified suffix.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_IsSuffix_System_String_System_String_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">IsSuffix(String,String,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified source string ends with the specified suffix using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_\" data-linktype=\"self-bookmark\">LastIndexOf(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Char,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Char,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">LastIndexOf(String,String,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(String,String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Char,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Char,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">LastIndexOf(String,String,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(String,String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Int32_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Char,Int32,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Int32_System_Int32_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">LastIndexOf(String,String,Int32,Int32,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CompareInfo_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\" data-linktype=\"self-bookmark\">IDeserializationCallback.OnDeserialization(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Runs when the entire object graph has been deserialized.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LCID\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LCID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LCID</div>        \r\n          </div>\r\n    \r\n            <p>Gets the properly formed culture identifier for the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LCID { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The properly formed culture identifier for the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the LCID property.  </p>\n<pre><code class=\"lang-cpp\" name=\"CompareInfo#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\n\nint main()\n{\n    array&lt;String^&gt;^ sign = gcnew array&lt;String^&gt; { &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot; };\n\n    // The code below demonstrates how strings compare\n    // differently for different cultures.\n    String^ s1 = &quot;Cot&#233;&quot;; \n    String^ s2 = &quot;cot&#233;&quot;;\n    String^ s3 = &quot;c&#244;te&quot;;\n\n    // Set sort order of strings for French in France.\n    CompareInfo^ ci = (gcnew CultureInfo(&quot;fr-FR&quot;))-&gt;CompareInfo;\n    Console::WriteLine(L&quot;The LCID for {0} is {1}.&quot;, ci-&gt;Name, ci-&gt;LCID);\n\n    // Display the result using fr-FR Compare of Cot&#233; = cot&#233;.\n    Console::WriteLine(L&quot;fr-FR Compare: {0} {2} {1}&quot;,\n        s1, s2, sign[ci-&gt;Compare(s1, s2, CompareOptions::IgnoreCase) + 1]);\n\n    // Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n    Console::WriteLine(L&quot;fr-FR Compare: {0} {2} {1}&quot;,\n        s2, s3, sign[ci-&gt;Compare(s2, s3, CompareOptions::None) + 1]);\n\n    // Set sort order of strings for Japanese as spoken in Japan.\n    ci = (gcnew CultureInfo(&quot;ja-JP&quot;))-&gt;CompareInfo;\n    Console::WriteLine(L&quot;The LCID for {0} is {1}.&quot;, ci-&gt;Name, ci-&gt;LCID);\n\n    // Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te.\n    Console::WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;,\n        s2, s3, sign[ci-&gt;Compare(s2, s3) + 1]);\n}\n\n// This code produces the following output.\n//\n// The LCID for fr-FR is 1036.\n// fr-FR Compare: Cot&#233; = cot&#233;\n// fr-FR Compare: cot&#233; &gt; c&#244;te\n// The LCID for ja-JP is 1041.\n// ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre><pre><code class=\"lang-cs\" name=\"CompareInfo#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\npublic sealed class App\n{\n    static void Main(string[] args)\n    {\n        String[] sign = new String[] { &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot; };\n\n        // The code below demonstrates how strings compare \n        // differently for different cultures.\n        String s1 = &quot;Cot&#233;&quot;, s2 = &quot;cot&#233;&quot;, s3 = &quot;c&#244;te&quot;;\n\n        // Set sort order of strings for French in France.\n        CompareInfo ci = new CultureInfo(&quot;fr-FR&quot;).CompareInfo;\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID);\n      \n        // Display the result using fr-FR Compare of Cot&#233; = cot&#233;.  \t\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;,\n            s1, s2, sign[ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1]);\n\n        // Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;,\n            s2, s3, sign[ci.Compare(s2, s3, CompareOptions.None) + 1]);\n\n        // Set sort order of strings for Japanese as spoken in Japan.\n        ci = new CultureInfo(&quot;ja-JP&quot;).CompareInfo;\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID);\n\n        // Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te. \n        Console.WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;,\n            s2, s3, sign[ci.Compare(s2, s3) + 1]);\n    }\n}\n\n// This code produces the following output.\n// \n// The LCID for fr-FR is 1036.\n// fr-FR Compare: Cot&#233; = cot&#233;\n// fr-FR Compare: cot&#233; &gt; c&#244;te\n// The LCID for ja-JP is 1041.\n// ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre><pre><code class=\"lang-vb\" name=\"CompareInfo#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nNotInheritable Public Class App\n    Shared Sub Main(ByVal args() As String) \n        Dim sign() As String = {&quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot;}\n        \n        &#39; The code below demonstrates how strings compare \n        &#39; differently for different cultures.\n        Dim s1 As String = &quot;Cot&#233;&quot;\n        Dim s2 As String = &quot;cot&#233;&quot;\n        Dim s3 As String = &quot;c&#244;te&quot;\n        \n        &#39; Set sort order of strings for French in France.\n        Dim ci As CompareInfo = New CultureInfo(&quot;fr-FR&quot;).CompareInfo\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID)\n        \n        &#39; Display the result using fr-FR Compare of Cot&#233; = cot&#233;.  \t\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;, _\n                          s1, s2, sign((ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1)))\n        \n        &#39; Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;, _\n                          s2, s3, sign((ci.Compare(s2, s3, CompareOptions.None) + 1)))\n        \n        &#39; Set sort order of strings for Japanese as spoken in Japan.\n        ci = New CultureInfo(&quot;ja-JP&quot;).CompareInfo\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID)\n        \n        &#39; Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te. \n        Console.WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;, _\n                          s2, s3, sign((ci.Compare(s2, s3) + 1)))\n    End Sub &#39;Main\nEnd Class &#39;App\n\n&#39; This code produces the following output.\n&#39; \n&#39; The LCID for fr-FR is 1036.\n&#39; fr-FR Compare: Cot&#233; = cot&#233;\n&#39; fr-FR Compare: cot&#233; &gt; c&#244;te\n&#39; The LCID for ja-JP is 1041.\n&#39; ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Name\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the culture used for sorting operations by this <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of a culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Name and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name\" data-linktype=\"relative-path\">System.Globalization.CultureInfo.Name</a> properties can have different values. For example, an <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> property value of hexadecimal 0x10407 identifies an alternate sort culture that sorts names as they might appear in a German telephone book. The Name property has a value of &quot;de-de_phoneb&quot;, whereas the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name\" data-linktype=\"relative-path\">System.Globalization.CultureInfo.Name</a> property of the associated German (Germany) culture has a value of &quot;de-DE&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares three strings using the fr-FR and ja-JP cultures. The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property is used to display the name of each culture.  </p>\n<pre><code class=\"lang-cpp\" name=\"CompareInfo#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\n\nint main()\n{\n    array&lt;String^&gt;^ sign = gcnew array&lt;String^&gt; { &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot; };\n\n    // The code below demonstrates how strings compare\n    // differently for different cultures.\n    String^ s1 = &quot;Cot&#233;&quot;; \n    String^ s2 = &quot;cot&#233;&quot;;\n    String^ s3 = &quot;c&#244;te&quot;;\n\n    // Set sort order of strings for French in France.\n    CompareInfo^ ci = (gcnew CultureInfo(&quot;fr-FR&quot;))-&gt;CompareInfo;\n    Console::WriteLine(L&quot;The LCID for {0} is {1}.&quot;, ci-&gt;Name, ci-&gt;LCID);\n\n    // Display the result using fr-FR Compare of Cot&#233; = cot&#233;.\n    Console::WriteLine(L&quot;fr-FR Compare: {0} {2} {1}&quot;,\n        s1, s2, sign[ci-&gt;Compare(s1, s2, CompareOptions::IgnoreCase) + 1]);\n\n    // Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n    Console::WriteLine(L&quot;fr-FR Compare: {0} {2} {1}&quot;,\n        s2, s3, sign[ci-&gt;Compare(s2, s3, CompareOptions::None) + 1]);\n\n    // Set sort order of strings for Japanese as spoken in Japan.\n    ci = (gcnew CultureInfo(&quot;ja-JP&quot;))-&gt;CompareInfo;\n    Console::WriteLine(L&quot;The LCID for {0} is {1}.&quot;, ci-&gt;Name, ci-&gt;LCID);\n\n    // Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te.\n    Console::WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;,\n        s2, s3, sign[ci-&gt;Compare(s2, s3) + 1]);\n}\n\n// This code produces the following output.\n//\n// The LCID for fr-FR is 1036.\n// fr-FR Compare: Cot&#233; = cot&#233;\n// fr-FR Compare: cot&#233; &gt; c&#244;te\n// The LCID for ja-JP is 1041.\n// ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre><pre><code class=\"lang-cs\" name=\"CompareInfo#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\npublic sealed class App\n{\n    static void Main(string[] args)\n    {\n        String[] sign = new String[] { &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot; };\n\n        // The code below demonstrates how strings compare \n        // differently for different cultures.\n        String s1 = &quot;Cot&#233;&quot;, s2 = &quot;cot&#233;&quot;, s3 = &quot;c&#244;te&quot;;\n\n        // Set sort order of strings for French in France.\n        CompareInfo ci = new CultureInfo(&quot;fr-FR&quot;).CompareInfo;\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID);\n      \n        // Display the result using fr-FR Compare of Cot&#233; = cot&#233;.  \t\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;,\n            s1, s2, sign[ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1]);\n\n        // Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;,\n            s2, s3, sign[ci.Compare(s2, s3, CompareOptions.None) + 1]);\n\n        // Set sort order of strings for Japanese as spoken in Japan.\n        ci = new CultureInfo(&quot;ja-JP&quot;).CompareInfo;\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID);\n\n        // Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te. \n        Console.WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;,\n            s2, s3, sign[ci.Compare(s2, s3) + 1]);\n    }\n}\n\n// This code produces the following output.\n// \n// The LCID for fr-FR is 1036.\n// fr-FR Compare: Cot&#233; = cot&#233;\n// fr-FR Compare: cot&#233; &gt; c&#244;te\n// The LCID for ja-JP is 1041.\n// ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre><pre><code class=\"lang-vb\" name=\"CompareInfo#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nNotInheritable Public Class App\n    Shared Sub Main(ByVal args() As String) \n        Dim sign() As String = {&quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot;}\n        \n        &#39; The code below demonstrates how strings compare \n        &#39; differently for different cultures.\n        Dim s1 As String = &quot;Cot&#233;&quot;\n        Dim s2 As String = &quot;cot&#233;&quot;\n        Dim s3 As String = &quot;c&#244;te&quot;\n        \n        &#39; Set sort order of strings for French in France.\n        Dim ci As CompareInfo = New CultureInfo(&quot;fr-FR&quot;).CompareInfo\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID)\n        \n        &#39; Display the result using fr-FR Compare of Cot&#233; = cot&#233;.  \t\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;, _\n                          s1, s2, sign((ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1)))\n        \n        &#39; Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;, _\n                          s2, s3, sign((ci.Compare(s2, s3, CompareOptions.None) + 1)))\n        \n        &#39; Set sort order of strings for Japanese as spoken in Japan.\n        ci = New CultureInfo(&quot;ja-JP&quot;).CompareInfo\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID)\n        \n        &#39; Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te. \n        Console.WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;, _\n                          s2, s3, sign((ci.Compare(s2, s3) + 1)))\n    End Sub &#39;Main\nEnd Class &#39;App\n\n&#39; This code produces the following output.\n&#39; \n&#39; The LCID for fr-FR is 1036.\n&#39; fr-FR Compare: Cot&#233; = cot&#233;\n&#39; fr-FR Compare: cot&#233; &gt; c&#244;te\n&#39; The LCID for ja-JP is 1041.\n&#39; ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Version\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Version_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Version</div>        \r\n          </div>\r\n    \r\n            <p>Gets information about the version of Unicode used for comparing and sorting strings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Globalization.SortVersion Version { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.sortversion\" data-linktype=\"relative-path\">SortVersion</a></div>\r\n                  </div>\r\n                  <p>An object that contains information about the Unicode version used for comparing and sorting strings.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The weight of individual characters, and therefore the way in which particular strings are compared or ordered, depends on the version of the Unicode specification that a particular version of the .NET Framework implements. In the .NET Framework 4.5, this also depends on the host operating system, as the following table shows. Note that this list of supported Unicode versions applies to character comparison and sorting only; it does not apply to classification of Unicode characters by category.  </p>\n<table>\n<thead>\n<tr>\n<th>.NET Framework version</th>\n<th>Operating system</th>\n<th>Unicode version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.NET Framework 4</td>\n<td>All operating systems</td>\n<td>Unicode 5.0</td>\n</tr>\n<tr>\n<td>.NET Framework 4.5 and later versions</td>\n<td>Windows 7</td>\n<td>Unicode 5.0</td>\n</tr>\n<tr>\n<td>.NET Framework 4.5 and later versions</td>\n<td>Windows 8 and later Windows operating system versions</td>\n<td>Unicode 6.3</td>\n</tr>\n</tbody>\n</table>\n<p> The <a class=\"xref\" href=\"system.globalization.sortversion\" data-linktype=\"relative-path\">SortVersion</a> object returned by the Version property doesn&#39;t identify the precise Unicode version used to compare strings. It is useful only when comparing two <a class=\"xref\" href=\"system.globalization.sortversion\" data-linktype=\"relative-path\">SortVersion</a> objects to determine whether they use the same Unicode version and culture to compare strings. For more information and an example, see the <a class=\"xref\" href=\"system.globalization.sortversion\" data-linktype=\"relative-path\">SortVersion</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Compare_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two strings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Compare (string string1, string string2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>string1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>string2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer indicating the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> zero<br>\n </td><td> The two strings are equal.<br>\n </td></tr><tr><td> less than zero<br>\n </td><td><code>string1</code> is less than <code>string2</code>.<br>\n </td></tr><tr><td> greater than zero<br>\n </td><td><code>string1</code> is greater than <code>string2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the comparison is performed by using <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>. If a security decision depends on a string comparison or a case change, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares portions of two strings using the different <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with international sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with traditional sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">// The following code example compares two strings using the different CompareInfo instances:\n//    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with international sort,\n//    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with traditional sort, and\n//    a CompareInfo instance associated with the InvariantCulture.\n\nusing System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;calor&quot;;\n\n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      CompareInfo myCompIntl = CompareInfo.GetCompareInfo( &quot;es-ES&quot; );\n      \n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      CompareInfo myCompTrad = CompareInfo.GetCompareInfo( 0x040A );\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myCompInva = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Compares two strings using myCompIntl.\n      Console.WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1, myStr2 );\n      Console.WriteLine( &quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare( myStr1, myStr2 ) );\n      Console.WriteLine( &quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare( myStr1, myStr2 ) );\n      Console.WriteLine( &quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare( myStr1, myStr2 ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nComparing &quot;calle&quot; and &quot;calor&quot;\n   With myCompIntl.Compare: -1\n   With myCompTrad.Compare: 1\n   With myCompInva.Compare: -1\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">// The following code example compares two strings using the different CompareInfo instances:\n//    a CompareInfo instance associated with the S&quot;Spanish - Spain&quot; culture with international sort,\n//    a CompareInfo instance associated with the S&quot;Spanish - Spain&quot; culture with traditional sort, and\n//    a CompareInfo instance associated with the InvariantCulture.\nusing namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;calor&quot;;\n   \n   // Uses GetCompareInfo to create the CompareInfo that \n   // uses the S&quot;es-ES&quot; culture with international sort.\n   CompareInfo^ myCompIntl = CompareInfo::GetCompareInfo( &quot;es-ES&quot; );\n   \n   // Uses GetCompareInfo to create the CompareInfo that \n   // uses the S&quot;es-ES&quot; culture with traditional sort.\n   CompareInfo^ myCompTrad = CompareInfo::GetCompareInfo( 0x040A );\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myCompInva = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Compares two strings using myCompIntl.\n   Console::WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1, myStr2 );\n   Console::WriteLine( &quot;   With myCompIntl::Compare: {0}&quot;, myCompIntl-&gt;Compare( myStr1, myStr2 ) );\n   Console::WriteLine( &quot;   With myCompTrad::Compare: {0}&quot;, myCompTrad-&gt;Compare( myStr1, myStr2 ) );\n   Console::WriteLine( &quot;   With myCompInva::Compare: {0}&quot;, myCompInva-&gt;Compare( myStr1, myStr2 ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing &quot;calle&quot; and &quot;calor&quot;\n   With myCompIntl::Compare: -1\n   With myCompTrad::Compare: 1\n   With myCompInva::Compare: -1\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">&#39; The following code example compares two strings using the different CompareInfo instances:\n&#39;    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with international sort,\n&#39;    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with traditional sort, and\n&#39;    a CompareInfo instance associated with the InvariantCulture.\n\nImports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;calor&quot;\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      Dim myCompIntl As CompareInfo = CompareInfo.GetCompareInfo(&quot;es-ES&quot;)\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      Dim myCompTrad As CompareInfo = CompareInfo.GetCompareInfo(&amp;H40A)\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myCompInva As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Compares two strings using myCompIntl.\n      Console.WriteLine(&quot;Comparing &quot;&quot;{0}&quot;&quot; and &quot;&quot;{1}&quot;&quot;&quot;, myStr1, myStr2)\n      Console.WriteLine(&quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare(myStr1, myStr2))\n      Console.WriteLine(&quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare(myStr1, myStr2))\n      Console.WriteLine(&quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare(myStr1, myStr2))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing &quot;calle&quot; and &quot;calor&quot;\n&#39;   With myCompIntl.Compare: -1\n&#39;   With myCompTrad.Compare: 1\n&#39;   With myCompInva.Compare: -1\n</code></pre><p>The following example demonstrates calling the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"CompareInfo#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\n\nint main()\n{\n    array&lt;String^&gt;^ sign = gcnew array&lt;String^&gt; { &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot; };\n\n    // The code below demonstrates how strings compare\n    // differently for different cultures.\n    String^ s1 = &quot;Cot&#233;&quot;; \n    String^ s2 = &quot;cot&#233;&quot;;\n    String^ s3 = &quot;c&#244;te&quot;;\n\n    // Set sort order of strings for French in France.\n    CompareInfo^ ci = (gcnew CultureInfo(&quot;fr-FR&quot;))-&gt;CompareInfo;\n    Console::WriteLine(L&quot;The LCID for {0} is {1}.&quot;, ci-&gt;Name, ci-&gt;LCID);\n\n    // Display the result using fr-FR Compare of Cot&#233; = cot&#233;.\n    Console::WriteLine(L&quot;fr-FR Compare: {0} {2} {1}&quot;,\n        s1, s2, sign[ci-&gt;Compare(s1, s2, CompareOptions::IgnoreCase) + 1]);\n\n    // Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n    Console::WriteLine(L&quot;fr-FR Compare: {0} {2} {1}&quot;,\n        s2, s3, sign[ci-&gt;Compare(s2, s3, CompareOptions::None) + 1]);\n\n    // Set sort order of strings for Japanese as spoken in Japan.\n    ci = (gcnew CultureInfo(&quot;ja-JP&quot;))-&gt;CompareInfo;\n    Console::WriteLine(L&quot;The LCID for {0} is {1}.&quot;, ci-&gt;Name, ci-&gt;LCID);\n\n    // Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te.\n    Console::WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;,\n        s2, s3, sign[ci-&gt;Compare(s2, s3) + 1]);\n}\n\n// This code produces the following output.\n//\n// The LCID for fr-FR is 1036.\n// fr-FR Compare: Cot&#233; = cot&#233;\n// fr-FR Compare: cot&#233; &gt; c&#244;te\n// The LCID for ja-JP is 1041.\n// ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre><pre><code class=\"lang-cs\" name=\"CompareInfo#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\npublic sealed class App\n{\n    static void Main(string[] args)\n    {\n        String[] sign = new String[] { &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot; };\n\n        // The code below demonstrates how strings compare \n        // differently for different cultures.\n        String s1 = &quot;Cot&#233;&quot;, s2 = &quot;cot&#233;&quot;, s3 = &quot;c&#244;te&quot;;\n\n        // Set sort order of strings for French in France.\n        CompareInfo ci = new CultureInfo(&quot;fr-FR&quot;).CompareInfo;\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID);\n      \n        // Display the result using fr-FR Compare of Cot&#233; = cot&#233;.  \t\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;,\n            s1, s2, sign[ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1]);\n\n        // Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;,\n            s2, s3, sign[ci.Compare(s2, s3, CompareOptions.None) + 1]);\n\n        // Set sort order of strings for Japanese as spoken in Japan.\n        ci = new CultureInfo(&quot;ja-JP&quot;).CompareInfo;\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID);\n\n        // Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te. \n        Console.WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;,\n            s2, s3, sign[ci.Compare(s2, s3) + 1]);\n    }\n}\n\n// This code produces the following output.\n// \n// The LCID for fr-FR is 1036.\n// fr-FR Compare: Cot&#233; = cot&#233;\n// fr-FR Compare: cot&#233; &gt; c&#244;te\n// The LCID for ja-JP is 1041.\n// ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre><pre><code class=\"lang-vb\" name=\"CompareInfo#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nNotInheritable Public Class App\n    Shared Sub Main(ByVal args() As String) \n        Dim sign() As String = {&quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot;}\n        \n        &#39; The code below demonstrates how strings compare \n        &#39; differently for different cultures.\n        Dim s1 As String = &quot;Cot&#233;&quot;\n        Dim s2 As String = &quot;cot&#233;&quot;\n        Dim s3 As String = &quot;c&#244;te&quot;\n        \n        &#39; Set sort order of strings for French in France.\n        Dim ci As CompareInfo = New CultureInfo(&quot;fr-FR&quot;).CompareInfo\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID)\n        \n        &#39; Display the result using fr-FR Compare of Cot&#233; = cot&#233;.  \t\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;, _\n                          s1, s2, sign((ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1)))\n        \n        &#39; Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;, _\n                          s2, s3, sign((ci.Compare(s2, s3, CompareOptions.None) + 1)))\n        \n        &#39; Set sort order of strings for Japanese as spoken in Japan.\n        ci = New CultureInfo(&quot;ja-JP&quot;).CompareInfo\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID)\n        \n        &#39; Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te. \n        Console.WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;, _\n                          s2, s3, sign((ci.Compare(s2, s3) + 1)))\n    End Sub &#39;Main\nEnd Class &#39;App\n\n&#39; This code produces the following output.\n&#39; \n&#39; The LCID for fr-FR is 1036.\n&#39; fr-FR Compare: Cot&#233; = cot&#233;\n&#39; fr-FR Compare: cot&#233; &gt; c&#244;te\n&#39; The LCID for ja-JP is 1041.\n&#39; ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Compare_System_String_System_String_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,String,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two strings using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>string1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>string2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer indicating the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> zero<br>\n </td><td> The two strings are equal.<br>\n </td></tr><tr><td> less than zero<br>\n </td><td><code>string1</code> is less than <code>string2</code>.<br>\n </td></tr><tr><td> greater than zero<br>\n </td><td><code>string1</code> is greater than <code>string2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a security decision depends on a string comparison or a case change, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares two strings using different <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> settings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.CompareStrStrOpt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;My Uncle Bill&#39;s clients&quot;;\n      String myStr2 = &quot;My uncle bills clients&quot;;\n\n      // Creates a CompareInfo that uses the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Compares two strings using myComp.\n      Console.WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1, myStr2 );\n      Console.WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp.Compare( myStr1, myStr2 ) );\n      Console.WriteLine( &quot;   With None                         : {0}&quot;, myComp.Compare( myStr1, myStr2, CompareOptions.None ) );\n      Console.WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp.Compare( myStr1, myStr2, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;   With StringSort                   : {0}&quot;, myComp.Compare( myStr1, myStr2, CompareOptions.StringSort ) );\n      Console.WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp.Compare( myStr1, myStr2, CompareOptions.IgnoreCase ) );\n      Console.WriteLine( &quot;   With IgnoreSymbols                : {0}&quot;, myComp.Compare( myStr1, myStr2, CompareOptions.IgnoreSymbols ) );\n      Console.WriteLine( &quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp.Compare( myStr1, myStr2, CompareOptions.IgnoreCase | CompareOptions.IgnoreSymbols ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nComparing &quot;My Uncle Bill&#39;s clients&quot; and &quot;My uncle bills clients&quot;\n   With no CompareOptions            : 1\n   With None                         : 1\n   With Ordinal                      : -32\n   With StringSort                   : -1\n   With IgnoreCase                   : 1\n   With IgnoreSymbols                : 1\n   With IgnoreCase and IgnoreSymbols : 0\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.CompareStrStrOpt#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;My Uncle Bill&#39;s clients&quot;;\n   String^ myStr2 = &quot;My uncle bills clients&quot;;\n   \n   // Creates a CompareInfo which uses the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Compares two strings using myComp.\n   Console::WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1, myStr2 );\n   Console::WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp-&gt;Compare( myStr1, myStr2 ) );\n   Console::WriteLine( &quot;   With None                         : {0}&quot;, myComp-&gt;Compare( myStr1, myStr2, CompareOptions::None ) );\n   Console::WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp-&gt;Compare( myStr1, myStr2, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;   With StringSort                   : {0}&quot;, myComp-&gt;Compare( myStr1, myStr2, CompareOptions::StringSort ) );\n   Console::WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp-&gt;Compare( myStr1, myStr2, CompareOptions::IgnoreCase ) );\n   Console::WriteLine( &quot;   With IgnoreSymbols                : {0}&quot;, myComp-&gt;Compare( myStr1, myStr2, CompareOptions::IgnoreSymbols ) );\n   Console::WriteLine( &quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp-&gt;Compare( myStr1, myStr2, static_cast&lt;CompareOptions&gt;(CompareOptions::IgnoreCase | CompareOptions::IgnoreSymbols) ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing &quot;My Uncle Bill&#39;s clients&quot; and &quot;My uncle bills clients&quot;\n   With no CompareOptions            : 1\n   With None                         : 1\n   With Ordinal                      : -32\n   With StringSort                   : -1\n   With IgnoreCase                   : 1\n   With IgnoreSymbols                : 1\n   With IgnoreCase and IgnoreSymbols : 0\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.CompareStrStrOpt#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;My Uncle Bill&#39;s clients&quot;\n      Dim myStr2 As [String] = &quot;My uncle bills clients&quot;\n\n      &#39; Creates a CompareInfo that uses the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Compares two strings using myComp.\n      Console.WriteLine(&quot;Comparing &quot;&quot;{0}&quot;&quot; and &quot;&quot;{1}&quot;&quot;&quot;, myStr1, myStr2)\n      Console.WriteLine(&quot;   With no CompareOptions            : {0}&quot;, myComp.Compare(myStr1, myStr2))\n      Console.WriteLine(&quot;   With None                         : {0}&quot;, myComp.Compare(myStr1, myStr2, CompareOptions.None))\n      Console.WriteLine(&quot;   With Ordinal                      : {0}&quot;, myComp.Compare(myStr1, myStr2, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;   With StringSort                   : {0}&quot;, myComp.Compare(myStr1, myStr2, CompareOptions.StringSort))\n      Console.WriteLine(&quot;   With IgnoreCase                   : {0}&quot;, myComp.Compare(myStr1, myStr2, CompareOptions.IgnoreCase))\n      Console.WriteLine(&quot;   With IgnoreSymbols                : {0}&quot;, myComp.Compare(myStr1, myStr2, CompareOptions.IgnoreSymbols))\n      Console.WriteLine(&quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp.Compare(myStr1, myStr2, CompareOptions.IgnoreCase Or CompareOptions.IgnoreSymbols))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing &quot;My Uncle Bill&#39;s clients&quot; and &quot;My uncle bills clients&quot;\n&#39;   With no CompareOptions            : 1\n&#39;   With None                         : 1\n&#39;   With Ordinal                      : -32\n&#39;   With StringSort                   : -1\n&#39;   With IgnoreCase                   : 1\n&#39;   With IgnoreSymbols                : 1\n&#39;   With IgnoreCase and IgnoreSymbols : 0\n</code></pre><p> The following example demonstrates calling the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"CompareInfo#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\n\nint main()\n{\n    array&lt;String^&gt;^ sign = gcnew array&lt;String^&gt; { &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot; };\n\n    // The code below demonstrates how strings compare\n    // differently for different cultures.\n    String^ s1 = &quot;Cot&#233;&quot;; \n    String^ s2 = &quot;cot&#233;&quot;;\n    String^ s3 = &quot;c&#244;te&quot;;\n\n    // Set sort order of strings for French in France.\n    CompareInfo^ ci = (gcnew CultureInfo(&quot;fr-FR&quot;))-&gt;CompareInfo;\n    Console::WriteLine(L&quot;The LCID for {0} is {1}.&quot;, ci-&gt;Name, ci-&gt;LCID);\n\n    // Display the result using fr-FR Compare of Cot&#233; = cot&#233;.\n    Console::WriteLine(L&quot;fr-FR Compare: {0} {2} {1}&quot;,\n        s1, s2, sign[ci-&gt;Compare(s1, s2, CompareOptions::IgnoreCase) + 1]);\n\n    // Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n    Console::WriteLine(L&quot;fr-FR Compare: {0} {2} {1}&quot;,\n        s2, s3, sign[ci-&gt;Compare(s2, s3, CompareOptions::None) + 1]);\n\n    // Set sort order of strings for Japanese as spoken in Japan.\n    ci = (gcnew CultureInfo(&quot;ja-JP&quot;))-&gt;CompareInfo;\n    Console::WriteLine(L&quot;The LCID for {0} is {1}.&quot;, ci-&gt;Name, ci-&gt;LCID);\n\n    // Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te.\n    Console::WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;,\n        s2, s3, sign[ci-&gt;Compare(s2, s3) + 1]);\n}\n\n// This code produces the following output.\n//\n// The LCID for fr-FR is 1036.\n// fr-FR Compare: Cot&#233; = cot&#233;\n// fr-FR Compare: cot&#233; &gt; c&#244;te\n// The LCID for ja-JP is 1041.\n// ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre><pre><code class=\"lang-cs\" name=\"CompareInfo#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\npublic sealed class App\n{\n    static void Main(string[] args)\n    {\n        String[] sign = new String[] { &quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot; };\n\n        // The code below demonstrates how strings compare \n        // differently for different cultures.\n        String s1 = &quot;Cot&#233;&quot;, s2 = &quot;cot&#233;&quot;, s3 = &quot;c&#244;te&quot;;\n\n        // Set sort order of strings for French in France.\n        CompareInfo ci = new CultureInfo(&quot;fr-FR&quot;).CompareInfo;\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID);\n      \n        // Display the result using fr-FR Compare of Cot&#233; = cot&#233;.  \t\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;,\n            s1, s2, sign[ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1]);\n\n        // Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;,\n            s2, s3, sign[ci.Compare(s2, s3, CompareOptions.None) + 1]);\n\n        // Set sort order of strings for Japanese as spoken in Japan.\n        ci = new CultureInfo(&quot;ja-JP&quot;).CompareInfo;\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID);\n\n        // Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te. \n        Console.WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;,\n            s2, s3, sign[ci.Compare(s2, s3) + 1]);\n    }\n}\n\n// This code produces the following output.\n// \n// The LCID for fr-FR is 1036.\n// fr-FR Compare: Cot&#233; = cot&#233;\n// fr-FR Compare: cot&#233; &gt; c&#244;te\n// The LCID for ja-JP is 1041.\n// ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre><pre><code class=\"lang-vb\" name=\"CompareInfo#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nNotInheritable Public Class App\n    Shared Sub Main(ByVal args() As String) \n        Dim sign() As String = {&quot;&lt;&quot;, &quot;=&quot;, &quot;&gt;&quot;}\n        \n        &#39; The code below demonstrates how strings compare \n        &#39; differently for different cultures.\n        Dim s1 As String = &quot;Cot&#233;&quot;\n        Dim s2 As String = &quot;cot&#233;&quot;\n        Dim s3 As String = &quot;c&#244;te&quot;\n        \n        &#39; Set sort order of strings for French in France.\n        Dim ci As CompareInfo = New CultureInfo(&quot;fr-FR&quot;).CompareInfo\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID)\n        \n        &#39; Display the result using fr-FR Compare of Cot&#233; = cot&#233;.  \t\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;, _\n                          s1, s2, sign((ci.Compare(s1, s2, CompareOptions.IgnoreCase) + 1)))\n        \n        &#39; Display the result using fr-FR Compare of cot&#233; &gt; c&#244;te.\n        Console.WriteLine(&quot;fr-FR Compare: {0} {2} {1}&quot;, _\n                          s2, s3, sign((ci.Compare(s2, s3, CompareOptions.None) + 1)))\n        \n        &#39; Set sort order of strings for Japanese as spoken in Japan.\n        ci = New CultureInfo(&quot;ja-JP&quot;).CompareInfo\n        Console.WriteLine(&quot;The LCID for {0} is {1}.&quot;, ci.Name, ci.LCID)\n        \n        &#39; Display the result using ja-JP Compare of cot&#233; &lt; c&#244;te. \n        Console.WriteLine(&quot;ja-JP Compare: {0} {2} {1}&quot;, _\n                          s2, s3, sign((ci.Compare(s2, s3) + 1)))\n    End Sub &#39;Main\nEnd Class &#39;App\n\n&#39; This code produces the following output.\n&#39; \n&#39; The LCID for fr-FR is 1036.\n&#39; fr-FR Compare: Cot&#233; = cot&#233;\n&#39; fr-FR Compare: cot&#233; &gt; c&#244;te\n&#39; The LCID for ja-JP is 1041.\n&#39; ja-JP Compare: cot&#233; &lt; c&#244;te\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Compare_System_String_System_Int32_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the end section of a string with the end section of another string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Compare (string string1, int offset1, string string2, int offset2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>string1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the character in <code>string1</code> at which to start comparing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>string2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the character in <code>string2</code> at which to start comparing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer indicating the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> zero<br>\n </td><td> The two strings are equal.<br>\n </td></tr><tr><td> less than zero<br>\n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.<br>\n </td></tr><tr><td> greater than zero<br>\n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset1</code> or <code>offset2</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  </p>\n<p> -or-  </p>\n<p> <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a security decision depends on a string comparison or a case change, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares portions of two strings using the different <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with international sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with traditional sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.CompareStrIntStrInt#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;calor&quot;;\n   \n   // Uses GetCompareInfo to create the CompareInfo that \n   // uses the S&quot;es-ES&quot; culture with international sort.\n   CompareInfo^ myCompIntl = CompareInfo::GetCompareInfo( &quot;es-ES&quot; );\n   \n   // Uses GetCompareInfo to create the CompareInfo that \n   // uses the S&quot;es-ES&quot; culture with traditional sort.\n   CompareInfo^ myCompTrad = CompareInfo::GetCompareInfo( 0x040A );\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myCompInva = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Compares two strings using myCompIntl.\n   Console::WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1-&gt;Substring( 2 ), myStr2-&gt;Substring( 2 ) );\n   Console::WriteLine( &quot;   With myCompIntl::Compare: {0}&quot;, myCompIntl-&gt;Compare( myStr1, 2, myStr2, 2 ) );\n   Console::WriteLine( &quot;   With myCompTrad::Compare: {0}&quot;, myCompTrad-&gt;Compare( myStr1, 2, myStr2, 2 ) );\n   Console::WriteLine( &quot;   With myCompInva::Compare: {0}&quot;, myCompInva-&gt;Compare( myStr1, 2, myStr2, 2 ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing &quot;lle&quot; and &quot;lor&quot;\n   With myCompIntl::Compare: -1\n   With myCompTrad::Compare: 1\n   With myCompInva::Compare: -1\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.CompareStrIntStrInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;calor&quot;;\n\n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      CompareInfo myCompIntl = CompareInfo.GetCompareInfo( &quot;es-ES&quot; );\n      \n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      CompareInfo myCompTrad = CompareInfo.GetCompareInfo( 0x040A );\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myCompInva = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Compares two strings using myCompIntl.\n      Console.WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1.Substring( 2 ), myStr2.Substring( 2 ) );\n      Console.WriteLine( &quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare( myStr1, 2, myStr2, 2 ) );\n      Console.WriteLine( &quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare( myStr1, 2, myStr2, 2 ) );\n      Console.WriteLine( &quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare( myStr1, 2, myStr2, 2 ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nComparing &quot;lle&quot; and &quot;lor&quot;\n   With myCompIntl.Compare: -1\n   With myCompTrad.Compare: 1\n   With myCompInva.Compare: -1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.CompareStrIntStrInt#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;calor&quot;\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      Dim myCompIntl As CompareInfo = CompareInfo.GetCompareInfo(&quot;es-ES&quot;)\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      Dim myCompTrad As CompareInfo = CompareInfo.GetCompareInfo(&amp;H40A)\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myCompInva As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Compares two strings using myCompIntl.\n      Console.WriteLine(&quot;Comparing &quot;&quot;{0}&quot;&quot; and &quot;&quot;{1}&quot;&quot;&quot;, myStr1.Substring(2), myStr2.Substring(2))\n      Console.WriteLine(&quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare(myStr1, 2, myStr2, 2))\n      Console.WriteLine(&quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare(myStr1, 2, myStr2, 2))\n      Console.WriteLine(&quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare(myStr1, 2, myStr2, 2))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing &quot;lle&quot; and &quot;lor&quot;\n&#39;   With myCompIntl.Compare: -1\n&#39;   With myCompTrad.Compare: 1\n&#39;   With myCompInva.Compare: -1\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Compare_System_String_System_Int32_System_String_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,String,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the end section of a string with the end section of another string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>string1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the character in <code>string1</code> at which to start comparing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>string2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the character in <code>string2</code> at which to start comparing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer indicating the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> zero<br>\n </td><td> The two strings are equal.<br>\n </td></tr><tr><td> less than zero<br>\n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.<br>\n </td></tr><tr><td> greater than zero<br>\n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset1</code> or <code>offset2</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  </p>\n<p> -or-  </p>\n<p> <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a security decision depends on a string comparison or a case change, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares portions of two strings using different <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> settings.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;My Uncle Bill&#39;s clients&quot;;\n   String^ myStr2 = &quot;My uncle bills clients&quot;;\n   \n   // Creates a CompareInfo that uses the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Compares two strings using myComp.\n   Console::WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1-&gt;Substring( 10 ), myStr2-&gt;Substring( 10 ) );\n   Console::WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp-&gt;Compare( myStr1, 10, myStr2, 10 ) );\n   Console::WriteLine( &quot;   With None                         : {0}&quot;, myComp-&gt;Compare( myStr1, 10, myStr2, 10, CompareOptions::None ) );\n   Console::WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp-&gt;Compare( myStr1, 10, myStr2, 10, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;   With StringSort                   : {0}&quot;, myComp-&gt;Compare( myStr1, 10, myStr2, 10, CompareOptions::StringSort ) );\n   Console::WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp-&gt;Compare( myStr1, 10, myStr2, 10, CompareOptions::IgnoreCase ) );\n   Console::WriteLine( &quot;   With IgnoreSymbols                : {0}&quot;, myComp-&gt;Compare( myStr1, 10, myStr2, 10, CompareOptions::IgnoreSymbols ) );\n   Console::WriteLine( &quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp-&gt;Compare( myStr1, 10, myStr2, 10, static_cast&lt;CompareOptions&gt;(CompareOptions::IgnoreCase | CompareOptions::IgnoreSymbols) ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing &quot;ill&#39;s clients&quot; and &quot;ills clients&quot;\n   With no CompareOptions            : 1\n   With None                         : 1\n   With Ordinal                      : -76\n   With StringSort                   : -1\n   With IgnoreCase                   : 1\n   With IgnoreSymbols                : 0\n   With IgnoreCase and IgnoreSymbols : 0\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;My Uncle Bill&#39;s clients&quot;;\n      String myStr2 = &quot;My uncle bills clients&quot;;\n\n      // Creates a CompareInfo that uses the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Compares two strings using myComp.\n      Console.WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1.Substring( 10 ), myStr2.Substring( 10 ) );\n      Console.WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp.Compare( myStr1, 10, myStr2, 10 ) );\n      Console.WriteLine( &quot;   With None                         : {0}&quot;, myComp.Compare( myStr1, 10, myStr2, 10, CompareOptions.None ) );\n      Console.WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp.Compare( myStr1, 10, myStr2, 10, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;   With StringSort                   : {0}&quot;, myComp.Compare( myStr1, 10, myStr2, 10, CompareOptions.StringSort ) );\n      Console.WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp.Compare( myStr1, 10, myStr2, 10, CompareOptions.IgnoreCase ) );\n      Console.WriteLine( &quot;   With IgnoreSymbols                : {0}&quot;, myComp.Compare( myStr1, 10, myStr2, 10, CompareOptions.IgnoreSymbols ) );\n      Console.WriteLine( &quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp.Compare( myStr1, 10, myStr2, 10, CompareOptions.IgnoreCase | CompareOptions.IgnoreSymbols ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nComparing &quot;ill&#39;s clients&quot; and &quot;ills clients&quot;\n   With no CompareOptions            : 1\n   With None                         : 1\n   With Ordinal                      : -76\n   With StringSort                   : -1\n   With IgnoreCase                   : 1\n   With IgnoreSymbols                : 0\n   With IgnoreCase and IgnoreSymbols : 0\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;My Uncle Bill&#39;s clients&quot;\n      Dim myStr2 As [String] = &quot;My uncle bills clients&quot;\n\n      &#39; Creates a CompareInfo that uses the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Compares two strings using myComp.\n      Console.WriteLine(&quot;Comparing &quot;&quot;{0}&quot;&quot; and &quot;&quot;{1}&quot;&quot;&quot;, myStr1.Substring(10), myStr2.Substring(10))\n      Console.WriteLine(&quot;   With no CompareOptions            : {0}&quot;, myComp.Compare(myStr1, 10, myStr2, 10))\n      Console.WriteLine(&quot;   With None                         : {0}&quot;, myComp.Compare(myStr1, 10, myStr2, 10, CompareOptions.None))\n      Console.WriteLine(&quot;   With Ordinal                      : {0}&quot;, myComp.Compare(myStr1, 10, myStr2, 10, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;   With StringSort                   : {0}&quot;, myComp.Compare(myStr1, 10, myStr2, 10, CompareOptions.StringSort))\n      Console.WriteLine(&quot;   With IgnoreCase                   : {0}&quot;, myComp.Compare(myStr1, 10, myStr2, 10, CompareOptions.IgnoreCase))\n      Console.WriteLine(&quot;   With IgnoreSymbols                : {0}&quot;, myComp.Compare(myStr1, 10, myStr2, 10, CompareOptions.IgnoreSymbols))\n      Console.WriteLine(&quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp.Compare(myStr1, 10, myStr2, 10, CompareOptions.IgnoreCase Or CompareOptions.IgnoreSymbols))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing &quot;ill&#39;s clients&quot; and &quot;ills clients&quot;\n&#39;   With no CompareOptions            : 1\n&#39;   With None                         : 1\n&#39;   With Ordinal                      : -76\n&#39;   With StringSort                   : -1\n&#39;   With IgnoreCase                   : 1\n&#39;   With IgnoreSymbols                : 0\n&#39;   With IgnoreCase and IgnoreSymbols : 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Compare_System_String_System_Int32_System_Int32_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,Int32,String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Compares a section of one string with a section of another string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>string1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the character in <code>string1</code> at which to start comparing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of consecutive characters in <code>string1</code> to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>string2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the character in <code>string2</code> at which to start comparing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of consecutive characters in <code>string2</code> to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer indicating the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> zero<br>\n </td><td> The two strings are equal.<br>\n </td></tr><tr><td> less than zero<br>\n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.<br>\n </td></tr><tr><td> greater than zero<br>\n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset1</code> or <code>length1</code> or <code>offset2</code> or <code>length2</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  </p>\n<p> -or-  </p>\n<p> <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.  </p>\n<p> -or-  </p>\n<p> <code>length1</code> is greater than the number of characters from <code>offset1</code> to the end of <code>string1</code>.  </p>\n<p> -or-  </p>\n<p> <code>length2</code> is greater than the number of characters from <code>offset2</code> to the end of <code>string2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a security decision depends on a string comparison or a case change, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should use string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares portions of two strings using the different <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with international sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with traditional sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;calor&quot;;\n\n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      CompareInfo myCompIntl = CompareInfo.GetCompareInfo( &quot;es-ES&quot; );\n      \n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      CompareInfo myCompTrad = CompareInfo.GetCompareInfo( 0x040A );\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myCompInva = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Compares two strings using myCompIntl.\n      Console.WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1.Substring( 2, 2 ), myStr2.Substring( 2, 2 ) );\n      Console.WriteLine( &quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare( myStr1, 2, 2, myStr2, 2, 2 ) );\n      Console.WriteLine( &quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare( myStr1, 2, 2, myStr2, 2, 2 ) );\n      Console.WriteLine( &quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare( myStr1, 2, 2, myStr2, 2, 2 ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nComparing &quot;ll&quot; and &quot;lo&quot;\n   With myCompIntl.Compare: -1\n   With myCompTrad.Compare: 1\n   With myCompInva.Compare: -1\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;calor&quot;;\n   \n   // Uses GetCompareInfo to create the CompareInfo that uses the S&quot;es-ES&quot; culture with international sort.\n   CompareInfo^ myCompIntl = CompareInfo::GetCompareInfo( &quot;es-ES&quot; );\n   \n   // Uses GetCompareInfo to create the CompareInfo that uses the S&quot;es-ES&quot; culture with traditional sort.\n   CompareInfo^ myCompTrad = CompareInfo::GetCompareInfo( 0x040A );\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myCompInva = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Compares two strings using myCompIntl.\n   Console::WriteLine( &quot;Comparing \\&quot; {0}\\&quot; and \\&quot; {1}\\&quot;&quot;, myStr1-&gt;Substring( 2, 2 ), myStr2-&gt;Substring( 2, 2 ) );\n   Console::WriteLine( &quot;   With myCompIntl-&gt;Compare: {0}&quot;, myCompIntl-&gt;Compare( myStr1, 2, 2, myStr2, 2, 2 ) );\n   Console::WriteLine( &quot;   With myCompTrad-&gt;Compare: {0}&quot;, myCompTrad-&gt;Compare( myStr1, 2, 2, myStr2, 2, 2 ) );\n   Console::WriteLine( &quot;   With myCompInva-&gt;Compare: {0}&quot;, myCompInva-&gt;Compare( myStr1, 2, 2, myStr2, 2, 2 ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing S&quot;ll&quot; and S&quot;lo&quot;\nWith myCompIntl.Compare: -1\nWith myCompTrad.Compare: 1\nWith myCompInva.Compare: -1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;calor&quot;\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      Dim myCompIntl As CompareInfo = CompareInfo.GetCompareInfo(&quot;es-ES&quot;)\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      Dim myCompTrad As CompareInfo = CompareInfo.GetCompareInfo(&amp;H40A)\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myCompInva As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Compares two strings using myCompIntl.\n      Console.WriteLine(&quot;Comparing &quot;&quot;{0}&quot;&quot; and &quot;&quot;{1}&quot;&quot;&quot;, myStr1.Substring(2, 2), myStr2.Substring(2, 2))\n      Console.WriteLine(&quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare(myStr1, 2, 2, myStr2, 2, 2))\n      Console.WriteLine(&quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare(myStr1, 2, 2, myStr2, 2, 2))\n      Console.WriteLine(&quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare(myStr1, 2, 2, myStr2, 2, 2))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing &quot;ll&quot; and &quot;lo&quot;\n&#39;   With myCompIntl.Compare: -1\n&#39;   With myCompTrad.Compare: 1\n&#39;   With myCompInva.Compare: -1\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Compare_System_String_System_Int32_System_Int32_System_String_System_Int32_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,Int32,String,Int32,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Compares a section of one string with a section of another string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>string1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the character in <code>string1</code> at which to start comparing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of consecutive characters in <code>string1</code> to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>string2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the character in <code>string2</code> at which to start comparing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of consecutive characters in <code>string2</code> to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer indicating the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> zero<br>\n </td><td> The two strings are equal.<br>\n </td></tr><tr><td> less than zero<br>\n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.<br>\n </td></tr><tr><td> greater than zero<br>\n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset1</code> or <code>length1</code> or <code>offset2</code> or <code>length2</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  </p>\n<p> -or-  </p>\n<p> <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.  </p>\n<p> -or-  </p>\n<p> <code>length1</code> is greater than the number of characters from <code>offset1</code> to the end of <code>string1</code>.  </p>\n<p> -or-  </p>\n<p> <code>length2</code> is greater than the number of characters from <code>offset2</code> to the end of <code>string2</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a security decision depends on a string comparison or a case change, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares portions of two strings using different <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> settings.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;My Uncle Bill&#39;s clients&quot;;\n   String^ myStr2 = &quot;My uncle bills clients&quot;;\n   \n   // Creates a CompareInfo that uses the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Compares two strings using myComp.\n   Console::WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1-&gt;Substring( 3, 10 ), myStr2-&gt;Substring( 3, 10 ) );\n   Console::WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp-&gt;Compare( myStr1, 3, 10, myStr2, 3, 10 ) );\n   Console::WriteLine( &quot;   With None                         : {0}&quot;, myComp-&gt;Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions::None ) );\n   Console::WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp-&gt;Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;   With StringSort                   : {0}&quot;, myComp-&gt;Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions::StringSort ) );\n   Console::WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp-&gt;Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions::IgnoreCase ) );\n   Console::WriteLine( &quot;   With IgnoreSymbols                : {0}&quot;, myComp-&gt;Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions::IgnoreSymbols ) );\n   Console::WriteLine( &quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp-&gt;Compare( myStr1, 3, 10, myStr2, 3, 10, static_cast&lt;CompareOptions&gt;(CompareOptions::IgnoreCase | CompareOptions::IgnoreSymbols) ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing &quot;Uncle Bill&quot; and &quot;uncle bill&quot;\n   With no CompareOptions            : 1\n   With None                         : 1\n   With Ordinal                      : -32\n   With StringSort                   : 1\n   With IgnoreCase                   : 0\n   With IgnoreSymbols                : 1\n   With IgnoreCase and IgnoreSymbols : 0\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;My Uncle Bill&#39;s clients&quot;\n      Dim myStr2 As [String] = &quot;My uncle bills clients&quot;\n\n      &#39; Creates a CompareInfo that uses the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Compares two strings using myComp.\n      Console.WriteLine(&quot;Comparing &quot;&quot;{0}&quot;&quot; and &quot;&quot;{1}&quot;&quot;&quot;, myStr1.Substring(3, 10), myStr2.Substring(3, 10))\n      Console.WriteLine(&quot;   With no CompareOptions            : {0}&quot;, myComp.Compare(myStr1, 3, 10, myStr2, 3, 10))\n      Console.WriteLine(&quot;   With None                         : {0}&quot;, myComp.Compare(myStr1, 3, 10, myStr2, 3, 10, CompareOptions.None))\n      Console.WriteLine(&quot;   With Ordinal                      : {0}&quot;, myComp.Compare(myStr1, 3, 10, myStr2, 3, 10, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;   With StringSort                   : {0}&quot;, myComp.Compare(myStr1, 3, 10, myStr2, 3, 10, CompareOptions.StringSort))\n      Console.WriteLine(&quot;   With IgnoreCase                   : {0}&quot;, myComp.Compare(myStr1, 3, 10, myStr2, 3, 10, CompareOptions.IgnoreCase))\n      Console.WriteLine(&quot;   With IgnoreSymbols                : {0}&quot;, myComp.Compare(myStr1, 3, 10, myStr2, 3, 10, CompareOptions.IgnoreSymbols))\n      Console.WriteLine(&quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp.Compare(myStr1, 3, 10, myStr2, 3, 10, CompareOptions.IgnoreCase Or CompareOptions.IgnoreSymbols))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing &quot;Uncle Bill&quot; and &quot;uncle bill&quot;\n&#39;   With no CompareOptions            : 1\n&#39;   With None                         : 1\n&#39;   With Ordinal                      : -32\n&#39;   With StringSort                   : 1\n&#39;   With IgnoreCase                   : 0\n&#39;   With IgnoreSymbols                : 1\n&#39;   With IgnoreCase and IgnoreSymbols : 0\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;My Uncle Bill&#39;s clients&quot;;\n      String myStr2 = &quot;My uncle bills clients&quot;;\n\n      // Creates a CompareInfo that uses the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Compares two strings using myComp.\n      Console.WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1.Substring( 3, 10 ), myStr2.Substring( 3, 10 ) );\n      Console.WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp.Compare( myStr1, 3, 10, myStr2, 3, 10 ) );\n      Console.WriteLine( &quot;   With None                         : {0}&quot;, myComp.Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions.None ) );\n      Console.WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp.Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;   With StringSort                   : {0}&quot;, myComp.Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions.StringSort ) );\n      Console.WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp.Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions.IgnoreCase ) );\n      Console.WriteLine( &quot;   With IgnoreSymbols                : {0}&quot;, myComp.Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions.IgnoreSymbols ) );\n      Console.WriteLine( &quot;   With IgnoreCase and IgnoreSymbols : {0}&quot;, myComp.Compare( myStr1, 3, 10, myStr2, 3, 10, CompareOptions.IgnoreCase | CompareOptions.IgnoreSymbols ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nComparing &quot;Uncle Bill&quot; and &quot;uncle bill&quot;\n   With no CompareOptions            : 1\n   With None                         : 1\n   With Ordinal                      : -32\n   With StringSort                   : 1\n   With IgnoreCase                   : 0\n   With IgnoreSymbols                : 1\n   With IgnoreCase and IgnoreSymbols : 0\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object is equal to the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified object is equal to the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects are equal if their <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Name_\" data-linktype=\"relative-path\">Name</a> properties are equal.  </p>\n<p> This method overrides <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> If a security decision depends on a string comparison or a case change, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_GetCompareInfo_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_GetCompareInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCompareInfo(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that is associated with the culture with the specified identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CompareInfo GetCompareInfo (int culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer representing the culture identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the culture with the specified identifier and using string comparison methods in the current <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares portions of two strings using the different <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with international sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with traditional sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">// The following code example compares two strings using the different CompareInfo instances:\n//    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with international sort,\n//    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with traditional sort, and\n//    a CompareInfo instance associated with the InvariantCulture.\n\nusing System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;calor&quot;;\n\n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      CompareInfo myCompIntl = CompareInfo.GetCompareInfo( &quot;es-ES&quot; );\n      \n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      CompareInfo myCompTrad = CompareInfo.GetCompareInfo( 0x040A );\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myCompInva = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Compares two strings using myCompIntl.\n      Console.WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1, myStr2 );\n      Console.WriteLine( &quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare( myStr1, myStr2 ) );\n      Console.WriteLine( &quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare( myStr1, myStr2 ) );\n      Console.WriteLine( &quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare( myStr1, myStr2 ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nComparing &quot;calle&quot; and &quot;calor&quot;\n   With myCompIntl.Compare: -1\n   With myCompTrad.Compare: 1\n   With myCompInva.Compare: -1\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">// The following code example compares two strings using the different CompareInfo instances:\n//    a CompareInfo instance associated with the S&quot;Spanish - Spain&quot; culture with international sort,\n//    a CompareInfo instance associated with the S&quot;Spanish - Spain&quot; culture with traditional sort, and\n//    a CompareInfo instance associated with the InvariantCulture.\nusing namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;calor&quot;;\n   \n   // Uses GetCompareInfo to create the CompareInfo that \n   // uses the S&quot;es-ES&quot; culture with international sort.\n   CompareInfo^ myCompIntl = CompareInfo::GetCompareInfo( &quot;es-ES&quot; );\n   \n   // Uses GetCompareInfo to create the CompareInfo that \n   // uses the S&quot;es-ES&quot; culture with traditional sort.\n   CompareInfo^ myCompTrad = CompareInfo::GetCompareInfo( 0x040A );\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myCompInva = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Compares two strings using myCompIntl.\n   Console::WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1, myStr2 );\n   Console::WriteLine( &quot;   With myCompIntl::Compare: {0}&quot;, myCompIntl-&gt;Compare( myStr1, myStr2 ) );\n   Console::WriteLine( &quot;   With myCompTrad::Compare: {0}&quot;, myCompTrad-&gt;Compare( myStr1, myStr2 ) );\n   Console::WriteLine( &quot;   With myCompInva::Compare: {0}&quot;, myCompInva-&gt;Compare( myStr1, myStr2 ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing &quot;calle&quot; and &quot;calor&quot;\n   With myCompIntl::Compare: -1\n   With myCompTrad::Compare: 1\n   With myCompInva::Compare: -1\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">&#39; The following code example compares two strings using the different CompareInfo instances:\n&#39;    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with international sort,\n&#39;    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with traditional sort, and\n&#39;    a CompareInfo instance associated with the InvariantCulture.\n\nImports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;calor&quot;\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      Dim myCompIntl As CompareInfo = CompareInfo.GetCompareInfo(&quot;es-ES&quot;)\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      Dim myCompTrad As CompareInfo = CompareInfo.GetCompareInfo(&amp;H40A)\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myCompInva As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Compares two strings using myCompIntl.\n      Console.WriteLine(&quot;Comparing &quot;&quot;{0}&quot;&quot; and &quot;&quot;{1}&quot;&quot;&quot;, myStr1, myStr2)\n      Console.WriteLine(&quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare(myStr1, myStr2))\n      Console.WriteLine(&quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare(myStr1, myStr2))\n      Console.WriteLine(&quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare(myStr1, myStr2))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing &quot;calle&quot; and &quot;calor&quot;\n&#39;   With myCompIntl.Compare: -1\n&#39;   With myCompTrad.Compare: 1\n&#39;   With myCompInva.Compare: -1\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_GetCompareInfo_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_GetCompareInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCompareInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that is associated with the culture with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CompareInfo GetCompareInfo (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string representing the culture name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the culture with the specified identifier and using string comparison methods in the current <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is an invalid culture name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares portions of two strings using the different <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with international sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the Spanish (Spain) culture with traditional sort  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">// The following code example compares two strings using the different CompareInfo instances:\n//    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with international sort,\n//    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with traditional sort, and\n//    a CompareInfo instance associated with the InvariantCulture.\n\nusing System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;calor&quot;;\n\n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      CompareInfo myCompIntl = CompareInfo.GetCompareInfo( &quot;es-ES&quot; );\n      \n      // Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      CompareInfo myCompTrad = CompareInfo.GetCompareInfo( 0x040A );\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myCompInva = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Compares two strings using myCompIntl.\n      Console.WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1, myStr2 );\n      Console.WriteLine( &quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare( myStr1, myStr2 ) );\n      Console.WriteLine( &quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare( myStr1, myStr2 ) );\n      Console.WriteLine( &quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare( myStr1, myStr2 ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nComparing &quot;calle&quot; and &quot;calor&quot;\n   With myCompIntl.Compare: -1\n   With myCompTrad.Compare: 1\n   With myCompInva.Compare: -1\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">// The following code example compares two strings using the different CompareInfo instances:\n//    a CompareInfo instance associated with the S&quot;Spanish - Spain&quot; culture with international sort,\n//    a CompareInfo instance associated with the S&quot;Spanish - Spain&quot; culture with traditional sort, and\n//    a CompareInfo instance associated with the InvariantCulture.\nusing namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;calor&quot;;\n   \n   // Uses GetCompareInfo to create the CompareInfo that \n   // uses the S&quot;es-ES&quot; culture with international sort.\n   CompareInfo^ myCompIntl = CompareInfo::GetCompareInfo( &quot;es-ES&quot; );\n   \n   // Uses GetCompareInfo to create the CompareInfo that \n   // uses the S&quot;es-ES&quot; culture with traditional sort.\n   CompareInfo^ myCompTrad = CompareInfo::GetCompareInfo( 0x040A );\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myCompInva = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Compares two strings using myCompIntl.\n   Console::WriteLine( &quot;Comparing \\&quot;{0}\\&quot; and \\&quot;{1}\\&quot;&quot;, myStr1, myStr2 );\n   Console::WriteLine( &quot;   With myCompIntl::Compare: {0}&quot;, myCompIntl-&gt;Compare( myStr1, myStr2 ) );\n   Console::WriteLine( &quot;   With myCompTrad::Compare: {0}&quot;, myCompTrad-&gt;Compare( myStr1, myStr2 ) );\n   Console::WriteLine( &quot;   With myCompInva::Compare: {0}&quot;, myCompInva-&gt;Compare( myStr1, myStr2 ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing &quot;calle&quot; and &quot;calor&quot;\n   With myCompIntl::Compare: -1\n   With myCompTrad::Compare: 1\n   With myCompInva::Compare: -1\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.CompareStrStr#1\">&#39; The following code example compares two strings using the different CompareInfo instances:\n&#39;    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with international sort,\n&#39;    a CompareInfo instance associated with the &quot;Spanish - Spain&quot; culture with traditional sort, and\n&#39;    a CompareInfo instance associated with the InvariantCulture.\n\nImports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;calor&quot;\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with international sort.\n      Dim myCompIntl As CompareInfo = CompareInfo.GetCompareInfo(&quot;es-ES&quot;)\n\n      &#39; Uses GetCompareInfo to create the CompareInfo that uses the &quot;es-ES&quot; culture with traditional sort.\n      Dim myCompTrad As CompareInfo = CompareInfo.GetCompareInfo(&amp;H40A)\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myCompInva As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Compares two strings using myCompIntl.\n      Console.WriteLine(&quot;Comparing &quot;&quot;{0}&quot;&quot; and &quot;&quot;{1}&quot;&quot;&quot;, myStr1, myStr2)\n      Console.WriteLine(&quot;   With myCompIntl.Compare: {0}&quot;, myCompIntl.Compare(myStr1, myStr2))\n      Console.WriteLine(&quot;   With myCompTrad.Compare: {0}&quot;, myCompTrad.Compare(myStr1, myStr2))\n      Console.WriteLine(&quot;   With myCompInva.Compare: {0}&quot;, myCompInva.Compare(myStr1, myStr2))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing &quot;calle&quot; and &quot;calor&quot;\n&#39;   With myCompIntl.Compare: -1\n&#39;   With myCompTrad.Compare: 1\n&#39;   With myCompInva.Compare: -1\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_GetCompareInfo_System_Int32_System_Reflection_Assembly_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_GetCompareInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCompareInfo(Int32,Assembly)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that is associated with the specified culture and that uses string comparison methods in the specified <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer representing the culture identifier.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> that contains the string comparison methods to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the culture with the specified identifier and using string comparison methods in the current <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>assembly</code> is of an invalid type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The behavior of this method is unpredictable. It is recommended for your application to use a version of this method that does not take an assembly input.  </p>\n</div>\n<p> The <code>assembly</code> parameter must be of the same type as <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_Assembly_\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_GetCompareInfo_System_String_System_Reflection_Assembly_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_GetCompareInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCompareInfo(String,Assembly)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that is associated with the specified culture and that uses string comparison methods in the specified <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string representing the culture name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> that contains the string comparison methods to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object associated with the culture with the specified identifier and using string comparison methods in the current <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>assembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is an invalid culture name.  </p>\n<p> -or-  </p>\n<p> <code>assembly</code> is of an invalid type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The behavior of this method is unpredictable. We recommend that you use a version of this method that does not take an assembly input.  </p>\n</div>\n<p> The <code>assembly</code> parameter must be of the same type as <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_Assembly_\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> for hashing algorithms and data structures, such as a hash table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> This method generates the same hash code for two objects that are equal according to the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_GetHashCode_System_String_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode(String,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the hash code for a string based on specified comparison options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string whose hash code is to be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that determines how strings are compared.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior of GetHashCode is dependent on its implementation, which might change from one version of the common language runtime to another, or from one .NET Framework platform to another.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If two string objects are equal, the GetHashCode method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.  </p>\n<p> The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain.  </p>\n<p> As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_GetSortKey_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_GetSortKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSortKey(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the sort key for the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.SortKey GetSortKey (string source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string for which a <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object is obtained.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object that contains the sort key for the specified string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key is the repository of these weights for a particular string. For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on. The <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_GetSortKey_\" data-linktype=\"relative-path\">GetSortKey</a> method is equivalent to the Windows API method <code>LCMapString</code> with the LCMAP_SORTKEY flag.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_GetSortKey_System_String_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_GetSortKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSortKey(String,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object for the specified string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string for which a <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object is obtained.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object that contains the sort key for the specified string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key is the repository of these weights for a particular string. For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on. The <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_GetSortKey_\" data-linktype=\"relative-path\">GetSortKey</a> method is equivalent to the Windows API method <code>LCMapString</code> with the LCMAP_SORTKEY flag.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_Char_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searches the source string from the beginning of the string to the end of the string.  </p>\n<p> This overload performs a culture-sensitive search. If <code>value</code> represents a precomposed Unicode character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode code points are the same, you should call an overload that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value. Unlike IndexOf, which performs a culture-sensitive comparison, overloads of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method that search for a character perform an ordinal comparison and overloads that search for a string perform a culture-sensitive comparison.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should use string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot; ), myComp.LastIndexOf( myStr, &quot;AE&quot; ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot; ), myComp.LastIndexOf( myStr, &quot;ae&quot; ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39; ), myComp.LastIndexOf( myStr, &#39;&#198;&#39; ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39; ), myComp.LastIndexOf( myStr, &#39;&#230;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39; ), myComp.LastIndexOf( myStr, &#39;&#220;&#39; ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39; ), myComp.LastIndexOf( myStr, &#39;&#252;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOf#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;), myComp.LastIndexOf(myStr, &quot;AE&quot;))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;), myComp.LastIndexOf(myStr, &quot;ae&quot;))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;No options    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                    l\n&#39;           ae :          f                   l\n&#39;            &#198; :    f                    l\n&#39;            &#230; :          f                   l\n&#39;Ordinal       : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :                              b\n&#39;IgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                         l\n&#39;           ae :    f                         l\n&#39;            &#198; :    f                         l\n&#39;            &#230; :    f                         l\n&#39;\n&#39;No options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                    l\n&#39;           u&quot; :          f                   l\n&#39;            &#220; :    f                    l\n&#39;            &#252; :          f                   l\n&#39;Ordinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :                              b\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                         l\n&#39;           u&quot; :    f                         l\n&#39;            &#220; :    f                         l\n&#39;            &#252; :    f                         l\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot; ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot; ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39; ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39; ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at the beginning of the string and ending at the end of the string.  </p>\n<p> This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should use one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot; ), myComp.LastIndexOf( myStr, &quot;AE&quot; ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot; ), myComp.LastIndexOf( myStr, &quot;ae&quot; ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39; ), myComp.LastIndexOf( myStr, &#39;&#198;&#39; ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39; ), myComp.LastIndexOf( myStr, &#39;&#230;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39; ), myComp.LastIndexOf( myStr, &#39;&#220;&#39; ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39; ), myComp.LastIndexOf( myStr, &#39;&#252;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOf#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;), myComp.LastIndexOf(myStr, &quot;AE&quot;))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;), myComp.LastIndexOf(myStr, &quot;ae&quot;))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;No options    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                    l\n&#39;           ae :          f                   l\n&#39;            &#198; :    f                    l\n&#39;            &#230; :          f                   l\n&#39;Ordinal       : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :                              b\n&#39;IgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                         l\n&#39;           ae :    f                         l\n&#39;            &#198; :    f                         l\n&#39;            &#230; :    f                         l\n&#39;\n&#39;No options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                    l\n&#39;           u&quot; :          f                   l\n&#39;            &#220; :    f                    l\n&#39;            &#252; :          f                   l\n&#39;Ordinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :                              b\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                         l\n&#39;           u&quot; :    f                         l\n&#39;            &#220; :    f                         l\n&#39;            &#252; :    f                         l\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot; ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot; ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39; ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39; ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Char,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how the strings should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at the beginning of the string and ending at the end of the string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should use string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot; ), myComp.LastIndexOf( myStr, &quot;AE&quot; ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot; ), myComp.LastIndexOf( myStr, &quot;ae&quot; ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39; ), myComp.LastIndexOf( myStr, &#39;&#198;&#39; ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39; ), myComp.LastIndexOf( myStr, &#39;&#230;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39; ), myComp.LastIndexOf( myStr, &#39;&#220;&#39; ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39; ), myComp.LastIndexOf( myStr, &#39;&#252;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOf#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;), myComp.LastIndexOf(myStr, &quot;AE&quot;))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;), myComp.LastIndexOf(myStr, &quot;ae&quot;))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;No options    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                    l\n&#39;           ae :          f                   l\n&#39;            &#198; :    f                    l\n&#39;            &#230; :          f                   l\n&#39;Ordinal       : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :                              b\n&#39;IgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                         l\n&#39;           ae :    f                         l\n&#39;            &#198; :    f                         l\n&#39;            &#230; :    f                         l\n&#39;\n&#39;No options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                    l\n&#39;           u&quot; :          f                   l\n&#39;            &#220; :    f                    l\n&#39;            &#252; :          f                   l\n&#39;Ordinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :                              b\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                         l\n&#39;           u&quot; :    f                         l\n&#39;            &#220; :    f                         l\n&#39;            &#252; :    f                         l\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot; ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot; ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39; ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39; ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Char,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, char value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at <code>startIndex</code> and ending at the end of the string.  </p>\n<p> This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value. Overloads of <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> are searching in different portions of the string, even with the same <code>startIndex</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 20;\n   \n   // myT1 is the string used for padding.\n   String^ myT1;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 20\n      &#39; myT1 is the string used for padding.\n      Dim myT1 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS]), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS]), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS]))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS]))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS]))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS]))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n      \n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                              f\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;Ordinal       : -------------------- as &#198; or &#230;?\n&#39;           AE :\n&#39;           ae :\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;IgnoreCase    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                         f\n&#39;            &#198; :                         f\n&#39;            &#230; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :    l\n&#39;            &#230; :          l\n&#39;Ordinal       : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :\n&#39;            &#230; :\n&#39;IgnoreCase    : Is AE or ae the same ----------\n&#39;           AE :          l\n&#39;           ae :          l\n&#39;            &#198; :          l\n&#39;            &#230; :          l\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                              f\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;Ordinal       : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :\n&#39;           u&quot; :\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;IgnoreCase    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                         f\n&#39;            &#220; :                         f\n&#39;            &#252; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :    l\n&#39;            &#252; :          l\n&#39;Ordinal       : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :\n&#39;            &#252; :\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :          l\n&#39;           u&quot; :          l\n&#39;            &#220; :          l\n&#39;            &#252; :          l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 20;\n      // myT1 is the string used for padding.\n      String myT1;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,String,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at the beginning of the string and ending at the end of the string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot; ), myComp.LastIndexOf( myStr, &quot;AE&quot; ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot; ), myComp.LastIndexOf( myStr, &quot;ae&quot; ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39; ), myComp.LastIndexOf( myStr, &#39;&#198;&#39; ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39; ), myComp.LastIndexOf( myStr, &#39;&#230;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39; ), myComp.LastIndexOf( myStr, &#39;&#220;&#39; ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39; ), myComp.LastIndexOf( myStr, &#39;&#252;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOf#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;), myComp.LastIndexOf(myStr, &quot;AE&quot;))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;), myComp.LastIndexOf(myStr, &quot;ae&quot;))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;No options    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                    l\n&#39;           ae :          f                   l\n&#39;            &#198; :    f                    l\n&#39;            &#230; :          f                   l\n&#39;Ordinal       : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :                              b\n&#39;IgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                         l\n&#39;           ae :    f                         l\n&#39;            &#198; :    f                         l\n&#39;            &#230; :    f                         l\n&#39;\n&#39;No options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                    l\n&#39;           u&quot; :          f                   l\n&#39;            &#220; :    f                    l\n&#39;            &#252; :          f                   l\n&#39;Ordinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :                              b\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                         l\n&#39;           u&quot; :    f                         l\n&#39;            &#220; :    f                         l\n&#39;            &#252; :    f                         l\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot; ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot; ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39; ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39; ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, string value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at <code>startIndex</code> and ending at the end of the string.  </p>\n<p> This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> are searching in different portions of the string, even with the same <code>startIndex</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 20;\n   \n   // myT1 is the string used for padding.\n   String^ myT1;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 20\n      &#39; myT1 is the string used for padding.\n      Dim myT1 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS]), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS]), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS]))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS]))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS]))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS]))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n      \n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                              f\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;Ordinal       : -------------------- as &#198; or &#230;?\n&#39;           AE :\n&#39;           ae :\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;IgnoreCase    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                         f\n&#39;            &#198; :                         f\n&#39;            &#230; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :    l\n&#39;            &#230; :          l\n&#39;Ordinal       : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :\n&#39;            &#230; :\n&#39;IgnoreCase    : Is AE or ae the same ----------\n&#39;           AE :          l\n&#39;           ae :          l\n&#39;            &#198; :          l\n&#39;            &#230; :          l\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                              f\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;Ordinal       : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :\n&#39;           u&quot; :\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;IgnoreCase    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                         f\n&#39;            &#220; :                         f\n&#39;            &#252; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :    l\n&#39;            &#252; :          l\n&#39;Ordinal       : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :\n&#39;            &#252; :\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :          l\n&#39;           u&quot; :          l\n&#39;            &#220; :          l\n&#39;            &#252; :          l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 20;\n      // myT1 is the string used for padding.\n      String myT1;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Char,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at <code>startIndex</code> and ending at the end of the string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> are searching in different portions of the string, even with the same <code>startIndex</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 20;\n   \n   // myT1 is the string used for padding.\n   String^ myT1;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 20\n      &#39; myT1 is the string used for padding.\n      Dim myT1 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS]), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS]), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS]))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS]))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS]))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS]))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n      \n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                              f\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;Ordinal       : -------------------- as &#198; or &#230;?\n&#39;           AE :\n&#39;           ae :\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;IgnoreCase    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                         f\n&#39;            &#198; :                         f\n&#39;            &#230; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :    l\n&#39;            &#230; :          l\n&#39;Ordinal       : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :\n&#39;            &#230; :\n&#39;IgnoreCase    : Is AE or ae the same ----------\n&#39;           AE :          l\n&#39;           ae :          l\n&#39;            &#198; :          l\n&#39;            &#230; :          l\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                              f\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;Ordinal       : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :\n&#39;           u&quot; :\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;IgnoreCase    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                         f\n&#39;            &#220; :                         f\n&#39;            &#252; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :    l\n&#39;            &#252; :          l\n&#39;Ordinal       : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :\n&#39;            &#252; :\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :          l\n&#39;           u&quot; :          l\n&#39;            &#220; :          l\n&#39;            &#252; :          l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 20;\n      // myT1 is the string used for padding.\n      String myT1;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Char,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, char value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at <code>startIndex</code> and ending at <code>startIndex</code> + <code>count</code> - 1.  </p>\n<p> This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value. Overloads of <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 8;\n   \n   // iL is the length of the substring.\n   int iL = 18;\n   \n   // myT1 and myT2 are the strings used for padding.\n   String^ myT1 = gcnew String( &#39;-&#39;,iS );\n   String^ myT2;\n   \n   // Searches for the ligature &#195;â€ .\n   String^ myStr = &quot;Is AE or ae the same as &#195;â€  or &#195;&#166;?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#195;â€  or &#195;&#166;?\nNo options    : -------- ae the same as &#195;â€  -----\n           AE :                         b\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :          b\nOrdinal       : -------- ae the same as &#195;â€  -----\n           AE :\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :\nIgnoreCase    : -------- ae the same as &#195;â€  -----\n           AE :          f              l\n           ae :          f              l\n            &#195;â€  :          f              l\n            &#195;&#166; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#195;Å“ or &#195;&#188;?\nNo options    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :          b\nOrdinal       : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :\nIgnoreCase    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#195;Å“ :          f              l\n            &#195;&#188; :          f              l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 8\n      &#39; iL is the length of the substring.\n      Dim iL As Integer = 18\n      &#39; myT1 and myT2 are the strings used for padding.\n      Dim myT1 As New [String](&quot;-&quot;c, [iS])\n      Dim myT2 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------- ae the same as &#198; -----\n&#39;           AE :                         b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :          b\n&#39;Ordinal       : -------- ae the same as &#198; -----\n&#39;           AE :\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :\n&#39;IgnoreCase    : -------- ae the same as &#198; -----\n&#39;           AE :          f              l\n&#39;           ae :          f              l\n&#39;            &#198; :          f              l\n&#39;            &#230; :          f              l\n&#39;\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :                         b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :          b\n&#39;Ordinal       : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :\n&#39;IgnoreCase    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :          f              l\n&#39;           u&quot; :          f              l\n&#39;            &#220; :          f              l\n&#39;            &#252; :          f              l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 8;\n      // iL is the length of the substring.\n      int iL = 18;\n      // myT1 and myT2 are the strings used for padding.\n      String myT1 = new String( &#39;-&#39;, iS );\n      String myT2;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------- ae the same as &#198; -----\n           AE :                         b\n           ae :          b\n            &#198; :                         b\n            &#230; :          b\nOrdinal       : -------- ae the same as &#198; -----\n           AE :\n           ae :          b\n            &#198; :                         b\n            &#230; :\nIgnoreCase    : -------- ae the same as &#198; -----\n           AE :          f              l\n           ae :          f              l\n            &#198; :          f              l\n            &#230; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------- u&quot; the same as &#220; -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :          b\nOrdinal       : -------- u&quot; the same as &#220; -----\n           U&quot; :\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :\nIgnoreCase    : -------- u&quot; the same as &#220; -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#220; :          f              l\n            &#252; :          f              l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,String,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at <code>startIndex</code> and ending at the end of the string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> are searching in different portions of the string, even with the same <code>startIndex</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 20;\n   \n   // myT1 is the string used for padding.\n   String^ myT1;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 20\n      &#39; myT1 is the string used for padding.\n      Dim myT1 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS]), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS]), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS]))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS]))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS]))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS]))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n      \n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                              f\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;Ordinal       : -------------------- as &#198; or &#230;?\n&#39;           AE :\n&#39;           ae :\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;IgnoreCase    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                         f\n&#39;            &#198; :                         f\n&#39;            &#230; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :    l\n&#39;            &#230; :          l\n&#39;Ordinal       : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :\n&#39;            &#230; :\n&#39;IgnoreCase    : Is AE or ae the same ----------\n&#39;           AE :          l\n&#39;           ae :          l\n&#39;            &#198; :          l\n&#39;            &#230; :          l\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                              f\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;Ordinal       : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :\n&#39;           u&quot; :\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;IgnoreCase    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                         f\n&#39;            &#220; :                         f\n&#39;            &#252; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :    l\n&#39;            &#252; :          l\n&#39;Ordinal       : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :\n&#39;            &#252; :\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :          l\n&#39;           u&quot; :          l\n&#39;            &#220; :          l\n&#39;            &#252; :          l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 20;\n      // myT1 is the string used for padding.\n      String myT1;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, string value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at <code>startIndex</code> and ending at <code>startIndex</code> + <code>count</code> - 1.  </p>\n<p> This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 8;\n   \n   // iL is the length of the substring.\n   int iL = 18;\n   \n   // myT1 and myT2 are the strings used for padding.\n   String^ myT1 = gcnew String( &#39;-&#39;,iS );\n   String^ myT2;\n   \n   // Searches for the ligature &#195;â€ .\n   String^ myStr = &quot;Is AE or ae the same as &#195;â€  or &#195;&#166;?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#195;â€  or &#195;&#166;?\nNo options    : -------- ae the same as &#195;â€  -----\n           AE :                         b\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :          b\nOrdinal       : -------- ae the same as &#195;â€  -----\n           AE :\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :\nIgnoreCase    : -------- ae the same as &#195;â€  -----\n           AE :          f              l\n           ae :          f              l\n            &#195;â€  :          f              l\n            &#195;&#166; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#195;Å“ or &#195;&#188;?\nNo options    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :          b\nOrdinal       : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :\nIgnoreCase    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#195;Å“ :          f              l\n            &#195;&#188; :          f              l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 8\n      &#39; iL is the length of the substring.\n      Dim iL As Integer = 18\n      &#39; myT1 and myT2 are the strings used for padding.\n      Dim myT1 As New [String](&quot;-&quot;c, [iS])\n      Dim myT2 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------- ae the same as &#198; -----\n&#39;           AE :                         b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :          b\n&#39;Ordinal       : -------- ae the same as &#198; -----\n&#39;           AE :\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :\n&#39;IgnoreCase    : -------- ae the same as &#198; -----\n&#39;           AE :          f              l\n&#39;           ae :          f              l\n&#39;            &#198; :          f              l\n&#39;            &#230; :          f              l\n&#39;\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :                         b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :          b\n&#39;Ordinal       : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :\n&#39;IgnoreCase    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :          f              l\n&#39;           u&quot; :          f              l\n&#39;            &#220; :          f              l\n&#39;            &#252; :          f              l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 8;\n      // iL is the length of the substring.\n      int iL = 18;\n      // myT1 and myT2 are the strings used for padding.\n      String myT1 = new String( &#39;-&#39;, iS );\n      String myT2;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------- ae the same as &#198; -----\n           AE :                         b\n           ae :          b\n            &#198; :                         b\n            &#230; :          b\nOrdinal       : -------- ae the same as &#198; -----\n           AE :\n           ae :          b\n            &#198; :                         b\n            &#230; :\nIgnoreCase    : -------- ae the same as &#198; -----\n           AE :          f              l\n           ae :          f              l\n            &#198; :          f              l\n            &#230; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------- u&quot; the same as &#220; -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :          b\nOrdinal       : -------- u&quot; the same as &#220; -----\n           U&quot; :\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :\nIgnoreCase    : -------- u&quot; the same as &#220; -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#220; :          f              l\n            &#252; :          f              l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_Char_System_Int32_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Char,Int32,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at <code>startIndex</code> and ending at <code>startIndex</code> + <code>count</code> - 1.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 8;\n   \n   // iL is the length of the substring.\n   int iL = 18;\n   \n   // myT1 and myT2 are the strings used for padding.\n   String^ myT1 = gcnew String( &#39;-&#39;,iS );\n   String^ myT2;\n   \n   // Searches for the ligature &#195;â€ .\n   String^ myStr = &quot;Is AE or ae the same as &#195;â€  or &#195;&#166;?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#195;â€  or &#195;&#166;?\nNo options    : -------- ae the same as &#195;â€  -----\n           AE :                         b\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :          b\nOrdinal       : -------- ae the same as &#195;â€  -----\n           AE :\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :\nIgnoreCase    : -------- ae the same as &#195;â€  -----\n           AE :          f              l\n           ae :          f              l\n            &#195;â€  :          f              l\n            &#195;&#166; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#195;Å“ or &#195;&#188;?\nNo options    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :          b\nOrdinal       : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :\nIgnoreCase    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#195;Å“ :          f              l\n            &#195;&#188; :          f              l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 8\n      &#39; iL is the length of the substring.\n      Dim iL As Integer = 18\n      &#39; myT1 and myT2 are the strings used for padding.\n      Dim myT1 As New [String](&quot;-&quot;c, [iS])\n      Dim myT2 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------- ae the same as &#198; -----\n&#39;           AE :                         b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :          b\n&#39;Ordinal       : -------- ae the same as &#198; -----\n&#39;           AE :\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :\n&#39;IgnoreCase    : -------- ae the same as &#198; -----\n&#39;           AE :          f              l\n&#39;           ae :          f              l\n&#39;            &#198; :          f              l\n&#39;            &#230; :          f              l\n&#39;\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :                         b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :          b\n&#39;Ordinal       : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :\n&#39;IgnoreCase    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :          f              l\n&#39;           u&quot; :          f              l\n&#39;            &#220; :          f              l\n&#39;            &#252; :          f              l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 8;\n      // iL is the length of the substring.\n      int iL = 18;\n      // myT1 and myT2 are the strings used for padding.\n      String myT1 = new String( &#39;-&#39;, iS );\n      String myT2;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------- ae the same as &#198; -----\n           AE :                         b\n           ae :          b\n            &#198; :                         b\n            &#230; :          b\nOrdinal       : -------- ae the same as &#198; -----\n           AE :\n           ae :          b\n            &#198; :                         b\n            &#230; :\nIgnoreCase    : -------- ae the same as &#198; -----\n           AE :          f              l\n           ae :          f              l\n            &#198; :          f              l\n            &#230; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------- u&quot; the same as &#220; -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :          b\nOrdinal       : -------- u&quot; the same as &#220; -----\n           U&quot; :\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :\nIgnoreCase    : -------- u&quot; the same as &#220; -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#220; :          f              l\n            &#252; :          f              l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IndexOf_System_String_System_String_System_Int32_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,String,Int32,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched forward starting at <code>startIndex</code> and ending at <code>startIndex</code> + <code>count</code> - 1.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 8;\n   \n   // iL is the length of the substring.\n   int iL = 18;\n   \n   // myT1 and myT2 are the strings used for padding.\n   String^ myT1 = gcnew String( &#39;-&#39;,iS );\n   String^ myT2;\n   \n   // Searches for the ligature &#195;â€ .\n   String^ myStr = &quot;Is AE or ae the same as &#195;â€  or &#195;&#166;?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#195;â€  or &#195;&#166;?\nNo options    : -------- ae the same as &#195;â€  -----\n           AE :                         b\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :          b\nOrdinal       : -------- ae the same as &#195;â€  -----\n           AE :\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :\nIgnoreCase    : -------- ae the same as &#195;â€  -----\n           AE :          f              l\n           ae :          f              l\n            &#195;â€  :          f              l\n            &#195;&#166; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#195;Å“ or &#195;&#188;?\nNo options    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :          b\nOrdinal       : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :\nIgnoreCase    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#195;Å“ :          f              l\n            &#195;&#188; :          f              l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 8\n      &#39; iL is the length of the substring.\n      Dim iL As Integer = 18\n      &#39; myT1 and myT2 are the strings used for padding.\n      Dim myT1 As New [String](&quot;-&quot;c, [iS])\n      Dim myT2 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------- ae the same as &#198; -----\n&#39;           AE :                         b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :          b\n&#39;Ordinal       : -------- ae the same as &#198; -----\n&#39;           AE :\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :\n&#39;IgnoreCase    : -------- ae the same as &#198; -----\n&#39;           AE :          f              l\n&#39;           ae :          f              l\n&#39;            &#198; :          f              l\n&#39;            &#230; :          f              l\n&#39;\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :                         b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :          b\n&#39;Ordinal       : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :\n&#39;IgnoreCase    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :          f              l\n&#39;           u&quot; :          f              l\n&#39;            &#220; :          f              l\n&#39;            &#252; :          f              l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 8;\n      // iL is the length of the substring.\n      int iL = 18;\n      // myT1 and myT2 are the strings used for padding.\n      String myT1 = new String( &#39;-&#39;, iS );\n      String myT2;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------- ae the same as &#198; -----\n           AE :                         b\n           ae :          b\n            &#198; :                         b\n            &#230; :          b\nOrdinal       : -------- ae the same as &#198; -----\n           AE :\n           ae :          b\n            &#198; :                         b\n            &#230; :\nIgnoreCase    : -------- ae the same as &#198; -----\n           AE :          f              l\n           ae :          f              l\n            &#198; :          f              l\n            &#230; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------- u&quot; the same as &#220; -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :          b\nOrdinal       : -------- u&quot; the same as &#220; -----\n           U&quot; :\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :\nIgnoreCase    : -------- u&quot; the same as &#220; -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#220; :          f              l\n            &#252; :          f              l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IsPrefix_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IsPrefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPrefix(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified source string starts with the specified prefix.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsPrefix (string source, string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search in.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare with the beginning of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the length of <code>prefix</code> is less than or equal to the length of <code>source</code> and <code>source</code> starts with <code>prefix</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>prefix</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every string starts and ends with an empty substring (&quot;&quot;); therefore, if <code>prefix</code> is an empty string, this method returns <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a string is the prefix or suffix of another string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IsPrefixSuffix#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;llegar&quot;;\n   String^ myXfix = &quot;lle&quot;;\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Determines whether myXfix is a prefix of S&quot;calle&quot; and S&quot;llegar&quot;.\n   Console::WriteLine( &quot;IsPrefix( {0}, {1}) : {2}&quot;, myStr1, myXfix, myComp-&gt;IsPrefix( myStr1, myXfix ) );\n   Console::WriteLine( &quot;IsPrefix( {0}, {1}) : {2}&quot;, myStr2, myXfix, myComp-&gt;IsPrefix( myStr2, myXfix ) );\n   \n   // Determines whether myXfix is a suffix of S&quot;calle&quot; and S&quot;llegar&quot;.\n   Console::WriteLine( &quot;IsSuffix( {0}, {1}) : {2}&quot;, myStr1, myXfix, myComp-&gt;IsSuffix( myStr1, myXfix ) );\n   Console::WriteLine( &quot;IsSuffix( {0}, {1}) : {2}&quot;, myStr2, myXfix, myComp-&gt;IsSuffix( myStr2, myXfix ) );\n}\n\n/*\nThis code produces the following output.\n\nIsPrefix(calle, lle) : False\nIsPrefix(llegar, lle) : True\nIsSuffix(calle, lle) : True\nIsSuffix(llegar, lle) : False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IsPrefixSuffix#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;llegar&quot;;\n      String myXfix = &quot;lle&quot;;\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Determines whether myXfix is a prefix of &quot;calle&quot; and &quot;llegar&quot;.\n      Console.WriteLine( &quot;IsPrefix( {0}, {1} ) : {2}&quot;, myStr1, myXfix, myComp.IsPrefix( myStr1, myXfix ) );\n      Console.WriteLine( &quot;IsPrefix( {0}, {1} ) : {2}&quot;, myStr2, myXfix, myComp.IsPrefix( myStr2, myXfix ) );\n\n      // Determines whether myXfix is a suffix of &quot;calle&quot; and &quot;llegar&quot;.\n      Console.WriteLine( &quot;IsSuffix( {0}, {1} ) : {2}&quot;, myStr1, myXfix, myComp.IsSuffix( myStr1, myXfix ) );\n      Console.WriteLine( &quot;IsSuffix( {0}, {1} ) : {2}&quot;, myStr2, myXfix, myComp.IsSuffix( myStr2, myXfix ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIsPrefix( calle, lle ) : False\nIsPrefix( llegar, lle ) : True\nIsSuffix( calle, lle ) : True\nIsSuffix( llegar, lle ) : False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IsPrefixSuffix#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;llegar&quot;\n      Dim myXfix As [String] = &quot;lle&quot;\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Determines whether myXfix is a prefix of &quot;calle&quot; and &quot;llegar&quot;.\n      Console.WriteLine(&quot;IsPrefix( {0}, {1} ) : {2}&quot;, myStr1, myXfix, myComp.IsPrefix(myStr1, myXfix))\n      Console.WriteLine(&quot;IsPrefix( {0}, {1} ) : {2}&quot;, myStr2, myXfix, myComp.IsPrefix(myStr2, myXfix))\n\n      &#39; Determines whether myXfix is a suffix of &quot;calle&quot; and &quot;llegar&quot;.\n      Console.WriteLine(&quot;IsSuffix( {0}, {1} ) : {2}&quot;, myStr1, myXfix, myComp.IsSuffix(myStr1, myXfix))\n      Console.WriteLine(&quot;IsSuffix( {0}, {1} ) : {2}&quot;, myStr2, myXfix, myComp.IsSuffix(myStr2, myXfix))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IsPrefix( calle, lle ) : False\n&#39;IsPrefix( llegar, lle ) : True\n&#39;IsSuffix( calle, lle ) : True\n&#39;IsSuffix( llegar, lle ) : False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IsPrefix_System_String_System_String_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IsPrefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPrefix(String,String,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified source string starts with the specified prefix using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search in.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare with the beginning of <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>prefix</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the length of <code>prefix</code> is less than or equal to the length of <code>source</code> and <code>source</code> starts with <code>prefix</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>prefix</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every string starts and ends with an empty substring (&quot;&quot;); therefore, if <code>prefix</code> is an empty string, this method returns <code>true</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a string is the prefix or suffix of another string using <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IsPrefixSuffixOpt#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;llegar&quot;;\n   String^ myXfix = &quot;LLE&quot;;\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   Console::WriteLine( &quot;IsSuffix \\&quot;{0}\\&quot;, \\&quot;{1}\\&quot;&quot;, myStr1, myXfix );\n   Console::WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp-&gt;IsSuffix( myStr1, myXfix ) );\n   Console::WriteLine( &quot;   With None                         : {0}&quot;, myComp-&gt;IsSuffix( myStr1, myXfix, CompareOptions::None ) );\n   Console::WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp-&gt;IsSuffix( myStr1, myXfix, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp-&gt;IsSuffix( myStr1, myXfix, CompareOptions::IgnoreCase ) );\n   Console::WriteLine( &quot;IsPrefix \\&quot;{0}\\&quot;, \\&quot;{1}\\&quot;&quot;, myStr2, myXfix );\n   Console::WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp-&gt;IsPrefix( myStr2, myXfix ) );\n   Console::WriteLine( &quot;   With None                         : {0}&quot;, myComp-&gt;IsPrefix( myStr2, myXfix, CompareOptions::None ) );\n   Console::WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp-&gt;IsPrefix( myStr2, myXfix, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp-&gt;IsPrefix( myStr2, myXfix, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIsSuffix &quot;calle&quot;, &quot;LLE&quot;\n   With no CompareOptions            : False\n   With None                         : False\n   With Ordinal                      : False\n   With IgnoreCase                   : True\nIsPrefix &quot;llegar&quot;, &quot;LLE&quot;\n   With no CompareOptions            : False\n   With None                         : False\n   With Ordinal                      : False\n   With IgnoreCase                   : True\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IsPrefixSuffixOpt#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;llegar&quot;\n      Dim myXfix As [String] = &quot;LLE&quot;\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      Console.WriteLine(&quot;IsSuffix &quot;&quot;{0}&quot;&quot;, &quot;&quot;{1}&quot;&quot;&quot;, myStr1, myXfix)\n      Console.WriteLine(&quot;   With no CompareOptions            : {0}&quot;, myComp.IsSuffix(myStr1, myXfix))\n      Console.WriteLine(&quot;   With None                         : {0}&quot;, myComp.IsSuffix(myStr1, myXfix, CompareOptions.None))\n      Console.WriteLine(&quot;   With Ordinal                      : {0}&quot;, myComp.IsSuffix(myStr1, myXfix, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;   With IgnoreCase                   : {0}&quot;, myComp.IsSuffix(myStr1, myXfix, CompareOptions.IgnoreCase))\n\n      Console.WriteLine(&quot;IsPrefix &quot;&quot;{0}&quot;&quot;, &quot;&quot;{1}&quot;&quot;&quot;, myStr2, myXfix)\n      Console.WriteLine(&quot;   With no CompareOptions            : {0}&quot;, myComp.IsPrefix(myStr2, myXfix))\n      Console.WriteLine(&quot;   With None                         : {0}&quot;, myComp.IsPrefix(myStr2, myXfix, CompareOptions.None))\n      Console.WriteLine(&quot;   With Ordinal                      : {0}&quot;, myComp.IsPrefix(myStr2, myXfix, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;   With IgnoreCase                   : {0}&quot;, myComp.IsPrefix(myStr2, myXfix, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IsSuffix &quot;calle&quot;, &quot;LLE&quot;\n&#39;   With no CompareOptions            : False\n&#39;   With None                         : False\n&#39;   With Ordinal                      : False\n&#39;   With IgnoreCase                   : True\n&#39;IsPrefix &quot;llegar&quot;, &quot;LLE&quot;\n&#39;   With no CompareOptions            : False\n&#39;   With None                         : False\n&#39;   With Ordinal                      : False\n&#39;   With IgnoreCase                   : True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IsPrefixSuffixOpt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;llegar&quot;;\n      String myXfix = &quot;LLE&quot;;\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      Console.WriteLine( &quot;IsSuffix \\&quot;{0}\\&quot;, \\&quot;{1}\\&quot;&quot;, myStr1, myXfix );\n      Console.WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp.IsSuffix( myStr1, myXfix ) );\n      Console.WriteLine( &quot;   With None                         : {0}&quot;, myComp.IsSuffix( myStr1, myXfix, CompareOptions.None ) );\n      Console.WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp.IsSuffix( myStr1, myXfix, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp.IsSuffix( myStr1, myXfix, CompareOptions.IgnoreCase ) );\n\n      Console.WriteLine( &quot;IsPrefix \\&quot;{0}\\&quot;, \\&quot;{1}\\&quot;&quot;, myStr2, myXfix );\n      Console.WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp.IsPrefix( myStr2, myXfix ) );\n      Console.WriteLine( &quot;   With None                         : {0}&quot;, myComp.IsPrefix( myStr2, myXfix, CompareOptions.None ) );\n      Console.WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp.IsPrefix( myStr2, myXfix, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp.IsPrefix( myStr2, myXfix, CompareOptions.IgnoreCase ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIsSuffix &quot;calle&quot;, &quot;LLE&quot;\n   With no CompareOptions            : False\n   With None                         : False\n   With Ordinal                      : False\n   With IgnoreCase                   : True\nIsPrefix &quot;llegar&quot;, &quot;LLE&quot;\n   With no CompareOptions            : False\n   With None                         : False\n   With Ordinal                      : False\n   With IgnoreCase                   : True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IsSortable_System_Char_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IsSortable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSortable(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified Unicode character is sortable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSortable (char ch);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ch</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>ch</code> parameter is sortable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>ch</code> parameter is sortable if it is a Unicode character that is defined in an internal <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> class sort table, and is not a private use or unpaired high or low surrogate character.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IsSortable_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IsSortable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSortable(String)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified Unicode string is sortable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSortable (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string of zero or more Unicode characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>str</code> parameter is not an empty string (&quot;&quot;) and all the Unicode characters in <code>str</code> are sortable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each Unicode character in the <code>str</code> parameter is represented by one or more UTF-16 encoded <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects. The <code>str</code> parameter is sortable if each Unicode character is defined in an internal <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> class sort table, and is not a private use or unpaired high or low surrogate character.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IsSuffix_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IsSuffix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSuffix(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified source string ends with the specified suffix.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSuffix (string source, string suffix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search in.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>suffix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare with the end of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the length of <code>suffix</code> is less than or equal to the length of <code>source</code> and <code>source</code> ends with <code>suffix</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>suffix</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every string starts and ends with an empty substring (&quot;&quot;); therefore, if <code>suffix</code> is an empty string, this method returns <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a string is the prefix or suffix of another string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IsPrefixSuffix#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;llegar&quot;;\n   String^ myXfix = &quot;lle&quot;;\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Determines whether myXfix is a prefix of S&quot;calle&quot; and S&quot;llegar&quot;.\n   Console::WriteLine( &quot;IsPrefix( {0}, {1}) : {2}&quot;, myStr1, myXfix, myComp-&gt;IsPrefix( myStr1, myXfix ) );\n   Console::WriteLine( &quot;IsPrefix( {0}, {1}) : {2}&quot;, myStr2, myXfix, myComp-&gt;IsPrefix( myStr2, myXfix ) );\n   \n   // Determines whether myXfix is a suffix of S&quot;calle&quot; and S&quot;llegar&quot;.\n   Console::WriteLine( &quot;IsSuffix( {0}, {1}) : {2}&quot;, myStr1, myXfix, myComp-&gt;IsSuffix( myStr1, myXfix ) );\n   Console::WriteLine( &quot;IsSuffix( {0}, {1}) : {2}&quot;, myStr2, myXfix, myComp-&gt;IsSuffix( myStr2, myXfix ) );\n}\n\n/*\nThis code produces the following output.\n\nIsPrefix(calle, lle) : False\nIsPrefix(llegar, lle) : True\nIsSuffix(calle, lle) : True\nIsSuffix(llegar, lle) : False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IsPrefixSuffix#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;llegar&quot;;\n      String myXfix = &quot;lle&quot;;\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Determines whether myXfix is a prefix of &quot;calle&quot; and &quot;llegar&quot;.\n      Console.WriteLine( &quot;IsPrefix( {0}, {1} ) : {2}&quot;, myStr1, myXfix, myComp.IsPrefix( myStr1, myXfix ) );\n      Console.WriteLine( &quot;IsPrefix( {0}, {1} ) : {2}&quot;, myStr2, myXfix, myComp.IsPrefix( myStr2, myXfix ) );\n\n      // Determines whether myXfix is a suffix of &quot;calle&quot; and &quot;llegar&quot;.\n      Console.WriteLine( &quot;IsSuffix( {0}, {1} ) : {2}&quot;, myStr1, myXfix, myComp.IsSuffix( myStr1, myXfix ) );\n      Console.WriteLine( &quot;IsSuffix( {0}, {1} ) : {2}&quot;, myStr2, myXfix, myComp.IsSuffix( myStr2, myXfix ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIsPrefix( calle, lle ) : False\nIsPrefix( llegar, lle ) : True\nIsSuffix( calle, lle ) : True\nIsSuffix( llegar, lle ) : False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IsPrefixSuffix#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;llegar&quot;\n      Dim myXfix As [String] = &quot;lle&quot;\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Determines whether myXfix is a prefix of &quot;calle&quot; and &quot;llegar&quot;.\n      Console.WriteLine(&quot;IsPrefix( {0}, {1} ) : {2}&quot;, myStr1, myXfix, myComp.IsPrefix(myStr1, myXfix))\n      Console.WriteLine(&quot;IsPrefix( {0}, {1} ) : {2}&quot;, myStr2, myXfix, myComp.IsPrefix(myStr2, myXfix))\n\n      &#39; Determines whether myXfix is a suffix of &quot;calle&quot; and &quot;llegar&quot;.\n      Console.WriteLine(&quot;IsSuffix( {0}, {1} ) : {2}&quot;, myStr1, myXfix, myComp.IsSuffix(myStr1, myXfix))\n      Console.WriteLine(&quot;IsSuffix( {0}, {1} ) : {2}&quot;, myStr2, myXfix, myComp.IsSuffix(myStr2, myXfix))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IsPrefix( calle, lle ) : False\n&#39;IsPrefix( llegar, lle ) : True\n&#39;IsSuffix( calle, lle ) : True\n&#39;IsSuffix( llegar, lle ) : False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_IsSuffix_System_String_System_String_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_IsSuffix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSuffix(String,String,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified source string ends with the specified suffix using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search in.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>suffix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare with the end of <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>suffix</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> used by itself, or the bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the length of <code>suffix</code> is less than or equal to the length of <code>source</code> and <code>source</code> ends with <code>suffix</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>suffix</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every string starts and ends with an empty substring (&quot;&quot;); therefore, if <code>suffix</code> is an empty string, this method returns <code>true</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a string is the prefix or suffix of another string using <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IsPrefixSuffixOpt#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Defines the strings to compare.\n   String^ myStr1 = &quot;calle&quot;;\n   String^ myStr2 = &quot;llegar&quot;;\n   String^ myXfix = &quot;LLE&quot;;\n   \n   // Uses the CompareInfo property of the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   Console::WriteLine( &quot;IsSuffix \\&quot;{0}\\&quot;, \\&quot;{1}\\&quot;&quot;, myStr1, myXfix );\n   Console::WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp-&gt;IsSuffix( myStr1, myXfix ) );\n   Console::WriteLine( &quot;   With None                         : {0}&quot;, myComp-&gt;IsSuffix( myStr1, myXfix, CompareOptions::None ) );\n   Console::WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp-&gt;IsSuffix( myStr1, myXfix, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp-&gt;IsSuffix( myStr1, myXfix, CompareOptions::IgnoreCase ) );\n   Console::WriteLine( &quot;IsPrefix \\&quot;{0}\\&quot;, \\&quot;{1}\\&quot;&quot;, myStr2, myXfix );\n   Console::WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp-&gt;IsPrefix( myStr2, myXfix ) );\n   Console::WriteLine( &quot;   With None                         : {0}&quot;, myComp-&gt;IsPrefix( myStr2, myXfix, CompareOptions::None ) );\n   Console::WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp-&gt;IsPrefix( myStr2, myXfix, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp-&gt;IsPrefix( myStr2, myXfix, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIsSuffix &quot;calle&quot;, &quot;LLE&quot;\n   With no CompareOptions            : False\n   With None                         : False\n   With Ordinal                      : False\n   With IgnoreCase                   : True\nIsPrefix &quot;llegar&quot;, &quot;LLE&quot;\n   With no CompareOptions            : False\n   With None                         : False\n   With Ordinal                      : False\n   With IgnoreCase                   : True\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IsPrefixSuffixOpt#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Defines the strings to compare.\n      Dim myStr1 As [String] = &quot;calle&quot;\n      Dim myStr2 As [String] = &quot;llegar&quot;\n      Dim myXfix As [String] = &quot;LLE&quot;\n\n      &#39; Uses the CompareInfo property of the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      Console.WriteLine(&quot;IsSuffix &quot;&quot;{0}&quot;&quot;, &quot;&quot;{1}&quot;&quot;&quot;, myStr1, myXfix)\n      Console.WriteLine(&quot;   With no CompareOptions            : {0}&quot;, myComp.IsSuffix(myStr1, myXfix))\n      Console.WriteLine(&quot;   With None                         : {0}&quot;, myComp.IsSuffix(myStr1, myXfix, CompareOptions.None))\n      Console.WriteLine(&quot;   With Ordinal                      : {0}&quot;, myComp.IsSuffix(myStr1, myXfix, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;   With IgnoreCase                   : {0}&quot;, myComp.IsSuffix(myStr1, myXfix, CompareOptions.IgnoreCase))\n\n      Console.WriteLine(&quot;IsPrefix &quot;&quot;{0}&quot;&quot;, &quot;&quot;{1}&quot;&quot;&quot;, myStr2, myXfix)\n      Console.WriteLine(&quot;   With no CompareOptions            : {0}&quot;, myComp.IsPrefix(myStr2, myXfix))\n      Console.WriteLine(&quot;   With None                         : {0}&quot;, myComp.IsPrefix(myStr2, myXfix, CompareOptions.None))\n      Console.WriteLine(&quot;   With Ordinal                      : {0}&quot;, myComp.IsPrefix(myStr2, myXfix, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;   With IgnoreCase                   : {0}&quot;, myComp.IsPrefix(myStr2, myXfix, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCompareInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IsSuffix &quot;calle&quot;, &quot;LLE&quot;\n&#39;   With no CompareOptions            : False\n&#39;   With None                         : False\n&#39;   With Ordinal                      : False\n&#39;   With IgnoreCase                   : True\n&#39;IsPrefix &quot;llegar&quot;, &quot;LLE&quot;\n&#39;   With no CompareOptions            : False\n&#39;   With None                         : False\n&#39;   With Ordinal                      : False\n&#39;   With IgnoreCase                   : True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IsPrefixSuffixOpt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Defines the strings to compare.\n      String myStr1 = &quot;calle&quot;;\n      String myStr2 = &quot;llegar&quot;;\n      String myXfix = &quot;LLE&quot;;\n\n      // Uses the CompareInfo property of the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      Console.WriteLine( &quot;IsSuffix \\&quot;{0}\\&quot;, \\&quot;{1}\\&quot;&quot;, myStr1, myXfix );\n      Console.WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp.IsSuffix( myStr1, myXfix ) );\n      Console.WriteLine( &quot;   With None                         : {0}&quot;, myComp.IsSuffix( myStr1, myXfix, CompareOptions.None ) );\n      Console.WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp.IsSuffix( myStr1, myXfix, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp.IsSuffix( myStr1, myXfix, CompareOptions.IgnoreCase ) );\n\n      Console.WriteLine( &quot;IsPrefix \\&quot;{0}\\&quot;, \\&quot;{1}\\&quot;&quot;, myStr2, myXfix );\n      Console.WriteLine( &quot;   With no CompareOptions            : {0}&quot;, myComp.IsPrefix( myStr2, myXfix ) );\n      Console.WriteLine( &quot;   With None                         : {0}&quot;, myComp.IsPrefix( myStr2, myXfix, CompareOptions.None ) );\n      Console.WriteLine( &quot;   With Ordinal                      : {0}&quot;, myComp.IsPrefix( myStr2, myXfix, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;   With IgnoreCase                   : {0}&quot;, myComp.IsPrefix( myStr2, myXfix, CompareOptions.IgnoreCase ) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIsSuffix &quot;calle&quot;, &quot;LLE&quot;\n   With no CompareOptions            : False\n   With None                         : False\n   With Ordinal                      : False\n   With IgnoreCase                   : True\nIsPrefix &quot;llegar&quot;, &quot;LLE&quot;\n   With no CompareOptions            : False\n   With None                         : False\n   With Ordinal                      : False\n   With IgnoreCase                   : True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at the end of the string and ending at the beginning of the string.  </p>\n<p> This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value. Overloads of <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot; ), myComp.LastIndexOf( myStr, &quot;AE&quot; ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot; ), myComp.LastIndexOf( myStr, &quot;ae&quot; ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39; ), myComp.LastIndexOf( myStr, &#39;&#198;&#39; ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39; ), myComp.LastIndexOf( myStr, &#39;&#230;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39; ), myComp.LastIndexOf( myStr, &#39;&#220;&#39; ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39; ), myComp.LastIndexOf( myStr, &#39;&#252;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOf#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;), myComp.LastIndexOf(myStr, &quot;AE&quot;))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;), myComp.LastIndexOf(myStr, &quot;ae&quot;))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;No options    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                    l\n&#39;           ae :          f                   l\n&#39;            &#198; :    f                    l\n&#39;            &#230; :          f                   l\n&#39;Ordinal       : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :                              b\n&#39;IgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                         l\n&#39;           ae :    f                         l\n&#39;            &#198; :    f                         l\n&#39;            &#230; :    f                         l\n&#39;\n&#39;No options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                    l\n&#39;           u&quot; :          f                   l\n&#39;            &#220; :    f                    l\n&#39;            &#252; :          f                   l\n&#39;Ordinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :                              b\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                         l\n&#39;           u&quot; :    f                         l\n&#39;            &#220; :    f                         l\n&#39;            &#252; :    f                         l\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot; ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot; ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39; ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39; ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at the end of the string and ending at the beginning of the string.  </p>\n<p> This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot; ), myComp.LastIndexOf( myStr, &quot;AE&quot; ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot; ), myComp.LastIndexOf( myStr, &quot;ae&quot; ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39; ), myComp.LastIndexOf( myStr, &#39;&#198;&#39; ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39; ), myComp.LastIndexOf( myStr, &#39;&#230;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39; ), myComp.LastIndexOf( myStr, &#39;&#220;&#39; ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39; ), myComp.LastIndexOf( myStr, &#39;&#252;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOf#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;), myComp.LastIndexOf(myStr, &quot;AE&quot;))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;), myComp.LastIndexOf(myStr, &quot;ae&quot;))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;No options    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                    l\n&#39;           ae :          f                   l\n&#39;            &#198; :    f                    l\n&#39;            &#230; :          f                   l\n&#39;Ordinal       : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :                              b\n&#39;IgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                         l\n&#39;           ae :    f                         l\n&#39;            &#198; :    f                         l\n&#39;            &#230; :    f                         l\n&#39;\n&#39;No options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                    l\n&#39;           u&quot; :          f                   l\n&#39;            &#220; :    f                    l\n&#39;            &#252; :          f                   l\n&#39;Ordinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :                              b\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                         l\n&#39;           u&quot; :    f                         l\n&#39;            &#220; :    f                         l\n&#39;            &#252; :    f                         l\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot; ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot; ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39; ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39; ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Char,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at the end of the string and ending at the beginning of the string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot; ), myComp.LastIndexOf( myStr, &quot;AE&quot; ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot; ), myComp.LastIndexOf( myStr, &quot;ae&quot; ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39; ), myComp.LastIndexOf( myStr, &#39;&#198;&#39; ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39; ), myComp.LastIndexOf( myStr, &#39;&#230;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39; ), myComp.LastIndexOf( myStr, &#39;&#220;&#39; ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39; ), myComp.LastIndexOf( myStr, &#39;&#252;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOf#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;), myComp.LastIndexOf(myStr, &quot;AE&quot;))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;), myComp.LastIndexOf(myStr, &quot;ae&quot;))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;No options    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                    l\n&#39;           ae :          f                   l\n&#39;            &#198; :    f                    l\n&#39;            &#230; :          f                   l\n&#39;Ordinal       : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :                              b\n&#39;IgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                         l\n&#39;           ae :    f                         l\n&#39;            &#198; :    f                         l\n&#39;            &#230; :    f                         l\n&#39;\n&#39;No options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                    l\n&#39;           u&quot; :          f                   l\n&#39;            &#220; :    f                    l\n&#39;            &#252; :          f                   l\n&#39;Ordinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :                              b\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                         l\n&#39;           u&quot; :    f                         l\n&#39;            &#220; :    f                         l\n&#39;            &#252; :    f                         l\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot; ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot; ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39; ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39; ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Char,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, char value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at <code>startIndex</code> and ending at the beginning of the string.  </p>\n<p> This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value. Overloads of <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> are searching in different portions of the string, even with the same <code>startIndex</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 20;\n   \n   // myT1 is the string used for padding.\n   String^ myT1;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 20\n      &#39; myT1 is the string used for padding.\n      Dim myT1 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS]), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS]), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS]))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS]))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS]))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS]))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n      \n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                              f\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;Ordinal       : -------------------- as &#198; or &#230;?\n&#39;           AE :\n&#39;           ae :\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;IgnoreCase    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                         f\n&#39;            &#198; :                         f\n&#39;            &#230; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :    l\n&#39;            &#230; :          l\n&#39;Ordinal       : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :\n&#39;            &#230; :\n&#39;IgnoreCase    : Is AE or ae the same ----------\n&#39;           AE :          l\n&#39;           ae :          l\n&#39;            &#198; :          l\n&#39;            &#230; :          l\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                              f\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;Ordinal       : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :\n&#39;           u&quot; :\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;IgnoreCase    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                         f\n&#39;            &#220; :                         f\n&#39;            &#252; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :    l\n&#39;            &#252; :          l\n&#39;Ordinal       : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :\n&#39;            &#252; :\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :          l\n&#39;           u&quot; :          l\n&#39;            &#220; :          l\n&#39;            &#252; :          l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 20;\n      // myT1 is the string used for padding.\n      String myT1;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,String,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at the end of the string and ending at the beginning of the string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot; ), myComp.LastIndexOf( myStr, &quot;AE&quot; ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot; ), myComp.LastIndexOf( myStr, &quot;ae&quot; ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39; ), myComp.LastIndexOf( myStr, &#39;&#198;&#39; ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39; ), myComp.LastIndexOf( myStr, &#39;&#230;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n      Console.WriteLine( &quot;No options    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot; ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39; ), myComp.LastIndexOf( myStr, &#39;&#220;&#39; ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39; ), myComp.LastIndexOf( myStr, &#39;&#252;&#39; ) );\n      Console.WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOf#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;), myComp.LastIndexOf(myStr, &quot;AE&quot;))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;), myComp.LastIndexOf(myStr, &quot;ae&quot;))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n      Console.WriteLine(&quot;No options    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308)))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c))\n      Console.WriteLine(&quot;Ordinal       : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}&quot;, myStr)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;No options    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                    l\n&#39;           ae :          f                   l\n&#39;            &#198; :    f                    l\n&#39;            &#230; :          f                   l\n&#39;Ordinal       : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :                              b\n&#39;IgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n&#39;           AE :    f                         l\n&#39;           ae :    f                         l\n&#39;            &#198; :    f                         l\n&#39;            &#230; :    f                         l\n&#39;\n&#39;No options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                    l\n&#39;           u&quot; :          f                   l\n&#39;            &#220; :    f                    l\n&#39;            &#252; :          f                   l\n&#39;Ordinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :                              b\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;           U&quot; :    f                         l\n&#39;           u&quot; :    f                         l\n&#39;            &#220; :    f                         l\n&#39;            &#252; :    f                         l\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOf#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot; ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot; ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39; ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   Console::WriteLine( &quot;No options    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot; ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot; ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot; ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39; ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39; ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39; ) );\n   Console::WriteLine( &quot;Ordinal       : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}&quot;, myStr );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nNo options    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                    l\n           ae :          f                   l\n            &#198; :    f                    l\n            &#230; :          f                   l\nOrdinal       : Is AE or ae the same as &#198; or &#230;?\n           AE :    b\n           ae :          b\n            &#198; :                         b\n            &#230; :                              b\nIgnoreCase    : Is AE or ae the same as &#198; or &#230;?\n           AE :    f                         l\n           ae :    f                         l\n            &#198; :    f                         l\n            &#230; :    f                         l\n\nNo options    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                    l\n           u&quot; :          f                   l\n            &#220; :    f                    l\n            &#252; :          f                   l\nOrdinal       : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :                              b\nIgnoreCase    : Is U&quot; or u&quot; the same as &#220; or &#252;?\n           U&quot; :    f                         l\n           u&quot; :    f                         l\n            &#220; :    f                         l\n            &#252; :    f                         l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, string value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at <code>startIndex</code> and ending at the beginning of the string.  </p>\n<p> This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> are searching in different portions of the string, even with the same <code>startIndex</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 20;\n   \n   // myT1 is the string used for padding.\n   String^ myT1;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 20\n      &#39; myT1 is the string used for padding.\n      Dim myT1 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS]), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS]), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS]))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS]))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS]))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS]))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n      \n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                              f\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;Ordinal       : -------------------- as &#198; or &#230;?\n&#39;           AE :\n&#39;           ae :\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;IgnoreCase    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                         f\n&#39;            &#198; :                         f\n&#39;            &#230; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :    l\n&#39;            &#230; :          l\n&#39;Ordinal       : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :\n&#39;            &#230; :\n&#39;IgnoreCase    : Is AE or ae the same ----------\n&#39;           AE :          l\n&#39;           ae :          l\n&#39;            &#198; :          l\n&#39;            &#230; :          l\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                              f\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;Ordinal       : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :\n&#39;           u&quot; :\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;IgnoreCase    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                         f\n&#39;            &#220; :                         f\n&#39;            &#252; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :    l\n&#39;            &#252; :          l\n&#39;Ordinal       : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :\n&#39;            &#252; :\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :          l\n&#39;           u&quot; :          l\n&#39;            &#220; :          l\n&#39;            &#252; :          l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 20;\n      // myT1 is the string used for padding.\n      String myT1;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Char,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at <code>startIndex</code> and ending at the beginning of the string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> are searching in different portions of the string, even with the same <code>startIndex</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 20;\n   \n   // myT1 is the string used for padding.\n   String^ myT1;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 20\n      &#39; myT1 is the string used for padding.\n      Dim myT1 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS]), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS]), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS]))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS]))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS]))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS]))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n      \n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                              f\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;Ordinal       : -------------------- as &#198; or &#230;?\n&#39;           AE :\n&#39;           ae :\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;IgnoreCase    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                         f\n&#39;            &#198; :                         f\n&#39;            &#230; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :    l\n&#39;            &#230; :          l\n&#39;Ordinal       : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :\n&#39;            &#230; :\n&#39;IgnoreCase    : Is AE or ae the same ----------\n&#39;           AE :          l\n&#39;           ae :          l\n&#39;            &#198; :          l\n&#39;            &#230; :          l\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                              f\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;Ordinal       : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :\n&#39;           u&quot; :\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;IgnoreCase    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                         f\n&#39;            &#220; :                         f\n&#39;            &#252; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :    l\n&#39;            &#252; :          l\n&#39;Ordinal       : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :\n&#39;            &#252; :\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :          l\n&#39;           u&quot; :          l\n&#39;            &#220; :          l\n&#39;            &#252; :          l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 20;\n      // myT1 is the string used for padding.\n      String myT1;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Char,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, char value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> - <code>count</code> + 1.  </p>\n<p> This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value. Overloads of <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 8;\n   \n   // iL is the length of the substring.\n   int iL = 18;\n   \n   // myT1 and myT2 are the strings used for padding.\n   String^ myT1 = gcnew String( &#39;-&#39;,iS );\n   String^ myT2;\n   \n   // Searches for the ligature &#195;â€ .\n   String^ myStr = &quot;Is AE or ae the same as &#195;â€  or &#195;&#166;?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#195;â€  or &#195;&#166;?\nNo options    : -------- ae the same as &#195;â€  -----\n           AE :                         b\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :          b\nOrdinal       : -------- ae the same as &#195;â€  -----\n           AE :\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :\nIgnoreCase    : -------- ae the same as &#195;â€  -----\n           AE :          f              l\n           ae :          f              l\n            &#195;â€  :          f              l\n            &#195;&#166; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#195;Å“ or &#195;&#188;?\nNo options    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :          b\nOrdinal       : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :\nIgnoreCase    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#195;Å“ :          f              l\n            &#195;&#188; :          f              l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 8\n      &#39; iL is the length of the substring.\n      Dim iL As Integer = 18\n      &#39; myT1 and myT2 are the strings used for padding.\n      Dim myT1 As New [String](&quot;-&quot;c, [iS])\n      Dim myT2 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------- ae the same as &#198; -----\n&#39;           AE :                         b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :          b\n&#39;Ordinal       : -------- ae the same as &#198; -----\n&#39;           AE :\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :\n&#39;IgnoreCase    : -------- ae the same as &#198; -----\n&#39;           AE :          f              l\n&#39;           ae :          f              l\n&#39;            &#198; :          f              l\n&#39;            &#230; :          f              l\n&#39;\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :                         b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :          b\n&#39;Ordinal       : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :\n&#39;IgnoreCase    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :          f              l\n&#39;           u&quot; :          f              l\n&#39;            &#220; :          f              l\n&#39;            &#252; :          f              l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 8;\n      // iL is the length of the substring.\n      int iL = 18;\n      // myT1 and myT2 are the strings used for padding.\n      String myT1 = new String( &#39;-&#39;, iS );\n      String myT2;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------- ae the same as &#198; -----\n           AE :                         b\n           ae :          b\n            &#198; :                         b\n            &#230; :          b\nOrdinal       : -------- ae the same as &#198; -----\n           AE :\n           ae :          b\n            &#198; :                         b\n            &#230; :\nIgnoreCase    : -------- ae the same as &#198; -----\n           AE :          f              l\n           ae :          f              l\n            &#198; :          f              l\n            &#230; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------- u&quot; the same as &#220; -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :          b\nOrdinal       : -------- u&quot; the same as &#220; -----\n           U&quot; :\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :\nIgnoreCase    : -------- u&quot; the same as &#220; -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#220; :          f              l\n            &#252; :          f              l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,String,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at <code>startIndex</code> and ending at the beginning of the string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> are searching in different portions of the string, even with the same <code>startIndex</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 20;\n   \n   // myT1 is the string used for padding.\n   String^ myT1;\n   \n   // Searches for the ligature &#198;.\n   String^ myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#198; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#230; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           AE : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#198; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#198;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#230; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#230;&#39;, iS, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   Console::WriteLine();\n   myT1 = gcnew String( &#39;-&#39;,iS );\n   Console::WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS ), -1 );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ), -1 );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr-&gt;Substring( iS ) );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#220; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   PrintMarker( &quot;            &#252; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ), -1 );\n   myT1 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - 1 );\n   Console::WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr-&gt;Substring( 0, iS + 1 ), myT1 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#220; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#220;&#39;, iS, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#252; : &quot;, -1, myComp-&gt;LastIndexOf( myStr, L&#39;&#252;&#39;, iS, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 20\n      &#39; myT1 is the string used for padding.\n      Dim myT1 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS]), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS]), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS]))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS]))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS]))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           AE : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      Console.WriteLine()\n\n      myT1 = New [String](&quot;-&quot;c, [iS])\n      Console.WriteLine(&quot;IndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS]), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS]), - 1)\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal), - 1)\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring([iS]))\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase), - 1)\n\n      myT1 = New [String](&quot;-&quot;c, myStr.Length - [iS] - 1)\n      Console.WriteLine(&quot;LastIndexOf( String, *, {0}, * )&quot;, [iS])\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS]))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS]))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS]))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring(0, [iS] + 1), myT1)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS], CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, - 1, myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS], CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n      \n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                              f\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;Ordinal       : -------------------- as &#198; or &#230;?\n&#39;           AE :\n&#39;           ae :\n&#39;            &#198; :                         f\n&#39;            &#230; :                              f\n&#39;IgnoreCase    : -------------------- as &#198; or &#230;?\n&#39;           AE :                         f\n&#39;           ae :                         f\n&#39;            &#198; :                         f\n&#39;            &#230; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :    l\n&#39;            &#230; :          l\n&#39;Ordinal       : Is AE or ae the same ----------\n&#39;           AE :    l\n&#39;           ae :          l\n&#39;            &#198; :\n&#39;            &#230; :\n&#39;IgnoreCase    : Is AE or ae the same ----------\n&#39;           AE :          l\n&#39;           ae :          l\n&#39;            &#198; :          l\n&#39;            &#230; :          l\n&#39;\n&#39;IndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                              f\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;Ordinal       : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :\n&#39;           u&quot; :\n&#39;            &#220; :                         f\n&#39;            &#252; :                              f\n&#39;IgnoreCase    : -------------------- as &#220; or &#252;?\n&#39;           U&quot; :                         f\n&#39;           u&quot; :                         f\n&#39;            &#220; :                         f\n&#39;            &#252; :                         f\n&#39;LastIndexOf( String, *, 20, * )\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :    l\n&#39;            &#252; :          l\n&#39;Ordinal       : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :    l\n&#39;           u&quot; :          l\n&#39;            &#220; :\n&#39;            &#252; :\n&#39;IgnoreCase    : Is U&quot; or u&quot; the same ----------\n&#39;           U&quot; :          l\n&#39;           u&quot; :          l\n&#39;            &#220; :          l\n&#39;            &#252; :          l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 20;\n      // myT1 is the string used for padding.\n      String myT1;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           AE : &quot;, -1, myComp.LastIndexOf( myStr, &quot;AE&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, -1, myComp.LastIndexOf( myStr, &quot;ae&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      Console.WriteLine();\n\n      myT1 = new String( &#39;-&#39;, iS );\n      Console.WriteLine( &quot;IndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS ), -1 );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ), -1 );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myT1, myStr.Substring( iS ) );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ), -1 );\n\n      myT1 = new String( &#39;-&#39;, myStr.Length - iS - 1 );\n      Console.WriteLine( &quot;LastIndexOf( String, *, {0}, * )&quot;, iS );\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}&quot;, myStr.Substring( 0, iS + 1 ), myT1 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, -1, myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, -1, myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                              f\n            &#198; :                         f\n            &#230; :                              f\nOrdinal       : -------------------- as &#198; or &#230;?\n           AE :\n           ae :\n            &#198; :                         f\n            &#230; :                              f\nIgnoreCase    : -------------------- as &#198; or &#230;?\n           AE :                         f\n           ae :                         f\n            &#198; :                         f\n            &#230; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :    l\n            &#230; :          l\nOrdinal       : Is AE or ae the same ----------\n           AE :    l\n           ae :          l\n            &#198; :\n            &#230; :\nIgnoreCase    : Is AE or ae the same ----------\n           AE :          l\n           ae :          l\n            &#198; :          l\n            &#230; :          l\n\nIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                              f\n            &#220; :                         f\n            &#252; :                              f\nOrdinal       : -------------------- as &#220; or &#252;?\n           U&quot; :\n           u&quot; :\n            &#220; :                         f\n            &#252; :                              f\nIgnoreCase    : -------------------- as &#220; or &#252;?\n           U&quot; :                         f\n           u&quot; :                         f\n            &#220; :                         f\n            &#252; :                         f\nLastIndexOf( String, *, 20, * )\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :    l\n            &#252; :          l\nOrdinal       : Is U&quot; or u&quot; the same ----------\n           U&quot; :    l\n           u&quot; :          l\n            &#220; :\n            &#252; :\nIgnoreCase    : Is U&quot; or u&quot; the same ----------\n           U&quot; :          l\n           u&quot; :          l\n            &#220; :          l\n            &#252; :          l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, string value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> - <code>count</code> + 1.  </p>\n<p> This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> and use the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons .</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 8;\n   \n   // iL is the length of the substring.\n   int iL = 18;\n   \n   // myT1 and myT2 are the strings used for padding.\n   String^ myT1 = gcnew String( &#39;-&#39;,iS );\n   String^ myT2;\n   \n   // Searches for the ligature &#195;â€ .\n   String^ myStr = &quot;Is AE or ae the same as &#195;â€  or &#195;&#166;?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#195;â€  or &#195;&#166;?\nNo options    : -------- ae the same as &#195;â€  -----\n           AE :                         b\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :          b\nOrdinal       : -------- ae the same as &#195;â€  -----\n           AE :\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :\nIgnoreCase    : -------- ae the same as &#195;â€  -----\n           AE :          f              l\n           ae :          f              l\n            &#195;â€  :          f              l\n            &#195;&#166; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#195;Å“ or &#195;&#188;?\nNo options    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :          b\nOrdinal       : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :\nIgnoreCase    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#195;Å“ :          f              l\n            &#195;&#188; :          f              l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 8\n      &#39; iL is the length of the substring.\n      Dim iL As Integer = 18\n      &#39; myT1 and myT2 are the strings used for padding.\n      Dim myT1 As New [String](&quot;-&quot;c, [iS])\n      Dim myT2 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------- ae the same as &#198; -----\n&#39;           AE :                         b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :          b\n&#39;Ordinal       : -------- ae the same as &#198; -----\n&#39;           AE :\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :\n&#39;IgnoreCase    : -------- ae the same as &#198; -----\n&#39;           AE :          f              l\n&#39;           ae :          f              l\n&#39;            &#198; :          f              l\n&#39;            &#230; :          f              l\n&#39;\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :                         b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :          b\n&#39;Ordinal       : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :\n&#39;IgnoreCase    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :          f              l\n&#39;           u&quot; :          f              l\n&#39;            &#220; :          f              l\n&#39;            &#252; :          f              l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 8;\n      // iL is the length of the substring.\n      int iL = 18;\n      // myT1 and myT2 are the strings used for padding.\n      String myT1 = new String( &#39;-&#39;, iS );\n      String myT2;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------- ae the same as &#198; -----\n           AE :                         b\n           ae :          b\n            &#198; :                         b\n            &#230; :          b\nOrdinal       : -------- ae the same as &#198; -----\n           AE :\n           ae :          b\n            &#198; :                         b\n            &#230; :\nIgnoreCase    : -------- ae the same as &#198; -----\n           AE :          f              l\n           ae :          f              l\n            &#198; :          f              l\n            &#230; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------- u&quot; the same as &#220; -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :          b\nOrdinal       : -------- u&quot; the same as &#220; -----\n           U&quot; :\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :\nIgnoreCase    : -------- u&quot; the same as &#220; -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#220; :          f              l\n            &#252; :          f              l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_System_Int32_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Char,Int32,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> - <code>count</code> + 1.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 8;\n   \n   // iL is the length of the substring.\n   int iL = 18;\n   \n   // myT1 and myT2 are the strings used for padding.\n   String^ myT1 = gcnew String( &#39;-&#39;,iS );\n   String^ myT2;\n   \n   // Searches for the ligature &#195;â€ .\n   String^ myStr = &quot;Is AE or ae the same as &#195;â€  or &#195;&#166;?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#195;â€  or &#195;&#166;?\nNo options    : -------- ae the same as &#195;â€  -----\n           AE :                         b\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :          b\nOrdinal       : -------- ae the same as &#195;â€  -----\n           AE :\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :\nIgnoreCase    : -------- ae the same as &#195;â€  -----\n           AE :          f              l\n           ae :          f              l\n            &#195;â€  :          f              l\n            &#195;&#166; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#195;Å“ or &#195;&#188;?\nNo options    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :          b\nOrdinal       : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :\nIgnoreCase    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#195;Å“ :          f              l\n            &#195;&#188; :          f              l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 8\n      &#39; iL is the length of the substring.\n      Dim iL As Integer = 18\n      &#39; myT1 and myT2 are the strings used for padding.\n      Dim myT1 As New [String](&quot;-&quot;c, [iS])\n      Dim myT2 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------- ae the same as &#198; -----\n&#39;           AE :                         b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :          b\n&#39;Ordinal       : -------- ae the same as &#198; -----\n&#39;           AE :\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :\n&#39;IgnoreCase    : -------- ae the same as &#198; -----\n&#39;           AE :          f              l\n&#39;           ae :          f              l\n&#39;            &#198; :          f              l\n&#39;            &#230; :          f              l\n&#39;\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :                         b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :          b\n&#39;Ordinal       : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :\n&#39;IgnoreCase    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :          f              l\n&#39;           u&quot; :          f              l\n&#39;            &#220; :          f              l\n&#39;            &#252; :          f              l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 8;\n      // iL is the length of the substring.\n      int iL = 18;\n      // myT1 and myT2 are the strings used for padding.\n      String myT1 = new String( &#39;-&#39;, iS );\n      String myT2;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------- ae the same as &#198; -----\n           AE :                         b\n           ae :          b\n            &#198; :                         b\n            &#230; :          b\nOrdinal       : -------- ae the same as &#198; -----\n           AE :\n           ae :          b\n            &#198; :                         b\n            &#230; :\nIgnoreCase    : -------- ae the same as &#198; -----\n           AE :          f              l\n           ae :          f              l\n            &#198; :          f              l\n            &#230; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------- u&quot; the same as &#220; -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :          b\nOrdinal       : -------- u&quot; the same as &#220; -----\n           U&quot; :\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :\nIgnoreCase    : -------- u&quot; the same as &#220; -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#220; :          f              l\n            &#252; :          f              l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_LastIndexOf_System_String_System_String_System_Int32_System_Int32_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,String,Int32,Int32,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate within <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, or a bitwise combination of one or more of the following values: <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>, and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> contains an invalid <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The source string is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> - <code>count</code> + 1.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> value is not valid for this method.  </p>\n<p> If <code>options</code> does not include the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture. If <code>options</code> includes the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When possible, you should call string comparison methods that have a parameter of type <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> for security comparisons.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintMarker( String^ Prefix, int First, int Last )\n{\n   \n   // Determines the size of the array to create.\n   int mySize;\n   if ( Last &gt; First )\n      mySize = Last;\n   else\n      mySize = First;\n\n   if ( mySize &gt; -1 )\n   {\n      \n      // Creates an array of Char to hold the markers.\n      array&lt;Char&gt;^myCharArr = gcnew array&lt;Char&gt;(mySize + 1);\n      \n      // Inserts the appropriate markers.\n      if ( First &gt; -1 )\n            myCharArr[ First ] = &#39;f&#39;;\n      if ( Last &gt; -1 )\n            myCharArr[ Last ] = &#39;l&#39;;\n      if ( First == Last )\n            myCharArr[ First ] = &#39;b&#39;;\n      \n      // Displays the array of Char as a String.\n      Console::WriteLine( &quot;{0}{1}&quot;, Prefix, gcnew String( myCharArr ) );\n   }\n   else\n      Console::WriteLine( Prefix );\n}\n\nint main()\n{\n   \n   // Creates CompareInfo for the InvariantCulture.\n   CompareInfo^ myComp = CultureInfo::InvariantCulture-&gt;CompareInfo;\n   \n   // iS is the starting index of the substring.\n   int iS = 8;\n   \n   // iL is the length of the substring.\n   int iL = 18;\n   \n   // myT1 and myT2 are the strings used for padding.\n   String^ myT1 = gcnew String( &#39;-&#39;,iS );\n   String^ myT2;\n   \n   // Searches for the ligature &#195;â€ .\n   String^ myStr = &quot;Is AE or ae the same as &#195;â€  or &#195;&#166;?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           AE : &quot;, myComp-&gt;IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           ae : &quot;, myComp-&gt;IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;â€  : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;â€ &#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;â€ &#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#166; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#166;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#166;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   \n   // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n   myStr = &quot;Is U\\u0308 or u\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n   myT2 = gcnew String( &#39;-&#39;,myStr-&gt;Length - iS - iL );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original      : {0}&quot;, myStr );\n   Console::WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL ) );\n   Console::WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::Ordinal ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::Ordinal ) );\n   Console::WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr-&gt;Substring( iS, iL ), myT2 );\n   PrintMarker( &quot;           U\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;           u\\u0308 : &quot;, myComp-&gt;IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;Å“ : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;Å“&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;Å“&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n   PrintMarker( &quot;            &#195;&#188; : &quot;, myComp-&gt;IndexOf( myStr, L&#39;&#195;&#188;&#39;, iS, iL, CompareOptions::IgnoreCase ), myComp-&gt;LastIndexOf( myStr, L&#39;&#195;&#188;&#39;, iS + iL - 1, iL, CompareOptions::IgnoreCase ) );\n}\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#195;â€  or &#195;&#166;?\nNo options    : -------- ae the same as &#195;â€  -----\n           AE :                         b\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :          b\nOrdinal       : -------- ae the same as &#195;â€  -----\n           AE :\n           ae :          b\n            &#195;â€  :                         b\n            &#195;&#166; :\nIgnoreCase    : -------- ae the same as &#195;â€  -----\n           AE :          f              l\n           ae :          f              l\n            &#195;â€  :          f              l\n            &#195;&#166; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#195;Å“ or &#195;&#188;?\nNo options    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :          b\nOrdinal       : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :\n           u&quot; :          b\n            &#195;Å“ :                         b\n            &#195;&#188; :\nIgnoreCase    : -------- u&quot; the same as &#195;Å“ -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#195;Å“ :          f              l\n            &#195;&#188; :          f              l\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesCompareInfo\n\n   Public Shared Sub Main()\n\n      &#39; Creates CompareInfo for the InvariantCulture.\n      Dim myComp As CompareInfo = CultureInfo.InvariantCulture.CompareInfo\n\n      &#39; iS is the starting index of the substring.\n      Dim [iS] As Integer = 8\n      &#39; iL is the length of the substring.\n      Dim iL As Integer = 18\n      &#39; myT1 and myT2 are the strings used for padding.\n      Dim myT1 As New [String](&quot;-&quot;c, [iS])\n      Dim myT2 As [String]\n\n      &#39; Searches for the ligature &#198;.\n      Dim myStr As [String] = &quot;Is AE or ae the same as &#198; or &#230;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           AE : &quot;, myComp.IndexOf(myStr, &quot;AE&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;AE&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           ae : &quot;, myComp.IndexOf(myStr, &quot;ae&quot;, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;ae&quot;, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#198; : &quot;, myComp.IndexOf(myStr, &quot;&#198;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#198;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#230; : &quot;, myComp.IndexOf(myStr, &quot;&#230;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#230;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n      &#39; Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is &quot; &amp; ChrW(&amp;H0055) &amp; ChrW(&amp;H0308) &amp; &quot; or &quot; &amp; ChrW(&amp;H0075) &amp; ChrW(&amp;H0308) &amp; &quot; the same as &quot; &amp; ChrW(&amp;H00DC) &amp; &quot; or &quot; &amp; ChrW(&amp;H00FC) &amp; &quot;?&quot;\n      myT2 = New [String](&quot;-&quot;c, myStr.Length - [iS] - iL)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original      : {0}&quot;, myStr)\n      Console.WriteLine(&quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL))\n      Console.WriteLine(&quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.Ordinal), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.Ordinal))\n      Console.WriteLine(&quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring([iS], iL), myT2)\n      PrintMarker(&quot;           U&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;U&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;           u&quot; &amp; ChrW(&amp;H0308) &amp; &quot; : &quot;, myComp.IndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;u&quot; &amp; ChrW(&amp;H0308), [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#220; : &quot;, myComp.IndexOf(myStr, &quot;&#220;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#220;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n      PrintMarker(&quot;            &#252; : &quot;, myComp.IndexOf(myStr, &quot;&#252;&quot;c, [iS], iL, CompareOptions.IgnoreCase), myComp.LastIndexOf(myStr, &quot;&#252;&quot;c, [iS] + iL - 1, iL, CompareOptions.IgnoreCase))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintMarker(Prefix As [String], First As Integer, Last As Integer)\n\n      &#39; Determines the size of the array to create.\n      Dim mySize As Integer\n      If Last &gt; First Then\n         mySize = Last\n      Else\n         mySize = First\n      End If \n\n      If mySize &gt; - 1 Then\n\n         &#39; Creates an array of Char to hold the markers.\n         Dim myCharArr(mySize + 1) As [Char]\n\n         &#39; Inserts the appropriate markers.\n         If First &gt; - 1 Then\n            myCharArr(First) = &quot;f&quot;c\n         End If\n         If Last &gt; - 1 Then\n            myCharArr(Last) = &quot;l&quot;c\n         End If\n         If First = Last Then\n            myCharArr(First) = &quot;b&quot;c\n         End If \n\n         &#39; Displays the array of Char as a String.\n         Console.WriteLine(&quot;{0}{1}&quot;, Prefix, New [String](myCharArr))\n\n      Else\n         Console.WriteLine(Prefix)\n\n      End If \n\n   End Sub &#39;PrintMarker\n\nEnd Class &#39;SamplesCompareInfo \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Original      : Is AE or ae the same as &#198; or &#230;?\n&#39;No options    : -------- ae the same as &#198; -----\n&#39;           AE :                         b\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :          b\n&#39;Ordinal       : -------- ae the same as &#198; -----\n&#39;           AE :\n&#39;           ae :          b\n&#39;            &#198; :                         b\n&#39;            &#230; :\n&#39;IgnoreCase    : -------- ae the same as &#198; -----\n&#39;           AE :          f              l\n&#39;           ae :          f              l\n&#39;            &#198; :          f              l\n&#39;            &#230; :          f              l\n&#39;\n&#39;Original      : Is U&quot; or u&quot; the same as &#220; or &#252;?\n&#39;No options    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :                         b\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :          b\n&#39;Ordinal       : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :\n&#39;           u&quot; :          b\n&#39;            &#220; :                         b\n&#39;            &#252; :\n&#39;IgnoreCase    : -------- u&quot; the same as &#220; -----\n&#39;           U&quot; :          f              l\n&#39;           u&quot; :          f              l\n&#39;            &#220; :          f              l\n&#39;            &#252; :          f              l\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CompareInfo.IndexOfIntInt#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCompareInfo  {\n\n   public static void Main()  {\n\n      // Creates CompareInfo for the InvariantCulture.\n      CompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\n\n      // iS is the starting index of the substring.\n      int iS = 8;\n      // iL is the length of the substring.\n      int iL = 18;\n      // myT1 and myT2 are the strings used for padding.\n      String myT1 = new String( &#39;-&#39;, iS );\n      String myT2;\n\n      // Searches for the ligature &#198;.\n      String myStr = &quot;Is AE or ae the same as &#198; or &#230;?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           AE : &quot;, myComp.IndexOf( myStr, &quot;AE&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;AE&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           ae : &quot;, myComp.IndexOf( myStr, &quot;ae&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;ae&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#198; : &quot;, myComp.IndexOf( myStr, &#39;&#198;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#198;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#230; : &quot;, myComp.IndexOf( myStr, &#39;&#230;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#230;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n      // Searches for the combining character sequence Latin capital letter U with diaeresis or Latin small letter u with diaeresis.\n      myStr = &quot;Is \\u0055\\u0308 or \\u0075\\u0308 the same as \\u00DC or \\u00FC?&quot;;\n      myT2 = new String( &#39;-&#39;, myStr.Length - iS - iL );\n      Console.WriteLine();\n      Console.WriteLine( &quot;Original      : {0}&quot;, myStr );\n      Console.WriteLine( &quot;No options    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL ) );\n      Console.WriteLine( &quot;Ordinal       : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.Ordinal ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.Ordinal ) );\n      Console.WriteLine( &quot;IgnoreCase    : {0}{1}{2}&quot;, myT1, myStr.Substring( iS, iL ), myT2 );\n      PrintMarker( &quot;           U\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;U\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;U\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;           u\\u0308 : &quot;, myComp.IndexOf( myStr, &quot;u\\u0308&quot;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &quot;u\\u0308&quot;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#220; : &quot;, myComp.IndexOf( myStr, &#39;&#220;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#220;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n      PrintMarker( &quot;            &#252; : &quot;, myComp.IndexOf( myStr, &#39;&#252;&#39;, iS, iL, CompareOptions.IgnoreCase ), myComp.LastIndexOf( myStr, &#39;&#252;&#39;, iS + iL - 1, iL, CompareOptions.IgnoreCase ) );\n\n   }\n\n   public static void PrintMarker( String Prefix, int First, int Last )  {\n\n      // Determines the size of the array to create.\n      int mySize;\n      if ( Last &gt; First )\n         mySize = Last;\n      else\n         mySize = First;\n\n      if ( mySize &gt; -1 )  {\n\n         // Creates an array of Char to hold the markers.\n         Char[] myCharArr = new Char[mySize+1];\n\n         // Inserts the appropriate markers.\n         if ( First &gt; -1 )\n         myCharArr[First] = &#39;f&#39;;\n         if ( Last &gt; -1 )\n            myCharArr[Last] = &#39;l&#39;;\n         if ( First == Last )\n         myCharArr[First] = &#39;b&#39;;\n\n         // Displays the array of Char as a String.\n         Console.WriteLine( &quot;{0}{1}&quot;, Prefix, new String( myCharArr ) );\n\n      }\n      else\n         Console.WriteLine( Prefix );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nOriginal      : Is AE or ae the same as &#198; or &#230;?\nNo options    : -------- ae the same as &#198; -----\n           AE :                         b\n           ae :          b\n            &#198; :                         b\n            &#230; :          b\nOrdinal       : -------- ae the same as &#198; -----\n           AE :\n           ae :          b\n            &#198; :                         b\n            &#230; :\nIgnoreCase    : -------- ae the same as &#198; -----\n           AE :          f              l\n           ae :          f              l\n            &#198; :          f              l\n            &#230; :          f              l\n\nOriginal      : Is U&quot; or u&quot; the same as &#220; or &#252;?\nNo options    : -------- u&quot; the same as &#220; -----\n           U&quot; :                         b\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :          b\nOrdinal       : -------- u&quot; the same as &#220; -----\n           U&quot; :\n           u&quot; :          b\n            &#220; :                         b\n            &#252; :\nIgnoreCase    : -------- u&quot; the same as &#220; -----\n           U&quot; :          f              l\n           u&quot; :          f              l\n            &#220; :          f              l\n            &#252; :          f              l\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_ToString\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides the <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> method. It returns a string that consists of the class name and the value of the instance <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Name_\" data-linktype=\"relative-path\">Name</a> property, separated by a hyphen.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CompareInfo_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\">\r\n    \r\n            <a id=\"System_Globalization_CompareInfo_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDeserializationCallback.OnDeserialization(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Runs when the entire object graph has been deserialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDeserializationCallback.OnDeserialization (object sender);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sender</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that initiated the callback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation that can be used only when the current <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object is cast to an <a class=\"xref\" href=\"system.runtime.serialization.ideserializationcallback\" data-linktype=\"relative-path\">IDeserializationCallback</a> interface. For more information, see the <a class=\"xref\" href=\"system.runtime.serialization.ideserializationcallback#System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_\" data-linktype=\"relative-path\">OnDeserialization</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.CompareInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.CompareInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.Compare\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.GetCompareInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.GetSortKey\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.IsPrefix\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.IsSortable\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.IsSuffix\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.LastIndexOf\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.LCID\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.Name\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.IDeserializationCallback.OnDeserialization\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.ToString\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CompareInfo.Version\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e291f040-fc95-767a-51e8-1d99c9460895\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements a set of methods for culture-sensitive string comparisons.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.CompareInfo\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.CompareInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.CompareInfo.yml","open_to_public_contributors":true,"api_name":["System.Globalization.CompareInfo","System.Globalization.CompareInfo.Compare","System.Globalization.CompareInfo.Equals","System.Globalization.CompareInfo.GetCompareInfo","System.Globalization.CompareInfo.GetHashCode","System.Globalization.CompareInfo.GetSortKey","System.Globalization.CompareInfo.IndexOf","System.Globalization.CompareInfo.IsPrefix","System.Globalization.CompareInfo.IsSortable","System.Globalization.CompareInfo.IsSuffix","System.Globalization.CompareInfo.LastIndexOf","System.Globalization.CompareInfo.LCID","System.Globalization.CompareInfo.Name","System.Globalization.CompareInfo.IDeserializationCallback.OnDeserialization","System.Globalization.CompareInfo.ToString","System.Globalization.CompareInfo.Version"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.CompareInfo","System::Globalization::CompareInfo","System.Globalization.CompareInfo.Compare","System::Globalization::CompareInfo::Compare","System.Globalization.CompareInfo.Equals","System::Globalization::CompareInfo::Equals","System.Globalization.CompareInfo.GetCompareInfo","System::Globalization::CompareInfo::GetCompareInfo","System.Globalization.CompareInfo.GetHashCode","System::Globalization::CompareInfo::GetHashCode","System.Globalization.CompareInfo.GetSortKey","System::Globalization::CompareInfo::GetSortKey","System.Globalization.CompareInfo.IndexOf","System::Globalization::CompareInfo::IndexOf","System.Globalization.CompareInfo.IsPrefix","System::Globalization::CompareInfo::IsPrefix","System.Globalization.CompareInfo.IsSortable","System::Globalization::CompareInfo::IsSortable","System.Globalization.CompareInfo.IsSuffix","System::Globalization::CompareInfo::IsSuffix","System.Globalization.CompareInfo.LastIndexOf","System::Globalization::CompareInfo::LastIndexOf","System.Globalization.CompareInfo.LCID","System::Globalization::CompareInfo::LCID","System.Globalization.CompareInfo.Name","System::Globalization::CompareInfo::Name","System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System::Globalization::CompareInfo::System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System.Globalization.CompareInfo.ToString","System::Globalization::CompareInfo::ToString","System.Globalization.CompareInfo.Version","System::Globalization::CompareInfo::Version"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e291f040-fc95-767a-51e8-1d99c9460895","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/CompareInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CompareInfo class | Microsoft Docs","_op_ogTitle":"CompareInfo class","description":"Implements a set of methods for culture-sensitive string comparisons.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.CompareInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.compareinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.compareinfo","fileRelativePath":"System.Globalization.CompareInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}