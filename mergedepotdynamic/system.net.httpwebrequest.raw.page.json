{"content":"    \r\n    <h1 id=\"System_Net_HttpWebRequest\">\r\n      <span class=\"lang-csharp\">HttpWebRequest</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides an HTTP-specific implementation of the <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> class.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.FriendAccessAllowed]\npublic class HttpWebRequest : System.Net.WebRequest, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">System.Net.WebRequest</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HttpWebRequest</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_AuthenticationLevel\" data-linktype=\"relative-path\">AuthenticationLevel</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CachePolicy\" data-linktype=\"relative-path\">CachePolicy</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_System_Uri_\" data-linktype=\"relative-path\">Create(Uri)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CreateDefault_System_Uri_\" data-linktype=\"relative-path\">CreateDefault(Uri)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CreateHttp_System_String_\" data-linktype=\"relative-path\">CreateHttp(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CreateHttp_System_Uri_\" data-linktype=\"relative-path\">CreateHttp(Uri)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CreatorInstance\" data-linktype=\"relative-path\">CreatorInstance</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_DefaultWebProxy\" data-linktype=\"relative-path\">DefaultWebProxy</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_GetRequestStreamAsync\" data-linktype=\"relative-path\">GetRequestStreamAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_GetResponseAsync\" data-linktype=\"relative-path\">GetResponseAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_GetSystemWebProxy\" data-linktype=\"relative-path\">GetSystemWebProxy()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_ImpersonationLevel\" data-linktype=\"relative-path\">ImpersonationLevel</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RegisterPortableWebRequestCreator_System_Net_IWebRequestCreate_\" data-linktype=\"relative-path\">RegisterPortableWebRequestCreator(IWebRequestCreate)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RegisterPrefix_System_String_System_Net_IWebRequestCreate_\" data-linktype=\"relative-path\">RegisterPrefix(String,IWebRequestCreate)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The HttpWebRequest class provides support for the properties and methods defined in <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and for additional properties and methods that enable the user to interact directly with servers using HTTP.  </p>\n<p> Do not use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest__ctor_\" data-linktype=\"relative-path\">HttpWebRequest</a> constructor. Use the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_\" data-linktype=\"relative-path\">Create</a> method to initialize new HttpWebRequest objects. If the scheme for the Uniform Resource Identifier (URI) is <code>http://</code> or <code>https://</code>, <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_\" data-linktype=\"relative-path\">Create</a> returns an HttpWebRequest object.  </p>\n<p> The <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method makes a synchronous request to the resource specified in the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_RequestUri_\" data-linktype=\"relative-path\">RequestUri</a> property and returns an <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> that contains the response object. The response data can be received by using the stream returned by <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_GetResponseStream_\" data-linktype=\"relative-path\">GetResponseStream</a>. If the response object or the response stream is closed, remaining data will be forfeited. The remaining data will be drained and the socket will be re-used for subsequent requests when closing the response object or stream if the following conditions hold: it&#39;s a keep-alive or pipelined request, only a small amount of data needs to be received, or the remaining data is received in a small time interval. If none of the mentioned conditions hold or the drain time is exceeded, the socket will be closed. For keep-alive or pipelined connections, we strongly recommend that the application reads the streams until EOF. This ensures that the socket will be re-used for subsequent requests resulting in better performance and less resources used.  </p>\n<p> When you want to send data to the resource, the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method returns a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to send data. The <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> and <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_EndGetRequestStream_\" data-linktype=\"relative-path\">EndGetRequestStream</a> methods provide asynchronous access to the send data stream.  </p>\n<p> For client authentication with HttpWebRequest, the client certificate must be installed in the My certificate store of the current user.  </p>\n<p> The HttpWebRequest class throws a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> when errors occur while accessing a resource. The <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> property contains a <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">WebExceptionStatus</a> value that indicates the source of the error. When <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> is <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">System.Net.WebExceptionStatus</a>, the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Response_\" data-linktype=\"relative-path\">Response</a> property contains the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> received from the resource.  </p>\n<p> HttpWebRequest exposes common HTTP header values sent to the Internet resource as properties, set by methods, or set by the system; the following table contains a complete list. You can set other headers in the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Headers_\" data-linktype=\"relative-path\">Headers</a> property as name/value pairs. Note that servers and caches may change or add headers during the request.  </p>\n<p> The following table lists the HTTP headers that are set either by properties or methods or the system.  </p>\n<table>\n<thead>\n<tr>\n<th>Header</th>\n<th>Set by</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Accept_\" data-linktype=\"relative-path\">Accept</a> property.</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Connection_\" data-linktype=\"relative-path\">Connection</a> property, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> property.</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property.</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentType_\" data-linktype=\"relative-path\">ContentType</a> property.</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Expect_\" data-linktype=\"relative-path\">Expect</a> property.</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>Set by the system to current date.</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>Set by the system to current host information.</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_IfModifiedSince_\" data-linktype=\"relative-path\">IfModifiedSince</a> property.</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_AddRange_\" data-linktype=\"relative-path\">AddRange</a> method.</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Referer_\" data-linktype=\"relative-path\">Referer</a> property.</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_TransferEncoding_\" data-linktype=\"relative-path\">TransferEncoding</a> property (the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_SendChunked_\" data-linktype=\"relative-path\">SendChunked</a> property must be <code>true</code>).</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_UserAgent_\" data-linktype=\"relative-path\">UserAgent</a> property.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> HttpWebRequest is registered automatically. You do not need to call the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RegisterPrefix_\" data-linktype=\"relative-path\">RegisterPrefix</a> method to register HttpWebRequest before using URIs beginning with <code>http://</code> or <code>https://</code>.  </p>\n</div>\n<p> The local computer or application config file may specify that a default proxy be used. If the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Proxy_\" data-linktype=\"relative-path\">Proxy</a> property is specified, then the proxy settings from the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Proxy_\" data-linktype=\"relative-path\">Proxy</a> property override the local computer or application config file and the HttpWebRequest instance will use the proxy settings specified. If no proxy is specified in a config file and the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Proxy_\" data-linktype=\"relative-path\">Proxy</a> property is unspecified, the HttpWebRequest class uses the proxy settings inherited from Internet Explorer on the local computer. If there are no proxy settings in Internet Explorer, the request is sent directly to the server.  </p>\n<p> The HttpWebRequest class parses a proxy bypass list with wildcard characters inherited from Internet Explorer differently than the bypass list is parsed directly by Internet Explorer. For example, the HttpWebRequest class will parse a bypass list of &quot;nt*&quot; from Internet Explorer as a regular expression of &quot;nt.$&quot;. This differs from the native behavior of Internet Explorer. So a URL of &quot;<code>http://intxxxxx</code>&quot; would bypass the proxy using the HttpWebRequest class, but would not bypass the proxy using Internet Explorer.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ClientCertificates_\" data-linktype=\"relative-path\">ClientCertificates</a> (if there is one), or tries to reuse an anonymous sessions if <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ClientCertificates_\" data-linktype=\"relative-path\">ClientCertificates</a> is empty.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, cookies are disabled by default. If you want to use cookies, use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_CookieContainer_\" data-linktype=\"relative-path\">CookieContainer</a> property to enable cookies.  </p>\n</div>\n<p> The .NET Framework 4.6 includes a new security feature that blocks insecure cipher and hashing algorithms for connections. Applications using TLS/SSL through APIs such as HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. and targeting .NET Framework 4.6 get the more-secure behavior by default.  </p>\n<p> Developers may want to opt out of this behavior in order to maintain interoperability with their existing SSL3 services OR TLS w/ RC4 services. <a href=\"https://support.microsoft.com/kb/3069494\" data-linktype=\"external\">This article</a> explains how to modify your code so that the new behavior is disabled.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest__ctor\" data-linktype=\"self-bookmark\">HttpWebRequest()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">HttpWebRequest(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class from the specified instances of the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> classes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Accept\" data-linktype=\"self-bookmark\">Accept</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the <code>Accept</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Address\" data-linktype=\"self-bookmark\">Address</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Uniform Resource Identifier (URI) of the Internet resource that actually responds to the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AllowAutoRedirect\" data-linktype=\"self-bookmark\">AllowAutoRedirect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the request should follow redirection responses.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AllowReadStreamBuffering\" data-linktype=\"self-bookmark\">AllowReadStreamBuffering</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to buffer the received from the Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AllowWriteStreamBuffering\" data-linktype=\"self-bookmark\">AllowWriteStreamBuffering</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to buffer the data sent to the Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AutomaticDecompression\" data-linktype=\"self-bookmark\">AutomaticDecompression</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the type of decompression that is used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ClientCertificates\" data-linktype=\"self-bookmark\">ClientCertificates</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the collection of security certificates that are associated with this request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Connection\" data-linktype=\"self-bookmark\">Connection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the <code>Connection</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ConnectionGroupName\" data-linktype=\"self-bookmark\">ConnectionGroupName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the connection group for the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ContentLength\" data-linktype=\"self-bookmark\">ContentLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <code>Content-length</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ContentType\" data-linktype=\"self-bookmark\">ContentType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the <code>Content-type</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ContinueDelegate\" data-linktype=\"self-bookmark\">ContinueDelegate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the delegate method called when an HTTP 100-continue response is received from the Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ContinueTimeout\" data-linktype=\"self-bookmark\">ContinueTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a timeout, in milliseconds, to wait until the 100-Continue is received from the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_CookieContainer\" data-linktype=\"self-bookmark\">CookieContainer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the cookies associated with the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Credentials\" data-linktype=\"self-bookmark\">Credentials</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets authentication information for the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Date\" data-linktype=\"self-bookmark\">Date</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Get or set the <code>Date</code> HTTP header value to use in an HTTP request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_DefaultCachePolicy\" data-linktype=\"self-bookmark\">DefaultCachePolicy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default cache policy for this request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_DefaultMaximumErrorResponseLength\" data-linktype=\"self-bookmark\">DefaultMaximumErrorResponseLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default maximum length of an HTTP error response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_DefaultMaximumResponseHeadersLength\" data-linktype=\"self-bookmark\">DefaultMaximumResponseHeadersLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default for the <span class=\"xref\">stem.Net.HttpWebRequest.MaximumResponseHeadersLength*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Expect\" data-linktype=\"self-bookmark\">Expect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the <code>Expect</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_HaveResponse\" data-linktype=\"self-bookmark\">HaveResponse</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a response has been received from an Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Headers\" data-linktype=\"self-bookmark\">Headers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a collection of the name/value pairs that make up the HTTP headers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Host\" data-linktype=\"self-bookmark\">Host</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Get or set the Host header value to use in an HTTP request independent from the request URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_IfModifiedSince\" data-linktype=\"self-bookmark\">IfModifiedSince</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the <code>If-Modified-Since</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_KeepAlive\" data-linktype=\"self-bookmark\">KeepAlive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_MaximumAutomaticRedirections\" data-linktype=\"self-bookmark\">MaximumAutomaticRedirections</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the maximum number of redirects that the request follows.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_MaximumResponseHeadersLength\" data-linktype=\"self-bookmark\">MaximumResponseHeadersLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the maximum allowed length of the response headers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_MediaType\" data-linktype=\"self-bookmark\">MediaType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the media type of the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Method\" data-linktype=\"self-bookmark\">Method</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the method for the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Pipelined\" data-linktype=\"self-bookmark\">Pipelined</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to pipeline the request to the Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_PreAuthenticate\" data-linktype=\"self-bookmark\">PreAuthenticate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to send an Authorization header with the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ProtocolVersion\" data-linktype=\"self-bookmark\">ProtocolVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the version of HTTP to use for the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Proxy\" data-linktype=\"self-bookmark\">Proxy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets proxy information for the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ReadWriteTimeout\" data-linktype=\"self-bookmark\">ReadWriteTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a time-out in milliseconds when writing to or reading from a stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Referer\" data-linktype=\"self-bookmark\">Referer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the <code>Referer</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_RequestUri\" data-linktype=\"self-bookmark\">RequestUri</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the original Uniform Resource Identifier (URI) of the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_SendChunked\" data-linktype=\"self-bookmark\">SendChunked</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to send data in segments to the Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ServerCertificateValidationCallback\" data-linktype=\"self-bookmark\">ServerCertificateValidationCallback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a callback function to validate the server certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_ServicePoint\" data-linktype=\"self-bookmark\">ServicePoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the service point to use for the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_SupportsCookieContainer\" data-linktype=\"self-bookmark\">SupportsCookieContainer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the request provides support for a <a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Timeout\" data-linktype=\"self-bookmark\">Timeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the time-out value in milliseconds for the <span class=\"xref\">stem.Net.HttpWebRequest.GetResponse*</span> and <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span> methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_TransferEncoding\" data-linktype=\"self-bookmark\">TransferEncoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the <code>Transfer-encoding</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_UnsafeAuthenticatedConnectionSharing\" data-linktype=\"self-bookmark\">UnsafeAuthenticatedConnectionSharing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_UseDefaultCredentials\" data-linktype=\"self-bookmark\">UseDefaultCredentials</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that controls whether default credentials are sent with requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_UserAgent\" data-linktype=\"self-bookmark\">UserAgent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the <code>User-agent</code> HTTP header.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_Abort\" data-linktype=\"self-bookmark\">Abort()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels a request to an Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AddRange_System_Int32_\" data-linktype=\"self-bookmark\">AddRange(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a byte range header to a request for a specific range from the beginning or end of the requested data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AddRange_System_Int64_\" data-linktype=\"self-bookmark\">AddRange(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a byte range header to a request for a specific range from the beginning or end of the requested data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AddRange_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">AddRange(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a byte range header to the request for a specified range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AddRange_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">AddRange(Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a byte range header to the request for a specified range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AddRange_System_String_System_Int32_\" data-linktype=\"self-bookmark\">AddRange(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a Range header to a request for a specific range from the beginning or end of the requested data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AddRange_System_String_System_Int64_\" data-linktype=\"self-bookmark\">AddRange(String,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a Range header to a request for a specific range from the beginning or end of the requested data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AddRange_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">AddRange(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a range header to a request for a specified range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_AddRange_System_String_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">AddRange(String,Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a range header to a request for a specified range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_BeginGetRequestStream_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetRequestStream(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous request for a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_BeginGetResponse_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetResponse(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous request to an Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_EndGetRequestStream_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetRequestStream(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous request for a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_EndGetRequestStream_System_IAsyncResult_System_Net_TransportContext__\" data-linktype=\"self-bookmark\">EndGetRequestStream(IAsyncResult,TransportContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous request for a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write data and outputs the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> associated with the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_EndGetResponse_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetResponse(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous request to an Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data required to serialize the target object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_GetRequestStream\" data-linktype=\"self-bookmark\">GetRequestStream()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write request data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_GetRequestStream_System_Net_TransportContext__\" data-linktype=\"self-bookmark\">GetRequestStream(TransportContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write request data and outputs the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> associated with the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_GetResponse\" data-linktype=\"self-bookmark\">GetResponse()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a response from an Internet resource.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebRequest_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data needed to serialize the target object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest__ctor\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HttpWebRequest()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public HttpWebRequest ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HttpWebRequest(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class from the specified instances of the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> classes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected HttpWebRequest (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>serializationInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object that contains the information required to serialize the new <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>streamingContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object that contains the source and destination of the serialized stream associated with the new <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An application must run in full trust mode when using serialization.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Accept\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Accept_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Accept</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the <code>Accept</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Accept { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>Accept</code> HTTP header. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To clear the <code>Accept</code> HTTP header, set the Accept property to <code>null</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the Accept property.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebRequest_Accept#1\">         // Create a &#39;HttpWebRequest&#39; object.\n         HttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(myUri);\n         // Set the &#39;Accept&#39; property to accept an image of any type.\n         myHttpWebRequest.Accept=&quot;image/*&quot;;\n         // The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n         HttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_Accept#1\">      // Create a &#39;HttpWebRequest&#39; object.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( myUri ) );\n      // Set the &#39;Accept&#39; property to accept an image of any type.\n      myHttpWebRequest-&gt;Accept = &quot;image/*&quot;;\n      // The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_Accept#1\">            &#39; Create a &#39;HttpWebRequest&#39; object.\n            Dim myHttpWebRequest As HttpWebRequest = WebRequest.Create(myUri)\n            &#39; Set the &#39;Accept&#39; property to accept an image of any type.\n            myHttpWebRequest.Accept = &quot;image/*&quot;\n            &#39; The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Address\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Address_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Address</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Uniform Resource Identifier (URI) of the Internet resource that actually responds to the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Uri Address { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that identifies the Internet resource that actually responds to the request. The default is the URI used by the <span class=\"xref\">stem.Net.WebRequest.Create*</span> method to initialize the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Address property is set to the URI after any redirections that happen during the request are complete.  </p>\n<p> The URI of the original request is kept in the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_RequestUri_\" data-linktype=\"relative-path\">RequestUri</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks to see if the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> object <code>req</code> was redirected to another location to fulfill the request, and sets the value of the <code>hasChanged</code> variable to <code>true</code> if the request was redirected; otherwise <code>hasChanged</code> is set to <code>false</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic HttpWebRequest.RequestUri Example#1\"> Dim hasChanged As Boolean = _\n    (req.RequestUri.ToString() &lt;&gt; req.Address.ToString())\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic HttpWebRequest.RequestUri Example#1\">bool hasChanged = (req.RequestUri != req.Address);\n \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic HttpWebRequest.RequestUri Example#1\">      bool hasChanged = req-&gt;RequestUri-&gt;Equals( req-&gt;Address );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AllowAutoRedirect\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AllowAutoRedirect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowAutoRedirect</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the request should follow redirection responses.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AllowAutoRedirect { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the request should automatically follow redirection responses from the Internet resource; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set AllowAutoRedirect to <code>true</code> if you want the request to automatically follow HTTP redirection headers to the new location of the resource. The maximum number of redirections to follow is set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_MaximumAutomaticRedirections_\" data-linktype=\"relative-path\">MaximumAutomaticRedirections</a> property.  </p>\n<p> If AllowAutoRedirect is set to <code>false</code>, all responses with an HTTP status code from 300 to 399 is returned to the application.  </p>\n<p> The Authorization header is cleared on auto-redirects and <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> automatically tries to re-authenticate to the redirected location. In practice, this means that an application can&#39;t put custom authentication information into the Authorization header if it is possible to encounter redirection. Instead, the application must implement and register a custom authentication module. The <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">System.Net.AuthenticationManager</a> and related class are used to implement a custom authentication module. The <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method registers a custom authentication module.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the AllowAutoRedirect property to allow the request to follow redirection responses.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebRequest_AllowAutoRedirect#2\">\t\t\t// Create a new HttpWebRequest Object to the mentioned URL.\n\t\t\tHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\t\n\t\t\tmyHttpWebRequest.MaximumAutomaticRedirections=1;\n\t\t\tmyHttpWebRequest.AllowAutoRedirect=true;\n\t\t\tHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\t\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_AllowAutoRedirect#2\">      // Create a new HttpWebRequest Object to the mentioned URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( &quot;http://www.contoso.com&quot; ) );\n      myHttpWebRequest-&gt;MaximumAutomaticRedirections = 1;\n      myHttpWebRequest-&gt;AllowAutoRedirect = true;\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_AllowAutoRedirect#2\">   \n\t    &#39;This method creates a new HttpWebRequest Object to the mentioned URL.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n            myHttpWebRequest.MaximumAutomaticRedirections = 1\n            myHttpWebRequest.AllowAutoRedirect = True\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AllowReadStreamBuffering\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AllowReadStreamBuffering_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowReadStreamBuffering</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to buffer the received from the Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AllowReadStreamBuffering { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to buffer the received from the Internet resource; otherwise, <code>false</code>.  </p>\n<p> <code>true</code> to enable buffering of the data received from the Internet resource; <code>false</code> to disable buffering. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AllowWriteStreamBuffering\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AllowWriteStreamBuffering_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowWriteStreamBuffering</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to buffer the data sent to the Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AllowWriteStreamBuffering { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to enable buffering of the data sent to the Internet resource; <code>false</code> to disable buffering. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When AllowWriteStreamBuffering is <code>true</code>, the data is buffered in memory so it is ready to be resent in the event of redirections or authentication requests.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the AllowWriteStreamBuffering property to disable data buffering.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_AllowWriteStreamBuffering#1\">      // Create a new &#39;HttpWebRequest&#39; object to the mentioned Uri.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( &quot;http://www.contoso.com/codesnippets/next.asp&quot; ) );\n      // Set AllowWriteStreamBuffering to &#39;false&#39;.\n      myHttpWebRequest-&gt;AllowWriteStreamBuffering = false;\n      Console::WriteLine( &quot;<br>Please Enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) uri:&quot; );\n      String^ inputData = Console::ReadLine();\n      String^ postData = String::Concat( &quot;firstone= &quot;, inputData );\n      // Set &#39;Method&#39; property of &#39;HttpWebRequest&#39; class to POST.\n      myHttpWebRequest-&gt;Method = &quot;POST&quot;;\n      ASCIIEncoding^ encodedData = gcnew ASCIIEncoding;\n      array&lt;Byte&gt;^ byteArray = encodedData-&gt;GetBytes( postData );\n      // Set &#39;ContentType&#39; property of the &#39;HttpWebRequest&#39; class to S&quot;application/x-www-form-urlencoded&quot;.\n      myHttpWebRequest-&gt;ContentType = &quot;application/x-www-form-urlencoded&quot;;\n      // If the AllowWriteStreamBuffering property of HttpWebRequest is set to false, the contentlength has to be set to length of data to be posted else Exception(411) is raised.\n      myHttpWebRequest-&gt;ContentLength = byteArray-&gt;Length;\n      Stream^ newStream = myHttpWebRequest-&gt;GetRequestStream();\n      newStream-&gt;Write( byteArray, 0, byteArray-&gt;Length );\n      newStream-&gt;Close();\n      Console::WriteLine( &quot;<br>Data has been posted to the Uri<br><br>Please wait for the response..........&quot; );\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_AllowWriteStreamBuffering#1\">            &#39; A new &#39;HttpWebRequest&#39; object is created \t\t\t\t\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com/codesnippets/next.asp&quot;), HttpWebRequest)\n           &#39; AllowWriteStreamBuffering is set to &#39;false&#39; \n            myHttpWebRequest.AllowWriteStreamBuffering = False\n            Console.WriteLine(ControlChars.Cr + &quot;Please Enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) uri:&quot;)\n            Dim inputData As String = Console.ReadLine()\n            Dim postData As String = &quot;firstone&quot; + ChrW(61) + inputData\n            &#39; &#39;Method&#39; property of &#39;HttpWebRequest&#39; class is set to POST.\n            myHttpWebRequest.Method = &quot;POST&quot;\n            Dim encodedData As New ASCIIEncoding()\n            Dim byteArray As Byte() = encodedData.GetBytes(postData)\n            &#39; &#39;ContentType&#39; property of the &#39;HttpWebRequest&#39; class is set to &quot;application/x-www-form-urlencoded&quot;.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;\n            &#39; If the AllowWriteStreamBuffering property of HttpWebRequest is set to false,then contentlength has to be set to length of data to be posted else Exception(411) Length required is raised.\n             myHttpWebRequest.ContentLength=byteArray.Length\n            Dim newStream As Stream = myHttpWebRequest.GetRequestStream()\n            newStream.Write(byteArray, 0, byteArray.Length)\n            newStream.Close()\n            Console.WriteLine(ControlChars.Cr + &quot;Data has been posted to the Uri&quot; + ControlChars.Cr + ControlChars.Cr + &quot;Please wait for the response..........&quot;)\n            &#39; The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_AllowWriteStreamBuffering#1\">\n\t\t\t// Create a new &#39;HttpWebRequest&#39; object to the mentioned Uri.\t\t\t\t\n\t\t\tHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com/codesnippets/next.asp&quot;);\n\t\t\t// Set AllowWriteStreamBuffering to &#39;false&#39;. \n\t\t\tmyHttpWebRequest.AllowWriteStreamBuffering=false;\n\t\t\tConsole.WriteLine(&quot;<br>Please Enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) uri:&quot;);\n\t\t\tstring inputData =Console.ReadLine();\n\t\t\tstring postData=&quot;firstone=&quot;+inputData;\n\t\t\t// Set &#39;Method&#39; property of &#39;HttpWebRequest&#39; class to POST.\n\t\t\tmyHttpWebRequest.Method=&quot;POST&quot;;\n\t\t\tASCIIEncoding encodedData=new ASCIIEncoding();\n\t\t\tbyte[]  byteArray=encodedData.GetBytes(postData);\n\t\t\t// Set &#39;ContentType&#39; property of the &#39;HttpWebRequest&#39; class to &quot;application/x-www-form-urlencoded&quot;.\n\t\t\tmyHttpWebRequest.ContentType=&quot;application/x-www-form-urlencoded&quot;;\n\t\t\t// If the AllowWriteStreamBuffering property of HttpWebRequest is set to false,the contentlength has to be set to length of data to be posted else Exception(411) is raised.\n\t\t\tmyHttpWebRequest.ContentLength=byteArray.Length;\n\t\t\tStream newStream=myHttpWebRequest.GetRequestStream();\n\t\t\tnewStream.Write(byteArray,0,byteArray.Length);\n\t\t\tnewStream.Close();\n\t\t\tConsole.WriteLine(&quot;<br>Data has been posted to the Uri<br><br>Please wait for the response..........&quot;);\n\t\t\t// Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n\t\t\tHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AutomaticDecompression\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AutomaticDecompression_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AutomaticDecompression</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the type of decompression that is used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.DecompressionMethods AutomaticDecompression { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.decompressionmethods\" data-linktype=\"relative-path\">DecompressionMethods</a></div>\r\n                  </div>\r\n                  <p>A T:System.Net.DecompressionMethods object that indicates the type of decompression that is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The object&#39;s current state does not allow this property to be set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ClientCertificates\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ClientCertificates_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientCertificates</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the collection of security certificates that are associated with this request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificatecollection\" data-linktype=\"relative-path\">X509CertificateCollection</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificatecollection\" data-linktype=\"relative-path\">X509CertificateCollection</a> that contains the security certificates associated with this request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An application can add a certificate to a collection, but might not have access rights to it. To use a certificate contained in the collection, the application must have the same access rights as the entity that issued the certificate.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of ClientCertificates (if there is one), or tries to reuse an anonymous sessions if ClientCertificates is empty.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> For performance reasons, you shouldn&#39;t add a client certificate to a <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> unless you know the server will ask for it.  </p>\n<p> For a code example illustrating how to enumerate the certificates in the client certificate store, see the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2collection\" data-linktype=\"relative-path\">X509Certificate2Collection</a> class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Connection\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Connection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Connection</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the <code>Connection</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Connection { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>Connection</code> HTTP header. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value of Connection is set to Keep-alive or Close.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The request sends the Connection property to the Internet resource as the <code>Connection</code> HTTP header. If the value of the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> property is <code>true</code>, the value &quot;Keep-alive&quot; is appended to the end of the <code>Connection</code> header.  </p>\n<p> To clear the <code>Connection</code> HTTP header, set the Connection property to <code>null</code>.  </p>\n<p> Changing the Connection property after the request has been started by calling the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Connection property to set the value of the Connection HTTP Header.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_Connection#1\">int main()\n{\n   try\n   {\n      \n      // Create a new HttpWebRequest object.  Make sure that\n      // a default proxy is set if you are behind a firewall.\n      HttpWebRequest^ myHttpWebRequest1 = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com&quot; ));\n      myHttpWebRequest1-&gt;KeepAlive = false;\n      \n      // Assign the response object of HttpWebRequest to a HttpWebResponse variable.\n      HttpWebResponse^ myHttpWebResponse1 = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest1-&gt;GetResponse());\n      Console::WriteLine( &quot;<br>The HTTP request Headers for the first request are: <br> {0}&quot;, myHttpWebRequest1-&gt;Headers );\n      Console::WriteLine( &quot;Press Enter Key to Continue..........&quot; );\n      Console::Read();\n      Stream^ streamResponse = myHttpWebResponse1-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^readBuff = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuff, 0, 256 );\n      Console::WriteLine( &quot;The contents of the Html page are.......<br>&quot; );\n      while ( count &gt; 0 )\n      {\n         String^ outputData = gcnew String( readBuff,0,count );\n         Console::Write( outputData );\n         count = streamRead-&gt;Read( readBuff, 0, 256 );\n      }\n      Console::WriteLine();\n      \n      // Close the Stream object.\n      streamResponse-&gt;Close();\n      streamRead-&gt;Close();\n      \n      // Release the resources held by response object.\n      myHttpWebResponse1-&gt;Close();\n      \n      // Create a new HttpWebRequest object for the specified Uri.\n      HttpWebRequest^ myHttpWebRequest2 = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com&quot; ));\n      myHttpWebRequest2-&gt;Connection = &quot;Close&quot;;\n      \n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse2 = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest2-&gt;GetResponse());\n      \n      // Release the resources held by response object.\n      myHttpWebResponse2-&gt;Close();\n      Console::WriteLine( &quot;<br>The Http RequestHeaders are <br> {0}&quot;, myHttpWebRequest2-&gt;Headers );\n      \n      Console::WriteLine( &quot;<br>Press &#39;Enter&#39; Key to Continue.........&quot; );\n      Console::Read();\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( &quot;<br>The second HttpWebRequest Object* has raised an Argument Exception as &#39;Connection&#39; Property is set to &#39;Close&#39;&quot; );\n      Console::WriteLine( &quot;<br> {0}&quot;, e-&gt;Message );\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;WebException raised!&quot; );\n      Console::WriteLine( &quot;<br> {0}&quot;, e-&gt;Message );\n      Console::WriteLine( &quot;<br> {0}&quot;, e-&gt;Status );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception raised!&quot; );\n      Console::WriteLine( &quot;Source : {0} &quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0} &quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_Connection#1\">\nclass HttpWebRequest_Connection\n{\n  static void Main()\n  {    \n    try  \n    {\n\n      // Create a new HttpWebRequest object.Make sure that \n      // a default proxy is set if you are behind a firewall.\n      HttpWebRequest myHttpWebRequest1 =\n        (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n     \n      myHttpWebRequest1.KeepAlive=false;\n      // Assign the response object of HttpWebRequest to a HttpWebResponse variable.\n      HttpWebResponse myHttpWebResponse1 = \n        (HttpWebResponse)myHttpWebRequest1.GetResponse();\n\n      Console.WriteLine(&quot;<br>The HTTP request Headers for the first request are: <br>{0}&quot;,myHttpWebRequest1.Headers);\n      Console.WriteLine(&quot;Press Enter Key to Continue..........&quot;);\n      Console.Read();\n\n      Stream streamResponse=myHttpWebResponse1.GetResponseStream();\n      StreamReader streamRead = new StreamReader( streamResponse );\n      Char[] readBuff = new Char[256];\n      int count = streamRead.Read( readBuff, 0, 256 );\n      Console.WriteLine(&quot;The contents of the Html page are.......<br>&quot;);  \n      while (count &gt; 0) \n      {\n        String outputData = new String(readBuff, 0, count);\n        Console.Write(outputData);\n        count = streamRead.Read(readBuff, 0, 256);\n      }\n      Console.WriteLine();\n      // Close the Stream object.\n      streamResponse.Close();\n      streamRead.Close();\n      // Release the resources held by response object.\n      myHttpWebResponse1.Close();\n      // Create a new HttpWebRequest object for the specified Uri.\n      HttpWebRequest myHttpWebRequest2 = \n        (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n      myHttpWebRequest2.Connection=&quot;Close&quot;;\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse myHttpWebResponse2 = \n        (HttpWebResponse)myHttpWebRequest2.GetResponse();\n      // Release the resources held by response object.\n      myHttpWebResponse2.Close();\n      Console.WriteLine(&quot;<br>The Http RequestHeaders are <br>{0}&quot;,myHttpWebRequest2.Headers);\n      Console.WriteLine(&quot;<br>Press &#39;Enter&#39; Key to Continue.........&quot;);\n      Console.Read();      \n    }\n    catch(ArgumentException e)\n    {\n      Console.WriteLine(&quot;<br>The second HttpWebRequest object has raised an Argument Exception as &#39;Connection&#39; Property is set to &#39;Close&#39;&quot;);\n      Console.WriteLine(&quot;<br>{0}&quot;,e.Message);\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;WebException raised!&quot;);\n      Console.WriteLine(&quot;<br>{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>{0}&quot;,e.Status);\n    } \n    catch(Exception e)\n    {\n      Console.WriteLine(&quot;Exception raised!&quot;);\n      Console.WriteLine(&quot;Source :{0} &quot; , e.Source);\n      Console.WriteLine(&quot;Message :{0} &quot; , e.Message);\n    }\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_Connection#1\">\nClass HttpWebRequest_Connection\n  \n  Shared Sub Main()\n    Try\n\n      &#39; Create a new &#39;HttpWebRequest&#39; object for the specified Uri. Make sure that \n      &#39; a default proxy is set if you are behind a firewall.\n      Dim myHttpWebRequest1 As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n      myHttpWebRequest1.KeepAlive = False\n      &#39; Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      Dim myHttpWebResponse1 As HttpWebResponse = CType(myHttpWebRequest1.GetResponse(), HttpWebResponse)\n\n      Console.WriteLine(ControlChars.Cr + &quot;The HTTP request Headers for the first request are {0}&quot;, myHttpWebRequest1.Headers)\n      Console.WriteLine(&quot;Press Enter Key to Continue..........&quot;)\n      Console.Read()\n      Dim streamResponse As Stream = myHttpWebResponse1.GetResponseStream()\n      Dim streamRead As New StreamReader(streamResponse)\n      Dim readBuff(256) As [Char]\n      Dim count As Integer = streamRead.Read(readBuff, 0, 256)\n      Console.WriteLine(&quot;The contents of the Html page are.......&quot; + ControlChars.Cr)\n      While count &gt; 0\n        Dim outputData As New [String](readBuff, 0, count)\n        Console.Write(outputData)\n        count = streamRead.Read(readBuff, 0, 256)\n      End While\n      &#39; Close the Stream object.\n      streamResponse.Close()\n      streamRead.Close()\n     &#39; Release the resources held by response object.\n      myHttpWebResponse1.Close()\n      Console.WriteLine()\n     &#39; Create a new &#39;HttpWebRequest&#39; object  to the specified Uri.   \n      Dim myHttpWebRequest2 As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n      myHttpWebRequest2.Connection = &quot;Close&quot;\n      &#39; Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      Dim myHttpWebResponse2 As HttpWebResponse = CType(myHttpWebRequest2.GetResponse(), HttpWebResponse)\n    &#39; Release the resources held by response object.\n    myHttpWebResponse2.Close()\n      Console.WriteLine(ControlChars.Cr + &quot;The Http RequestHeaders are &quot; + ControlChars.Cr + &quot;{0}&quot;, myHttpWebRequest2.Headers)\n      Console.WriteLine(ControlChars.Cr + &quot;Press &#39;Enter&#39; Key to Continue.........&quot;)\n      Console.Read()\n    Catch e As ArgumentException\n      Console.WriteLine(ControlChars.Cr + &quot;The second HttpWebRequest object has raised an Argument Exception as &#39;Connection&#39; Property is set to &#39;Close&#39;&quot;)\n      Console.WriteLine(ControlChars.Cr + &quot;{0}&quot;, e.Message)\n    Catch e As WebException\n      Console.WriteLine(&quot;WebException raised!&quot;)\n      Console.WriteLine(ControlChars.Cr + &quot;{0}&quot;, e.Message)\n      Console.WriteLine(ControlChars.Cr + &quot;{0}&quot;, e.Status)\n    Catch e As Exception\n      Console.WriteLine(&quot;Exception raised!&quot;)\n      Console.WriteLine(&quot;Source :{0} &quot;, e.Source)\n      Console.WriteLine(&quot;Message : {0}&quot;, e.Message)\n    End Try\n  End Sub &#39; Main\nEnd Class &#39; HttpWebRequest_Connection\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ConnectionGroupName\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ConnectionGroupName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConnectionGroupName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the connection group for the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ConnectionGroupName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the connection group for this request. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ConnectionGroupName property enables you to associate a request with a connection group. This is useful when your application makes requests to one server for different users, such as a Web site that retrieves customer information from a database server.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example show how to use user information to form a connection group, assuming that the variables <code>username</code>, <code>password</code>, and <code>domain</code> are set by the application before this code is called.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic HttpWebRequest.ConnectionGroupName Example#1\">   // Create a secure group name.\n   SHA1Managed^ Sha1 = gcnew SHA1Managed;\n   array&lt;Byte&gt;^updHash = Sha1-&gt;ComputeHash( Encoding::UTF8-&gt;GetBytes( &quot;usernamepassworddomain&quot; ) );\n   String^ secureGroupName = Encoding::Default-&gt;GetString( updHash );\n\n   // Create a request for a specific URL.\n   WebRequest^ myWebRequest = WebRequest::Create( &quot;http://www.contoso.com&quot; );\n\n   // Set the authentication credentials for the request.      \n   myWebRequest-&gt;Credentials = gcnew NetworkCredential( &quot;username&quot;,&quot;password&quot;,&quot;domain&quot; );\n   myWebRequest-&gt;ConnectionGroupName = secureGroupName;\n\n   // Get the response.\n   WebResponse^ myWebResponse = myWebRequest-&gt;GetResponse();\n\n   // Insert the code that uses myWebResponse here.\n   // Close the response.\n   myWebResponse-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic HttpWebRequest.ConnectionGroupName Example#1\">  // Create a secure group name.\n  SHA1Managed Sha1 = new SHA1Managed();\n  Byte[] updHash = Sha1.ComputeHash(Encoding.UTF8.GetBytes(&quot;username&quot; + &quot;password&quot; +  &quot;domain&quot;));\n  String secureGroupName = Encoding.Default.GetString(updHash);\n\n  // Create a request for a specific URL.\n  WebRequest myWebRequest=WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\n  // Set the authentication credentials for the request.      \n  myWebRequest.Credentials = new NetworkCredential(&quot;username&quot;, &quot;password&quot;, &quot;domain&quot;); \n  myWebRequest.ConnectionGroupName = secureGroupName;\n\n  // Get the response.\n  WebResponse myWebResponse=myWebRequest.GetResponse();\n\n  // Insert the code that uses myWebResponse here.\n\n  // Close the response.\n  myWebResponse.Close();\n      \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic HttpWebRequest.ConnectionGroupName Example#1\">   &#39; Create a secure group name.\n   Dim Sha1 As New SHA1Managed()\n   Dim updHash As [Byte]() = Sha1.ComputeHash(Encoding.UTF8.GetBytes((&quot;username&quot; + &quot;password&quot; + &quot;domain&quot;)))\n   Dim secureGroupName As [String] = Encoding.Default.GetString(updHash)\n      \n   &#39; Create a request for a specific URL.\n   Dim myWebRequest As WebRequest = WebRequest.Create(&quot;http://www.contoso.com&quot;)\n      \n   &#39; Set the authentication credentials for the request.      \n   myWebRequest.Credentials = New NetworkCredential(&quot;username&quot;, &quot;password&quot;, &quot;domain&quot;)\n   myWebRequest.ConnectionGroupName = secureGroupName\n      \n   &#39; Get the response.\n   Dim myWebResponse As WebResponse = myWebRequest.GetResponse()\n      \n   &#39; Insert the code that uses myWebResponse here.\n   &#39; Close the response.\n   myWebResponse.Close()\n      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ContentLength\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ContentLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <code>Content-length</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long ContentLength { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set and that there is no request data to send.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The request has been started by calling the <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span>, <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetRequestStream*</span>, <span class=\"xref\">stem.Net.HttpWebRequest.GetResponse*</span>, or <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetResponse*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The new ContentLength value is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ContentLength property contains the value to send as the <code>Content-length</code> HTTP header with the request.  </p>\n<p> Any value other than -1 in the ContentLength property indicates that the request uploads data and that only methods that upload data are allowed to be set in the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Method_\" data-linktype=\"relative-path\">Method</a> property.  </p>\n<p> After the ContentLength property is set to a value, that number of bytes must be written to the request stream that is returned by calling the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method or both the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> and the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_EndGetRequestStream_\" data-linktype=\"relative-path\">EndGetRequestStream</a> methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the ContentLength property to the length of the string being posted.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebRequest_ContentLength#4\">            // Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n            myHttpWebRequest.Method = &quot;POST&quot;;\n            Console.WriteLine (&quot;<br>Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot;);\n\n            // Create a new string object to POST data to the Url.\n            string inputData = Console.ReadLine ();\n\n\n            string postData = &quot;firstone=&quot; + inputData;\n            ASCIIEncoding encoding = new ASCIIEncoding ();\n            byte[] byte1 = encoding.GetBytes (postData);\n\n            // Set the content type of the data being posted.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;\n\n            // Set the content length of the string being posted.\n            myHttpWebRequest.ContentLength = byte1.Length;\n\n            Stream newStream = myHttpWebRequest.GetRequestStream ();\n\n            newStream.Write (byte1, 0, byte1.Length);\n            Console.WriteLine (&quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest.ContentLength);\n\n            // Close the Stream object.\n            newStream.Close ();\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_ContentLength#4\">      // Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n      myHttpWebRequest-&gt;Method = &quot;POST&quot;;\n      Console::WriteLine( &quot;<br>Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot; );\n      \n      // Create a new String* Object* to POST data to the Url.\n      String^ inputData = Console::ReadLine();\n      \n      String^ postData = String::Concat( &quot;firstone= &quot;, inputData );\n      ASCIIEncoding^ encoding = gcnew ASCIIEncoding;\n      array&lt;Byte&gt;^ byte1 = encoding-&gt;GetBytes( postData );\n      \n      // Set the content type of the data being posted.\n      myHttpWebRequest-&gt;ContentType = &quot;application/x-www-form-urlencoded&quot;;\n      \n      // Set the content length of the String* being posted.\n      myHttpWebRequest-&gt;ContentLength = byte1-&gt;Length;\n\n      Stream^ newStream = myHttpWebRequest-&gt;GetRequestStream();\n\n      newStream-&gt;Write( byte1, 0, byte1-&gt;Length );\n      Console::WriteLine( &quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest-&gt;ContentLength );\n      \n      // Close the Stream Object*.\n      newStream-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_ContentLength#4\">            &#39; Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n            myHttpWebRequest.Method = &quot;POST&quot;\n\n            Console.WriteLine(ControlChars.Cr + &quot;Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot;)\n            &#39; Create a new string object to POST data to the Url.\n            Dim inputData As String = Console.ReadLine()\n            Dim postData As String = &quot;firstone&quot; + ChrW(61) + inputData\n            Dim encoding As New ASCIIEncoding()\n            Dim byte1 As Byte() = encoding.GetBytes(postData)\n            &#39; Set the content type of the data being posted.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;\n            &#39; Set the content length of the string being posted.\n            myHttpWebRequest.ContentLength = byte1.Length\n            Dim newStream As Stream = myHttpWebRequest.GetRequestStream()\n            newStream.Write(byte1, 0, byte1.Length)\n            Console.WriteLine(&quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest.ContentLength)\n            newStream.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ContentType\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ContentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the <code>Content-type</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ContentType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>Content-type</code> HTTP header. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ContentType property contains the media type of the request. Values assigned to the ContentType property replace any existing contents when the request sends the <code>Content-type</code> HTTP header.  </p>\n<p> To clear the <code>Content-type</code> HTTP header, set the ContentType property to <code>null</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> . If <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> is set, the property value is lost.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the ContentType property.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebRequest_ContentLength#1\">            // Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n            myHttpWebRequest.Method = &quot;POST&quot;;\n            Console.WriteLine (&quot;<br>Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot;);\n\n            // Create a new string object to POST data to the Url.\n            string inputData = Console.ReadLine ();\n\n\n            string postData = &quot;firstone=&quot; + inputData;\n            ASCIIEncoding encoding = new ASCIIEncoding ();\n            byte[] byte1 = encoding.GetBytes (postData);\n\n            // Set the content type of the data being posted.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;\n\n            // Set the content length of the string being posted.\n            myHttpWebRequest.ContentLength = byte1.Length;\n\n            Stream newStream = myHttpWebRequest.GetRequestStream ();\n\n            newStream.Write (byte1, 0, byte1.Length);\n            Console.WriteLine (&quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest.ContentLength);\n\n            // Close the Stream object.\n            newStream.Close ();\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_ContentLength#1\">      // Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n      myHttpWebRequest-&gt;Method = &quot;POST&quot;;\n      Console::WriteLine( &quot;<br>Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot; );\n      \n      // Create a new String* Object* to POST data to the Url.\n      String^ inputData = Console::ReadLine();\n      \n      String^ postData = String::Concat( &quot;firstone= &quot;, inputData );\n      ASCIIEncoding^ encoding = gcnew ASCIIEncoding;\n      array&lt;Byte&gt;^ byte1 = encoding-&gt;GetBytes( postData );\n      \n      // Set the content type of the data being posted.\n      myHttpWebRequest-&gt;ContentType = &quot;application/x-www-form-urlencoded&quot;;\n      \n      // Set the content length of the String* being posted.\n      myHttpWebRequest-&gt;ContentLength = byte1-&gt;Length;\n\n      Stream^ newStream = myHttpWebRequest-&gt;GetRequestStream();\n\n      newStream-&gt;Write( byte1, 0, byte1-&gt;Length );\n      Console::WriteLine( &quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest-&gt;ContentLength );\n      \n      // Close the Stream Object*.\n      newStream-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_ContentLength#1\">            &#39; Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n            myHttpWebRequest.Method = &quot;POST&quot;\n\n            Console.WriteLine(ControlChars.Cr + &quot;Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot;)\n            &#39; Create a new string object to POST data to the Url.\n            Dim inputData As String = Console.ReadLine()\n            Dim postData As String = &quot;firstone&quot; + ChrW(61) + inputData\n            Dim encoding As New ASCIIEncoding()\n            Dim byte1 As Byte() = encoding.GetBytes(postData)\n            &#39; Set the content type of the data being posted.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;\n            &#39; Set the content length of the string being posted.\n            myHttpWebRequest.ContentLength = byte1.Length\n            Dim newStream As Stream = myHttpWebRequest.GetRequestStream()\n            newStream.Write(byte1, 0, byte1.Length)\n            Console.WriteLine(&quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest.ContentLength)\n            newStream.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ContinueDelegate\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ContinueDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueDelegate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the delegate method called when an HTTP 100-continue response is received from the Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.HttpContinueDelegate ContinueDelegate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httpcontinuedelegate\" data-linktype=\"relative-path\">HttpContinueDelegate</a></div>\r\n                  </div>\r\n                  <p>A delegate that implements the callback method that executes when an HTTP Continue response is returned from the Internet resource. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ContinueDelegate property specifies the callback method to call when the client receives a 100-Continue response.  </p>\n<p> When the ContinueDelegate property is set, the client calls the delegate whenever protocol responses of type <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">System.Net.HttpStatusCode</a> (100) are received. This is useful if you want the client to display the status of the data being received from the Internet resource.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ContinueTimeout\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ContinueTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a timeout, in milliseconds, to wait until the 100-Continue is received from the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ContinueTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The timeout, in milliseconds, to wait until the 100-Continue is received.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the 100-Continue response is received before the timeout expires, the entity body can be sent.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_CookieContainer\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_CookieContainer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CookieContainer</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the cookies associated with the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.CookieContainer CookieContainer { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a> that contains the cookies associated with this request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CookieContainer property provides an instance of the <a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a> class that contains the cookies associated with this request.  </p>\n<p> CookieContainer is <code>null</code> by default. You must assign a <a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a> object to the property to have cookies returned in the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Cookies_\" data-linktype=\"relative-path\">Cookies</a> property of the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> returned by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, cookies are disabled by default. If you want to use cookies, use the CookieContainer property to enable cookies.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends a request to a URL and displays the cookies returned in the response.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLCookies#1\">using System.Net;\nusing System;\nnamespace Examples.System.Net.Cookies\n{\n    // This example is run at the command line.\n    // Specify one argument: the name of the host to \n    // send the request to.\n    // If the request is sucessful, the example displays the contents of the cookies\n    // returned by the host.\n    \n    public class CookieExample\n    {   \n        public static void Main(string[] args)\n        {   \n            if (args == null || args.Length != 1)\n            {\n                Console.WriteLine(&quot;Specify the URL to receive the request.&quot;);\n                Environment.Exit(1);\n            }\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(args[0]);\n            request.CookieContainer = new CookieContainer();\n        \n            HttpWebResponse response = (HttpWebResponse) request.GetResponse();\n            \n            \n\n            // Print the properties of each cookie.\n            foreach (Cookie cook in response.Cookies)\n            {\n                Console.WriteLine(&quot;Cookie:&quot;);\n                Console.WriteLine(&quot;{0} = {1}&quot;, cook.Name, cook.Value);\n                Console.WriteLine(&quot;Domain: {0}&quot;, cook.Domain);\n                Console.WriteLine(&quot;Path: {0}&quot;, cook.Path);\n                Console.WriteLine(&quot;Port: {0}&quot;, cook.Port);\n                Console.WriteLine(&quot;Secure: {0}&quot;, cook.Secure);\n             \n                Console.WriteLine(&quot;When issued: {0}&quot;, cook.TimeStamp);\n                Console.WriteLine(&quot;Expires: {0} (expired? {1})&quot;, \n                    cook.Expires, cook.Expired);\n                Console.WriteLine(&quot;Don&#39;t save: {0}&quot;, cook.Discard);    \n                Console.WriteLine(&quot;Comment: {0}&quot;, cook.Comment);\n                Console.WriteLine(&quot;Uri for comments: {0}&quot;, cook.CommentUri);\n                Console.WriteLine(&quot;Version: RFC {0}&quot; , cook.Version == 1 ? &quot;2109&quot; : &quot;2965&quot;);\n\n                // Show the string representation of the cookie.\n                Console.WriteLine (&quot;String: {0}&quot;, cook.ToString());\n            }\n        }\n    }\n}\n\n// Output from this example will be vary depending on the host name specified,\n// but will be similar to the following.\n/*\nCookie:\nCustomerID = 13xyz\nDomain: .contoso.com\nPath: /\nPort:\nSecure: False\nWhen issued: 1/14/2003 3:20:57 PM\nExpires: 1/17/2013 11:14:07 AM (expired? False)\nDon&#39;t save: False\nComment: \nUri for comments:\nVersion: RFC 2965\nString: CustomerID = 13xyz\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLCookies#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\n\n// This example is run at the command line.\n// Specify one argument: the name of the host to \n// send the request to.\n// If the request is sucessful, the example displays the contents of the cookies\n// returned by the host.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   if ( args == nullptr || args-&gt;Length != 2 )\n   {\n      Console::WriteLine( &quot;Specify the URL to receive the request.&quot; );\n      Environment::Exit( 1 );\n   }\n\n   \n   HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( args[ 1 ] ));\n   request-&gt;CookieContainer = gcnew CookieContainer;\n   HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n   response-&gt;Cookies = request-&gt;CookieContainer-&gt;GetCookies( request-&gt;RequestUri );\n   \n   // Print the properties of each cookie.\n   System::Collections::IEnumerator^ myEnum = response-&gt;Cookies-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Cookie^ cook = safe_cast&lt;Cookie^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;Cookie:&quot; );\n      Console::WriteLine( &quot;{0} = {1}&quot;, cook-&gt;Name, cook-&gt;Value );\n      Console::WriteLine( &quot;Domain: {0}&quot;, cook-&gt;Domain );\n      Console::WriteLine( &quot;Path: {0}&quot;, cook-&gt;Path );\n      Console::WriteLine( &quot;Port: {0}&quot;, cook-&gt;Port );\n      Console::WriteLine( &quot;Secure: {0}&quot;, cook-&gt;Secure );\n      Console::WriteLine( &quot;When issued: {0}&quot;, cook-&gt;TimeStamp );\n      Console::WriteLine( &quot;Expires: {0} (expired? {1})&quot;, cook-&gt;Expires, cook-&gt;Expired );\n      Console::WriteLine( &quot;Don&#39;t save: {0}&quot;, cook-&gt;Discard );\n      Console::WriteLine( &quot;Comment: {0}&quot;, cook-&gt;Comment );\n      Console::WriteLine( &quot;Uri for comments: {0}&quot;, cook-&gt;CommentUri );\n      Console::WriteLine( &quot;Version: RFC {0}&quot;, cook-&gt;Version == 1 ? (String^)&quot;2109&quot; : &quot;2965&quot; );\n      \n      // Show the string representation of the cookie.\n      Console::WriteLine( &quot;String: {0}&quot;, cook );\n      \n   }\n\n}\n\n// Output from this example will be vary depending on the host name specified,\n// but will be similar to the following.\n/*\nCookie:\nCustomerID = 13xyz\nDomain: .contoso.com\nPath: /\nPort:\nSecure: False\nWhen issued: 1/14/2003 3:20:57 PM\nExpires: 1/17/2013 11:14:07 AM (expired? False)\nDon&#39;t save: False\nComment: \nUri for comments:\nVersion: RFC 2965\nString: CustomerID = 13xyz\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLCookies#1\">Imports System.Net\nImports System\n\n&#39; This example is run at the command line.\n&#39; Specify one argument: the name of the host to \n&#39; receive the request.\n&#39; If the request is sucessful, the example displays the contents of the cookies\n&#39; returned by the host.\n\nPublic Class CookieExample\n    \n    Public Shared Sub Main(args() As String)\n        If args Is Nothing OrElse args.Length &lt;&gt; 1 Then\n            Console.WriteLine(&quot;Specify the URL to receive the request.&quot;)\n            Environment.Exit(1)\n        End If\n        Dim request As HttpWebRequest = CType(WebRequest.Create(args(0)), HttpWebRequest)\n        request.CookieContainer = New CookieContainer()\n        \n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n\n        \n        \n        &#39; Print the properties of each cookie.\n        Dim cook As Cookie\n        For Each cook In  response.Cookies\n            Console.WriteLine(&quot;Cookie:&quot;)\n            Console.WriteLine(&quot;{0} = {1}&quot;, cook.Name, cook.Value)\n            Console.WriteLine(&quot;Domain: {0}&quot;, cook.Domain)\n            Console.WriteLine(&quot;Path: {0}&quot;, cook.Path)\n            Console.WriteLine(&quot;Port: {0}&quot;, cook.Port)\n            Console.WriteLine(&quot;Secure: {0}&quot;, cook.Secure)\n            \n            Console.WriteLine(&quot;When issued: {0}&quot;, cook.TimeStamp)\n            Console.WriteLine(&quot;Expires: {0} (expired? {1})&quot;, cook.Expires, cook.Expired)\n            Console.WriteLine(&quot;Don&#39;t save: {0}&quot;, cook.Discard)\n            Console.WriteLine(&quot;Comment: {0}&quot;, cook.Comment)\n            Console.WriteLine(&quot;Uri for comments: {0}&quot;, cook.CommentUri)\n            Console.WriteLine(&quot;Version: RFC {0}&quot;, IIf(cook.Version = 1, &quot;2109&quot;, &quot;2965&quot;))\n            \n            &#39; Show the string representation of the cookie.\n            Console.WriteLine(&quot;String: {0}&quot;, cook.ToString())\n        Next cook\n    End Sub &#39;Main\nEnd Class &#39;CookieExample \n\n\n\n&#39; Output from this example will be vary depending on the host name specified,\n&#39; but will be similar to the following.\n&#39;\n&#39;Cookie:\n&#39;CustomerID = 13xyz\n&#39;Domain: .contoso.com\n&#39;Path: /\n&#39;Port:\n&#39;Secure: False\n&#39;When issued: 1/14/2003 3:20:57 PM\n&#39;Expires: 1/17/2013 11:14:07 AM (expired? False)\n&#39;Don&#39;t save: False\n&#39;Comment: \n&#39;Uri for comments:\n&#39;Version: RFC 2965\n&#39;String: CustomerID = 13xyz\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Credentials\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Credentials_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Credentials</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets authentication information for the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.ICredentials Credentials { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> that contains the authentication credentials associated with the request. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Credentials property contains authentication information to identify the maker of the request. The Credentials property can be either a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a>, in which case the user, password, and domain information contained in the <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> object is used to authenticate the request, or it can be a <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a>, in which case the Uniform Resource Identifier (URI) of the request is used to determine the user, password, and domain information to use to authenticate the request.  </p>\n<p> In most client scenarios, you should use the <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a> property, which contains the credentials of the currently logged on user. To do this, set the <a class=\"xref\" href=\"system.net.webclient#System_Net_WebClient_UseDefaultCredentials_\" data-linktype=\"relative-path\">UseDefaultCredentials</a> property to <code>true</code> instead of setting this property.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class is being used in a middle-tier application, such as an ASP.NET application, the credentials in the <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a> property belong to the account running the ASP page (the server-side credentials). Typically, you would set this property to the credentials of the client on whose behalf the request is made.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The NTLM authentication scheme cannot be used to impersonate another user. Kerberos must be specially configured to support impersonation.  </p>\n</div>\n<p> To restrict HttpWebRequest to one or more authentication methods, use the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> class and bind your credentials to one or more authentication schemes  </p>\n<p> Supported authentication schemes include Digest, Negotiate, Kerberos, NTLM, and Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the credentials for a request.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLResponse1#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Text;\nusing namespace System::IO;\n\n// Specify the URL to receive the request.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( args[ 1 ] ));\n   \n   // Set some reasonable limits on resources used by this request\n   request-&gt;MaximumAutomaticRedirections = 4;\n   request-&gt;MaximumResponseHeadersLength = 4;\n   \n   // Set credentials to use for this request.\n   request-&gt;Credentials = CredentialCache::DefaultCredentials;\n   HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n   Console::WriteLine( &quot;Content length is {0}&quot;, response-&gt;ContentLength );\n   Console::WriteLine( &quot;Content type is {0}&quot;, response-&gt;ContentType );\n   \n   // Get the stream associated with the response.\n   Stream^ receiveStream = response-&gt;GetResponseStream();\n   \n   // Pipes the stream to a higher level stream reader with the required encoding format. \n   StreamReader^ readStream = gcnew StreamReader( receiveStream,Encoding::UTF8 );\n   Console::WriteLine( &quot;Response stream received.&quot; );\n   Console::WriteLine( readStream-&gt;ReadToEnd() );\n   response-&gt;Close();\n   readStream-&gt;Close();\n}\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLResponse1#1\">using System;\nusing System.Net;\nusing System.Text;\nusing System.IO;\n\n\n    public class Test\n    {\n        // Specify the URL to receive the request.\n        public static void Main (string[] args)\n        {\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create (args[0]);\n\n            // Set some reasonable limits on resources used by this request\n            request.MaximumAutomaticRedirections = 4;\n            request.MaximumResponseHeadersLength = 4;\n            // Set credentials to use for this request.\n            request.Credentials = CredentialCache.DefaultCredentials;\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse ();\n\n            Console.WriteLine (&quot;Content length is {0}&quot;, response.ContentLength);\n            Console.WriteLine (&quot;Content type is {0}&quot;, response.ContentType);\n             \n            // Get the stream associated with the response.\n            Stream receiveStream = response.GetResponseStream ();\n\n            // Pipes the stream to a higher level stream reader with the required encoding format. \n            StreamReader readStream = new StreamReader (receiveStream, Encoding.UTF8);\n\n            Console.WriteLine (&quot;Response stream received.&quot;);\n            Console.WriteLine (readStream.ReadToEnd ());\n            response.Close ();\n            readStream.Close ();\n        }\n    }\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLResponse1#1\">Imports System\nImports System.Net\nImports System.Text\nImports System.IO\n\n\n    Public Class Test\n\n        &#39; Specify the URL to receive the request.\n        Public Shared Sub Main(ByVal args() As String)\n        Dim request As HttpWebRequest = CType(WebRequest.Create(args(0)), HttpWebRequest)\n\n\n        &#39; Set some reasonable limits on resources used by this request\n        request.MaximumAutomaticRedirections = 4\n        request.MaximumResponseHeadersLength = 4\n\n        &#39; Set credentials to use for this request.\n        request.Credentials = CredentialCache.DefaultCredentials\n\n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n\n        Console.WriteLine(&quot;Content length is {0}&quot;, response.ContentLength)\n        Console.WriteLine(&quot;Content type is {0}&quot;, response.ContentType)\n\n        &#39; Get the stream associated with the response.\n        Dim receiveStream As Stream = response.GetResponseStream()\n\n        &#39; Pipes the stream to a higher level stream reader with the required encoding format. \n        Dim readStream As New StreamReader(receiveStream, Encoding.UTF8)\n\n        Console.WriteLine(&quot;Response stream received.&quot;)\n        Console.WriteLine(readStream.ReadToEnd())\n        response.Close()\n        readStream.Close()\n    End Sub &#39;Main\nEnd Class &#39;Test\n&#39;\n&#39;The output from this example will vary depending on the value passed into Main \n&#39;but will be similar to the following:\n&#39;\n&#39;Content length is 1542\n&#39;Content type is text/html; charset=utf-8\n&#39;Response stream received.\n&#39;&lt;html&gt;\n&#39;...\n&#39;&lt;/html&gt;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Date\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Date_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Date</div>        \r\n          </div>\r\n    \r\n            <p>Get or set the <code>Date</code> HTTP header value to use in an HTTP request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime Date { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The Date header value in the HTTP request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the Date header is <code>null</code>, then the return value will be set to <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">System.DateTime</a>.  </p>\n<p> The Date property is a standard <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">System.DateTime</a> object and can contain a <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a> field of <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>, <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>, or <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. Any kind of time can be set when using the Date property. If <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a> is set or retrieved, the Date property is assumed to be <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a> (local time).  </p>\n<p> The classes in the <a class=\"xref\" href=\"system.net\" data-linktype=\"relative-path\">System.Net</a> namespace always write it out the Date property on the wire during transmission in standard form using GMT (Utc) format.  </p>\n<p> If the Date property is set to <a class=\"xref\" href=\"system.datetime#System_DateTime_MinValue\" data-linktype=\"relative-path\">System.DateTime.MinValue</a>, then the <code>Date</code> HTTP header is removed from the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Headers_\" data-linktype=\"relative-path\">Headers</a> property and the <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>.  </p>\n<p> If the Date property is <a class=\"xref\" href=\"system.datetime#System_DateTime_MinValue\" data-linktype=\"relative-path\">System.DateTime.MinValue</a>, this indicates that the <code>Date</code> HTTP header is not included in the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Headers_\" data-linktype=\"relative-path\">Headers</a> property and the <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.  </p>\n</div>\n<p> If the Date is set and an attempt is made to send a <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> with no body, then a <a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">System.Net.ProtocolViolationException</a> will be thrown by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, and <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_EndGetResponse_\" data-linktype=\"relative-path\">EndGetResponse</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_DefaultCachePolicy\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_DefaultCachePolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultCachePolicy</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default cache policy for this request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.cache.requestcachepolicy\" data-linktype=\"relative-path\">RequestCachePolicy</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.cache.httprequestcachepolicy\" data-linktype=\"relative-path\">HttpRequestCachePolicy</a> that specifies the cache policy in effect for this request when no other policy is applicable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property registers the specified policy for the HTTP and HTTPS schemes. This policy is used for this request if:  </p>\n<p> There is no <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CachePolicy_\" data-linktype=\"relative-path\">CachePolicy</a> property specified for this request.  </p>\n<p> - or -  </p>\n<p> The machine and application configuration files do not specify a cache policy that is applicable to the Uniform Resource Identifier (URI) used to create this request.  </p>\n<p> The cache policy determines whether the requested resource can be taken from a cache instead of sending the request to the resource host computer.  </p>\n<p> A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream. So another request for the same resource could use a cached copy, depending on the cache policy level for this request.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_DefaultMaximumErrorResponseLength\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_DefaultMaximumErrorResponseLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultMaximumErrorResponseLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default maximum length of an HTTP error response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int DefaultMaximumErrorResponseLength { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The default maximum length of an HTTP error response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value is less than 0 and is not equal to -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_DefaultMaximumResponseHeadersLength\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_DefaultMaximumResponseHeadersLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultMaximumResponseHeadersLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default for the <span class=\"xref\">stem.Net.HttpWebRequest.MaximumResponseHeadersLength*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int DefaultMaximumResponseHeadersLength { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The length, in kilobytes (1024 bytes), of the default maximum for response headers received. The default configuration file sets this value to 64 kilobytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value is not equal to -1 and is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The length of the response header received the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers received; a value of 0 means that all requests fail.  </p>\n<p> This value can also be changed in the configuration file. The impact of this property can be overridden by setting the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_MaximumResponseHeadersLength_\" data-linktype=\"relative-path\">MaximumResponseHeadersLength</a> property on an instance of the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Expect\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Expect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Expect</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the <code>Expect</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Expect { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The contents of the <code>Expect</code> HTTP header. The default value is <code>null</code>.  </p>\n <div class=\"alert NOTE\"><br> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Expect</code> is set to a string that contains &quot;100-continue&quot; as a substring.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_HaveResponse\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_HaveResponse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HaveResponse</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a response has been received from an Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool HaveResponse { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a response has been received; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks the HaveResponse property to determine if a response has been received from an Internet resource.  </p>\n<pre><code class=\"lang-cs\" name=\"Httpwebrequest_HaveResponse#1\">\t\t\t// Create a new &#39;HttpWebRequest&#39; Object.\n\t\t\tHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\t\t\tHttpWebResponse myHttpWebResponse;\n\t\t\t// Display the &#39;HaveResponse&#39; property of the &#39;HttpWebRequest&#39; object to the console.\n\t\t\tConsole.WriteLine(&quot;<br>The value of &#39;HaveResponse&#39; property before a response object is obtained :{0}&quot;,myHttpWebRequest.HaveResponse);\n\t\t\t// Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n\t\t\tmyHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n\t\t\tif (myHttpWebRequest.HaveResponse)\n\t\t\t{\n\t\t\t\tStream streamResponse=myHttpWebResponse.GetResponseStream();\n\t\t\t\tStreamReader streamRead = new StreamReader( streamResponse );\n\t\t\t\tChar[] readBuff = new Char[256];\n\t\t\t\tint count = streamRead.Read( readBuff, 0, 256 );\n\t\t\t\tConsole.WriteLine(&quot;<br>The contents of Html Page are :  <br>&quot;);\t\n\t\t\t\twhile (count &gt; 0) \n\t\t\t\t{\n\t\t\t\t\tString outputData = new String(readBuff, 0, count);\n\t\t\t\t\tConsole.Write(outputData);\n\t\t\t\t\tcount = streamRead.Read(readBuff, 0, 256);\n\t\t\t\t}\n\t\t\t\t// Close the Stream object.\n\t\t\t\tstreamResponse.Close();\n\t\t\t\tstreamRead.Close();\n\t\t\t\t// Release the HttpWebResponse Resource.\n\t\t\t\tmyHttpWebResponse.Close();\n\t\t\t\tConsole.WriteLine(&quot;<br>Press &#39;Enter&#39; key to continue..........&quot;);\n\t\t\t\tConsole.Read();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;<br>The response is not received &quot;);\n\t\t\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Httpwebrequest_HaveResponse#1\">      // Create a new &#39;HttpWebRequest&#39; Object.\n      HttpWebRequest^ myHttpWebRequest = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com&quot; ));\n      HttpWebResponse^ myHttpWebResponse;\n      \n      // Display the &#39;HaveResponse&#39; property of the &#39;HttpWebRequest&#39; object to the console.\n      Console::WriteLine( &quot;<br>The value of &#39;HaveResponse&#39; property before a response object is obtained : {0}&quot;, myHttpWebRequest-&gt;HaveResponse );\n      \n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      myHttpWebResponse = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest-&gt;GetResponse());\n      if ( myHttpWebRequest-&gt;HaveResponse )\n      {\n         Stream^ streamResponse = myHttpWebResponse-&gt;GetResponseStream();\n         StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n         array&lt;Char&gt;^readBuff = gcnew array&lt;Char&gt;(256);\n         int count = streamRead-&gt;Read( readBuff, 0, 256 );\n         Console::WriteLine( &quot;<br>The contents of Html Page are :  <br>&quot; );\n         while ( count &gt; 0 )\n         {\n            String^ outputData = gcnew String( readBuff,0,count );\n            Console::Write( outputData );\n            count = streamRead-&gt;Read( readBuff, 0, 256 );\n         }\n         streamResponse-&gt;Close();\n         streamRead-&gt;Close();\n         \n         // Release the HttpWebResponse Resource.\n         myHttpWebResponse-&gt;Close();\n         Console::WriteLine( &quot;<br>Press &#39;Enter&#39; key to continue..........&quot; );\n         Console::Read();\n      }\n      else\n      {\n         Console::WriteLine( &quot;<br>The response is not received &quot; );\n      }\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;<br>WebException Caught&quot; );\n      Console::WriteLine( &quot;<br>Source  : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;<br>Message : {0}&quot;, e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Caught&quot; );\n      Console::WriteLine( &quot;Source  : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Httpwebrequest_HaveResponse#1\">            &#39; Create a new &#39;HttpWebRequest&#39; Object.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n            Dim myHttpWebResponse As HttpWebResponse\n            &#39; Display the &#39;HaveResponse&#39; property of the &#39;HttpWebRequest&#39; object to the console.\n            Console.WriteLine(ControlChars.Cr + &quot;The value of &#39;HaveResponse&#39; property before a response object is obtained :{0}&quot;, myHttpWebRequest.HaveResponse)\n            &#39; Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n            myHttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            If myHttpWebRequest.HaveResponse Then\n                Dim streamResponse As Stream = myHttpWebResponse.GetResponseStream()\n                Dim streamRead As New StreamReader(streamResponse)\n                Dim readBuff(256) As [Char]\n                Dim count As Integer = streamRead.Read(readBuff, 0, 256)\n                Console.WriteLine(ControlChars.Cr + &quot;The contents of Html Page are :  &quot; + ControlChars.Cr)\n                While count &gt; 0\n                    Dim outputData As New [String](readBuff, 0, count)\n                    Console.Write(outputData)\n                    count = streamRead.Read(readBuff, 0, 256)\n                End While\n\t\t          &#39;  Close the Stream object.\n\t\t          streamResponse.Close()\n\t\t          streamRead.Close()\n\t\t          &#39; Release the HttpWebResponse Resource.\n\t\t          myHttpWebResponse.Close()\n                Console.WriteLine(ControlChars.Cr + &quot;Press &#39;Enter&#39; key to continue..........&quot;)\n                Console.Read()\n            \n            Else\n                Console.WriteLine(ControlChars.Cr + &quot;The response is not received &quot;)\n            End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Headers\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Headers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Headers</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a collection of the name/value pairs that make up the HTTP headers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.WebHeaderCollection Headers { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> that contains the name/value pairs that make up the headers for the HTTP request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The request has been started by calling the <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span>, <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetRequestStream*</span>, <span class=\"xref\">stem.Net.HttpWebRequest.GetResponse*</span>, or <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetResponse*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Headers collection contains the protocol headers associated with the request. The following table lists the HTTP headers that are not stored in the Headers collection but are either set by the system or set by properties or methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Header</th>\n<th>Set by</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Accept_\" data-linktype=\"relative-path\">Accept</a> property.</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Connection_\" data-linktype=\"relative-path\">Connection</a> property and <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> property.</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property.</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentType_\" data-linktype=\"relative-path\">ContentType</a> property.</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Expect_\" data-linktype=\"relative-path\">Expect</a> property.</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Date_\" data-linktype=\"relative-path\">Date</a> property.</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Host_\" data-linktype=\"relative-path\">Host</a> property.</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_IfModifiedSince_\" data-linktype=\"relative-path\">IfModifiedSince</a> property.</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_AddRange_\" data-linktype=\"relative-path\">AddRange</a> method.</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Referer_\" data-linktype=\"relative-path\">Referer</a> property.</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_TransferEncoding_\" data-linktype=\"relative-path\">TransferEncoding</a> property (the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_SendChunked_\" data-linktype=\"relative-path\">SendChunked</a> property must be true).</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>Set by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_UserAgent_\" data-linktype=\"relative-path\">UserAgent</a> property.</td>\n</tr>\n</tbody>\n</table>\n<p> The <a class=\"xref\" href=\"system.net.webheadercollection#System_Net_WebHeaderCollection_Add_\" data-linktype=\"relative-path\">Add</a> method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> if you try to set one of these protected headers.  </p>\n<p> Changing the Headers property after the request has been started by calling <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Headers property to print the HTTP header name/value pairs to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_Headers#1\">      // Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( &quot;http://www.contoso.com&quot; ) );\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      Console::WriteLine( &quot;<br>The HttpHeaders are <br><br>&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value<br> {0}&quot;, myHttpWebRequest-&gt;Headers );\n      // Print the HTML contents of the page to the console.\n      Stream^ streamResponse = myHttpWebResponse-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^ readBuff = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuff, 0, 256 );\n      Console::WriteLine( &quot;<br>The HTML contents of page the are  : <br><br> &quot; );\n      while ( count &gt; 0 )\n      {\n         String^ outputData = gcnew String( readBuff,0,count );\n         Console::Write( outputData );\n         count = streamRead-&gt;Read( readBuff, 0, 256 );\n      }\n      streamResponse-&gt;Close();\n      streamRead-&gt;Close();\n      // Release the HttpWebResponse Resource.\n      myHttpWebResponse-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_Headers#1\">            &#39; Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n            &#39; Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            Console.WriteLine(ControlChars.Cr + &quot;The HttpHeaders are &quot; + ControlChars.Cr + ControlChars.Cr + ControlChars.Tab + &quot;Name&quot; + ControlChars.Tab + ControlChars.Tab + &quot;Value&quot; + ControlChars.Cr + &quot;{0}&quot;, myHttpWebRequest.Headers)\n\n            &#39; Print the HTML contents of the page to the console. \n            Dim streamResponse As Stream = myHttpWebResponse.GetResponseStream()\n            Dim streamRead As New StreamReader(streamResponse)\n            Dim readBuff(256) As [Char]\n            Dim count As Integer = streamRead.Read(readBuff, 0, 256)\n            Console.WriteLine(ControlChars.Cr + &quot;The HTML contents of page the are  : &quot; + ControlChars.Cr + ControlChars.Cr + &quot; &quot;)\n            While count &gt; 0\n                Dim outputData As New [String](readBuff, 0, count)\n                Console.Write(outputData)\n                count = streamRead.Read(readBuff, 0, 256)\n            End While\n\t   &#39; Close the Stream object.\n\t   streamResponse.Close()\n\t   streamRead.Close()\n\t   &#39; Release the HttpWebResponse Resource.\n\t    myHttpWebResponse.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_Headers#1\">\t\t\t// Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n\t\t\tHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\t\t\t// Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n\t\t\tHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n\t\t\tConsole.WriteLine(&quot;<br>The HttpHeaders are <br><br>&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value<br>{0}&quot;,myHttpWebRequest.Headers);\n\t\t\t// Print the HTML contents of the page to the console. \n\t\t\tStream streamResponse=myHttpWebResponse.GetResponseStream();\n\t\t\tStreamReader streamRead = new StreamReader( streamResponse );\n\t\t\tChar[] readBuff = new Char[256];\n\t\t\tint count = streamRead.Read( readBuff, 0, 256 );\n\t\t\tConsole.WriteLine(&quot;<br>The HTML contents of page the are  : <br><br> &quot;);\t\n\t\t\twhile (count &gt; 0) \n\t\t\t{\n\t\t\t\tString outputData = new String(readBuff, 0, count);\n\t\t\t\tConsole.Write(outputData);\n\t\t\t\tcount = streamRead.Read(readBuff, 0, 256);\n\t\t\t}\n\t\t\t// Close the Stream object.\n\t\t\tstreamResponse.Close();\n\t\t\tstreamRead.Close();\n\t\t\t// Release the HttpWebResponse Resource.\n\t\t\tmyHttpWebResponse.Close();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Host\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Host_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Host</div>        \r\n          </div>\r\n    \r\n            <p>Get or set the Host header value to use in an HTTP request independent from the request URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Host { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The Host header value in the HTTP request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The Host header cannot be set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The Host header cannot be set to an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The Host header cannot be set after the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> has already started to be sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Host property can be used to set the Host header value to use in an HTTP request independent from the request URI. The Host property can consist of a hostname and an optional port number. A Host header without port information implies the default port for the service requested (port 80 for an HTTP URL, for example).  </p>\n<p> The format for specifying a host and port must follow the rules in section 14.23 of RFC2616 published by the IETF. An example complying with these requirements that specifies a port of 8080 would be the following value for the Host property:  </p>\n<p> <code>www.contoso.com:8080</code>  </p>\n<p> Using the Host property to explicitly specify a custom Host header value also affects areas caching, cookies, and authentication. When an application provides credentials for a specific URI prefix, the applications needs to make sure to use the URI containing the value of the Host header, not the target server in the URI. The key used when caching resources, uses the Host header value rather than the request URI. Cookies are stored in a <a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a> and logically grouped by the server domain name. If the application specifies a Host header, then this value will be used as domain.  </p>\n<p> If the Host property is not set, then the Host header value to use in an HTTP request is based on the request URI.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_IfModifiedSince\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_IfModifiedSince_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IfModifiedSince</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the <code>If-Modified-Since</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime IfModifiedSince { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that contains the contents of the <code>If-Modified-Since</code> HTTP header. The default value is the current date and time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IfModifiedSince property is a standard <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">System.DateTime</a> object and can contain a <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a> field of <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>, <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>, or <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. Any kind of time can be set when using the IfModifiedSince property. If <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a> is set or retrieved, the IfModifiedSince property is assumed to be <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a> (local time).  </p>\n<p> The classes in the <a class=\"xref\" href=\"system.net\" data-linktype=\"relative-path\">System.Net</a> namespace always write it out the IfModifiedSince property on the wire during transmission in standard form using GMT (Utc) format.  </p>\n<p> If the IfModifiedSince property is set to <a class=\"xref\" href=\"system.datetime#System_DateTime_MinValue\" data-linktype=\"relative-path\">System.DateTime.MinValue</a>, then the <code>If-Modified-Since</code> HTTP header is removed from the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Headers_\" data-linktype=\"relative-path\">Headers</a> property and the <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>.  </p>\n<p> If the IfModifiedSince property is <a class=\"xref\" href=\"system.datetime#System_DateTime_MinValue\" data-linktype=\"relative-path\">System.DateTime.MinValue</a>, this indicates that the <code>If-Modified-Since</code> HTTP header is not included in the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Headers_\" data-linktype=\"relative-path\">Headers</a> property and the <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks the IfModifiedSince property.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_IfModifiedSince#1\">    // Create a new &#39;Uri&#39; object with the mentioned string.\n    Uri^ myUri = gcnew Uri( &quot;http://www.contoso.com&quot; );\n      \n    // Create a new &#39;HttpWebRequest&#39; object with the above &#39;Uri&#39; object.\n    HttpWebRequest^ myHttpWebRequest = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( myUri ));\n      \n    // Create a new &#39;DateTime&#39; object.\n    DateTime targetDate = DateTime::Now;\n    // Set a target date of a week ago\n    targetDate.AddDays(-7.0);\n    myHttpWebRequest-&gt;IfModifiedSince = targetDate;\n\n    try\n    {\n         \n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest-&gt;GetResponse());\n      Console::WriteLine( &quot;Response headers <br> {0}<br>&quot;, myHttpWebResponse-&gt;Headers );\n      Stream^ streamResponse = myHttpWebResponse-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^readBuff = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuff, 0, 256 );\n      Console::WriteLine( &quot;<br>The contents of Html Page are :  <br>&quot; );\n      while ( count &gt; 0 )\n      {\n        String^ outputData = gcnew String( readBuff,0,count );\n        Console::Write( outputData );\n        count = streamRead-&gt;Read( readBuff, 0, 256 );\n      }\n      streamResponse-&gt;Close();\n      streamRead-&gt;Close();\n         \n      // Release the HttpWebResponse Resource.\n      myHttpWebResponse-&gt;Close();\n      Console::WriteLine( &quot;<br>Press &#39;Enter&#39; key to continue.................&quot; );\n      Console::Read();\n    }\n    catch ( WebException^ e )\n    {\n      if (e-&gt;Response)\n      {\n        if ( ((HttpWebResponse ^)e-&gt;Response)-&gt;StatusCode == HttpStatusCode::NotModified)\n          Console::WriteLine(&quot;<br>The page has not been modified since {0}&quot;, targetDate);\n        else\n          Console::WriteLine(&quot;<br>Unexpected status code = {0}&quot;, ((HttpWebResponse ^)e-&gt;Response)-&gt;StatusCode);  \n      }\n      else\n        Console::WriteLine(&quot;<br>Unexpected Web Exception {0}&quot; + e-&gt;Message); \n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_IfModifiedSince#1\">    // Create a new &#39;Uri&#39; object with the mentioned string.\n    Uri myUri =new Uri(&quot;http://www.contoso.com&quot;);\t\t\t\n    // Create a new &#39;HttpWebRequest&#39; object with the above &#39;Uri&#39; object.\n    HttpWebRequest myHttpWebRequest= (HttpWebRequest)WebRequest.Create(myUri);\n\n    // Create a new &#39;DateTime&#39; object.\n    DateTime targetDate = DateTime.Now;\n    // Set a target date of a week ago\n    targetDate.AddDays(-7.0);\n    myHttpWebRequest.IfModifiedSince = targetDate;\n\n    try   \n    {\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n      Console.WriteLine(&quot;Response headers for recently modified page<br>{0}<br>&quot;,myHttpWebResponse.Headers);\n      Stream streamResponse=myHttpWebResponse.GetResponseStream();\n      StreamReader streamRead = new StreamReader( streamResponse );\n      Char[] readBuff = new Char[256];\n      int count = streamRead.Read( readBuff, 0, 256 );\n      Console.WriteLine(&quot;<br>The contents of Html Page are :  <br>&quot;);\t\n\n      while (count &gt; 0) \n      {\n        String outputData = new String(readBuff, 0, count);\n        Console.Write(outputData);\n        count = streamRead.Read(readBuff, 0, 256);\n      }\n      // Close the Stream object.\n      streamResponse.Close();\n      streamRead.Close();\n      // Release the HttpWebResponse Resource.\n      myHttpWebResponse.Close();\n\t\t\t\t\n      Console.WriteLine(&quot;<br>Press &#39;Enter&#39; key to continue.................&quot;);\t\n      Console.Read();\n    }\n    catch(WebException e)\n    {\n      if (e.Response != null)\n      {\n        if ( ((HttpWebResponse)e.Response).StatusCode == HttpStatusCode.NotModified)\n          Console.WriteLine(&quot;<br>The page has not been modified since &quot;+targetDate);\n        else\n          Console.WriteLine(&quot;<br>Unexpected status code = &quot; + ((HttpWebResponse)e.Response).StatusCode);  \n      }\n      else\n        Console.WriteLine(&quot;<br>Unexpected Web Exception &quot; + e.Message); \n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_IfModifiedSince#1\">    &#39; Create a new &#39;Uri&#39; object with the mentioned string.\n    Dim myUri As New Uri(&quot;http://www.contoso.com&quot;)\n    &#39; Create a new &#39;HttpWebRequest&#39; object with the above &#39;Uri&#39; object.\n    Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(myUri), HttpWebRequest)\n    &#39; Create a new &#39;DateTime&#39; object.\n    Dim targetDate As DateTime = DateTime.Now\n    targetDate.AddDays(-7.0)\n    myHttpWebRequest.IfModifiedSince = targetDate\n    \n    Try\n      &#39; Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n      Console.WriteLine(&quot;Response headers for recently modified page&quot; + ControlChars.Cr + &quot;{0}&quot; + ControlChars.Cr, myHttpWebResponse.Headers)\n      Dim streamResponse As Stream = myHttpWebResponse.GetResponseStream()\n      Dim streamRead As New StreamReader(streamResponse)\n      Dim readBuff(256) As [Char]\n      Dim count As Integer = streamRead.Read(readBuff, 0, 256)\n      Console.WriteLine(ControlChars.Cr + &quot;The contents of Html Page are :  &quot; + ControlChars.Cr)\n      While count &gt; 0\n        Dim outputData As New [String](readBuff, 0, count)\n        Console.Write(outputData)\n        count = streamRead.Read(readBuff, 0, 256)\n      End While\n\n      &#39; Close the Stream object.\n      streamResponse.Close()\n      streamRead.Close()\n      &#39; Release the HttpWebResponse Resource.\n      myHttpWebResponse.Close()\n      Console.WriteLine(ControlChars.Cr + &quot;Press &#39;Enter&#39; key to continue.................&quot;)\n      Console.Read()\n    Catch e As WebException\n      If e.Response IsNot Nothing\n      \n        If CType(e.Response,HttpWebResponse).StatusCode = HttpStatusCode.NotModified\n          Console.WriteLine((ControlChars.Cr + &quot;The page has not been modified since &quot; + targetDate))\n        Else\n          Console.WriteLine(ControlChars.Cr + &quot;Unexpected status code = &quot; + Ctype(e.Response,HttpWebResponse).StatusCode)\n        End If\n      Else\n        Console.WriteLine(ControlChars.Cr + &quot;Unexpected Web Exception &quot; + e.Message) \n      End If\n    End Try  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_KeepAlive\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_KeepAlive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeepAlive</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool KeepAlive { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the request to the Internet resource should contain a <code>Connection</code> HTTP header with the value Keep-alive; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to <code>true</code> to send a <code>Connection</code> HTTP header with the value Keep-alive. An application uses KeepAlive to indicate a preference for persistent connections. When the KeepAlive property is <code>true</code>, the application makes persistent connections to the servers that support them.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When using HTTP/1.1, Keep-Alive is on by default. Setting KeepAlive to <code>false</code> may result in sending a <code>Connection: Close</code> header to the server.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the KeepAlive property to <code>false</code> to avoid establishing a persistent connection with the Internet resource.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_Connection#1\">int main()\n{\n   try\n   {\n      \n      // Create a new HttpWebRequest object.  Make sure that\n      // a default proxy is set if you are behind a firewall.\n      HttpWebRequest^ myHttpWebRequest1 = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com&quot; ));\n      myHttpWebRequest1-&gt;KeepAlive = false;\n      \n      // Assign the response object of HttpWebRequest to a HttpWebResponse variable.\n      HttpWebResponse^ myHttpWebResponse1 = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest1-&gt;GetResponse());\n      Console::WriteLine( &quot;<br>The HTTP request Headers for the first request are: <br> {0}&quot;, myHttpWebRequest1-&gt;Headers );\n      Console::WriteLine( &quot;Press Enter Key to Continue..........&quot; );\n      Console::Read();\n      Stream^ streamResponse = myHttpWebResponse1-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^readBuff = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuff, 0, 256 );\n      Console::WriteLine( &quot;The contents of the Html page are.......<br>&quot; );\n      while ( count &gt; 0 )\n      {\n         String^ outputData = gcnew String( readBuff,0,count );\n         Console::Write( outputData );\n         count = streamRead-&gt;Read( readBuff, 0, 256 );\n      }\n      Console::WriteLine();\n      \n      // Close the Stream object.\n      streamResponse-&gt;Close();\n      streamRead-&gt;Close();\n      \n      // Release the resources held by response object.\n      myHttpWebResponse1-&gt;Close();\n      \n      // Create a new HttpWebRequest object for the specified Uri.\n      HttpWebRequest^ myHttpWebRequest2 = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com&quot; ));\n      myHttpWebRequest2-&gt;Connection = &quot;Close&quot;;\n      \n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse2 = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest2-&gt;GetResponse());\n      \n      // Release the resources held by response object.\n      myHttpWebResponse2-&gt;Close();\n      Console::WriteLine( &quot;<br>The Http RequestHeaders are <br> {0}&quot;, myHttpWebRequest2-&gt;Headers );\n      \n      Console::WriteLine( &quot;<br>Press &#39;Enter&#39; Key to Continue.........&quot; );\n      Console::Read();\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( &quot;<br>The second HttpWebRequest Object* has raised an Argument Exception as &#39;Connection&#39; Property is set to &#39;Close&#39;&quot; );\n      Console::WriteLine( &quot;<br> {0}&quot;, e-&gt;Message );\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;WebException raised!&quot; );\n      Console::WriteLine( &quot;<br> {0}&quot;, e-&gt;Message );\n      Console::WriteLine( &quot;<br> {0}&quot;, e-&gt;Status );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception raised!&quot; );\n      Console::WriteLine( &quot;Source : {0} &quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0} &quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_Connection#1\">\nclass HttpWebRequest_Connection\n{\n  static void Main()\n  {    \n    try  \n    {\n\n      // Create a new HttpWebRequest object.Make sure that \n      // a default proxy is set if you are behind a firewall.\n      HttpWebRequest myHttpWebRequest1 =\n        (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n     \n      myHttpWebRequest1.KeepAlive=false;\n      // Assign the response object of HttpWebRequest to a HttpWebResponse variable.\n      HttpWebResponse myHttpWebResponse1 = \n        (HttpWebResponse)myHttpWebRequest1.GetResponse();\n\n      Console.WriteLine(&quot;<br>The HTTP request Headers for the first request are: <br>{0}&quot;,myHttpWebRequest1.Headers);\n      Console.WriteLine(&quot;Press Enter Key to Continue..........&quot;);\n      Console.Read();\n\n      Stream streamResponse=myHttpWebResponse1.GetResponseStream();\n      StreamReader streamRead = new StreamReader( streamResponse );\n      Char[] readBuff = new Char[256];\n      int count = streamRead.Read( readBuff, 0, 256 );\n      Console.WriteLine(&quot;The contents of the Html page are.......<br>&quot;);  \n      while (count &gt; 0) \n      {\n        String outputData = new String(readBuff, 0, count);\n        Console.Write(outputData);\n        count = streamRead.Read(readBuff, 0, 256);\n      }\n      Console.WriteLine();\n      // Close the Stream object.\n      streamResponse.Close();\n      streamRead.Close();\n      // Release the resources held by response object.\n      myHttpWebResponse1.Close();\n      // Create a new HttpWebRequest object for the specified Uri.\n      HttpWebRequest myHttpWebRequest2 = \n        (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n      myHttpWebRequest2.Connection=&quot;Close&quot;;\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse myHttpWebResponse2 = \n        (HttpWebResponse)myHttpWebRequest2.GetResponse();\n      // Release the resources held by response object.\n      myHttpWebResponse2.Close();\n      Console.WriteLine(&quot;<br>The Http RequestHeaders are <br>{0}&quot;,myHttpWebRequest2.Headers);\n      Console.WriteLine(&quot;<br>Press &#39;Enter&#39; Key to Continue.........&quot;);\n      Console.Read();      \n    }\n    catch(ArgumentException e)\n    {\n      Console.WriteLine(&quot;<br>The second HttpWebRequest object has raised an Argument Exception as &#39;Connection&#39; Property is set to &#39;Close&#39;&quot;);\n      Console.WriteLine(&quot;<br>{0}&quot;,e.Message);\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;WebException raised!&quot;);\n      Console.WriteLine(&quot;<br>{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>{0}&quot;,e.Status);\n    } \n    catch(Exception e)\n    {\n      Console.WriteLine(&quot;Exception raised!&quot;);\n      Console.WriteLine(&quot;Source :{0} &quot; , e.Source);\n      Console.WriteLine(&quot;Message :{0} &quot; , e.Message);\n    }\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_Connection#1\">\nClass HttpWebRequest_Connection\n  \n  Shared Sub Main()\n    Try\n\n      &#39; Create a new &#39;HttpWebRequest&#39; object for the specified Uri. Make sure that \n      &#39; a default proxy is set if you are behind a firewall.\n      Dim myHttpWebRequest1 As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n      myHttpWebRequest1.KeepAlive = False\n      &#39; Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      Dim myHttpWebResponse1 As HttpWebResponse = CType(myHttpWebRequest1.GetResponse(), HttpWebResponse)\n\n      Console.WriteLine(ControlChars.Cr + &quot;The HTTP request Headers for the first request are {0}&quot;, myHttpWebRequest1.Headers)\n      Console.WriteLine(&quot;Press Enter Key to Continue..........&quot;)\n      Console.Read()\n      Dim streamResponse As Stream = myHttpWebResponse1.GetResponseStream()\n      Dim streamRead As New StreamReader(streamResponse)\n      Dim readBuff(256) As [Char]\n      Dim count As Integer = streamRead.Read(readBuff, 0, 256)\n      Console.WriteLine(&quot;The contents of the Html page are.......&quot; + ControlChars.Cr)\n      While count &gt; 0\n        Dim outputData As New [String](readBuff, 0, count)\n        Console.Write(outputData)\n        count = streamRead.Read(readBuff, 0, 256)\n      End While\n      &#39; Close the Stream object.\n      streamResponse.Close()\n      streamRead.Close()\n     &#39; Release the resources held by response object.\n      myHttpWebResponse1.Close()\n      Console.WriteLine()\n     &#39; Create a new &#39;HttpWebRequest&#39; object  to the specified Uri.   \n      Dim myHttpWebRequest2 As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n      myHttpWebRequest2.Connection = &quot;Close&quot;\n      &#39; Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      Dim myHttpWebResponse2 As HttpWebResponse = CType(myHttpWebRequest2.GetResponse(), HttpWebResponse)\n    &#39; Release the resources held by response object.\n    myHttpWebResponse2.Close()\n      Console.WriteLine(ControlChars.Cr + &quot;The Http RequestHeaders are &quot; + ControlChars.Cr + &quot;{0}&quot;, myHttpWebRequest2.Headers)\n      Console.WriteLine(ControlChars.Cr + &quot;Press &#39;Enter&#39; Key to Continue.........&quot;)\n      Console.Read()\n    Catch e As ArgumentException\n      Console.WriteLine(ControlChars.Cr + &quot;The second HttpWebRequest object has raised an Argument Exception as &#39;Connection&#39; Property is set to &#39;Close&#39;&quot;)\n      Console.WriteLine(ControlChars.Cr + &quot;{0}&quot;, e.Message)\n    Catch e As WebException\n      Console.WriteLine(&quot;WebException raised!&quot;)\n      Console.WriteLine(ControlChars.Cr + &quot;{0}&quot;, e.Message)\n      Console.WriteLine(ControlChars.Cr + &quot;{0}&quot;, e.Status)\n    Catch e As Exception\n      Console.WriteLine(&quot;Exception raised!&quot;)\n      Console.WriteLine(&quot;Source :{0} &quot;, e.Source)\n      Console.WriteLine(&quot;Message : {0}&quot;, e.Message)\n    End Try\n  End Sub &#39; Main\nEnd Class &#39; HttpWebRequest_Connection\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_MaximumAutomaticRedirections\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_MaximumAutomaticRedirections_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaximumAutomaticRedirections</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the maximum number of redirects that the request follows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int MaximumAutomaticRedirections { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of redirection responses that the request follows. The default value is 50.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value is set to 0 or less.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MaximumAutomaticRedirections property sets the maximum number of redirections for the request to follow if the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_AllowAutoRedirect_\" data-linktype=\"relative-path\">AllowAutoRedirect</a> property is <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the value of this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLResponse1#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Text;\nusing namespace System::IO;\n\n// Specify the URL to receive the request.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( args[ 1 ] ));\n   \n   // Set some reasonable limits on resources used by this request\n   request-&gt;MaximumAutomaticRedirections = 4;\n   request-&gt;MaximumResponseHeadersLength = 4;\n   \n   // Set credentials to use for this request.\n   request-&gt;Credentials = CredentialCache::DefaultCredentials;\n   HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n   Console::WriteLine( &quot;Content length is {0}&quot;, response-&gt;ContentLength );\n   Console::WriteLine( &quot;Content type is {0}&quot;, response-&gt;ContentType );\n   \n   // Get the stream associated with the response.\n   Stream^ receiveStream = response-&gt;GetResponseStream();\n   \n   // Pipes the stream to a higher level stream reader with the required encoding format. \n   StreamReader^ readStream = gcnew StreamReader( receiveStream,Encoding::UTF8 );\n   Console::WriteLine( &quot;Response stream received.&quot; );\n   Console::WriteLine( readStream-&gt;ReadToEnd() );\n   response-&gt;Close();\n   readStream-&gt;Close();\n}\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLResponse1#1\">using System;\nusing System.Net;\nusing System.Text;\nusing System.IO;\n\n\n    public class Test\n    {\n        // Specify the URL to receive the request.\n        public static void Main (string[] args)\n        {\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create (args[0]);\n\n            // Set some reasonable limits on resources used by this request\n            request.MaximumAutomaticRedirections = 4;\n            request.MaximumResponseHeadersLength = 4;\n            // Set credentials to use for this request.\n            request.Credentials = CredentialCache.DefaultCredentials;\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse ();\n\n            Console.WriteLine (&quot;Content length is {0}&quot;, response.ContentLength);\n            Console.WriteLine (&quot;Content type is {0}&quot;, response.ContentType);\n             \n            // Get the stream associated with the response.\n            Stream receiveStream = response.GetResponseStream ();\n\n            // Pipes the stream to a higher level stream reader with the required encoding format. \n            StreamReader readStream = new StreamReader (receiveStream, Encoding.UTF8);\n\n            Console.WriteLine (&quot;Response stream received.&quot;);\n            Console.WriteLine (readStream.ReadToEnd ());\n            response.Close ();\n            readStream.Close ();\n        }\n    }\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLResponse1#1\">Imports System\nImports System.Net\nImports System.Text\nImports System.IO\n\n\n    Public Class Test\n\n        &#39; Specify the URL to receive the request.\n        Public Shared Sub Main(ByVal args() As String)\n        Dim request As HttpWebRequest = CType(WebRequest.Create(args(0)), HttpWebRequest)\n\n\n        &#39; Set some reasonable limits on resources used by this request\n        request.MaximumAutomaticRedirections = 4\n        request.MaximumResponseHeadersLength = 4\n\n        &#39; Set credentials to use for this request.\n        request.Credentials = CredentialCache.DefaultCredentials\n\n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n\n        Console.WriteLine(&quot;Content length is {0}&quot;, response.ContentLength)\n        Console.WriteLine(&quot;Content type is {0}&quot;, response.ContentType)\n\n        &#39; Get the stream associated with the response.\n        Dim receiveStream As Stream = response.GetResponseStream()\n\n        &#39; Pipes the stream to a higher level stream reader with the required encoding format. \n        Dim readStream As New StreamReader(receiveStream, Encoding.UTF8)\n\n        Console.WriteLine(&quot;Response stream received.&quot;)\n        Console.WriteLine(readStream.ReadToEnd())\n        response.Close()\n        readStream.Close()\n    End Sub &#39;Main\nEnd Class &#39;Test\n&#39;\n&#39;The output from this example will vary depending on the value passed into Main \n&#39;but will be similar to the following:\n&#39;\n&#39;Content length is 1542\n&#39;Content type is text/html; charset=utf-8\n&#39;Response stream received.\n&#39;&lt;html&gt;\n&#39;...\n&#39;&lt;/html&gt;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_MaximumResponseHeadersLength\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_MaximumResponseHeadersLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaximumResponseHeadersLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the maximum allowed length of the response headers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int MaximumResponseHeadersLength { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The length, in kilobytes (1024 bytes), of the response headers.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is set after the request has already been submitted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value is less than 0 and is not equal to -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.  </p>\n<p> If the MaximumResponseHeadersLength property is not explicitly set, it defaults to the value of the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_DefaultMaximumResponseHeadersLength_\" data-linktype=\"relative-path\">DefaultMaximumResponseHeadersLength</a> property.  </p>\n<p> If the length of the response header received exceeds the value of the MaximumResponseHeadersLength property, the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_EndGetResponse_\" data-linktype=\"relative-path\">EndGetResponse</a> or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> methods will throw a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> with the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> property set to <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">WebExceptionStatus</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the value of this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLResponse1#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Text;\nusing namespace System::IO;\n\n// Specify the URL to receive the request.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( args[ 1 ] ));\n   \n   // Set some reasonable limits on resources used by this request\n   request-&gt;MaximumAutomaticRedirections = 4;\n   request-&gt;MaximumResponseHeadersLength = 4;\n   \n   // Set credentials to use for this request.\n   request-&gt;Credentials = CredentialCache::DefaultCredentials;\n   HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n   Console::WriteLine( &quot;Content length is {0}&quot;, response-&gt;ContentLength );\n   Console::WriteLine( &quot;Content type is {0}&quot;, response-&gt;ContentType );\n   \n   // Get the stream associated with the response.\n   Stream^ receiveStream = response-&gt;GetResponseStream();\n   \n   // Pipes the stream to a higher level stream reader with the required encoding format. \n   StreamReader^ readStream = gcnew StreamReader( receiveStream,Encoding::UTF8 );\n   Console::WriteLine( &quot;Response stream received.&quot; );\n   Console::WriteLine( readStream-&gt;ReadToEnd() );\n   response-&gt;Close();\n   readStream-&gt;Close();\n}\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLResponse1#1\">using System;\nusing System.Net;\nusing System.Text;\nusing System.IO;\n\n\n    public class Test\n    {\n        // Specify the URL to receive the request.\n        public static void Main (string[] args)\n        {\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create (args[0]);\n\n            // Set some reasonable limits on resources used by this request\n            request.MaximumAutomaticRedirections = 4;\n            request.MaximumResponseHeadersLength = 4;\n            // Set credentials to use for this request.\n            request.Credentials = CredentialCache.DefaultCredentials;\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse ();\n\n            Console.WriteLine (&quot;Content length is {0}&quot;, response.ContentLength);\n            Console.WriteLine (&quot;Content type is {0}&quot;, response.ContentType);\n             \n            // Get the stream associated with the response.\n            Stream receiveStream = response.GetResponseStream ();\n\n            // Pipes the stream to a higher level stream reader with the required encoding format. \n            StreamReader readStream = new StreamReader (receiveStream, Encoding.UTF8);\n\n            Console.WriteLine (&quot;Response stream received.&quot;);\n            Console.WriteLine (readStream.ReadToEnd ());\n            response.Close ();\n            readStream.Close ();\n        }\n    }\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLResponse1#1\">Imports System\nImports System.Net\nImports System.Text\nImports System.IO\n\n\n    Public Class Test\n\n        &#39; Specify the URL to receive the request.\n        Public Shared Sub Main(ByVal args() As String)\n        Dim request As HttpWebRequest = CType(WebRequest.Create(args(0)), HttpWebRequest)\n\n\n        &#39; Set some reasonable limits on resources used by this request\n        request.MaximumAutomaticRedirections = 4\n        request.MaximumResponseHeadersLength = 4\n\n        &#39; Set credentials to use for this request.\n        request.Credentials = CredentialCache.DefaultCredentials\n\n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n\n        Console.WriteLine(&quot;Content length is {0}&quot;, response.ContentLength)\n        Console.WriteLine(&quot;Content type is {0}&quot;, response.ContentType)\n\n        &#39; Get the stream associated with the response.\n        Dim receiveStream As Stream = response.GetResponseStream()\n\n        &#39; Pipes the stream to a higher level stream reader with the required encoding format. \n        Dim readStream As New StreamReader(receiveStream, Encoding.UTF8)\n\n        Console.WriteLine(&quot;Response stream received.&quot;)\n        Console.WriteLine(readStream.ReadToEnd())\n        response.Close()\n        readStream.Close()\n    End Sub &#39;Main\nEnd Class &#39;Test\n&#39;\n&#39;The output from this example will vary depending on the value passed into Main \n&#39;but will be similar to the following:\n&#39;\n&#39;Content length is 1542\n&#39;Content type is text/html; charset=utf-8\n&#39;Response stream received.\n&#39;&lt;html&gt;\n&#39;...\n&#39;&lt;/html&gt;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_MediaType\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_MediaType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MediaType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the media type of the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MediaType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The media type of the request. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the MediaType property affects the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_CharacterSet_\" data-linktype=\"relative-path\">CharacterSet</a> property. When you set the MediaType in the request, the corresponding media type is chosen from the list of character sets returned in the response <code>Content-type</code> HTTP header.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Method\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Method_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Method</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the method for the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Method { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The request method to use to contact the Internet resource. The default value is GET.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>No method is supplied.  </p>\n<p> -or-  </p>\n<p> The method string contains invalid characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Method property can be set to any of the HTTP 1.1 protocol verbs: GET, HEAD, POST, PUT, DELETE, TRACE, or OPTIONS.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property is set to any value other than -1, the Method property must be set to a protocol property that uploads data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the Method property to POST.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebRequest_ContentLength#4\">            // Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n            myHttpWebRequest.Method = &quot;POST&quot;;\n            Console.WriteLine (&quot;<br>Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot;);\n\n            // Create a new string object to POST data to the Url.\n            string inputData = Console.ReadLine ();\n\n\n            string postData = &quot;firstone=&quot; + inputData;\n            ASCIIEncoding encoding = new ASCIIEncoding ();\n            byte[] byte1 = encoding.GetBytes (postData);\n\n            // Set the content type of the data being posted.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;\n\n            // Set the content length of the string being posted.\n            myHttpWebRequest.ContentLength = byte1.Length;\n\n            Stream newStream = myHttpWebRequest.GetRequestStream ();\n\n            newStream.Write (byte1, 0, byte1.Length);\n            Console.WriteLine (&quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest.ContentLength);\n\n            // Close the Stream object.\n            newStream.Close ();\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_ContentLength#4\">      // Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n      myHttpWebRequest-&gt;Method = &quot;POST&quot;;\n      Console::WriteLine( &quot;<br>Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot; );\n      \n      // Create a new String* Object* to POST data to the Url.\n      String^ inputData = Console::ReadLine();\n      \n      String^ postData = String::Concat( &quot;firstone= &quot;, inputData );\n      ASCIIEncoding^ encoding = gcnew ASCIIEncoding;\n      array&lt;Byte&gt;^ byte1 = encoding-&gt;GetBytes( postData );\n      \n      // Set the content type of the data being posted.\n      myHttpWebRequest-&gt;ContentType = &quot;application/x-www-form-urlencoded&quot;;\n      \n      // Set the content length of the String* being posted.\n      myHttpWebRequest-&gt;ContentLength = byte1-&gt;Length;\n\n      Stream^ newStream = myHttpWebRequest-&gt;GetRequestStream();\n\n      newStream-&gt;Write( byte1, 0, byte1-&gt;Length );\n      Console::WriteLine( &quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest-&gt;ContentLength );\n      \n      // Close the Stream Object*.\n      newStream-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_ContentLength#4\">            &#39; Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n            myHttpWebRequest.Method = &quot;POST&quot;\n\n            Console.WriteLine(ControlChars.Cr + &quot;Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot;)\n            &#39; Create a new string object to POST data to the Url.\n            Dim inputData As String = Console.ReadLine()\n            Dim postData As String = &quot;firstone&quot; + ChrW(61) + inputData\n            Dim encoding As New ASCIIEncoding()\n            Dim byte1 As Byte() = encoding.GetBytes(postData)\n            &#39; Set the content type of the data being posted.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;\n            &#39; Set the content length of the string being posted.\n            myHttpWebRequest.ContentLength = byte1.Length\n            Dim newStream As Stream = myHttpWebRequest.GetRequestStream()\n            newStream.Write(byte1, 0, byte1.Length)\n            Console.WriteLine(&quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest.ContentLength)\n            newStream.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Pipelined\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Pipelined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pipelined</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to pipeline the request to the Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Pipelined { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the request should be pipelined; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An application uses the Pipelined property to indicate a preference for pipelined connections. When Pipelined is <code>true</code>, an application makes pipelined connections to the servers that support them.  </p>\n<p> Pipelined connections are made only when the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> property is also <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example prints the value of the Pipelined property to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_PipeLined#1\">      // Create a &#39;HttpWebRequest&#39; object.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( myUri ) );\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      // Display the contents of the page to the console.\n      Stream^ streamResponse = myHttpWebResponse-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^ readBuffer = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuffer, 0, 256 );\n      Console::WriteLine( &quot;<br>The contents of HTML page are.......&quot; );\n      while ( count &gt; 0 )\n      {\n         String^ outputData = gcnew String( readBuffer,0,count );\n         Console::Write( outputData );\n         count = streamRead-&gt;Read( readBuffer, 0, 256 );\n      }\n      Console::WriteLine( &quot;<br>HTTP Request  Headers :<br><br> {0}&quot;, myHttpWebRequest-&gt;Headers );\n      Console::WriteLine( &quot;<br>HTTP Response Headers :<br><br> {0}&quot;, myHttpWebResponse-&gt;Headers );\n      streamRead-&gt;Close();\n      streamResponse-&gt;Close();\n      // Release the response object resources.\n      myHttpWebResponse-&gt;Close();\n      Console::WriteLine( &quot;<br>&#39;Pipelined&#39; property is: {0}&quot;, myHttpWebRequest-&gt;Pipelined );\n      Console::WriteLine( &quot;<br>Press &#39;Enter&#39; Key to Continue......&quot; );\n      Console::Read();\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_PipeLined#1\">\t\t\t// Create a &#39;HttpWebRequest&#39; object.\n\t\t\tHttpWebRequest\tmyHttpWebRequest=(HttpWebRequest)WebRequest.Create(myUri);\n\t\t\t// Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n\t\t\tHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n\t\t\t// Display the contents of the page to the console.\n\t\t\tStream streamResponse=myHttpWebResponse.GetResponseStream();\n\t\t\tStreamReader streamRead = new StreamReader( streamResponse );\n\t\t\tChar[] readBuffer = new Char[256];\n\t\t\tint count = streamRead.Read( readBuffer, 0, 256 );\n\t\t\tConsole.WriteLine(&quot;<br>The contents of HTML page are.......&quot;);\t\n\t\t\twhile (count &gt; 0) \n\t\t\t{\n\t\t\t\tString outputData = new String(readBuffer, 0, count);\n\t\t\t\tConsole.Write(outputData);\n\t\t\t\tcount = streamRead.Read(readBuffer, 0, 256);\n\t\t\t}\n\t\t\tConsole.WriteLine(&quot;<br>HTTP Request  Headers :<br><br>{0}&quot;,myHttpWebRequest.Headers);\n\t\t\tConsole.WriteLine(&quot;<br>HTTP Response Headers :<br><br>{0}&quot;,myHttpWebResponse.Headers);\n\t\t\tstreamRead.Close();\n\t\t\tstreamResponse.Close();\n\t\t\t// Release the response object resources.\n\t\t\tmyHttpWebResponse.Close();\n\t\t\tConsole.WriteLine(&quot;<br>&#39;Pipelined&#39; property is:{0}&quot;,myHttpWebRequest.Pipelined);\t\n\t\t\tConsole.WriteLine(&quot;<br>Press &#39;Enter&#39; Key to Continue......&quot;);\n\t\t\tConsole.Read();\t\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_PipeLined#1\">            &#39; Create a &#39;HttpWebRequest&#39; object.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(myUri), HttpWebRequest)\n            &#39; Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            &#39; Display the contents of the page to the console\n            Dim streamResponse As Stream = myHttpWebResponse.GetResponseStream()\n            Dim streamRead As New StreamReader(streamResponse)\n            Dim readBuffer(256) As [Char]\n            Dim count As Integer = streamRead.Read(readBuffer, 0, 256)\n            Console.WriteLine(ControlChars.Cr + &quot;The contents of HTML page are.......&quot;)\n            While count &gt; 0\n                Dim outputData As New [String](readBuffer, 0, count)\n                Console.Write(outputData)\n                count = streamRead.Read(readBuffer, 0, 256)\n            End While\n            Console.WriteLine(ControlChars.Cr + &quot;HTTP Request  Headers :&quot; + ControlChars.Cr + ControlChars.Cr + &quot;{0}&quot;, myHttpWebRequest.Headers)\n            Console.WriteLine(ControlChars.Cr + &quot;HTTP Response Headers :&quot; + ControlChars.Cr + ControlChars.Cr + &quot;{0}&quot;, myHttpWebResponse.Headers)\n            streamRead.Close()\n\t         streamResponse.Close()\n            &#39; Release the response object resources.\n            myHttpWebResponse.Close()\n            Console.WriteLine(ControlChars.Cr + &quot;&#39;Pipelined&#39; property is:{0}&quot;, myHttpWebRequest.Pipelined)\n            Console.WriteLine(ControlChars.Cr + &quot;Press &#39;Enter&#39; Key to Continue......&quot;)\n            Console.Read()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_PreAuthenticate\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_PreAuthenticate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreAuthenticate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to send an Authorization header with the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool PreAuthenticate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to send an  HTTP Authorization header with requests after authentication has taken place; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After a client request to a specific <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> is successfully authenticated, if PreAuthenticate is <code>true</code> and credentials are supplied, the Authorization header is sent with each request to any <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that matches the specific <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> up to the last forward slash. So if the client request successfully authenticated to a specific <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that contains the following:  </p>\n<p> <code>http://www.contoso.com/firstpath/</code>  </p>\n<p> Then the Authorization header for preauthentication is sent with each request to any of the following <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> instances:  </p>\n<p> <code>http://www.contoso.com/firstpath/</code>  </p>\n<p> <code>http://www.contoso.com/firstpath/default</code>  </p>\n<p> <code>http://www.contoso.com/firstpath/default.html</code>  </p>\n<p> <code>http://www.contoso.com/firstpath/sample.html</code>  </p>\n<p> However, the Authorization header is not sent with requests to any of the following <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> instances:  </p>\n<p> <code>http://www.contoso.com/</code>  </p>\n<p> <code>http://www.contoso.com/firstpath</code>  </p>\n<p> <code>http://www.contoso.com/secondpath/</code>  </p>\n<p> If the client request to a specific <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> is not successfully authenticated, the request uses standard authentication procedures.  </p>\n<p> With the exception of the first request, the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_PreAuthenticate_\" data-linktype=\"relative-path\">PreAuthenticate</a> property indicates whether to send authentication information with subsequent requests to a <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that matches the specific <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> up to the last forward slash without waiting to be challenged by the server.  </p>\n<p> The following dialog between client and server illustrates the effect of this property. The dialog assumes that basic authentication is in use.  </p>\n<p> PreAuthenticate is <code>false</code>:  </p>\n<p> Client: GET someUrl  </p>\n<p> Server: 401 WWW-Authenticate Basic  </p>\n<p> Client: GET with Authorization headers  </p>\n<p> Server: 200 OK  </p>\n<p> Client: GET someUrl  </p>\n<p> Server: 401 WWW-Authenticate Basic  </p>\n<p> Client: GET with Authorization headers  </p>\n<p> Server: 200 OK  </p>\n<p> PreAuthenticate is <code>true</code>:  </p>\n<p> Client: GET someUrl  </p>\n<p> Server: 401 WWW-Authenticate Basic  </p>\n<p> Client: GET with Authorization headers  </p>\n<p> Server: 200 OK  </p>\n<p> Client: GET someUrl with Authorization headers  </p>\n<p> If the authentication scheme does not support preauthentication, the value of this property is ignored.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ProtocolVersion\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ProtocolVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProtocolVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the version of HTTP to use for the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version ProtocolVersion { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>The HTTP version to use for the request. The default is <a class=\"xref\" href=\"system.net.httpversion#System_Net_HttpVersion_Version11\" data-linktype=\"relative-path\">Version11</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The HTTP version is set to a value other than 1.0 or 1.1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class supports only versions 1.0 and 1.1 of HTTP. Setting ProtocolVersion to a different version throws an exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To set the HTTP version of the current request, use the <a class=\"xref\" href=\"system.net.httpversion#System_Net_HttpVersion_Version10\" data-linktype=\"relative-path\">Version10</a> and <a class=\"xref\" href=\"system.net.httpversion#System_Net_HttpVersion_Version11\" data-linktype=\"relative-path\">Version11</a> fields of the <a class=\"xref\" href=\"system.net.httpversion\" data-linktype=\"relative-path\">HttpVersion</a> class.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the ProtocolVersion Property.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_ProtocolVersion#1\">      // Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( &quot;http://www.microsoft.com&quot; ) );\n      // Use the existing &#39;ProtocolVersion&#39; , and display it onto the console.\n      Console::WriteLine( &quot;<br>The &#39;ProtocolVersion&#39; of the protocol used is {0}&quot;, myHttpWebRequest-&gt;ProtocolVersion );\n      // Set the &#39;ProtocolVersion&#39; property of the &#39;HttpWebRequest&#39; to &#39;Version1::0&#39; .\n      myHttpWebRequest-&gt;ProtocolVersion = HttpVersion::Version10;\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      Console::WriteLine( &quot;<br>The &#39;ProtocolVersion&#39; of the protocol changed to {0}&quot;, myHttpWebRequest-&gt;ProtocolVersion );\n      Console::WriteLine( &quot;<br>The protocol version of the response Object* is {0}&quot;, myHttpWebResponse-&gt;ProtocolVersion );\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_ProtocolVersion#1\">\t\t\t// Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n\t\t\tHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.microsoft.com&quot;);\n\t\t\t// Use the existing &#39;ProtocolVersion&#39; , and display it onto the console.\t\n\t\t\tConsole.WriteLine(&quot;<br>The &#39;ProtocolVersion&#39; of the protocol used is {0}&quot;,myHttpWebRequest.ProtocolVersion);\n\t\t\t// Set the &#39;ProtocolVersion&#39; property of the &#39;HttpWebRequest&#39; to &#39;Version1.0&#39; .\n\t\t\tmyHttpWebRequest.ProtocolVersion=HttpVersion.Version10;\n\t\t\t // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n\t\t\t HttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n\t\t\tConsole.WriteLine(&quot;<br>The &#39;ProtocolVersion&#39; of the protocol changed to {0}&quot;,myHttpWebRequest.ProtocolVersion);\n\t\t\tConsole.WriteLine(&quot;<br>The protocol version of the response object is {0}&quot;,myHttpWebResponse.ProtocolVersion);\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_ProtocolVersion#1\">            &#39; Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.microsoft.com&quot;), HttpWebRequest)\n            &#39; Use the existing &#39;ProtocolVersion&#39; , and display it onto the console.\t\n            Console.WriteLine(ControlChars.Cr + &quot;The &#39;ProtocolVersion&#39; of the protocol used is {0}&quot;, myHttpWebRequest.ProtocolVersion)\n            &#39; Set the &#39;ProtocolVersion&#39; property of the &#39;HttpWebRequest&#39; to &#39;Version1.0&#39; .\n            myHttpWebRequest.ProtocolVersion = HttpVersion.Version10\n            &#39;  Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            Console.WriteLine(ControlChars.Cr + &quot;The &#39;ProtocolVersion&#39; of the protocol changed to {0}&quot;, myHttpWebRequest.ProtocolVersion)\n            Console.WriteLine(ControlChars.Cr + &quot;The protocol version of the response object is {0}&quot;, myHttpWebResponse.ProtocolVersion)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Proxy\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Proxy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Proxy</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets proxy information for the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.IWebProxy Proxy { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iwebproxy\" data-linktype=\"relative-path\">IWebProxy</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.iwebproxy\" data-linktype=\"relative-path\">IWebProxy</a> object to use to proxy the request. The default value is set by calling the <span class=\"xref\">stem.Net.GlobalProxySelection.Select*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Proxy is set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The request has been started by calling <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span>, <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetRequestStream*</span>, <span class=\"xref\">stem.Net.HttpWebRequest.GetResponse*</span>, or <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetResponse*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission for the requested operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Proxy property identifies the <a class=\"xref\" href=\"system.net.webproxy\" data-linktype=\"relative-path\">WebProxy</a> object to use to process requests to Internet resources. To specify that no proxy should be used, set the Proxy property to the proxy instance returned by the <a class=\"xref\" href=\"system.net.globalproxyselection#System_Net_GlobalProxySelection_GetEmptyWebProxy_\" data-linktype=\"relative-path\">GetEmptyWebProxy</a> method.  </p>\n<p> The local computer or application config file may specify that a default proxy be used. If the Proxy property is specified, then the proxy settings from the Proxy property override the local computer or application config file and the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> instance will use the proxy settings specified. If no proxy is specified in a config file and the Proxy property is unspecified, the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class uses the proxy settings inherited from Internet Explorer on the local computer. If there are no proxy settings in Internet Explorer, the request is sent directly to the server.  </p>\n<p> The <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class parses a proxy bypass list with wildcard characters inherited from Internet Explorer the same as the bypass list is parsed directly by Internet Explorer. For example, the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class will parse a bypass list of &quot;nt<em>&quot; from Internet Explorer as a regular expression of &quot;nt.\\</em>&quot;. So a URL of &quot;<code>http://nt.com</code>&quot; would bypass the proxy using the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class and using Internet Explorer.  </p>\n<p> The <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class supports local proxy bypass. The class considers a destination to be local if any of the following conditions are met:  </p>\n<ul>\n<li><p>The destination contains a flat name (no dots in the URL).  </p>\n</li>\n<li><p>The destination contains a loopback address (<a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Loopback\" data-linktype=\"relative-path\">Loopback</a> or <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_IPv6Loopback\" data-linktype=\"relative-path\">IPv6Loopback</a>) or the destination contains an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> assigned to the local computer.  </p>\n</li>\n<li><p>The domain suffix of the destination matches the local computer&#39;s domain suffix (<a class=\"xref\" href=\"system.net.networkinformation.ipglobalproperties#System_Net_NetworkInformation_IPGlobalProperties_DomainName_\" data-linktype=\"relative-path\">DomainName</a>).  </p>\n<p>Changing the Proxy property after the request has been started by calling the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. For information on the proxy element see <a href=\"../Topic/%3CdefaultProxy%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;defaultProxy&amp;gt; Element (Network Settings)</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Proxy method to get the proxy information for the request.  </p>\n<pre><code class=\"lang-cs\" name=\"Httpwebrequest_proxy#1\">        // Create a new request to the mentioned URL.\t\t\t\t\n        HttpWebRequest myWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.microsoft.com&quot;);\n\n        // Obtain the &#39;Proxy&#39; of the  Default browser.  \n        IWebProxy proxy = myWebRequest.Proxy;\n        // Print the Proxy Url to the console.\n        if (proxy != null)\n        {\n            Console.WriteLine(&quot;Proxy: {0}&quot;, proxy.GetProxy(myWebRequest.RequestUri));\n        } \n        else\n        {\n            Console.WriteLine(&quot;Proxy is null; no proxy will be used&quot;);\n        }\n\n        WebProxy myProxy=new WebProxy();\n\n        Console.WriteLine(&quot;<br>Please enter the new Proxy Address that is to be set:&quot;);\n        Console.WriteLine(&quot;(Example:http://myproxy.example.com:port)&quot;);\n        string proxyAddress;\n\n        try\n        {\n            proxyAddress =Console.ReadLine();\n            if(proxyAddress.Length&gt;0)\n            {\n                Console.WriteLine(&quot;<br>Please enter the Credentials (may not be needed)&quot;);\n                Console.WriteLine(&quot;Username:&quot;);\n                string username;\n                username =Console.ReadLine();\n                Console.WriteLine(&quot;<br>Password:&quot;);\n                string password;\n                password =Console.ReadLine();\t\t\t\t\t\n                // Create a new Uri object.\n                Uri newUri=new Uri(proxyAddress);\n                // Associate the newUri object to &#39;myProxy&#39; object so that new myProxy settings can be set.\n                myProxy.Address=newUri;\n                // Create a NetworkCredential object and associate it with the \n                // Proxy property of request object.\n                myProxy.Credentials=new NetworkCredential(username,password);\n                myWebRequest.Proxy=myProxy;\n            }\n            Console.WriteLine(&quot;<br>The Address of the  new Proxy settings are {0}&quot;,myProxy.Address);\n            HttpWebResponse myWebResponse=(HttpWebResponse)myWebRequest.GetResponse();\n</code></pre><pre><code class=\"lang-vb\" name=\"Httpwebrequest_proxy#1\">            &#39; Create a new request to the mentioned URL.\t\t\t\t\n            Dim myWebRequest As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.microsoft.com&quot;), HttpWebRequest)\n\n\t\t\t      &#39; Obtain the &#39;Proxy&#39; of the  Default browser.  \n\t\t\t      Dim proxy as IWebProxy = CType(myWebRequest.Proxy, IWebProxy)\n\t\t\t      &#39; Print the Proxy Url to the console.\n            If Not proxy Is Nothing Then\n                Console.WriteLine(&quot;Proxy: {0}&quot;, proxy.GetProxy(myWebRequest.RequestUri))\n            Else\n                Console.WriteLine(&quot;Proxy is null; no proxy will be used&quot;)\n            End If\n\n            Dim myProxy As New WebProxy()\n\n            Console.WriteLine(ControlChars.Cr + &quot;Please enter the new Proxy Address that is to be set &quot;)\n            Console.WriteLine(&quot;(Example:http://myproxy.example.com:port)&quot;)\n            Dim proxyAddress As String\n            Try\n                proxyAddress = Console.ReadLine()\n                If proxyAddress.Length = 0 Then\n                    myWebRequest.Proxy = myProxy\n                Else\n                    Console.WriteLine(ControlChars.Cr + &quot;Please enter the Credentials (may not be needed)&quot;)\n                    Console.WriteLine(&quot;Username:&quot;)\n                    Dim username As String\n                    username = Console.ReadLine()\n                    Console.WriteLine(ControlChars.Cr + &quot;Password:&quot;)\n                    Dim password As String\n                    password = Console.ReadLine()\n                    &#39; Create a new Uri object.\n                    Dim newUri As New Uri(proxyAddress)\n                    &#39; Associate the newUri object to &#39;myProxy&#39; object so that new myProxy settings can be set.\n                    myProxy.Address = newUri\n                    &#39; Create a NetworkCredential object and associate it with the Proxy property of request object.\n                    myProxy.Credentials = New NetworkCredential(username, password)\n                    myWebRequest.Proxy = myProxy\n                End If\n                Console.WriteLine(ControlChars.Cr + &quot;The Address of the  new Proxy settings are {0}&quot;, myProxy.Address)\n                Dim myWebResponse As HttpWebResponse = CType(myWebRequest.GetResponse(), HttpWebResponse)\n</code></pre><pre><code class=\"lang-cpp\" name=\"Httpwebrequest_proxy#1\">        // Create a new request to the mentioned URL.\n        HttpWebRequest ^ myWebRequest =\n            (HttpWebRequest ^) (WebRequest::Create(&quot;http://www.microsoft.com&quot;));\n\n        // Obtain the &#39;Proxy&#39; of the  Default browser.  \n        IWebProxy ^ proxy = myWebRequest-&gt;Proxy;\n        // Print the Proxy Url to the console.\n        if (proxy) \n        {\n            Console::WriteLine(&quot;Proxy: {0}&quot;,\n                proxy-&gt;GetProxy(myWebRequest-&gt;RequestUri));\n        } \n        else \n        {\n            Console::WriteLine(&quot;Proxy is null; no proxy will be used&quot;);\n        }\n\n        WebProxy ^ myProxy = gcnew WebProxy;\n\n        Console::WriteLine(&quot;<br>Please enter the new Proxy Address that is to be set:&quot;);\n        Console::WriteLine(&quot;(Example:http://myproxy.example.com:port)&quot;);\n        String ^ proxyAddress;\n\n        try \n        {\n            proxyAddress = Console::ReadLine();\n            if (proxyAddress-&gt;Length &gt; 0) {\n                Console::WriteLine(&quot;<br>Please enter the Credentials &quot;);\n                Console::WriteLine(&quot;Username:&quot;);\n                String ^ username;\n                username = Console::ReadLine();\n                Console::WriteLine(&quot;<br>Password:&quot;);\n                String ^ password;\n                password = Console::ReadLine();\n                // Create a new Uri object.\n                Uri ^ newUri = gcnew Uri(proxyAddress);\n                // Associate the newUri object to &#39;myProxy&#39; object so that new myProxy settings can be set.\n                myProxy-&gt;Address = newUri;\n                // Create a NetworkCredential object and associate it with the Proxy property of request object.\n                myProxy-&gt;Credentials =\n                    gcnew NetworkCredential(username, password);\n                myWebRequest-&gt;Proxy = myProxy;\n            }\n            Console::WriteLine(&quot;<br>The Address of the  new Proxy settings are {0}&quot;,\n                          myProxy-&gt;Address);\n            HttpWebResponse ^ myWebResponse =\n                (HttpWebResponse ^) (myWebRequest-&gt;GetResponse());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ReadWriteTimeout\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ReadWriteTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadWriteTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a time-out in milliseconds when writing to or reading from a stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ReadWriteTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The request has already been sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is less than or equal to zero and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadWriteTimeout property is used when writing to the stream returned by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method or reading from the stream returned by the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_GetResponseStream_\" data-linktype=\"relative-path\">GetResponseStream</a> method.  </p>\n<p> Specifically, the ReadWriteTimeout property controls the time-out for the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Read_\" data-linktype=\"relative-path\">Read</a> method, which is used to read the stream returned by the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_GetResponseStream_\" data-linktype=\"relative-path\">GetResponseStream</a> method, and for the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> method, which is used to write to the stream returned by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method.  </p>\n<p> To specify the amount of time to wait for the request to complete, use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Timeout_\" data-linktype=\"relative-path\">Timeout</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to set the ReadWriteTimeout property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic HttpWebRequest Example#2\">\n\t\tHttpWebRequest myReq =\n\t\t(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com/&quot;);\n               \n\t\tmyReq.ReadWriteTimeout = 100000;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Referer\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Referer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Referer</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the <code>Referer</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Referer { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>Referer</code> HTTP header. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_AllowAutoRedirect_\" data-linktype=\"relative-path\">AllowAutoRedirect</a> property is <code>true</code>, the Referer property is set automatically when the request is redirected to another site.  </p>\n<p> To clear the <code>Referer</code> HTTP header, set the Referer property to <code>null</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the Referer property.  </p>\n<pre><code class=\"lang-vb\" name=\"HttpWebRequest_Referer#1\">            &#39; Create a &#39;HttpWebRequest&#39; object.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(myUri), HttpWebRequest)\n            &#39; Referer property is set to http://www.microsoft.com\n            myHttpWebRequest.Referer = &quot;http://www.microsoft.com&quot;\n            &#39; The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            &#39; Displaying the contents of the page to the console\n            Dim streamResponse As Stream = myHttpWebResponse.GetResponseStream()\n            Dim streamRead As New StreamReader(streamResponse)\n            Dim readBuffer(256) As [Char]\n            Dim count As Integer = streamRead.Read(readBuffer, 0, 256)\n            Console.WriteLine(ControlChars.Cr + &quot;The contents of HTML page are.......&quot;)\n            While count &gt; 0\n                Dim outputData As New [String](readBuffer, 0, count)\n                Console.Write(outputData)\n                count = streamRead.Read(readBuffer, 0, 256)\n            End While\n            Console.WriteLine(ControlChars.Cr + &quot;HTTP Request  Headers :&quot; + ControlChars.Cr + ControlChars.Cr + &quot;{0}&quot;, myHttpWebRequest.Headers)\n            Console.WriteLine(ControlChars.Cr + &quot;HTTP Response Headers :&quot; + ControlChars.Cr + ControlChars.Cr + &quot;{0}&quot;, myHttpWebResponse.Headers)\n            &#39; Release the response object resources.\n            streamRead.Close()\n\t         streamResponse.Close()\n            myHttpWebResponse.Close()\n            Console.WriteLine(&quot;Referer to the site is:{0}&quot;, myHttpWebRequest.Referer)\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_Referer#1\">      // Create a &#39;HttpWebRequest&#39; object.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( myUri ) );\n      // Set referer property  to http://www.microsoft.com .\n      myHttpWebRequest-&gt;Referer = &quot;http://www.microsoft.com&quot;;\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      // Display the contents of the page to the console.\n      Stream^ streamResponse = myHttpWebResponse-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^ readBuffer = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuffer, 0, 256 );\n      Console::WriteLine( &quot;<br>The contents of HTML page are.......&quot; );\n      while ( count &gt; 0 )\n      {\n         String^ outputData = gcnew String( readBuffer,0,count );\n         Console::Write( outputData );\n         count = streamRead-&gt;Read( readBuffer, 0, 256 );\n      }\n      Console::WriteLine( &quot;<br>HTTP Request  Headers :<br><br> {0}&quot;, myHttpWebRequest-&gt;Headers );\n      Console::WriteLine( &quot;<br>HTTP Response Headers :<br><br> {0}&quot;, myHttpWebResponse-&gt;Headers );\n      streamRead-&gt;Close();\n      streamResponse-&gt;Close();\n      // Release the response object resources.\n      myHttpWebResponse-&gt;Close();\n      Console::WriteLine( &quot;Referer to the site is: {0}&quot;, myHttpWebRequest-&gt;Referer );\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_Referer#1\">\t\t\t// Create a &#39;HttpWebRequest&#39; object.\n\t\t\tHttpWebRequest\tmyHttpWebRequest=(HttpWebRequest)WebRequest.Create(myUri);\n\t\t\t// Set referer property  to http://www.microsoft.com .\n\t\t\tmyHttpWebRequest.Referer=&quot;http://www.microsoft.com&quot;;\n\t\t\t// Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n\t\t\tHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n\t\t\t// Display the contents of the page to the console.\n\t\t\tStream streamResponse=myHttpWebResponse.GetResponseStream();\n\t\t\tStreamReader streamRead = new StreamReader( streamResponse );\n\t\t\tChar[] readBuffer = new Char[256];\n\t\t\tint count = streamRead.Read( readBuffer, 0, 256 );\n\t\t\tConsole.WriteLine(&quot;<br>The contents of HTML page are.......&quot;);\t\n\t\t\twhile (count &gt; 0) \n\t\t\t{\n\t\t\t\tString outputData = new String(readBuffer, 0, count);\n\t\t\t\tConsole.Write(outputData);\n\t\t\t\tcount = streamRead.Read(readBuffer, 0, 256);\n\t\t\t}\n\t\t\tConsole.WriteLine(&quot;<br>HTTP Request  Headers :<br><br>{0}&quot;,myHttpWebRequest.Headers);\n\t\t\tConsole.WriteLine(&quot;<br>HTTP Response Headers :<br><br>{0}&quot;,myHttpWebResponse.Headers);\t\n\t\t\tstreamRead.Close();\n\t\t\tstreamResponse.Close();\n\t\t\t// Release the response object resources.\n\t\t\tmyHttpWebResponse.Close();\n\t\t\tConsole.WriteLine(&quot;Referer to the site is:{0}&quot;,myHttpWebRequest.Referer);\t\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_RequestUri\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_RequestUri_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RequestUri</div>        \r\n          </div>\r\n    \r\n            <p>Gets the original Uniform Resource Identifier (URI) of the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Uri RequestUri { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that contains the URI of the Internet resource passed to the <span class=\"xref\">stem.Net.WebRequest.Create*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object passed to <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> by the call to <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_\" data-linktype=\"relative-path\">Create</a>.  </p>\n<p> Following a redirection header does not change the RequestUri property. To get the actual URI that responded to the request, examine the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Address_\" data-linktype=\"relative-path\">Address</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks to see if the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> object <code>req</code> was redirected to another location to fulfill the request, and sets the value of the <code>hasChanged</code> variable to <code>true</code> if the request was redirected; otherwise, <code>hasChanged</code> is set to <code>false</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic HttpWebRequest.RequestUri Example#1\"> Dim hasChanged As Boolean = _\n    (req.RequestUri.ToString() &lt;&gt; req.Address.ToString())\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic HttpWebRequest.RequestUri Example#1\">bool hasChanged = (req.RequestUri != req.Address);\n \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic HttpWebRequest.RequestUri Example#1\">      bool hasChanged = req-&gt;RequestUri-&gt;Equals( req-&gt;Address );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_SendChunked\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_SendChunked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendChunked</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to send data in segments to the Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SendChunked { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to send data to the Internet resource in segments; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The request has been started by calling the <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span>, <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetRequestStream*</span>, <span class=\"xref\">stem.Net.HttpWebRequest.GetResponse*</span>, or <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetResponse*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When SendChunked is <code>true</code>, the request sends data to the Internet resource in segments. The Internet resource must support receiving chunked data.  </p>\n<p> Changing the SendChunked property after the request has been started by calling the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the SendChunked property to <code>true</code> so that data can be sent in segments to the Internet resource.  </p>\n<pre><code class=\"lang-vb\" name=\"HttpWebRequest_SendChunked#2\">            &#39; A new &#39;HttpWebRequest&#39; object is created.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(myUri), HttpWebRequest)\n            myHttpWebRequest.SendChunked = True\n            &#39; &#39;TransferEncoding&#39; property is set to &#39;gzip&#39;.\n            myHttpWebRequest.TransferEncoding = &quot;gzip&quot;\n            Console.WriteLine(ControlChars.Cr + &quot;Please Enter the data to be posted to the (http://&quot; + ChrW(60) + &quot;machine name&quot; + ChrW(62) + &quot;/CodeSnippetTest.asp) uri:&quot;)\n            Dim inputData As String = Console.ReadLine()\n            Dim postData As String = &quot;testdata&quot; + ChrW(61) + inputData\n            &#39; &#39;Method&#39; property of &#39;HttpWebRequest&#39; class is set to POST.\n            myHttpWebRequest.Method = &quot;POST&quot;\n            Dim encodedData As New ASCIIEncoding()\n            Dim byteArray As Byte() = encodedData.GetBytes(postData)\n            &#39; &#39;ContentType&#39; property of the &#39;HttpWebRequest&#39; class is set to &quot;application/x-www-form-urlencoded&quot;.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;\n            &#39; &#39;ContentLength&#39; property is set to Length of the data to be posted.\n            myHttpWebRequest.ContentLength = byteArray.Length\n            Dim newStream As Stream = myHttpWebRequest.GetRequestStream()\n            newStream.Write(byteArray, 0, byteArray.Length)\n            newStream.Close()\n            Console.WriteLine(ControlChars.Cr + &quot;Data has been posted to the Uri&quot; + ControlChars.Cr + ControlChars.Cr + &quot;Please wait for the response..........&quot;)\n            &#39; The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            &#39; Displaying the contents of the page to the console\n            Dim streamResponse As Stream = myHttpWebResponse.GetResponseStream()\n            Dim streamRead As New StreamReader(streamResponse)\n            Dim readBuff(256) As [Char]\n            Dim count As Integer = streamRead.Read(readBuff, 0, 256)\n            Console.WriteLine(ControlChars.Cr + &quot;The contents of the HTML page are :  &quot;)\n            While count &gt; 0\n                Dim outputData As New [String](readBuff, 0, count)\n                Console.WriteLine(outputData)\n                count = streamRead.Read(readBuff, 0, 256)\n            End While\n            &#39; Release the response object resources.  \n            streamRead.Close()\n            streamResponse.Close()\n            myHttpWebResponse.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_SendChunked#2\">         // A new &#39;HttpWebRequest&#39; object is created.\n         HttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(myUri);\n         myHttpWebRequest.SendChunked=true;\n         // &#39;TransferEncoding&#39; property is set to &#39;gzip&#39;.\n         myHttpWebRequest.TransferEncoding=&quot;gzip&quot;;\n         Console.WriteLine(&quot;<br>Please Enter the data to be posted to the (http://&lt;machine name&gt;/CodeSnippetTest.asp) uri:&quot;);\n         string inputData =Console.ReadLine();\n         string postData=&quot;testdata=&quot;+inputData;\n         // &#39;Method&#39; property of &#39;HttpWebRequest&#39; class is set to POST.\n         myHttpWebRequest.Method=&quot;POST&quot;;\n         ASCIIEncoding encodedData=new ASCIIEncoding();\n         byte[]  byteArray=encodedData.GetBytes(postData);\n         // &#39;ContentType&#39; property of the &#39;HttpWebRequest&#39; class is set to &quot;application/x-www-form-urlencoded&quot;.\n         myHttpWebRequest.ContentType=&quot;application/x-www-form-urlencoded&quot;;\n         // &#39;ContentLength&#39; property is set to Length of the data to be posted.\n         myHttpWebRequest.ContentLength=byteArray.Length;\n         Stream newStream=myHttpWebRequest.GetRequestStream();\n         newStream.Write(byteArray,0,byteArray.Length);\n         newStream.Close();\n         Console.WriteLine(&quot;<br>Data has been posted to the Uri<br><br>Please wait for the response..........&quot;);\n         // The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n         HttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n         // Displaying the contents of the page to the console\n         Stream streamResponse=myHttpWebResponse.GetResponseStream();\n         StreamReader streamRead = new StreamReader( streamResponse );\n         Char[] readBuff = new Char[256];\n         int count = streamRead.Read( readBuff, 0, 256 );\n         Console.WriteLine(&quot;<br>The contents of the HTML page are :  &quot;);\n         while (count &gt; 0) \n         {\n            String outputData = new String(readBuff, 0, count);\n            Console.WriteLine(outputData);\n            count = streamRead.Read(readBuff, 0, 256);\n         }\n         // Release the response object resources.\n         streamRead.Close();\n         streamResponse.Close();\n         myHttpWebResponse.Close(); \n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_SendChunked#2\">      // A new &#39;HttpWebRequest&#39; object is created.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( myUri ) );\n      myHttpWebRequest-&gt;SendChunked = true;\n      // &#39;TransferEncoding&#39; property is set to &#39;gzip&#39;.\n      myHttpWebRequest-&gt;TransferEncoding = &quot;gzip&quot;;\n      Console::WriteLine( &quot;<br>Please Enter the data to be posted to the (http://&lt;machine name&gt;/CodeSnippetTest::asp) uri:&quot; );\n      String^ inputData = Console::ReadLine();\n      String^ postData = String::Concat( &quot;testdata= &quot;, inputData );\n      // &#39;Method&#39; property of &#39;HttpWebRequest&#39; class is set to POST.\n      myHttpWebRequest-&gt;Method = &quot;POST&quot;;\n      ASCIIEncoding^ encodedData = gcnew ASCIIEncoding;\n      array&lt;Byte&gt;^ byteArray = encodedData-&gt;GetBytes( postData );\n      // &#39;ContentType&#39; property of the &#39;HttpWebRequest&#39; class is set to S&quot;application/x-www-form-urlencoded&quot;.\n      myHttpWebRequest-&gt;ContentType = &quot;application/x-www-form-urlencoded&quot;;\n      // &#39;ContentLength&#39; property is set to Length of the data to be posted.\n      myHttpWebRequest-&gt;ContentLength = byteArray-&gt;Length;\n      Stream^ newStream = myHttpWebRequest-&gt;GetRequestStream();\n      newStream-&gt;Write( byteArray, 0, byteArray-&gt;Length );\n      newStream-&gt;Close();\n      Console::WriteLine( &quot;<br>Data has been posted to the Uri<br><br>Please wait for the response..........&quot; );\n      // The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      // Displaying the contents of the page to the console\n      Stream^ streamResponse = myHttpWebResponse-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^ readBuff = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuff, 0, 256 );\n      Console::WriteLine( &quot;<br>The contents of the HTML page are :  &quot; );\n      while ( count &gt; 0 )\n      {\n         String^ outputData = gcnew String( readBuff,0,count );\n         Console::WriteLine( outputData );\n         count = streamRead-&gt;Read( readBuff, 0, 256 );\n      }\n      streamRead-&gt;Close();\n      streamResponse-&gt;Close();\n      myHttpWebResponse-&gt;Close();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ServerCertificateValidationCallback\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ServerCertificateValidationCallback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ServerCertificateValidationCallback</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a callback function to validate the server certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.remotecertificatevalidationcallback\" data-linktype=\"relative-path\">RemoteCertificateValidationCallback</a></div>\r\n                  </div>\r\n                  <p>A callback function to validate the server certificate.  </p>\n<p> A callback function to validate the server certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default is that no callback function is set and the ServerCertificateValidationCallback property is <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_ServicePoint\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_ServicePoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ServicePoint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the service point to use for the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.ServicePoint ServicePoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> that represents the network connection to the Internet resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_Address_\" data-linktype=\"relative-path\">Address</a> property may be different from <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Address_\" data-linktype=\"relative-path\">Address</a> if the request is redirected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"System.Net.ServicePoint#6\">void makeWebRequest( int hashCode, String^ Uri )\n{\n   HttpWebResponse^ res = nullptr;\n   \n   // Make sure that the idle time has elapsed, so that a new \n   // ServicePoint instance is created.\n   Console::WriteLine( &quot;Sleeping for 2 sec.&quot; );\n   Thread::Sleep( 2000 );\n   try\n   {\n      \n      // Create a request to the passed URI.\n      HttpWebRequest^ req = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( Uri ));\n      Console::WriteLine( &quot;<br>Connecting to {0} ............&quot;, Uri );\n      \n      // Get the response object.\n      res = dynamic_cast&lt;HttpWebResponse^&gt;(req-&gt;GetResponse());\n      Console::WriteLine( &quot;Connected.<br>&quot; );\n      ServicePoint^ currentServicePoint = req-&gt;ServicePoint;\n      \n      // Display new service point properties.\n      int currentHashCode = currentServicePoint-&gt;GetHashCode();\n      Console::WriteLine( &quot;New service point hashcode: {0}&quot;, currentHashCode );\n      Console::WriteLine( &quot;New service point max idle time: {0}&quot;, currentServicePoint-&gt;MaxIdleTime );\n      Console::WriteLine( &quot;New service point is idle since {0}&quot;, currentServicePoint-&gt;IdleSince );\n      \n      // Check that a new ServicePoint instance has been created.\n      if ( hashCode == currentHashCode )\n            Console::WriteLine( &quot;Service point reused.&quot; );\n      else\n            Console::WriteLine( &quot;A new service point created.&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n   finally\n   {\n      if ( res != nullptr )\n            res-&gt;Close();\n   }\n\n}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.ServicePoint#6\">            Private Shared Sub makeWebRequest(ByVal hashCode As Integer, ByVal Uri As String)\n                Dim res As HttpWebResponse = Nothing\n\n                &#39; Make sure that the idle time has elapsed, so that a new \n                &#39; ServicePoint instance is created.\n                Console.WriteLine(&quot;Sleeping for 2 sec.&quot;)\n                Thread.Sleep(2000)\n\n                Try\n                    &#39; Create a request to the passed URI.\n                    Dim req As HttpWebRequest = CType(WebRequest.Create(Uri), HttpWebRequest)\n                    Console.WriteLine((ControlChars.Lf + &quot;Connecting to &quot; + Uri + &quot; ............&quot;))\n\n                    &#39; Get the response object.\n                    res = CType(req.GetResponse(), HttpWebResponse)\n                    Console.WriteLine(&quot;Connected.&quot; + ControlChars.Lf)\n                    Dim currentServicePoint As ServicePoint = req.ServicePoint\n\n                    &#39; Display new service point properties.\n                    Dim currentHashCode As Integer = currentServicePoint.GetHashCode()\n                    Console.WriteLine((&quot;New service point hashcode: &quot; + currentHashCode.ToString()))\n                    Console.WriteLine((&quot;New service point max idle time: &quot; + currentServicePoint.MaxIdleTime.ToString()))\n                    Console.WriteLine((&quot;New service point is idle since &quot; + currentServicePoint.IdleSince.ToString()))\n\n                    &#39; Check that a new ServicePoint instance has been created.\n                    If hashCode = currentHashCode Then\n                        Console.WriteLine(&quot;Service point reused.&quot;)\n                    Else\n                        Console.WriteLine(&quot;A new service point created.&quot;)\n                    End If\n                Catch e As Exception\n                    Console.WriteLine((&quot;Source : &quot; + e.Source))\n                    Console.WriteLine((&quot;Message : &quot; + e.Message))\n                Finally\n                    If Not (res Is Nothing) Then\n                        res.Close()\n                    End If\n                End Try\n            End Sub &#39;makeWebRequest\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.ServicePoint#6\">        private static void makeWebRequest (int hashCode, string Uri)\n        {\n            HttpWebResponse res = null;\n\n            // Make sure that the idle time has elapsed, so that a new \n            // ServicePoint instance is created.\n            Console.WriteLine (&quot;Sleeping for 2 sec.&quot;);\n            Thread.Sleep (2000);\n            try\n            {\n                // Create a request to the passed URI.\n                HttpWebRequest req = (HttpWebRequest)WebRequest.Create (Uri);\n\n                Console.WriteLine (&quot;<br>Connecting to &quot; + Uri + &quot; ............&quot;);\n\n                // Get the response object.\n                res = (HttpWebResponse)req.GetResponse ();\n                Console.WriteLine (&quot;Connected.<br>&quot;);\n\n                ServicePoint currentServicePoint = req.ServicePoint;\n\n                // Display new service point properties.\n                int currentHashCode = currentServicePoint.GetHashCode ();\n\n                Console.WriteLine (&quot;New service point hashcode: &quot; + currentHashCode);\n                Console.WriteLine (&quot;New service point max idle time: &quot; + currentServicePoint.MaxIdleTime);\n                Console.WriteLine (&quot;New service point is idle since &quot; + currentServicePoint.IdleSince );\n\n                // Check that a new ServicePoint instance has been created.\n                if (hashCode == currentHashCode)\n                    Console.WriteLine (&quot;Service point reused.&quot;);\n                else\n                    Console.WriteLine (&quot;A new service point created.&quot;) ;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine (&quot;Source : &quot; + e.Source);\n                Console.WriteLine (&quot;Message : &quot; + e.Message);\n            }\n            finally\n            {\n                if (res != null)\n                    res.Close ();\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_SupportsCookieContainer\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_SupportsCookieContainer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SupportsCookieContainer</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the request provides support for a <a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool SupportsCookieContainer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the request provides support for a <a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a>; otherwise, <code>false</code>.  </p>\n<p> <code>true</code> if a <a class=\"xref\" href=\"system.net.cookiecontainer\" data-linktype=\"relative-path\">CookieContainer</a> is supported; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Timeout\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Timeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the time-out value in milliseconds for the <span class=\"xref\">stem.Net.HttpWebRequest.GetResponse*</span> and <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span> methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int Timeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of milliseconds to wait before the request times out. The default value is 100,000 milliseconds (100 seconds).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified is less than zero and is not <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Timeout is the number of milliseconds that a subsequent synchronous request made with the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method waits for a response, and the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method waits for a stream. The Timeout applies to the entire request and response, not individually to the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> and <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method calls. If the resource is not returned within the time-out period, the request throws a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> with the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> property set to <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">System.Net.WebExceptionStatus</a>.  </p>\n<p> The Timeout property must be set before the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method is called. Changing the Timeout property after calling the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method has no effect  </p>\n<p> The Timeout property has no effect on asynchronous requests made with the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> method.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> In the case of asynchronous requests, the client application implements its own time-out mechanism. Refer to the example in the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method.  </p>\n</div>\n<p> To specify the amount of time to wait before a read or write operation times out, use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ReadWriteTimeout_\" data-linktype=\"relative-path\">ReadWriteTimeout</a> property.  </p>\n<p> A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <a class=\"xref\" href=\"system.net.filewebrequest#System_Net_FileWebRequest_Timeout_\" data-linktype=\"relative-path\">Timeout</a> to a value less than 15 seconds, it may take 15 seconds or more before a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> is thrown to indicate a timeout on your request.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the Timeout property of the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"HttpWebRequest_Timeout#1\">\t   &#39; Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n            Console.WriteLine(ControlChars.Cr + &quot;The timeout time of the request before setting the property is  {0}  milliSeconds&quot;, myHttpWebRequest.Timeout)\n           &#39; Set the  &#39;Timeout&#39; property of the HttpWebRequest to 10 milliseconds.\n\t    myHttpWebRequest.Timeout = 10\t\n            &#39; Display the &#39;Timeout&#39; property of the &#39;HttpWebRequest&#39; on the console.\n            Console.WriteLine(ControlChars.Cr + &quot;The timeout time of the request after setting the timeout is {0}  milliSeconds&quot;, myHttpWebRequest.Timeout)\n            &#39; A HttpWebResponse object is created and is GetResponse Property of the HttpWebRequest associated with it \n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_Timeout#1\">\t\t\t// Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n\t\t\tHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\t\t\tConsole.WriteLine(&quot;<br>The timeout time of the request before setting the property is  {0}  milliSeconds.&quot;,myHttpWebRequest.Timeout);\n\t\t\t// Set the  &#39;Timeout&#39; property of the HttpWebRequest to 10 milliseconds.\n\t\t\tmyHttpWebRequest.Timeout=10;\n\t\t\t// Display the &#39;Timeout&#39; property of the &#39;HttpWebRequest&#39; on the console.\n\t\t\tConsole.WriteLine(&quot;<br>The timeout time of the request after setting the timeout is {0}  milliSeconds.&quot;,myHttpWebRequest.Timeout);\n\t\t\t// A HttpWebResponse object is created and is GetResponse Property of the HttpWebRequest associated with it \n\t\t\tHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_Timeout#1\">      // Create a new &#39;HttpWebRequest&#39; Object to the mentioned URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( &quot;http://www.contoso.com&quot; ) );\n      Console::WriteLine( &quot;<br>The timeout time of the request before setting the property is {0} milliseconds.&quot;, myHttpWebRequest-&gt;Timeout );\n      // Set the  &#39;Timeout&#39; property of the HttpWebRequest to 10 milliseconds.\n      myHttpWebRequest-&gt;Timeout = 10;\n      // Display the &#39;Timeout&#39; property of the &#39;HttpWebRequest&#39; on the console.\n      Console::WriteLine( &quot;<br>The timeout time of the request after setting the timeout is {0} milliseconds.&quot;, myHttpWebRequest-&gt;Timeout );\n      // A HttpWebResponse object is created and is GetResponse Property of the HttpWebRequest associated with it\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_TransferEncoding\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_TransferEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransferEncoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the <code>Transfer-encoding</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TransferEncoding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>Transfer-encoding</code> HTTP header. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>TransferEncoding is set when <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>TransferEncoding is set to the value &quot;Chunked&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Before you can set the TransferEncoding property, you must first set the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_SendChunked_\" data-linktype=\"relative-path\">SendChunked</a> property to <code>true</code>. Clearing TransferEncoding by setting it to <code>null</code> has no effect on the value of <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_SendChunked_\" data-linktype=\"relative-path\">SendChunked</a>.  </p>\n<p> Values assigned to the TransferEncoding property replace any existing contents.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_UnsafeAuthenticatedConnectionSharing\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_UnsafeAuthenticatedConnectionSharing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnsafeAuthenticatedConnectionSharing</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UnsafeAuthenticatedConnectionSharing { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to keep the authenticated connection open; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for this property is <code>false</code>, which causes the current connection to be closed after a request is completed. Your application must go through the authentication sequence every time it issues a new request.  </p>\n<p> If this property is set to <code>true</code>, the connection used to retrieve the response remains open after the authentication has been performed. In this case, other requests that have this property set to <code>true</code> may use the connection without re-authenticating. In other words, if a connection has been authenticated for user A, user B may reuse A&#39;s connection; user B&#39;s request is fulfilled based on the credentials of user A.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to <code>true</code>. If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to <code>true</code> unless you use connection groups as described below.  </p>\n</div>\n<p> You may want to consider enabling this mechanism if your are having performance problems and your application is running on a Web server with integrated Windows authentication.  </p>\n<p> Enabling this setting opens the system to security risks. If you set the UnsafeAuthenticatedConnectionSharing property to <code>true</code> be sure to take the following precautions:  </p>\n<ul>\n<li><p>Use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ConnectionGroupName_\" data-linktype=\"relative-path\">ConnectionGroupName</a> property to manage connections for different users. This avoids the potential use of the connection by non-authenticated applications. For example, user A should have a unique connection group name that is different from user B. This provides a layer of isolation for each user account.  </p>\n</li>\n<li><p>Run your application in a protected environment to help avoid possible connection exploits.  </p>\n<p>If you control the back-end server, as an alternative you might consider turning off authentication persistence. This increases performance to a lesser degree, but it is safer. For more details, search for AuthPersistence in the MSDN library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> If both <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_PreAuthenticate_\" data-linktype=\"relative-path\">PreAuthenticate</a> and UnsafeAuthenticatedConnectionSharing are set to <code>true</code>, each request is sent using a connection from the unsafe pool, but with an Authorization header.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_UseDefaultCredentials\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_UseDefaultCredentials_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseDefaultCredentials</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that controls whether default credentials are sent with requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool UseDefaultCredentials { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the default credentials are used; otherwise <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You attempted to set this property after the request was sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to <code>true</code> when requests made by this <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> object should, if requested by the server, be authenticated using the credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle-tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property to the credentials of the client on whose behalf the request is made.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_UserAgent\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_UserAgent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserAgent</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the <code>User-agent</code> HTTP header.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string UserAgent { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>User-agent</code> HTTP header. The default value is <code>null</code>.  </p>\n <div class=\"alert NOTE\"><br> The value for this property is stored in <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>. If WebHeaderCollection is set, the property value is lost.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the UserAgent property.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebRequest_UserAgent#1\">\t\t\t// Create a new &#39;HttpWebRequest&#39; object to the mentioned URL.\n\t\t\tHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\t\t\tmyHttpWebRequest.UserAgent=&quot;.NET Framework Test Client&quot;;\n\t\t\t// Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n\t\t\tHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n\t\t\t// Display the contents of the page to the console.\n\t\t\tStream streamResponse=myHttpWebResponse.GetResponseStream();\n\t\t\tStreamReader streamRead = new StreamReader( streamResponse );\n\t\t\tChar[] readBuff = new Char[256];\n\t\t\tint count = streamRead.Read( readBuff, 0, 256 );\n\t\t\tConsole.WriteLine(&quot;<br>The contents of HTML Page are :<br>&quot;);\t\n\t\t\twhile (count &gt; 0) \n\t\t\t{\n\t\t\t\tString outputData = new String(readBuff, 0, count);\n\t\t\t\tConsole.Write(outputData);\n\t\t\t\tcount = streamRead.Read(readBuff, 0, 256);\n\t\t\t}\n\t\t\t// Release the response object resources.\n\t\t\tstreamRead.Close();\n\t\t\tstreamResponse.Close();\n\t\t\tmyHttpWebResponse.Close();\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_UserAgent#1\">      // Create a new &#39;HttpWebRequest&#39; object to the mentioned URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( &quot;http://www.contoso.com&quot; ) );\n      myHttpWebRequest-&gt;UserAgent = &quot;.NET Framework Test Client&quot;;\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      // Display the contents of the page to the console.\n      Stream^ streamResponse = myHttpWebResponse-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^ readBuff = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuff, 0, 256 );\n      Console::WriteLine( &quot;<br>The contents of HTML Page are :<br>&quot; );\n      while ( count &gt; 0 )\n      {\n         String^ outputData = gcnew String( readBuff,0,count );\n         Console::Write( outputData );\n         count = streamRead-&gt;Read( readBuff, 0, 256 );\n      }\n      streamRead-&gt;Close();\n      streamResponse-&gt;Close();\n      myHttpWebResponse-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_UserAgent#1\">           &#39; Create a new &#39;HttpWebRequest&#39; object to the mentioned URL.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n            myHttpWebRequest.UserAgent= &quot;.NET Framework Test Client&quot;\n            &#39; The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            &#39; Display the contents of the page to the console.\n            Dim streamResponse As Stream = myHttpWebResponse.GetResponseStream()\n            Dim streamRead As New StreamReader(streamResponse)\n            Dim readBuff(256) As [Char]\n            Dim count As Integer = streamRead.Read(readBuff, 0, 256)\n            Console.WriteLine(ControlChars.Cr + &quot;The contents of HTML Page are :&quot; + ControlChars.Cr)\n            While count &gt; 0\n                Dim outputData As New [String](readBuff, 0, count)\n                Console.Write(outputData)\n                count = streamRead.Read(readBuff, 0, 256)\n            End While\n            streamRead.Close()\n\t         streamResponse.Close()    \n          &#39; Release the response object resources.\n\t         myHttpWebResponse.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_Abort\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_Abort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Abort()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels a request to an Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Abort ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Abort method cancels a request to a resource. After a request is canceled, calling the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_EndGetResponse_\" data-linktype=\"relative-path\">EndGetResponse</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_EndGetRequestStream_\" data-linktype=\"relative-path\">EndGetRequestStream</a> method causes a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> with the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> property set to <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">WebExceptionStatus</a>.  </p>\n<p> The Abort method will synchronously execute the callback specified to the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> or <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> methods if the Abort method is called while either of these operations are outstanding. This can lead to potential deadlock issues.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the case of asynchronous requests, it is the responsibility of the client application to implement its own time-out mechanism. The following code example shows how to do this.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.HttpWebRequest.BeginGetResponse#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Threading;\npublic ref class RequestState\n{\nprivate:\n\n   // This class stores the State of the request.\n   const int BUFFER_SIZE;\n\npublic:\n   StringBuilder^ requestData;\n   array&lt;Byte&gt;^BufferRead;\n   HttpWebRequest^ request;\n   HttpWebResponse^ response;\n   Stream^ streamResponse;\n   RequestState()\n      : BUFFER_SIZE( 1024 )\n   {\n      BufferRead = gcnew array&lt;Byte&gt;(BUFFER_SIZE);\n      requestData = gcnew StringBuilder( &quot;&quot; );\n      request = nullptr;\n      streamResponse = nullptr;\n   }\n\n};\n\nref class HttpWebRequest_BeginGetResponse\n{\npublic:\n   static ManualResetEvent^ allDone = gcnew ManualResetEvent( false );\n   literal int BUFFER_SIZE = 1024;\n   literal int DefaultTimeOut = 120000; // 2 minute timeout \n\n   // Abort the request if the timer fires.\n   static void TimeoutCallback( Object^ state, bool timedOut )\n   {\n      if ( timedOut )\n      {\n         HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(state);\n         if ( request != nullptr )\n         {\n            request-&gt;Abort();\n         }\n      }\n   }\n\n   static void RespCallback( IAsyncResult^ asynchronousResult )\n   {\n      try\n      {\n         \n         // State of request is asynchronous.\n         RequestState^ myRequestState = dynamic_cast&lt;RequestState^&gt;(asynchronousResult-&gt;AsyncState);\n         HttpWebRequest^ myHttpWebRequest = myRequestState-&gt;request;\n         myRequestState-&gt;response = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest-&gt;EndGetResponse( asynchronousResult ));\n         \n         // Read the response into a Stream object.\n         Stream^ responseStream = myRequestState-&gt;response-&gt;GetResponseStream();\n         myRequestState-&gt;streamResponse = responseStream;\n         \n         // Begin the Reading of the contents of the HTML page and print it to the console.\n         IAsyncResult^ asynchronousInputRead = responseStream-&gt;BeginRead( myRequestState-&gt;BufferRead, 0, BUFFER_SIZE, gcnew AsyncCallback( ReadCallBack ), myRequestState );\n         return;\n      }\n      catch ( WebException^ e ) \n      {\n         Console::WriteLine( &quot;<br>RespCallback Exception raised!&quot; );\n         Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n         Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      }\n\n      allDone-&gt;Set();\n   }\n\n   static void ReadCallBack( IAsyncResult^ asyncResult )\n   {\n      try\n      {\n         RequestState^ myRequestState = dynamic_cast&lt;RequestState^&gt;(asyncResult-&gt;AsyncState);\n         Stream^ responseStream = myRequestState-&gt;streamResponse;\n         int read = responseStream-&gt;EndRead( asyncResult );\n         \n         // Read the HTML page and then print it to the console.\n         if ( read &gt; 0 )\n         {\n            myRequestState-&gt;requestData-&gt;Append( Encoding::ASCII-&gt;GetString( myRequestState-&gt;BufferRead, 0, read ) );\n            IAsyncResult^ asynchronousResult = responseStream-&gt;BeginRead( myRequestState-&gt;BufferRead, 0, BUFFER_SIZE, gcnew AsyncCallback( ReadCallBack ), myRequestState );\n            return;\n         }\n         else\n         {\n            Console::WriteLine( &quot;<br>The contents of the Html page are : &quot; );\n            if ( myRequestState-&gt;requestData-&gt;Length &gt; 1 )\n            {\n               String^ stringContent;\n               stringContent = myRequestState-&gt;requestData-&gt;ToString();\n               Console::WriteLine( stringContent );\n            }\n            Console::WriteLine( &quot;Press any key to continue..........&quot; );\n            Console::ReadLine();\n            responseStream-&gt;Close();\n         }\n      }\n      catch ( WebException^ e ) \n      {\n         Console::WriteLine( &quot;<br>ReadCallBack Exception raised!&quot; );\n         Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n         Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      }\n\n      allDone-&gt;Set();\n   }\n\n};\n\nint main()\n{\n   try\n   {\n      \n      // Create a HttpWebrequest object to the desired URL.\n      HttpWebRequest^ myHttpWebRequest = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com&quot; ));\n      \n      /**\n            * If you are behind a firewall and you do not have your browser proxy setup\n            * you need to use the following proxy creation code.\n      \n            // Create a proxy object.\n            WebProxy* myProxy = new WebProxy();\n      \n            // Associate a new Uri object to the _wProxy object, using the proxy address\n            // selected by the user.\n            myProxy.Address = new Uri(S&quot;http://myproxy&quot;);\n      \n            // Finally, initialize the Web request object proxy property with the _wProxy\n            // object.\n            myHttpWebRequest.Proxy=myProxy;\n            ***/\n      // Create an instance of the RequestState and assign the previous myHttpWebRequest\n      // object to its request field.\n      RequestState^ myRequestState = gcnew RequestState;\n      myRequestState-&gt;request = myHttpWebRequest;\n      \n      // Start the asynchronous request.\n      IAsyncResult^ result = dynamic_cast&lt;IAsyncResult^&gt;(myHttpWebRequest-&gt;BeginGetResponse( gcnew AsyncCallback( HttpWebRequest_BeginGetResponse::RespCallback ), myRequestState ));\n      \n      // this line impliments the timeout, if there is a timeout, the callback fires and the request becomes aborted\n      ThreadPool::RegisterWaitForSingleObject( result-&gt;AsyncWaitHandle, gcnew WaitOrTimerCallback( HttpWebRequest_BeginGetResponse::TimeoutCallback ), myHttpWebRequest, HttpWebRequest_BeginGetResponse::DefaultTimeOut, true );\n      \n      // The response came in the allowed time. The work processing will happen in the\n      // callback function.\n      HttpWebRequest_BeginGetResponse::allDone-&gt;WaitOne();\n      \n      // Release the HttpWebResponse resource.\n      myRequestState-&gt;response-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;<br>Main Exception raised!&quot; );\n      Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n      Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      Console::WriteLine( &quot;Press any key to continue..........&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>Main Exception raised!&quot; );\n      Console::WriteLine( &quot;Source : {0} &quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0} &quot;, e-&gt;Message );\n      Console::WriteLine( &quot;Press any key to continue..........&quot; );\n      Console::Read();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.HttpWebRequest.BeginGetResponse#1\">using System;\nusing System.Net;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\n\n\npublic class RequestState\n{\n  // This class stores the State of the request.\n  const int BUFFER_SIZE = 1024;\n  public StringBuilder requestData;\n  public byte[] BufferRead;\n  public HttpWebRequest request;\n  public HttpWebResponse response;\n  public Stream streamResponse;\n  public RequestState()\n  {\n    BufferRead = new byte[BUFFER_SIZE];\n    requestData = new StringBuilder(&quot;&quot;);\n    request = null;\n    streamResponse = null;\n  }\n}\n\nclass HttpWebRequest_BeginGetResponse\n{\n  public static ManualResetEvent allDone= new ManualResetEvent(false);\n  const int BUFFER_SIZE = 1024;\n  const int DefaultTimeout = 2 * 60 * 1000; // 2 minutes timeout\n \n  // Abort the request if the timer fires.\n  private static void TimeoutCallback(object state, bool timedOut) { \n      if (timedOut) {\n          HttpWebRequest request = state as HttpWebRequest;\n          if (request != null) {\n              request.Abort();\n          }\n      }\n  }\n\n  static void Main()\n  {  \n   \n    try\n    {\n      // Create a HttpWebrequest object to the desired URL. \n      HttpWebRequest myHttpWebRequest= (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\n    \n  /**\n    * If you are behind a firewall and you do not have your browser proxy setup\n    * you need to use the following proxy creation code.\n\n      // Create a proxy object.\n      WebProxy myProxy = new WebProxy();\n\n      // Associate a new Uri object to the _wProxy object, using the proxy address\n      // selected by the user.\n      myProxy.Address = new Uri(&quot;http://myproxy&quot;);\n       \n        \n      // Finally, initialize the Web request object proxy property with the _wProxy\n      // object.\n      myHttpWebRequest.Proxy=myProxy;\n    ***/\n\n      // Create an instance of the RequestState and assign the previous myHttpWebRequest\n      // object to its request field.  \n      RequestState myRequestState = new RequestState();  \n      myRequestState.request = myHttpWebRequest;\n\n\n      // Start the asynchronous request.\n      IAsyncResult result=\n        (IAsyncResult) myHttpWebRequest.BeginGetResponse(new AsyncCallback(RespCallback),myRequestState);\n\n      // this line implements the timeout, if there is a timeout, the callback fires and the request becomes aborted\n      ThreadPool.RegisterWaitForSingleObject (result.AsyncWaitHandle, new WaitOrTimerCallback(TimeoutCallback), myHttpWebRequest, DefaultTimeout, true);\n\n      // The response came in the allowed time. The work processing will happen in the \n      // callback function.\n      allDone.WaitOne();\n      \n      // Release the HttpWebResponse resource.\n      myRequestState.response.Close();\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>Main Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n    }\n    catch(Exception e)\n    {\n      Console.WriteLine(&quot;<br>Main Exception raised!&quot;);\n      Console.WriteLine(&quot;Source :{0} &quot; , e.Source);\n      Console.WriteLine(&quot;Message :{0} &quot; , e.Message);\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n      Console.Read();\n    }\n  }\n  private static void RespCallback(IAsyncResult asynchronousResult)\n  {  \n    try\n    {\n      // State of request is asynchronous.\n      RequestState myRequestState=(RequestState) asynchronousResult.AsyncState;\n      HttpWebRequest  myHttpWebRequest=myRequestState.request;\n      myRequestState.response = (HttpWebResponse) myHttpWebRequest.EndGetResponse(asynchronousResult);\n      \n      // Read the response into a Stream object.\n      Stream responseStream = myRequestState.response.GetResponseStream();\n      myRequestState.streamResponse=responseStream;\n      \n      // Begin the Reading of the contents of the HTML page and print it to the console.\n      IAsyncResult asynchronousInputRead = responseStream.BeginRead(myRequestState.BufferRead, 0, BUFFER_SIZE, new AsyncCallback(ReadCallBack), myRequestState);\n      return;\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>RespCallback Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n    }\n    allDone.Set();\n  }\n  private static  void ReadCallBack(IAsyncResult asyncResult)\n  {\n    try\n    {\n\n    RequestState myRequestState = (RequestState)asyncResult.AsyncState;\n    Stream responseStream = myRequestState.streamResponse;\n    int read = responseStream.EndRead( asyncResult );\n    // Read the HTML page and then print it to the console.\n    if (read &gt; 0)\n    {\n      myRequestState.requestData.Append(Encoding.ASCII.GetString(myRequestState.BufferRead, 0, read));\n      IAsyncResult asynchronousResult = responseStream.BeginRead( myRequestState.BufferRead, 0, BUFFER_SIZE, new AsyncCallback(ReadCallBack), myRequestState);\n      return;\n    }\n    else\n    {\n      Console.WriteLine(&quot;<br>The contents of the Html page are : &quot;);\n      if(myRequestState.requestData.Length&gt;1)\n      {\n        string stringContent;\n        stringContent = myRequestState.requestData.ToString();\n        Console.WriteLine(stringContent);\n      }\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n      Console.ReadLine();\n      \n      responseStream.Close();\n    }\n\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>ReadCallBack Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n    }\n    allDone.Set();\n\n  }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.HttpWebRequest.BeginGetResponse#1\">\nImports System\nImports System.Net\nImports System.IO\nImports System.Text\nImports System.Threading\nImports Microsoft.VisualBasic\n\nPublic Class RequestState\n   &#39; This class stores the State of the request.\n   Private BUFFER_SIZE As Integer = 1024\n   Public requestData As StringBuilder\n   Public BufferRead() As Byte\n   Public request As HttpWebRequest\n   Public response As HttpWebResponse\n   Public streamResponse As Stream\n   \n   Public Sub New()\n      BufferRead = New Byte(BUFFER_SIZE) {}\n      requestData = New StringBuilder(&quot;&quot;)\n      request = Nothing\n      streamResponse = Nothing\n   End Sub &#39;New\nEnd Class &#39;RequestState\n\n\nClass HttpWebRequest_BeginGetResponse\n\n   Public Shared allDone As New ManualResetEvent(False)\n   Private BUFFER_SIZE As Integer = 1024\n   Private DefaultTimeout As Integer = 2 * 60 * 1000\n\n    &#39; 2 minutes timeout\n   &#39; Abort the request if the timer fires.\n   Private Shared Sub TimeoutCallback(state As Object, timedOut As Boolean)\n      If timedOut Then\n         Dim request As HttpWebRequest = state \n        \n         If Not (request Is Nothing) Then\n            request.Abort()\n         End If\n      End If\n   End Sub &#39;TimeoutCallback\n   \n   \n   Shared Sub Main()\n     \n      Try\n         &#39; Create a HttpWebrequest object to the desired URL. \n            Dim myHttpWebRequest As HttpWebRequest = WebRequest.Create(&quot;http://www.contoso.com&quot;)\n         \n         &#39; Create an instance of the RequestState and assign the previous myHttpWebRequest\n         &#39; object to its request field.  \n         \n         Dim myRequestState As New RequestState()\n         myRequestState.request = myHttpWebRequest\n\n         Dim myResponse As New HttpWebRequest_BeginGetResponse()\n         \n         &#39; Start the asynchronous request.\n         Dim result As IAsyncResult = CType(myHttpWebRequest.BeginGetResponse(New AsyncCallback(AddressOf RespCallback), myRequestState), IAsyncResult)\n         \n            &#39; this line implements the timeout, if there is a timeout, the callback fires and the request aborts.\n         ThreadPool.RegisterWaitForSingleObject(result.AsyncWaitHandle, New WaitOrTimerCallback(AddressOf TimeoutCallback), myHttpWebRequest, myResponse.DefaultTimeout, True)\n         \n         &#39; The response came in the allowed time. The work processing will happen in the \n         &#39; callback function.\n         allDone.WaitOne()\n         \n         &#39; Release the HttpWebResponse resource.\n         myRequestState.response.Close()\n      Catch e As WebException\n         Console.WriteLine(ControlChars.Lf + &quot;Main Exception raised!&quot;)\n         Console.WriteLine(ControlChars.Lf + &quot;Message:{0}&quot;, e.Message)\n         Console.WriteLine(ControlChars.Lf + &quot;Status:{0}&quot;, e.Status)\n         Console.WriteLine(&quot;Press any key to continue..........&quot;)\n      Catch e As Exception\n         Console.WriteLine(ControlChars.Lf + &quot;Main Exception raised!&quot;)\n         Console.WriteLine(&quot;Source :{0} &quot;, e.Source)\n         Console.WriteLine(&quot;Message :{0} &quot;, e.Message)\n         Console.WriteLine(&quot;Press any key to continue..........&quot;)\n         Console.Read()\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub RespCallback(asynchronousResult As IAsyncResult)\n      Try\n         &#39; State of request is asynchronous.\n         Dim myRequestState As RequestState = CType(asynchronousResult.AsyncState, RequestState)\n         Dim myHttpWebRequest As HttpWebRequest = myRequestState.request\n         myRequestState.response = CType(myHttpWebRequest.EndGetResponse(asynchronousResult), HttpWebResponse)\n         \n         &#39; Read the response into a Stream object.\n         Dim responseStream As Stream = myRequestState.response.GetResponseStream()\n         myRequestState.streamResponse = responseStream\n         \n         &#39; Begin the Reading of the contents of the HTML page and print it to the console.\n         Dim asynchronousInputRead As IAsyncResult = responseStream.BeginRead(myRequestState.BufferRead, 0, 1024, New AsyncCallback(AddressOf ReadCallBack), myRequestState)\n         Return\n      Catch e As WebException\n         Console.WriteLine(ControlChars.Lf + &quot;RespCallback Exception raised!&quot;)\n         Console.WriteLine(ControlChars.Lf + &quot;Message:{0}&quot;, e.Message)\n         Console.WriteLine(ControlChars.Lf + &quot;Status:{0}&quot;, e.Status)\n      End Try\n      allDone.Set()\n   End Sub &#39;RespCallback\n   \n   Private Shared Sub ReadCallBack(asyncResult As IAsyncResult)\n      Try\n         \n         Dim myRequestState As RequestState = CType(asyncResult.AsyncState, RequestState)\n         Dim responseStream As Stream = myRequestState.streamResponse\n         Dim read As Integer = responseStream.EndRead(asyncResult)\n         &#39; Read the HTML page and then print it to the console.\n         If read &gt; 0 Then\n            myRequestState.requestData.Append(Encoding.ASCII.GetString(myRequestState.BufferRead, 0, read))\n            Dim asynchronousResult As IAsyncResult = responseStream.BeginRead(myRequestState.BufferRead, 0, 1024, New AsyncCallback(AddressOf ReadCallBack), myRequestState)\n            Return\n         Else\n            Console.WriteLine(ControlChars.Lf + &quot;The contents of the Html page are : &quot;)\n            If myRequestState.requestData.Length &gt; 1 Then\n               Dim stringContent As String\n               stringContent = myRequestState.requestData.ToString()\n               Console.WriteLine(stringContent)\n            End If\n            Console.WriteLine(&quot;Press any key to continue..........&quot;)\n            Console.ReadLine()\n            \n            responseStream.Close()\n         End If\n      \n      Catch e As WebException\n         Console.WriteLine(ControlChars.Lf + &quot;ReadCallBack Exception raised!&quot;)\n         Console.WriteLine(ControlChars.Lf + &quot;Message:{0}&quot;, e.Message)\n         Console.WriteLine(ControlChars.Lf + &quot;Status:{0}&quot;, e.Status)\n      End Try\n      allDone.Set()\n   End Sub &#39;ReadCallBack \nEnd Class &#39;HttpWebRequest_BeginGetResponse\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AddRange_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a byte range header to a request for a specific range from the beginning or end of the requested data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (int range);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>range</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting or ending point of the range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The range header could not be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddRange method adds a byte range header to the request.  </p>\n<p> If <code>range</code> is positive, the <code>range</code> parameter specifies the starting point of the range. The server should start sending data from the <code>range</code> parameter specified to the end of the data in the HTTP entity.  </p>\n<p> If <code>range</code> is negative, the <code>range</code> parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the <code>range</code> parameter specified.  </p>\n<p> Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  </p>\n<p> The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  </p>\n<p> An example of a Range header in an HTTP protocol request that requests the server send the first 100 bytes (from the start to byte position 99) would be the following:  </p>\n<p> <code>Range: bytes=0-99\\r\\n\\r\\n</code>  </p>\n<p> For this example, the <code>range</code> parameter would be -99.  </p>\n<p> A HTTP server indicates support for Range headers with the Accept-Ranges header. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  </p>\n<p> <code>Accept-Ranges: bytes\\r\\n\\r\\n</code>  </p>\n<p> If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  </p>\n<p> <code>Accept-Ranges: none\\r\\n\\r\\n</code>  </p>\n<p> When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. Headers associated with each range are returned in the response.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds a range header to the request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.HttpWebRequest.AddRange#1\">      // Create a New &#39;HttpWebRequest&#39; object.\n      HttpWebRequest^ myHttpWebRequest1 = \n          (HttpWebRequest^)( WebRequest::Create( &quot;http://www.contoso.com&quot; ) );\n      myHttpWebRequest1-&gt;AddRange( 1000);\n      Console::WriteLine(&quot;Call AddRange(1000)&quot;);\n\t\t\tConsole::Write(&quot;Resulting Headers: &quot;);\n\t\t\tConsole::WriteLine(myHttpWebRequest1-&gt;Headers);\n\n      HttpWebRequest^ myHttpWebRequest2 = \n          (HttpWebRequest^)( WebRequest::Create( &quot;http://www.contoso.com&quot; ) );\n      myHttpWebRequest2-&gt;AddRange(-1000);\n      Console::WriteLine(&quot;Call AddRange(-1000)&quot;);\n\t\t\tConsole::Write(&quot;Resulting Headers: &quot;);\n\t\t\tConsole::WriteLine(myHttpWebRequest2-&gt;Headers);\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.HttpWebRequest.AddRange#1\">\t\t\t// Create a New &#39;HttpWebRequest&#39; object .\n\t\t\tHttpWebRequest myHttpWebRequest1=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\t\t\tmyHttpWebRequest1.AddRange(1000);\t\n\t\t\tConsole.WriteLine(&quot;Call AddRange(1000)&quot;);\n\t\t\tConsole.Write(&quot;Resulting Headers: &quot;);\n\t\t\tConsole.WriteLine(myHttpWebRequest1.Headers.ToString());\n\t\t\t\n\t\t\t// Create a New &#39;HttpWebRequest&#39; object .\n\t\t\tHttpWebRequest myHttpWebRequest2=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\t\t\tmyHttpWebRequest2.AddRange(-1000);\t\n\t\t\tConsole.WriteLine(&quot;Call AddRange(-1000)&quot;);\n\t\t\tConsole.Write(&quot;Resulting Headers: &quot;);\n\t\t\tConsole.WriteLine(myHttpWebRequest2.Headers.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.HttpWebRequest.AddRange#1\">            &#39; A New &#39;HttpWebRequest&#39; object is created.\n            Dim myHttpWebRequest1 As HttpWebRequest = WebRequest.Create(&quot;http://www.contoso.com&quot;)\n            myHttpWebRequest1.AddRange(1000)\n            Console.WriteLine(&quot;Call AddRange(1000)&quot;)\n\t\t\t      Console.Write(&quot;Resulting Headers: &quot;)\n\t\t\t      Console.WriteLine(myHttpWebRequest1.Headers.ToString())\n\n            Dim myHttpWebRequest2 As HttpWebRequest = WebRequest.Create(&quot;http://www.contoso.com&quot;)\n            myHttpWebRequest2.AddRange(-1000)\n            Console.WriteLine(&quot;Call AddRange(-1000)&quot;)\n\t\t\t      Console.Write(&quot;Resulting Headers: &quot;)\n\t\t\t      Console.WriteLine(myHttpWebRequest2.Headers.ToString())\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AddRange_System_Int64_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a byte range header to a request for a specific range from the beginning or end of the requested data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (long range);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>range</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting or ending point of the range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The range header could not be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddRange method adds a byte range header to the request.  </p>\n<p> If <code>range</code> is positive, the <code>range</code> parameter specifies the starting point of the range. The server should start sending data from the <code>range</code> parameter specified to the end of the data in the HTTP entity.  </p>\n<p> If <code>range</code> is negative, the <code>range</code> parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the <code>range</code> parameter specified.  </p>\n<p> Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  </p>\n<p> The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  </p>\n<p> An example of a Range header in an HTTP protocol request that requests the server send the first 100 bytes (from the start to byte position 99) would be the following:  </p>\n<p> <code>Range: bytes=0-99\\r\\n\\r\\n</code>  </p>\n<p> For this example, the <code>range</code> parameter would be -99.  </p>\n<p> A HTTP server indicates support for Range headers with the Accept-Ranges header. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  </p>\n<p> <code>Accept-Ranges: bytes\\r\\n\\r\\n</code>  </p>\n<p> If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  </p>\n<p> <code>Accept-Ranges: none\\r\\n\\r\\n</code>  </p>\n<p> When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. Headers associated with each range are returned in the response.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AddRange_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a byte range header to the request for a specified range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (int from, int to);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>from</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position at which to start sending data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>to</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position at which to stop sending data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is greater than <code>to</code>  </p>\n<p> -or-  </p>\n<p> <code>from</code> or <code>to</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The range header could not be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddRange method adds a byte range header to the request.  </p>\n<p> Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  </p>\n<p> The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  </p>\n<p> An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  </p>\n<p> <code>Range: bytes=0-99\\r\\n\\r\\n</code>  </p>\n<p> For this example, the <code>from</code> parameter would be specified as 0 and the <code>to</code> parameter would be specified as 99. The range specifier is automatically set as &quot;bytes&quot; by this method.  </p>\n<p> A HTTP server indicates support for Range headers with the Accept-Ranges header. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  </p>\n<p> <code>Accept-Ranges: bytes\\r\\n\\r\\n</code>  </p>\n<p> If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  </p>\n<p> <code>Accept-Ranges: none\\r\\n\\r\\n</code>  </p>\n<p> When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. Headers associated with each range are returned in the response.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds a range header to the request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.HttpWebRequest.AddRange2#1\">      // Create a New &#39;HttpWebRequest&#39; object.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( &quot;http://www.contoso.com&quot; ) );\n      myHttpWebRequest-&gt;AddRange( 50, 150 );\n      Console::WriteLine(&quot;Call AddRange(50, 150)&quot;);\n\t\t\tConsole::Write(&quot;Resulting Request Headers: &quot;);\n\t\t\tConsole::WriteLine(myHttpWebRequest-&gt;Headers);\n\n      // Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n\n      // Displays the headers in the response received\n      Console::Write(&quot;Resulting Response Headers: &quot;);\n\t\t\tConsole::WriteLine(myHttpWebResponse-&gt;Headers);\n\n      // Display the contents of the page to the console.\n      Stream^ streamResponse = myHttpWebResponse-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader( streamResponse );\n      array&lt;Char&gt;^ readBuffer = gcnew array&lt;Char&gt;(256);\n      int count = streamRead-&gt;Read( readBuffer, 0, 256 );\n      Console::WriteLine( &quot;<br>The HTML contents of the page from 50th to 150 charaters are :<br>  &quot; );\n      while ( count &gt; 0 )\n      {\n         String^ outputData = gcnew String( readBuffer,0,count );\n         Console::WriteLine( outputData );\n         count = streamRead-&gt;Read( readBuffer, 0, 256 );\n      }\n      streamRead-&gt;Close();\n      streamResponse-&gt;Close();\n      myHttpWebResponse-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.HttpWebRequest.AddRange2#1\">            &#39; A New &#39;HttpWebRequest&#39; objetc is created.\n            Dim myHttpWebRequest As HttpWebRequest = WebRequest.Create(&quot;http://www.contoso.com&quot;)\n            myHttpWebRequest.AddRange(50, 150)\n            Console.WriteLine(&quot;Call AddRange(50, 150)&quot;)\n\t\t\t      Console.Write(&quot;Resulting Request Headers: &quot;)\n\t\t\t      Console.WriteLine(myHttpWebRequest.Headers.ToString())\n\n            &#39; The response object of &#39;HttpWebRequest&#39; is assigned to a &#39;HttpWebResponse&#39; variable.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n\n            &#39; Displays the headers in the response received\n            Console.Write(&quot;Resulting Response Headers: &quot;)\n\t\t\t      Console.WriteLine(myHttpWebResponse.Headers.ToString())\n\n            &#39; Displaying the contents of the page to the console\n            Dim streamResponse As Stream = myHttpWebResponse.GetResponseStream()\n            Dim streamRead As New StreamReader(streamResponse)\n            Dim readBuffer(256) As [Char]\n            Dim count As Integer = streamRead.Read(readBuffer, 0, 256)\n            Console.WriteLine(ControlChars.Cr + &quot;The HTML contents of the page from 50th to 150 charaters are :&quot; + ControlChars.Cr + &quot;  &quot;)\n            While count &gt; 0\n                Dim outputData As New [String](readBuffer, 0, count)\n                Console.WriteLine(outputData)\n                count = streamRead.Read(readBuffer, 0, 256)\n            End While\n            &#39; Release the response object resources.\n\t         streamRead.Close()\n\t         streamResponse.Close()\n            myHttpWebResponse.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.HttpWebRequest.AddRange2#1\">\t\t\t// Create a New &#39;HttpWebRequest&#39; object .\n\t\t\tHttpWebRequest myHttpWebRequest=(HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\t\t\tmyHttpWebRequest.AddRange(50,150);\t\n\t\t\tConsole.WriteLine(&quot;Call AddRange(50,150)&quot;);\n\t\t\tConsole.Write(&quot;Resulting Request Headers: &quot;);\n\t\t\tConsole.WriteLine(myHttpWebRequest.Headers.ToString());\n\n\t\t\t// Assign the response object of &#39;HttpWebRequest&#39; to a &#39;HttpWebResponse&#39; variable.\n\t\t\tHttpWebResponse myHttpWebResponse=(HttpWebResponse)myHttpWebRequest.GetResponse();\n\n      // Displays the headers in the response received\n      Console.Write(&quot;Resulting Response Headers: &quot;);\n\t\t\tConsole.WriteLine(myHttpWebResponse.Headers.ToString());\n\n\t\t\t// Display the contents of the page to the console.\n\t\t\tStream streamResponse=myHttpWebResponse.GetResponseStream();\n\t\t\tStreamReader streamRead = new StreamReader( streamResponse );\n\t\t\tChar[] readBuffer = new Char[256];\n\t\t\tint count = streamRead.Read( readBuffer, 0, 256 );\n\t\t\tConsole.WriteLine(&quot;<br>The HTML contents of the page from 50th to 150 characters are :<br>  &quot;);\t\n\t\t\twhile (count &gt; 0) \n\t\t\t{\n\t\t\t\tString outputData = new String(readBuffer, 0, count);\n\t\t\t\tConsole.WriteLine(outputData);\n\t\t\t\tcount = streamRead.Read(readBuffer, 0, 256);\n\t\t\t}\n\t\t\t// Release the response object resources.\n\t\t\tstreamRead.Close();\n\t\t\tstreamResponse.Close();\n\t\t\tmyHttpWebResponse.Close();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AddRange_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a byte range header to the request for a specified range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (long from, long to);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>from</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position at which to start sending data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>to</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position at which to stop sending data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is greater than <code>to</code>  </p>\n<p> -or-  </p>\n<p> <code>from</code> or <code>to</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The range header could not be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddRange method adds a byte range header to the request.  </p>\n<p> Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  </p>\n<p> The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  </p>\n<p> An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  </p>\n<p> <code>Range: bytes=0-99\\r\\n\\r\\n</code>  </p>\n<p> For this example, the <code>from</code> parameter would be specified as 0 and the <code>to</code> parameter would be specified as 99. The range specifier is automatically set as &quot;bytes&quot; by this method.  </p>\n<p> A HTTP server indicates support for Range headers with the Accept-Ranges header. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  </p>\n<p> <code>Accept-Ranges: bytes\\r\\n\\r\\n</code>  </p>\n<p> If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  </p>\n<p> <code>Accept-Ranges: none\\r\\n\\r\\n</code>  </p>\n<p> When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. Headers associated with each range are returned in the response.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AddRange_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a Range header to a request for a specific range from the beginning or end of the requested data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (string rangeSpecifier, int range);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rangeSpecifier</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The description of the range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>range</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting or ending point of the range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The range header could not be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddRange method adds a Range header to the request.  </p>\n<p> If <code>range</code> is positive, the <code>range</code> parameter specifies the starting point of the range. The server should start sending data from the <code>range</code> parameter specified to the end of the data in the HTTP entity.  </p>\n<p> If <code>range</code> is negative, the <code>range</code> parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the <code>range</code> parameter specified.  </p>\n<p> Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  </p>\n<p> The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  </p>\n<p> The <code>rangeSpecifier</code> parameter would normally be specified as a &quot;bytes&quot;, since this is the only range specifier recognized by most HTTP servers. Setting the <code>rangeSpecifier</code> parameter to some other string allows support for custom range specifiers other than bytes (the byte-range specifier defined in RFC 2616 by the IETF).  </p>\n<p> An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  </p>\n<p> <code>Range: bytes=-99\\r\\n\\r\\n</code>  </p>\n<p> For this example, the <code>rangeSpecifier</code> parameter would be specified as &quot;bytes&quot; and the <code>range</code> parameter would be -99.  </p>\n<p> A HTTP server indicates support for Range headers with the Accept-Ranges header in the response. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  </p>\n<p> <code>Accept-Ranges: bytes\\r\\n\\r\\n</code>  </p>\n<p> If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  </p>\n<p> <code>Accept-Ranges: none\\r\\n\\r\\n</code>  </p>\n<p> When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. Headers associated with each range are returned in the response.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AddRange_System_String_System_Int64_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(String,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a Range header to a request for a specific range from the beginning or end of the requested data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (string rangeSpecifier, long range);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rangeSpecifier</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The description of the range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>range</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting or ending point of the range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The range header could not be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddRange method adds a Range header to the request.  </p>\n<p> If <code>range</code> is positive, the <code>range</code> parameter specifies the starting point of the range. The server should start sending data from the <code>range</code> parameter specified to the end of the data in the HTTP entity.  </p>\n<p> If <code>range</code> is negative, the <code>range</code> parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the <code>range</code> parameter specified.  </p>\n<p> Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  </p>\n<p> The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  </p>\n<p> The <code>rangeSpecifier</code> parameter would normally be specified as a &quot;bytes&quot;, since this is the only range specifier recognized by most HTTP servers. Setting the <code>rangeSpecifier</code> parameter to some other string allows support for custom range specifiers other than bytes (the byte-range specifier defined in RFC 2616 by the IETF).  </p>\n<p> An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  </p>\n<p> <code>Range: bytes=-99\\r\\n\\r\\n</code>  </p>\n<p> For this example, the <code>rangeSpecifier</code> parameter would be specified as &quot;bytes&quot; and the <code>range</code> parameter would be -99.  </p>\n<p> A HTTP server indicates support for Range headers with the Accept-Ranges header in the response. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  </p>\n<p> <code>Accept-Ranges: bytes\\r\\n\\r\\n</code>  </p>\n<p> If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  </p>\n<p> <code>Accept-Ranges: none\\r\\n\\r\\n</code>  </p>\n<p> When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. Headers associated with each range are returned in the response.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AddRange_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a range header to a request for a specified range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (string rangeSpecifier, int from, int to);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rangeSpecifier</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The description of the range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>from</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position at which to start sending data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>to</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position at which to stop sending data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is greater than <code>to</code>  </p>\n<p> -or-  </p>\n<p> <code>from</code> or <code>to</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The range header could not be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddRange method adds a Range header to the request.  </p>\n<p> Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  </p>\n<p> The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  </p>\n<p> The <code>rangeSpecifier</code> parameter would normally be specified as a &quot;bytes&quot;, since this is the only range specifier recognized by most HTTP servers. Setting the <code>rangeSpecifier</code> parameter to some other string allows support for custom range specifiers other than bytes (the byte-range specifier defined in RFC 2616 by the IETF).  </p>\n<p> An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  </p>\n<p> <code>Range: bytes=0-99\\r\\n\\r\\n</code>  </p>\n<p> For this example, the <code>rangeSpecifier</code> parameter would be specified as a &quot;bytes&quot;, the <code>from</code> parameter would be 0, and the <code>to</code> parameter would be 99.  </p>\n<p> A HTTP server indicates support for Range headers with the Accept-Ranges header in the response. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  </p>\n<p> <code>Accept-Ranges: bytes\\r\\n\\r\\n</code>  </p>\n<p> The string specified in the Accept-Ranges header is the range-specifier that would be by specified in the <code>rangeSpecifier</code> parameter for this method.  </p>\n<p> If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  </p>\n<p> <code>Accept-Ranges: none\\r\\n\\r\\n</code>  </p>\n<p> When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. Headers associated with each range are returned in the response.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_AddRange_System_String_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(String,Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a range header to a request for a specified range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (string rangeSpecifier, long from, long to);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rangeSpecifier</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The description of the range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>from</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position at which to start sending data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>to</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position at which to stop sending data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is greater than <code>to</code>  </p>\n<p> -or-  </p>\n<p> <code>from</code> or <code>to</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>rangeSpecifier</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The range header could not be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddRange method adds a Range header to the request.  </p>\n<p> Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  </p>\n<p> The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  </p>\n<p> The <code>rangeSpecifier</code> parameter would normally be specified as a &quot;bytes&quot;, since this is the only range specifier recognized by most HTTP servers. Setting the <code>rangeSpecifier</code> parameter to some other string allows support for custom range specifiers other than bytes (the byte-range specifier defined in RFC 2616 by the IETF).  </p>\n<p> An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  </p>\n<p> <code>Range: bytes=0-99\\r\\n\\r\\n</code>  </p>\n<p> For this example, the <code>rangeSpecifier</code> parameter would be specified as a &quot;bytes&quot;, the <code>from</code> parameter would be 0, and the <code>to</code> parameter would be 99.  </p>\n<p> A HTTP server indicates support for Range headers with the Accept-Ranges header in the response. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  </p>\n<p> <code>Accept-Ranges: bytes\\r\\n\\r\\n</code>  </p>\n<p> The string specified in the Accept-Ranges header is the range-specifier that would be by specified in the <code>rangeSpecifier</code> parameter for this method.  </p>\n<p> If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  </p>\n<p> <code>Accept-Ranges: none\\r\\n\\r\\n</code>  </p>\n<p> When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. Headers associated with each range are returned in the response.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_BeginGetRequestStream_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_BeginGetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetRequestStream(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous request for a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override IAsyncResult BeginGetRequestStream (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The state object for this request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> property is GET or HEAD.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.KeepAlive*</span> is <code>true</code>, <span class=\"xref\">stem.Net.HttpWebRequest.AllowWriteStreamBuffering*</span> is <code>false</code>, <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is -1, <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>, and <span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> is POST or PUT.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The stream is being used by a previous call to BeginGetRequestStream  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.TransferEncoding*</span> is set to a value and <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The thread pool is running out of threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Abort*</span> was previously called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see <a href=\"https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f(v=vs.80).aspx\" data-linktype=\"external\">Network Programming in the .NET Compact Framework</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginGetRequestStream method starts an asynchronous request for a stream used to send data for the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a>. The asynchronous callback method uses the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_EndGetRequestStream_\" data-linktype=\"relative-path\">EndGetRequestStream</a> method to return the actual stream.  </p>\n<p> The BeginGetRequestStream method requires some synchronous setup tasks to complete (DNS resolution, proxy detection, and TCP socket connection, for example) before this method becomes asynchronous. As a result, this method should never be called on a user interface (UI) thread because it might take considerable time (up to several minutes depending on network settings) to complete the initial synchronous setup tasks before an exception for an error is thrown or the method succeeds.  </p>\n<p> To learn more about the thread pool, see <a href=\"../Topic/The%20Managed%20Thread%20Pool.md\" data-linktype=\"relative-path\">The Managed Thread Pool</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the BeginGetRequestStream method, you must use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method to retrieve the response.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the BeginGetRequestStream method to make an asynchronous request for a stream instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_BeginGetRequestStream#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Threading;\nref class HttpWebRequestBeginGetRequest\n{\npublic:\n   static ManualResetEvent^ allDone = gcnew ManualResetEvent( false );\n   static void Main()\n   {\n      \n      // Create a new HttpWebRequest object.\n      HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com/example.aspx&quot; ));\n      \n      // Set the ContentType property.\n      request-&gt;ContentType = &quot;application/x-www-form-urlencoded&quot;;\n      \n      // Set the Method property to &#39;POST&#39; to post data to the Uri.\n      request-&gt;Method = &quot;POST&quot;;\n      \n      // Start the asynchronous operation.    \n      AsyncCallback^ del = gcnew AsyncCallback(GetRequestStreamCallback);\n      request-&gt;BeginGetRequestStream( del, request );\n      \n      // Keep the main thread from continuing while the asynchronous\n      // operation completes. A real world application\n      // could do something useful such as updating its user interface. \n      allDone-&gt;WaitOne();\n    }\n      \n\nprivate:\n    static void GetRequestStreamCallback(IAsyncResult^ asynchronousResult)\n    {\n        HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(asynchronousResult-&gt;AsyncState);\n        \n        // End the operation\n        Stream^ postStream = request-&gt;EndGetRequestStream(asynchronousResult);\n\n        Console::WriteLine(&quot;Please enter the input data to be posted:&quot;);\n        String^ postData = Console::ReadLine();\n\n        // Convert the string into a byte array.\n        array&lt;Byte&gt;^ByteArray = Encoding::UTF8-&gt;GetBytes(postData);\n\n        // Write to the request stream.\n        postStream-&gt;Write(ByteArray, 0, postData-&gt;Length);\n        postStream-&gt;Close();\n\n        // Start the asynchronous operation to get the response\n        AsyncCallback^ del = gcnew AsyncCallback(GetResponseCallback);\n        request-&gt;BeginGetResponse(del, request);\n    }\n\n   static void GetResponseCallback(IAsyncResult^ asynchronousResult)\n   {\n      HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(asynchronousResult-&gt;AsyncState);\n\n      // End the operation\n      HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;EndGetResponse(asynchronousResult));\n      Stream^ streamResponse = response-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader(streamResponse);\n      String^ responseString = streamRead-&gt;ReadToEnd();\n      Console::WriteLine(responseString);\n      // Close the stream object\n      streamResponse-&gt;Close();\n      streamRead-&gt;Close();\n\n      // Release the HttpWebResponse\n      response-&gt;Close();\n      allDone-&gt;Set();\n   }\n};\n\nvoid main()\n{\n   HttpWebRequestBeginGetRequest::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_BeginGetRequestStream#2\">Imports System\nImports System.Net\nImports System.IO\nImports System.Text\nImports System.Threading\nImports Microsoft.VisualBasic\n\nClass HttpWebRequestBeginGetRequest\n    Public Shared allDone As New ManualResetEvent(False)\n\n    Shared Sub Main()\n\n\n        &#39; Create a new HttpWebRequest object.\n        Dim request As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com/example.aspx&quot;), _\n                 HttpWebRequest)\n\n        &#39; Set the ContentType property.\n        request.ContentType = &quot;application/x-www-form-urlencoded&quot;\n\n        &#39;  Set the Method property to &#39;POST&#39; to post data to the URI.\n        request.Method = &quot;POST&quot;\n\n        &#39; Start the asynchronous operation.\t\t\n        Dim result As IAsyncResult = _\n            CType(request.BeginGetRequestStream(AddressOf GetRequestStreamCallback, request), _\n            IAsyncResult)\n\n        &#39; Keep the main thread from continuing while the asynchronous\n        &#39; operation completes. A real world application\n        &#39; could do something useful such as updating its user interface. \n        allDone.WaitOne()\n    End Sub &#39; Main\n\n    Private Shared Sub GetRequestStreamCallback(ByVal asynchronousResult As IAsyncResult)\n        Dim request As HttpWebRequest = CType(asynchronousResult.AsyncState, HttpWebRequest)\n        \n        &#39; End the operation\n        Dim postStream As Stream = request.EndGetRequestStream(asynchronousResult)\n        Console.WriteLine(&quot;Please enter the input data to be posted:&quot;)\n        Dim postData As [String] = Console.ReadLine()\n        \n        &#39;  Convert the string into byte array.\n        Dim byteArray As Byte() = Encoding.UTF8.GetBytes(postData)\n\n        &#39; Write to the stream.\n        postStream.Write(byteArray, 0, postData.Length)\n        postStream.Close()\n\n        &#39; Start the asynchronous operation to get the response\n        Dim result As IAsyncResult = _\n            CType(request.BeginGetResponse(AddressOf GetResponseCallback, request), _\n            IAsyncResult)\n    End Sub &#39; ReadRequestStreamCallback\n\n    Private Shared Sub GetResponseCallback(ByVal asynchronousResult As IAsyncResult)\n        Dim request As HttpWebRequest = CType(asynchronousResult.AsyncState, HttpWebRequest)\n        \n        &#39;  Get the response.\n        Dim response As HttpWebResponse = CType(request.EndGetResponse(asynchronousResult), _\n           HttpWebResponse)\n        \n        Dim streamResponse As Stream = response.GetResponseStream()\n        Dim streamRead As New StreamReader(streamResponse)\n        Dim responseString As String = streamRead.ReadToEnd()\n        \n        Console.WriteLine(responseString)\n        \n        &#39; Close Stream object.\n        streamResponse.Close()\n        streamRead.Close()\n\n        &#39; Release the HttpWebResponse.\n        allDone.Set()\n        response.Close()\n    End Sub &#39; ReadResponseCallback\n            \nEnd Class &#39; HttpWebRequest_BeginGetRequest\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_BeginGetRequestStream#2\">using System;\nusing System.Net;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\n\nclass HttpWebRequestBeginGetRequest\n{\n    private static ManualResetEvent allDone = new ManualResetEvent(false);\n\n    public static void Main(string[] args)\n    {\n\n\n        // Create a new HttpWebRequest object.\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com/example.aspx&quot;);\n\n        request.ContentType = &quot;application/x-www-form-urlencoded&quot;;\n\n        // Set the Method property to &#39;POST&#39; to post data to the URI.\n        request.Method = &quot;POST&quot;;\n\n        // start the asynchronous operation\n        request.BeginGetRequestStream(new AsyncCallback(GetRequestStreamCallback), request);\n\n        // Keep the main thread from continuing while the asynchronous\n        // operation completes. A real world application\n        // could do something useful such as updating its user interface. \n        allDone.WaitOne();\n    }\n\n    private static void GetRequestStreamCallback(IAsyncResult asynchronousResult)\n    {\n        HttpWebRequest request = (HttpWebRequest)asynchronousResult.AsyncState;\n        \n        // End the operation\n        Stream postStream = request.EndGetRequestStream(asynchronousResult);\n\n        Console.WriteLine(&quot;Please enter the input data to be posted:&quot;);\n        string postData = Console.ReadLine();\n\n        // Convert the string into a byte array.\n        byte[] byteArray = Encoding.UTF8.GetBytes(postData);\n\n        // Write to the request stream.\n        postStream.Write(byteArray, 0, postData.Length);\n        postStream.Close();\n\n        // Start the asynchronous operation to get the response\n        request.BeginGetResponse(new AsyncCallback(GetResponseCallback), request);\n    }\n\n    private static void GetResponseCallback(IAsyncResult asynchronousResult)\n    {\n        HttpWebRequest request = (HttpWebRequest)asynchronousResult.AsyncState;\n\n        // End the operation\n        HttpWebResponse response = (HttpWebResponse)request.EndGetResponse(asynchronousResult);\n        Stream streamResponse = response.GetResponseStream();\n        StreamReader streamRead = new StreamReader(streamResponse);\n        string responseString = streamRead.ReadToEnd();\n        Console.WriteLine(responseString);\n        // Close the stream object\n        streamResponse.Close();\n        streamRead.Close();\n\n        // Release the HttpWebResponse\n        response.Close();\n        allDone.Set();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_BeginGetResponse_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_BeginGetResponse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetResponse(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous request to an Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override IAsyncResult BeginGetResponse (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The state object for this request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the asynchronous request for a response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The stream is already in use by a previous call to BeginGetResponse  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.TransferEncoding*</span> is set to a value and <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The thread pool is running out of threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> is GET or HEAD, and either <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is greater than zero or <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.KeepAlive*</span> is <code>true</code>, <span class=\"xref\">stem.Net.HttpWebRequest.AllowWriteStreamBuffering*</span> is <code>false</code>, and either <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is -1, <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code> and <span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> is POST or PUT.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> has an entity body but the BeginGetResponse method is called without calling the <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetRequestStream*</span> method.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is greater than zero, but the application does not write all of the promised data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Abort*</span> was previously called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginGetResponse method starts an asynchronous request for a response from the Internet resource. The asynchronous callback method uses the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_EndGetResponse_\" data-linktype=\"relative-path\">EndGetResponse</a> method to return the actual <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a>.  </p>\n<p> A <a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a> is thrown in several cases when the properties set on the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class are conflicting. This exception occurs if an application sets the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property and the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_SendChunked_\" data-linktype=\"relative-path\">SendChunked</a> property to <code>true</code>, and then sends an HTTP GET request. This exception occurs if an application tries to send chunked to a server that only supports HTTP 1.0 protocol, where this is not supported. This exception occurs if an application tries to send data without setting the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property or the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_SendChunked_\" data-linktype=\"relative-path\">SendChunked</a> is <code>false</code> when buffering is disabled and on a keepalive connection (the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> property is <code>true</code>)<code>.</code>  </p>\n<p> If a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> is thrown, use the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Response_\" data-linktype=\"relative-path\">Response</a> and <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> properties of the exception to determine the response from the server.  </p>\n<p> The BeginGetResponse method requires some synchronous setup tasks to complete (DNS resolution, proxy detection, and TCP socket connection, for example) before this method becomes asynchronous. As a result, this method should never be called on a user interface (UI) thread because it might take considerable time (up to several minutes depending on network settings) to complete the initial synchronous setup tasks before an exception for an error is thrown or the method succeeds.  </p>\n<p> To learn more about the thread pool, see <a href=\"../Topic/The%20Managed%20Thread%20Pool.md\" data-linktype=\"relative-path\">The Managed Thread Pool</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> method, you must use the BeginGetResponse method to retrieve the response.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the BeginGetResponse method to make an asynchronous request for an Internet resource.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the case of asynchronous requests, it is the responsibility of the client application to implement its own time-out mechanism. The following code example shows how to do it.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"System.Net.HttpWebRequest.BeginGetResponse#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Threading;\npublic ref class RequestState\n{\nprivate:\n\n   // This class stores the State of the request.\n   const int BUFFER_SIZE;\n\npublic:\n   StringBuilder^ requestData;\n   array&lt;Byte&gt;^BufferRead;\n   HttpWebRequest^ request;\n   HttpWebResponse^ response;\n   Stream^ streamResponse;\n   RequestState()\n      : BUFFER_SIZE( 1024 )\n   {\n      BufferRead = gcnew array&lt;Byte&gt;(BUFFER_SIZE);\n      requestData = gcnew StringBuilder( &quot;&quot; );\n      request = nullptr;\n      streamResponse = nullptr;\n   }\n\n};\n\nref class HttpWebRequest_BeginGetResponse\n{\npublic:\n   static ManualResetEvent^ allDone = gcnew ManualResetEvent( false );\n   literal int BUFFER_SIZE = 1024;\n   literal int DefaultTimeOut = 120000; // 2 minute timeout \n\n   // Abort the request if the timer fires.\n   static void TimeoutCallback( Object^ state, bool timedOut )\n   {\n      if ( timedOut )\n      {\n         HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(state);\n         if ( request != nullptr )\n         {\n            request-&gt;Abort();\n         }\n      }\n   }\n\n   static void RespCallback( IAsyncResult^ asynchronousResult )\n   {\n      try\n      {\n         \n         // State of request is asynchronous.\n         RequestState^ myRequestState = dynamic_cast&lt;RequestState^&gt;(asynchronousResult-&gt;AsyncState);\n         HttpWebRequest^ myHttpWebRequest = myRequestState-&gt;request;\n         myRequestState-&gt;response = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest-&gt;EndGetResponse( asynchronousResult ));\n         \n         // Read the response into a Stream object.\n         Stream^ responseStream = myRequestState-&gt;response-&gt;GetResponseStream();\n         myRequestState-&gt;streamResponse = responseStream;\n         \n         // Begin the Reading of the contents of the HTML page and print it to the console.\n         IAsyncResult^ asynchronousInputRead = responseStream-&gt;BeginRead( myRequestState-&gt;BufferRead, 0, BUFFER_SIZE, gcnew AsyncCallback( ReadCallBack ), myRequestState );\n         return;\n      }\n      catch ( WebException^ e ) \n      {\n         Console::WriteLine( &quot;<br>RespCallback Exception raised!&quot; );\n         Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n         Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      }\n\n      allDone-&gt;Set();\n   }\n\n   static void ReadCallBack( IAsyncResult^ asyncResult )\n   {\n      try\n      {\n         RequestState^ myRequestState = dynamic_cast&lt;RequestState^&gt;(asyncResult-&gt;AsyncState);\n         Stream^ responseStream = myRequestState-&gt;streamResponse;\n         int read = responseStream-&gt;EndRead( asyncResult );\n         \n         // Read the HTML page and then print it to the console.\n         if ( read &gt; 0 )\n         {\n            myRequestState-&gt;requestData-&gt;Append( Encoding::ASCII-&gt;GetString( myRequestState-&gt;BufferRead, 0, read ) );\n            IAsyncResult^ asynchronousResult = responseStream-&gt;BeginRead( myRequestState-&gt;BufferRead, 0, BUFFER_SIZE, gcnew AsyncCallback( ReadCallBack ), myRequestState );\n            return;\n         }\n         else\n         {\n            Console::WriteLine( &quot;<br>The contents of the Html page are : &quot; );\n            if ( myRequestState-&gt;requestData-&gt;Length &gt; 1 )\n            {\n               String^ stringContent;\n               stringContent = myRequestState-&gt;requestData-&gt;ToString();\n               Console::WriteLine( stringContent );\n            }\n            Console::WriteLine( &quot;Press any key to continue..........&quot; );\n            Console::ReadLine();\n            responseStream-&gt;Close();\n         }\n      }\n      catch ( WebException^ e ) \n      {\n         Console::WriteLine( &quot;<br>ReadCallBack Exception raised!&quot; );\n         Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n         Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      }\n\n      allDone-&gt;Set();\n   }\n\n};\n\nint main()\n{\n   try\n   {\n      \n      // Create a HttpWebrequest object to the desired URL.\n      HttpWebRequest^ myHttpWebRequest = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com&quot; ));\n      \n      /**\n            * If you are behind a firewall and you do not have your browser proxy setup\n            * you need to use the following proxy creation code.\n      \n            // Create a proxy object.\n            WebProxy* myProxy = new WebProxy();\n      \n            // Associate a new Uri object to the _wProxy object, using the proxy address\n            // selected by the user.\n            myProxy.Address = new Uri(S&quot;http://myproxy&quot;);\n      \n            // Finally, initialize the Web request object proxy property with the _wProxy\n            // object.\n            myHttpWebRequest.Proxy=myProxy;\n            ***/\n      // Create an instance of the RequestState and assign the previous myHttpWebRequest\n      // object to its request field.\n      RequestState^ myRequestState = gcnew RequestState;\n      myRequestState-&gt;request = myHttpWebRequest;\n      \n      // Start the asynchronous request.\n      IAsyncResult^ result = dynamic_cast&lt;IAsyncResult^&gt;(myHttpWebRequest-&gt;BeginGetResponse( gcnew AsyncCallback( HttpWebRequest_BeginGetResponse::RespCallback ), myRequestState ));\n      \n      // this line impliments the timeout, if there is a timeout, the callback fires and the request becomes aborted\n      ThreadPool::RegisterWaitForSingleObject( result-&gt;AsyncWaitHandle, gcnew WaitOrTimerCallback( HttpWebRequest_BeginGetResponse::TimeoutCallback ), myHttpWebRequest, HttpWebRequest_BeginGetResponse::DefaultTimeOut, true );\n      \n      // The response came in the allowed time. The work processing will happen in the\n      // callback function.\n      HttpWebRequest_BeginGetResponse::allDone-&gt;WaitOne();\n      \n      // Release the HttpWebResponse resource.\n      myRequestState-&gt;response-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;<br>Main Exception raised!&quot; );\n      Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n      Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      Console::WriteLine( &quot;Press any key to continue..........&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>Main Exception raised!&quot; );\n      Console::WriteLine( &quot;Source : {0} &quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0} &quot;, e-&gt;Message );\n      Console::WriteLine( &quot;Press any key to continue..........&quot; );\n      Console::Read();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.HttpWebRequest.BeginGetResponse#1\">using System;\nusing System.Net;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\n\n\npublic class RequestState\n{\n  // This class stores the State of the request.\n  const int BUFFER_SIZE = 1024;\n  public StringBuilder requestData;\n  public byte[] BufferRead;\n  public HttpWebRequest request;\n  public HttpWebResponse response;\n  public Stream streamResponse;\n  public RequestState()\n  {\n    BufferRead = new byte[BUFFER_SIZE];\n    requestData = new StringBuilder(&quot;&quot;);\n    request = null;\n    streamResponse = null;\n  }\n}\n\nclass HttpWebRequest_BeginGetResponse\n{\n  public static ManualResetEvent allDone= new ManualResetEvent(false);\n  const int BUFFER_SIZE = 1024;\n  const int DefaultTimeout = 2 * 60 * 1000; // 2 minutes timeout\n \n  // Abort the request if the timer fires.\n  private static void TimeoutCallback(object state, bool timedOut) { \n      if (timedOut) {\n          HttpWebRequest request = state as HttpWebRequest;\n          if (request != null) {\n              request.Abort();\n          }\n      }\n  }\n\n  static void Main()\n  {  \n   \n    try\n    {\n      // Create a HttpWebrequest object to the desired URL. \n      HttpWebRequest myHttpWebRequest= (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n\n    \n  /**\n    * If you are behind a firewall and you do not have your browser proxy setup\n    * you need to use the following proxy creation code.\n\n      // Create a proxy object.\n      WebProxy myProxy = new WebProxy();\n\n      // Associate a new Uri object to the _wProxy object, using the proxy address\n      // selected by the user.\n      myProxy.Address = new Uri(&quot;http://myproxy&quot;);\n       \n        \n      // Finally, initialize the Web request object proxy property with the _wProxy\n      // object.\n      myHttpWebRequest.Proxy=myProxy;\n    ***/\n\n      // Create an instance of the RequestState and assign the previous myHttpWebRequest\n      // object to its request field.  \n      RequestState myRequestState = new RequestState();  \n      myRequestState.request = myHttpWebRequest;\n\n\n      // Start the asynchronous request.\n      IAsyncResult result=\n        (IAsyncResult) myHttpWebRequest.BeginGetResponse(new AsyncCallback(RespCallback),myRequestState);\n\n      // this line implements the timeout, if there is a timeout, the callback fires and the request becomes aborted\n      ThreadPool.RegisterWaitForSingleObject (result.AsyncWaitHandle, new WaitOrTimerCallback(TimeoutCallback), myHttpWebRequest, DefaultTimeout, true);\n\n      // The response came in the allowed time. The work processing will happen in the \n      // callback function.\n      allDone.WaitOne();\n      \n      // Release the HttpWebResponse resource.\n      myRequestState.response.Close();\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>Main Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n    }\n    catch(Exception e)\n    {\n      Console.WriteLine(&quot;<br>Main Exception raised!&quot;);\n      Console.WriteLine(&quot;Source :{0} &quot; , e.Source);\n      Console.WriteLine(&quot;Message :{0} &quot; , e.Message);\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n      Console.Read();\n    }\n  }\n  private static void RespCallback(IAsyncResult asynchronousResult)\n  {  \n    try\n    {\n      // State of request is asynchronous.\n      RequestState myRequestState=(RequestState) asynchronousResult.AsyncState;\n      HttpWebRequest  myHttpWebRequest=myRequestState.request;\n      myRequestState.response = (HttpWebResponse) myHttpWebRequest.EndGetResponse(asynchronousResult);\n      \n      // Read the response into a Stream object.\n      Stream responseStream = myRequestState.response.GetResponseStream();\n      myRequestState.streamResponse=responseStream;\n      \n      // Begin the Reading of the contents of the HTML page and print it to the console.\n      IAsyncResult asynchronousInputRead = responseStream.BeginRead(myRequestState.BufferRead, 0, BUFFER_SIZE, new AsyncCallback(ReadCallBack), myRequestState);\n      return;\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>RespCallback Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n    }\n    allDone.Set();\n  }\n  private static  void ReadCallBack(IAsyncResult asyncResult)\n  {\n    try\n    {\n\n    RequestState myRequestState = (RequestState)asyncResult.AsyncState;\n    Stream responseStream = myRequestState.streamResponse;\n    int read = responseStream.EndRead( asyncResult );\n    // Read the HTML page and then print it to the console.\n    if (read &gt; 0)\n    {\n      myRequestState.requestData.Append(Encoding.ASCII.GetString(myRequestState.BufferRead, 0, read));\n      IAsyncResult asynchronousResult = responseStream.BeginRead( myRequestState.BufferRead, 0, BUFFER_SIZE, new AsyncCallback(ReadCallBack), myRequestState);\n      return;\n    }\n    else\n    {\n      Console.WriteLine(&quot;<br>The contents of the Html page are : &quot;);\n      if(myRequestState.requestData.Length&gt;1)\n      {\n        string stringContent;\n        stringContent = myRequestState.requestData.ToString();\n        Console.WriteLine(stringContent);\n      }\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n      Console.ReadLine();\n      \n      responseStream.Close();\n    }\n\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>ReadCallBack Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n    }\n    allDone.Set();\n\n  }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.HttpWebRequest.BeginGetResponse#1\">\nImports System\nImports System.Net\nImports System.IO\nImports System.Text\nImports System.Threading\nImports Microsoft.VisualBasic\n\nPublic Class RequestState\n   &#39; This class stores the State of the request.\n   Private BUFFER_SIZE As Integer = 1024\n   Public requestData As StringBuilder\n   Public BufferRead() As Byte\n   Public request As HttpWebRequest\n   Public response As HttpWebResponse\n   Public streamResponse As Stream\n   \n   Public Sub New()\n      BufferRead = New Byte(BUFFER_SIZE) {}\n      requestData = New StringBuilder(&quot;&quot;)\n      request = Nothing\n      streamResponse = Nothing\n   End Sub &#39;New\nEnd Class &#39;RequestState\n\n\nClass HttpWebRequest_BeginGetResponse\n\n   Public Shared allDone As New ManualResetEvent(False)\n   Private BUFFER_SIZE As Integer = 1024\n   Private DefaultTimeout As Integer = 2 * 60 * 1000\n\n    &#39; 2 minutes timeout\n   &#39; Abort the request if the timer fires.\n   Private Shared Sub TimeoutCallback(state As Object, timedOut As Boolean)\n      If timedOut Then\n         Dim request As HttpWebRequest = state \n        \n         If Not (request Is Nothing) Then\n            request.Abort()\n         End If\n      End If\n   End Sub &#39;TimeoutCallback\n   \n   \n   Shared Sub Main()\n     \n      Try\n         &#39; Create a HttpWebrequest object to the desired URL. \n            Dim myHttpWebRequest As HttpWebRequest = WebRequest.Create(&quot;http://www.contoso.com&quot;)\n         \n         &#39; Create an instance of the RequestState and assign the previous myHttpWebRequest\n         &#39; object to its request field.  \n         \n         Dim myRequestState As New RequestState()\n         myRequestState.request = myHttpWebRequest\n\n         Dim myResponse As New HttpWebRequest_BeginGetResponse()\n         \n         &#39; Start the asynchronous request.\n         Dim result As IAsyncResult = CType(myHttpWebRequest.BeginGetResponse(New AsyncCallback(AddressOf RespCallback), myRequestState), IAsyncResult)\n         \n            &#39; this line implements the timeout, if there is a timeout, the callback fires and the request aborts.\n         ThreadPool.RegisterWaitForSingleObject(result.AsyncWaitHandle, New WaitOrTimerCallback(AddressOf TimeoutCallback), myHttpWebRequest, myResponse.DefaultTimeout, True)\n         \n         &#39; The response came in the allowed time. The work processing will happen in the \n         &#39; callback function.\n         allDone.WaitOne()\n         \n         &#39; Release the HttpWebResponse resource.\n         myRequestState.response.Close()\n      Catch e As WebException\n         Console.WriteLine(ControlChars.Lf + &quot;Main Exception raised!&quot;)\n         Console.WriteLine(ControlChars.Lf + &quot;Message:{0}&quot;, e.Message)\n         Console.WriteLine(ControlChars.Lf + &quot;Status:{0}&quot;, e.Status)\n         Console.WriteLine(&quot;Press any key to continue..........&quot;)\n      Catch e As Exception\n         Console.WriteLine(ControlChars.Lf + &quot;Main Exception raised!&quot;)\n         Console.WriteLine(&quot;Source :{0} &quot;, e.Source)\n         Console.WriteLine(&quot;Message :{0} &quot;, e.Message)\n         Console.WriteLine(&quot;Press any key to continue..........&quot;)\n         Console.Read()\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub RespCallback(asynchronousResult As IAsyncResult)\n      Try\n         &#39; State of request is asynchronous.\n         Dim myRequestState As RequestState = CType(asynchronousResult.AsyncState, RequestState)\n         Dim myHttpWebRequest As HttpWebRequest = myRequestState.request\n         myRequestState.response = CType(myHttpWebRequest.EndGetResponse(asynchronousResult), HttpWebResponse)\n         \n         &#39; Read the response into a Stream object.\n         Dim responseStream As Stream = myRequestState.response.GetResponseStream()\n         myRequestState.streamResponse = responseStream\n         \n         &#39; Begin the Reading of the contents of the HTML page and print it to the console.\n         Dim asynchronousInputRead As IAsyncResult = responseStream.BeginRead(myRequestState.BufferRead, 0, 1024, New AsyncCallback(AddressOf ReadCallBack), myRequestState)\n         Return\n      Catch e As WebException\n         Console.WriteLine(ControlChars.Lf + &quot;RespCallback Exception raised!&quot;)\n         Console.WriteLine(ControlChars.Lf + &quot;Message:{0}&quot;, e.Message)\n         Console.WriteLine(ControlChars.Lf + &quot;Status:{0}&quot;, e.Status)\n      End Try\n      allDone.Set()\n   End Sub &#39;RespCallback\n   \n   Private Shared Sub ReadCallBack(asyncResult As IAsyncResult)\n      Try\n         \n         Dim myRequestState As RequestState = CType(asyncResult.AsyncState, RequestState)\n         Dim responseStream As Stream = myRequestState.streamResponse\n         Dim read As Integer = responseStream.EndRead(asyncResult)\n         &#39; Read the HTML page and then print it to the console.\n         If read &gt; 0 Then\n            myRequestState.requestData.Append(Encoding.ASCII.GetString(myRequestState.BufferRead, 0, read))\n            Dim asynchronousResult As IAsyncResult = responseStream.BeginRead(myRequestState.BufferRead, 0, 1024, New AsyncCallback(AddressOf ReadCallBack), myRequestState)\n            Return\n         Else\n            Console.WriteLine(ControlChars.Lf + &quot;The contents of the Html page are : &quot;)\n            If myRequestState.requestData.Length &gt; 1 Then\n               Dim stringContent As String\n               stringContent = myRequestState.requestData.ToString()\n               Console.WriteLine(stringContent)\n            End If\n            Console.WriteLine(&quot;Press any key to continue..........&quot;)\n            Console.ReadLine()\n            \n            responseStream.Close()\n         End If\n      \n      Catch e As WebException\n         Console.WriteLine(ControlChars.Lf + &quot;ReadCallBack Exception raised!&quot;)\n         Console.WriteLine(ControlChars.Lf + &quot;Message:{0}&quot;, e.Message)\n         Console.WriteLine(ControlChars.Lf + &quot;Status:{0}&quot;, e.Status)\n      End Try\n      allDone.Set()\n   End Sub &#39;ReadCallBack \nEnd Class &#39;HttpWebRequest_BeginGetResponse\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_EndGetRequestStream_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_EndGetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetRequestStream(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous request for a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pending request for a stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> to use to write request data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The request did not complete, and no stream is available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not returned by the current instance from a call to <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetRequestStream*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method was called previously using <code>asyncResult</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Abort*</span> was previously called.  </p>\n<p> -or-  </p>\n<p> An error occurred while processing the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EndGetRequestStream method completes an asynchronous request for a stream that was started by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> method. After the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object has been returned, you can send data with the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> by using the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must set the value of the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property before writing data to the stream.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You must call the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the EndGetRequestStream method to end an asynchronous request for a stream instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebRequest_BeginGetRequestStream#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Threading;\nref class HttpWebRequestBeginGetRequest\n{\npublic:\n   static ManualResetEvent^ allDone = gcnew ManualResetEvent( false );\n   static void Main()\n   {\n      \n      // Create a new HttpWebRequest object.\n      HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com/example.aspx&quot; ));\n      \n      // Set the ContentType property.\n      request-&gt;ContentType = &quot;application/x-www-form-urlencoded&quot;;\n      \n      // Set the Method property to &#39;POST&#39; to post data to the Uri.\n      request-&gt;Method = &quot;POST&quot;;\n      \n      // Start the asynchronous operation.    \n      AsyncCallback^ del = gcnew AsyncCallback(GetRequestStreamCallback);\n      request-&gt;BeginGetRequestStream( del, request );\n      \n      // Keep the main thread from continuing while the asynchronous\n      // operation completes. A real world application\n      // could do something useful such as updating its user interface. \n      allDone-&gt;WaitOne();\n    }\n      \n\nprivate:\n    static void GetRequestStreamCallback(IAsyncResult^ asynchronousResult)\n    {\n        HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(asynchronousResult-&gt;AsyncState);\n        \n        // End the operation\n        Stream^ postStream = request-&gt;EndGetRequestStream(asynchronousResult);\n\n        Console::WriteLine(&quot;Please enter the input data to be posted:&quot;);\n        String^ postData = Console::ReadLine();\n\n        // Convert the string into a byte array.\n        array&lt;Byte&gt;^ByteArray = Encoding::UTF8-&gt;GetBytes(postData);\n\n        // Write to the request stream.\n        postStream-&gt;Write(ByteArray, 0, postData-&gt;Length);\n        postStream-&gt;Close();\n\n        // Start the asynchronous operation to get the response\n        AsyncCallback^ del = gcnew AsyncCallback(GetResponseCallback);\n        request-&gt;BeginGetResponse(del, request);\n    }\n\n   static void GetResponseCallback(IAsyncResult^ asynchronousResult)\n   {\n      HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(asynchronousResult-&gt;AsyncState);\n\n      // End the operation\n      HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;EndGetResponse(asynchronousResult));\n      Stream^ streamResponse = response-&gt;GetResponseStream();\n      StreamReader^ streamRead = gcnew StreamReader(streamResponse);\n      String^ responseString = streamRead-&gt;ReadToEnd();\n      Console::WriteLine(responseString);\n      // Close the stream object\n      streamResponse-&gt;Close();\n      streamRead-&gt;Close();\n\n      // Release the HttpWebResponse\n      response-&gt;Close();\n      allDone-&gt;Set();\n   }\n};\n\nvoid main()\n{\n   HttpWebRequestBeginGetRequest::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_BeginGetRequestStream#2\">Imports System\nImports System.Net\nImports System.IO\nImports System.Text\nImports System.Threading\nImports Microsoft.VisualBasic\n\nClass HttpWebRequestBeginGetRequest\n    Public Shared allDone As New ManualResetEvent(False)\n\n    Shared Sub Main()\n\n\n        &#39; Create a new HttpWebRequest object.\n        Dim request As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com/example.aspx&quot;), _\n                 HttpWebRequest)\n\n        &#39; Set the ContentType property.\n        request.ContentType = &quot;application/x-www-form-urlencoded&quot;\n\n        &#39;  Set the Method property to &#39;POST&#39; to post data to the URI.\n        request.Method = &quot;POST&quot;\n\n        &#39; Start the asynchronous operation.\t\t\n        Dim result As IAsyncResult = _\n            CType(request.BeginGetRequestStream(AddressOf GetRequestStreamCallback, request), _\n            IAsyncResult)\n\n        &#39; Keep the main thread from continuing while the asynchronous\n        &#39; operation completes. A real world application\n        &#39; could do something useful such as updating its user interface. \n        allDone.WaitOne()\n    End Sub &#39; Main\n\n    Private Shared Sub GetRequestStreamCallback(ByVal asynchronousResult As IAsyncResult)\n        Dim request As HttpWebRequest = CType(asynchronousResult.AsyncState, HttpWebRequest)\n        \n        &#39; End the operation\n        Dim postStream As Stream = request.EndGetRequestStream(asynchronousResult)\n        Console.WriteLine(&quot;Please enter the input data to be posted:&quot;)\n        Dim postData As [String] = Console.ReadLine()\n        \n        &#39;  Convert the string into byte array.\n        Dim byteArray As Byte() = Encoding.UTF8.GetBytes(postData)\n\n        &#39; Write to the stream.\n        postStream.Write(byteArray, 0, postData.Length)\n        postStream.Close()\n\n        &#39; Start the asynchronous operation to get the response\n        Dim result As IAsyncResult = _\n            CType(request.BeginGetResponse(AddressOf GetResponseCallback, request), _\n            IAsyncResult)\n    End Sub &#39; ReadRequestStreamCallback\n\n    Private Shared Sub GetResponseCallback(ByVal asynchronousResult As IAsyncResult)\n        Dim request As HttpWebRequest = CType(asynchronousResult.AsyncState, HttpWebRequest)\n        \n        &#39;  Get the response.\n        Dim response As HttpWebResponse = CType(request.EndGetResponse(asynchronousResult), _\n           HttpWebResponse)\n        \n        Dim streamResponse As Stream = response.GetResponseStream()\n        Dim streamRead As New StreamReader(streamResponse)\n        Dim responseString As String = streamRead.ReadToEnd()\n        \n        Console.WriteLine(responseString)\n        \n        &#39; Close Stream object.\n        streamResponse.Close()\n        streamRead.Close()\n\n        &#39; Release the HttpWebResponse.\n        allDone.Set()\n        response.Close()\n    End Sub &#39; ReadResponseCallback\n            \nEnd Class &#39; HttpWebRequest_BeginGetRequest\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebRequest_BeginGetRequestStream#2\">using System;\nusing System.Net;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\n\nclass HttpWebRequestBeginGetRequest\n{\n    private static ManualResetEvent allDone = new ManualResetEvent(false);\n\n    public static void Main(string[] args)\n    {\n\n\n        // Create a new HttpWebRequest object.\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com/example.aspx&quot;);\n\n        request.ContentType = &quot;application/x-www-form-urlencoded&quot;;\n\n        // Set the Method property to &#39;POST&#39; to post data to the URI.\n        request.Method = &quot;POST&quot;;\n\n        // start the asynchronous operation\n        request.BeginGetRequestStream(new AsyncCallback(GetRequestStreamCallback), request);\n\n        // Keep the main thread from continuing while the asynchronous\n        // operation completes. A real world application\n        // could do something useful such as updating its user interface. \n        allDone.WaitOne();\n    }\n\n    private static void GetRequestStreamCallback(IAsyncResult asynchronousResult)\n    {\n        HttpWebRequest request = (HttpWebRequest)asynchronousResult.AsyncState;\n        \n        // End the operation\n        Stream postStream = request.EndGetRequestStream(asynchronousResult);\n\n        Console.WriteLine(&quot;Please enter the input data to be posted:&quot;);\n        string postData = Console.ReadLine();\n\n        // Convert the string into a byte array.\n        byte[] byteArray = Encoding.UTF8.GetBytes(postData);\n\n        // Write to the request stream.\n        postStream.Write(byteArray, 0, postData.Length);\n        postStream.Close();\n\n        // Start the asynchronous operation to get the response\n        request.BeginGetResponse(new AsyncCallback(GetResponseCallback), request);\n    }\n\n    private static void GetResponseCallback(IAsyncResult asynchronousResult)\n    {\n        HttpWebRequest request = (HttpWebRequest)asynchronousResult.AsyncState;\n\n        // End the operation\n        HttpWebResponse response = (HttpWebResponse)request.EndGetResponse(asynchronousResult);\n        Stream streamResponse = response.GetResponseStream();\n        StreamReader streamRead = new StreamReader(streamResponse);\n        string responseString = streamRead.ReadToEnd();\n        Console.WriteLine(responseString);\n        // Close the stream object\n        streamResponse.Close();\n        streamRead.Close();\n\n        // Release the HttpWebResponse\n        response.Close();\n        allDone.Set();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_EndGetRequestStream_System_IAsyncResult_System_Net_TransportContext__\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_EndGetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetRequestStream(IAsyncResult,TransportContext)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous request for a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write data and outputs the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> associated with the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult, out System.Net.TransportContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pending request for a stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> for the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> to use to write request data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not returned by the current instance from a call to <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetRequestStream*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method was called previously using <code>asyncResult</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The request did not complete, and no stream is available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Abort*</span> was previously called.  </p>\n<p> -or-  </p>\n<p> An error occurred while processing the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EndGetRequestStream method completes an asynchronous request for a stream that was started by the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> method and outputs the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> associated with the stream. After the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object has been returned, you can send data with the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> by using the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> method.  </p>\n<p> Some applications that use integrated Windows authentication with extended protection may need to be able to query the transport layer used by <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> in order to retrieve the channel binding token (CBT) from the underlying TLS channel. The <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method provides access to this information for HTTP methods which have a request body (<code>POST</code> and <code>PUT</code> requests). This is only needed if the application is implementing its own authentication and needs access to the CBT.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If an application needs to set the value of the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property, then this must be done before retrieving the stream and writing data to it.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You must call the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_EndGetResponse_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_EndGetResponse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetResponse(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous request to an Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.WebResponse EndGetResponse (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pending request for a response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> that contains the response from the Internet resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method was called previously using <code>asyncResult.</code>  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> property is greater than 0 but the data has not been written to the request stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Abort*</span> was previously called.  </p>\n<p> -or-  </p>\n<p> An error occurred while processing the request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not returned by the current instance from a call to <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetResponse*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EndGetResponse method completes an asynchronous request for an Internet resource that was started by calling the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You must call the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Close_\" data-linktype=\"relative-path\">Close</a> method to close the stream and release the connection. Failure to do so may cause your application to run out of connections.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the EndGetResponse method to end an asynchronous request for an Internet resource.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebRequest_BeginGetResponse#2\">    try\n    {      \n\n      \n      // Create a HttpWebrequest object to the desired URL.\n      HttpWebRequest myHttpWebRequest1= (HttpWebRequest)WebRequest.Create(&quot;http://www.contoso.com&quot;);\n      \n      // Create an instance of the RequestState and assign the previous myHttpWebRequest1\n      // object to it&#39;s request field.  \n      RequestState myRequestState = new RequestState();  \n      myRequestState.request = myHttpWebRequest1;\n\n\n      // Start the asynchronous request.\n      IAsyncResult result=\n        (IAsyncResult) myHttpWebRequest1.BeginGetResponse(new AsyncCallback(RespCallback),myRequestState);\n\n      allDone.WaitOne();\n      \n      // Release the HttpWebResponse resource.\n      myRequestState.response.Close();\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n    }\n    catch(Exception e)\n    {\n      Console.WriteLine(&quot;<br>Exception raised!&quot;);\n      Console.WriteLine(&quot;Source :{0} &quot; , e.Source);\n      Console.WriteLine(&quot;Message :{0} &quot; , e.Message);\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n      Console.Read();\n    }\n  }\n  private static void RespCallback(IAsyncResult asynchronousResult)\n  {  \n    try\n    {\n      // State of request is asynchronous.\n      RequestState myRequestState=(RequestState) asynchronousResult.AsyncState;\n      HttpWebRequest  myHttpWebRequest2=myRequestState.request;\n      myRequestState.response = (HttpWebResponse) myHttpWebRequest2.EndGetResponse(asynchronousResult);\n      \n      // Read the response into a Stream object.\n      Stream responseStream = myRequestState.response.GetResponseStream();\n      myRequestState.streamResponse=responseStream;\n      \n      // Begin the Reading of the contents of the HTML page and print it to the console.\n      IAsyncResult asynchronousInputRead = responseStream.BeginRead(myRequestState.BufferRead, 0, BUFFER_SIZE, new AsyncCallback(ReadCallBack), myRequestState);\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n      \n    }\n  }\n  private static  void ReadCallBack(IAsyncResult asyncResult)\n  {\n    try\n    {\n\n    RequestState myRequestState = (RequestState)asyncResult.AsyncState;\n    Stream responseStream = myRequestState.streamResponse;\n    int read = responseStream.EndRead( asyncResult );\n    // Read the HTML page and then print it to the console.\n    if (read &gt; 0)\n    {\n      myRequestState.requestData.Append(Encoding.ASCII.GetString(myRequestState.BufferRead, 0, read));\n      IAsyncResult asynchronousResult = responseStream.BeginRead( myRequestState.BufferRead, 0, BUFFER_SIZE, new AsyncCallback(ReadCallBack), myRequestState);\n    }\n    else\n    {\n      Console.WriteLine(&quot;<br>The contents of the Html page are : &quot;);\n      if(myRequestState.requestData.Length&gt;1)\n      {\n        string stringContent;\n        stringContent = myRequestState.requestData.ToString();\n        Console.WriteLine(stringContent);\n      }\n      Console.WriteLine(&quot;Press any key to continue..........&quot;);\n      Console.ReadLine();\n      \n      responseStream.Close();\n      allDone.Set();\n     \n    }\n\n    }\n    catch(WebException e)\n    {\n      Console.WriteLine(&quot;<br>Exception raised!&quot;);\n      Console.WriteLine(&quot;<br>Message:{0}&quot;,e.Message);\n      Console.WriteLine(&quot;<br>Status:{0}&quot;,e.Status);\n      \n    }\n\n  }\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_BeginGetResponse#2\">    Try\n      &#39; Create a new HttpWebrequest object to the desired URL.\n      Dim myHttpWebRequest1 As HttpWebRequest = CType(WebRequest.Create(&quot;http://www.contoso.com&quot;), HttpWebRequest)\n      \n      &#39; Create an instance of the RequestState and assign the previous myHttpWebRequest1\n      &#39; object to it&#39;s request field.  \n      Dim myRequestState As New RequestState()\n      myRequestState.request = myHttpWebRequest1\n      \n      &#39; Start the Asynchronous request.\n      Dim result As IAsyncResult = CType(myHttpWebRequest1.BeginGetResponse(AddressOf RespCallback, myRequestState), IAsyncResult)\n      allDone.WaitOne()\n    \n      &#39; Release the HttpWebResponse resource.\n      myRequestState.response.Close()\n    Catch e As WebException\n      Console.WriteLine(ControlChars.Cr + &quot;Exception raised!&quot;)\n      Console.WriteLine(ControlChars.Cr + &quot;Message:{0}&quot;, e.Message)\n      Console.WriteLine(ControlChars.Cr + &quot;Status:{0}&quot;, e.Status)\n      Console.WriteLine(&quot;Press any key to continue..........&quot;)\n    \n    Catch e As Exception\n      Console.WriteLine(ControlChars.Cr + &quot;Exception raised!&quot;)\n      Console.WriteLine(&quot;Source :{0} &quot;, e.Source)\n      Console.WriteLine(&quot;Message : {0}&quot;, e.Message)\n      Console.WriteLine(&quot;Press any key to continue..........&quot;)\n      Console.Read()\n    End Try\n  End Sub &#39; Main\n  \n  Private Shared Sub RespCallback(asynchronousResult As IAsyncResult)\n    Try\n      &#39; State of request is asynchronous.\n      Dim myRequestState As RequestState = CType(asynchronousResult.AsyncState, RequestState)\n      Dim myHttpWebRequest2 As HttpWebRequest = myRequestState.request\n      myRequestState.response = CType(myHttpWebRequest2.EndGetResponse(asynchronousResult), HttpWebResponse)\n      &#39; Read the response into a Stream object.\n      Dim responseStream As Stream = myRequestState.response.GetResponseStream()\n      myRequestState.streamResponse = responseStream\n      &#39; Begin the Reading of the contents of the HTML page and print it to the console.\n      Dim asynchronousInputRead As IAsyncResult = responseStream.BeginRead(myRequestState.BufferRead, 0, BUFFER_SIZE, AddressOf ReadCallBack, myRequestState)\n    Catch e As WebException\n      Console.WriteLine(ControlChars.Cr + &quot;Exception raised!&quot;)\n      Console.WriteLine(ControlChars.Cr + &quot;Message:{0}&quot;, e.Message)\n      Console.WriteLine(ControlChars.Cr + &quot;Status:{0}&quot;, e.Status)\n    End Try \n  End Sub &#39; RespCallback\n  \n  Private Shared Sub ReadCallBack(asyncResult As IAsyncResult)\n    Try\n      Dim myRequestState As RequestState = CType(asyncResult.AsyncState, RequestState)\n      Dim responseStream As Stream = myRequestState.streamResponse\n      Dim read As Integer = responseStream.EndRead(asyncResult)\n      &#39;  Read the HTML page and then print it to the console.\n      If read &gt; 0 Then\n        myRequestState.requestData.Append(Encoding.ASCII.GetString(myRequestState.BufferRead, 0, read))\n        Dim asynchronousResult As IAsyncResult = responseStream.BeginRead(myRequestState.BufferRead, 0, BUFFER_SIZE, AddressOf ReadCallBack, myRequestState)\n      Else\n        Console.WriteLine(ControlChars.Cr + &quot;The contents of the Html page are : &quot;)\n        If myRequestState.requestData.Length &gt; 1 Then\n          Dim stringContent As String\n          stringContent = myRequestState.requestData.ToString()\n          Console.WriteLine(stringContent)\n        End If\n        Console.WriteLine(&quot;Press any key to continue..........&quot;)\n        Console.ReadLine()\n        responseStream.Close()\n        allDone.Set()\n      End If\n    Catch e As WebException\n      Console.WriteLine(ControlChars.Cr + &quot;Exception raised!&quot;)\n      Console.WriteLine(ControlChars.Cr + &quot;Message:{0}&quot;, e.Message)\n      Console.WriteLine(ControlChars.Cr + &quot;Status:{0}&quot;, e.Status)\n    End Try \n  End Sub &#39; ReadCallBack\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_BeginGetResponse#2\">   static void RespCallback( IAsyncResult^ asynchronousResult )\n   {\n      try\n      {\n         \n         // State of request is asynchronous.\n         RequestState^ myRequestState = dynamic_cast&lt;RequestState^&gt;(asynchronousResult-&gt;AsyncState);\n         HttpWebRequest^ myHttpWebRequest2 = myRequestState-&gt;request;\n         myRequestState-&gt;response = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest2-&gt;EndGetResponse( asynchronousResult ));\n         \n         // Read the response into a Stream object.\n         Stream^ responseStream = myRequestState-&gt;response-&gt;GetResponseStream();\n         myRequestState-&gt;streamResponse = responseStream;\n         \n         // Begin the Reading of the contents of the HTML page and print it to the console.\n         IAsyncResult^ asynchronousInputRead = responseStream-&gt;BeginRead( myRequestState-&gt;BufferRead, 0, BUFFER_SIZE, gcnew AsyncCallback( ReadCallBack ), myRequestState );\n      }\n      catch ( WebException^ e ) \n      {\n         Console::WriteLine( &quot;<br>Exception raised!&quot; );\n         Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n         Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      }\n\n   }\n\n   static void ReadCallBack( IAsyncResult^ asyncResult )\n   {\n      try\n      {\n         RequestState^ myRequestState = dynamic_cast&lt;RequestState^&gt;(asyncResult-&gt;AsyncState);\n         Stream^ responseStream = myRequestState-&gt;streamResponse;\n         int read = responseStream-&gt;EndRead( asyncResult );\n         \n         // Read the HTML page and then print it to the console.\n         if ( read &gt; 0 )\n         {\n            myRequestState-&gt;requestData-&gt;Append( Encoding::ASCII-&gt;GetString( myRequestState-&gt;BufferRead, 0, read ) );\n            IAsyncResult^ asynchronousResult = responseStream-&gt;BeginRead( myRequestState-&gt;BufferRead, 0, BUFFER_SIZE, gcnew AsyncCallback( ReadCallBack ), myRequestState );\n         }\n         else\n         {\n            Console::WriteLine( &quot;<br>The contents of the Html page are : &quot; );\n            if ( myRequestState-&gt;requestData-&gt;Length &gt; 1 )\n            {\n               String^ stringContent;\n               stringContent = myRequestState-&gt;requestData-&gt;ToString();\n               Console::WriteLine( stringContent );\n            }\n            Console::WriteLine( &quot;Press any key to continue..........&quot; );\n            Console::ReadLine();\n            responseStream-&gt;Close();\n            allDone-&gt;Set();\n         }\n      }\n      catch ( WebException^ e ) \n      {\n         Console::WriteLine( &quot;<br>Exception raised!&quot; );\n         Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n         Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      }\n\n   }\n\n};\n\nint main()\n{\n   try\n   {\n      \n      // Create a HttpWebrequest object to the desired URL.\n      HttpWebRequest^ myHttpWebRequest1 = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( &quot;http://www.contoso.com&quot; ));\n      \n      // Create an instance of the RequestState and assign the previous myHttpWebRequest1\n      // object to its request field.\n      RequestState^ myRequestState = gcnew RequestState;\n      myRequestState-&gt;request = myHttpWebRequest1;\n      \n      // Start the asynchronous request.\n      IAsyncResult^ result = dynamic_cast&lt;IAsyncResult^&gt;(myHttpWebRequest1-&gt;BeginGetResponse( gcnew AsyncCallback( HttpWebRequest_BeginGetResponse::RespCallback ), myRequestState ));\n      HttpWebRequest_BeginGetResponse::allDone-&gt;WaitOne();\n      \n      // Release the HttpWebResponse resource.\n      myRequestState-&gt;response-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;<br>Exception raised!&quot; );\n      Console::WriteLine( &quot;<br>Message: {0}&quot;, e-&gt;Message );\n      Console::WriteLine( &quot;<br>Status: {0}&quot;, e-&gt;Status );\n      Console::WriteLine( &quot;Press any key to continue..........&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>Exception raised!&quot; );\n      Console::WriteLine( &quot;Source : {0} &quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0} &quot;, e-&gt;Message );\n      Console::WriteLine( &quot;Press any key to continue..........&quot; );\n      Console::Read();\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data required to serialize the target object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>serializationInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> to populate with data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>streamingContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that specifies the destination for this serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any objects included in the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> are automatically tracked and serialized by the formatter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_GetRequestStream\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_GetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRequestStream()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write request data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Stream GetRequestStream ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> to use to write request data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> property is GET or HEAD.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.KeepAlive*</span> is <code>true</code>, <span class=\"xref\">stem.Net.HttpWebRequest.AllowWriteStreamBuffering*</span> is <code>false</code>, <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is -1, <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>, and <span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> is POST or PUT.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The GetRequestStream method is called more than once.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.TransferEncoding*</span> is set to a value and <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Abort*</span> was previously called.  </p>\n<p> -or-  </p>\n<p> The time-out period for the request expired.  </p>\n<p> -or-  </p>\n<p> An error occurred while processing the request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see <a href=\"https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f(v=vs.80).aspx\" data-linktype=\"external\">Network Programming in the .NET Compact Framework</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetRequestStream method returns a stream to use to send data for the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a>. After the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object has been returned, you can send data with the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> by using the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> method.  </p>\n<p> If an application needs to set the value of the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property, then this must be done before retrieving the stream.  </p>\n<p> You must call the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the GetRequestStream method, you must use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method to retrieve the response.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the GetRequestStream method to return a stream instance.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebRequest_ContentLength#4\">            // Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n            myHttpWebRequest.Method = &quot;POST&quot;;\n            Console.WriteLine (&quot;<br>Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot;);\n\n            // Create a new string object to POST data to the Url.\n            string inputData = Console.ReadLine ();\n\n\n            string postData = &quot;firstone=&quot; + inputData;\n            ASCIIEncoding encoding = new ASCIIEncoding ();\n            byte[] byte1 = encoding.GetBytes (postData);\n\n            // Set the content type of the data being posted.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;\n\n            // Set the content length of the string being posted.\n            myHttpWebRequest.ContentLength = byte1.Length;\n\n            Stream newStream = myHttpWebRequest.GetRequestStream ();\n\n            newStream.Write (byte1, 0, byte1.Length);\n            Console.WriteLine (&quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest.ContentLength);\n\n            // Close the Stream object.\n            newStream.Close ();\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebRequest_ContentLength#4\">      // Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n      myHttpWebRequest-&gt;Method = &quot;POST&quot;;\n      Console::WriteLine( &quot;<br>Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot; );\n      \n      // Create a new String* Object* to POST data to the Url.\n      String^ inputData = Console::ReadLine();\n      \n      String^ postData = String::Concat( &quot;firstone= &quot;, inputData );\n      ASCIIEncoding^ encoding = gcnew ASCIIEncoding;\n      array&lt;Byte&gt;^ byte1 = encoding-&gt;GetBytes( postData );\n      \n      // Set the content type of the data being posted.\n      myHttpWebRequest-&gt;ContentType = &quot;application/x-www-form-urlencoded&quot;;\n      \n      // Set the content length of the String* being posted.\n      myHttpWebRequest-&gt;ContentLength = byte1-&gt;Length;\n\n      Stream^ newStream = myHttpWebRequest-&gt;GetRequestStream();\n\n      newStream-&gt;Write( byte1, 0, byte1-&gt;Length );\n      Console::WriteLine( &quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest-&gt;ContentLength );\n      \n      // Close the Stream Object*.\n      newStream-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebRequest_ContentLength#4\">            &#39; Set the &#39;Method&#39; property of the &#39;Webrequest&#39; to &#39;POST&#39;.\n            myHttpWebRequest.Method = &quot;POST&quot;\n\n            Console.WriteLine(ControlChars.Cr + &quot;Please enter the data to be posted to the (http://www.contoso.com/codesnippets/next.asp) Uri :&quot;)\n            &#39; Create a new string object to POST data to the Url.\n            Dim inputData As String = Console.ReadLine()\n            Dim postData As String = &quot;firstone&quot; + ChrW(61) + inputData\n            Dim encoding As New ASCIIEncoding()\n            Dim byte1 As Byte() = encoding.GetBytes(postData)\n            &#39; Set the content type of the data being posted.\n            myHttpWebRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;\n            &#39; Set the content length of the string being posted.\n            myHttpWebRequest.ContentLength = byte1.Length\n            Dim newStream As Stream = myHttpWebRequest.GetRequestStream()\n            newStream.Write(byte1, 0, byte1.Length)\n            Console.WriteLine(&quot;The value of &#39;ContentLength&#39; property after sending the data is {0}&quot;, myHttpWebRequest.ContentLength)\n            newStream.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_GetRequestStream_System_Net_TransportContext__\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_GetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRequestStream(TransportContext)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to use to write request data and outputs the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> associated with the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Stream GetRequestStream (out System.Net.TransportContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> for the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> to use to write request data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span> method was unable to obtain the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span> method is called more than once.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.TransferEncoding*</span> is set to a value and <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> property is GET or HEAD.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.KeepAlive*</span> is <code>true</code>, <span class=\"xref\">stem.Net.HttpWebRequest.AllowWriteStreamBuffering*</span> is <code>false</code>, <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is -1, <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>, and <span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> is POST or PUT.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Abort*</span> was previously called.  </p>\n<p> -or-  </p>\n<p> The time-out period for the request expired.  </p>\n<p> -or-  </p>\n<p> An error occurred while processing the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetRequestStream method returns a stream to use to send data for the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> and outputs the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> associated with the stream. After the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object has been returned, you can send data with the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> by using the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> method.  </p>\n<p> Some applications that use integrated Windows authentication with extended protection may need to be able to query the transport layer used by <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> in order to retrieve the channel binding token (CBT) from the underlying TLS channel. The GetRequestStream method provides access to this information for HTTP methods which have a request body (<code>POST</code> and <code>PUT</code> requests). This is only needed if the application is implementing its own authentication and needs access to the CBT.  </p>\n<p> If an application needs to set the value of the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property, then this must be done before retrieving the stream.  </p>\n<p> You must call the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method, you must use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method to retrieve the response.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_GetResponse\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_GetResponse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetResponse()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a response from an Internet resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.WebResponse GetResponse ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> that contains the response from the Internet resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The stream is already in use by a previous call to <span class=\"xref\">stem.Net.HttpWebRequest.BeginGetResponse*</span>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.TransferEncoding*</span> is set to a value and <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> is GET or HEAD, and either <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is greater or equal to zero or <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.HttpWebRequest.KeepAlive*</span> is <code>true</code>, <span class=\"xref\">stem.Net.HttpWebRequest.AllowWriteStreamBuffering*</span> is <code>false</code>, <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is -1, <span class=\"xref\">stem.Net.HttpWebRequest.SendChunked*</span> is <code>false</code>, and <span class=\"xref\">stem.Net.HttpWebRequest.Method*</span> is POST or PUT.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> has an entity body but the GetResponse method is called without calling the <span class=\"xref\">stem.Net.HttpWebRequest.GetRequestStream*</span> method.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Net.HttpWebRequest.ContentLength*</span> is greater than zero, but the application does not write all of the promised data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The request cache validator indicated that the response for this request can be served from the cache; however, this request includes data to be sent to the server. Requests that send data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.HttpWebRequest.Abort*</span> was previously called.  </p>\n<p> -or-  </p>\n<p> The time-out period for the request expired.  </p>\n<p> -or-  </p>\n<p> An error occurred while processing the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetResponse method returns a <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> object that contains the response from the Internet resource. The actual instance returned is an <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a>, and can be typecast to that class to access HTTP-specific properties.  </p>\n<p> A <a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a> is thrown in several cases when the properties set on the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class are conflicting. This exception occurs if an application sets the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property and the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_SendChunked_\" data-linktype=\"relative-path\">SendChunked</a> property to <code>true</code>, and then sends an HTTP GET request. This exception occurs if an application tries to send chunked to a server that only supports HTTP 1.0 protocol, where this is not supported. This exception occurs if an application tries to send data without setting the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a> property or the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_SendChunked_\" data-linktype=\"relative-path\">SendChunked</a> is <code>false</code> when buffering is disabled and on a keepalive connection (the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> property is <code>true</code>)<code>.</code>  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You must call the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Close_\" data-linktype=\"relative-path\">Close</a> method to close the stream and release the connection. Failure to do so may cause your application to run out of connections.  </p>\n</div>\n<p> When using the POST method, you must get the request stream, write the data to be posted, and close the stream. This method blocks waiting for content to post; if there is no time-out set and you do not provide content, the calling thread blocks indefinitely.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Multiple calls to GetResponse return the same response object; the request is not reissued.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method, you must use the GetResponse method to retrieve the response.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> is thrown, use the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Response_\" data-linktype=\"relative-path\">Response</a> and <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> properties of the exception to determine the response from the server.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, cookies are disabled by default. If you wish to use cookies, use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_CookieContainer_\" data-linktype=\"relative-path\">CookieContainer</a> property to enable cookies.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets the response for a request.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLResponse1#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Text;\nusing namespace System::IO;\n\n// Specify the URL to receive the request.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( args[ 1 ] ));\n   \n   // Set some reasonable limits on resources used by this request\n   request-&gt;MaximumAutomaticRedirections = 4;\n   request-&gt;MaximumResponseHeadersLength = 4;\n   \n   // Set credentials to use for this request.\n   request-&gt;Credentials = CredentialCache::DefaultCredentials;\n   HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n   Console::WriteLine( &quot;Content length is {0}&quot;, response-&gt;ContentLength );\n   Console::WriteLine( &quot;Content type is {0}&quot;, response-&gt;ContentType );\n   \n   // Get the stream associated with the response.\n   Stream^ receiveStream = response-&gt;GetResponseStream();\n   \n   // Pipes the stream to a higher level stream reader with the required encoding format. \n   StreamReader^ readStream = gcnew StreamReader( receiveStream,Encoding::UTF8 );\n   Console::WriteLine( &quot;Response stream received.&quot; );\n   Console::WriteLine( readStream-&gt;ReadToEnd() );\n   response-&gt;Close();\n   readStream-&gt;Close();\n}\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLResponse1#1\">using System;\nusing System.Net;\nusing System.Text;\nusing System.IO;\n\n\n    public class Test\n    {\n        // Specify the URL to receive the request.\n        public static void Main (string[] args)\n        {\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create (args[0]);\n\n            // Set some reasonable limits on resources used by this request\n            request.MaximumAutomaticRedirections = 4;\n            request.MaximumResponseHeadersLength = 4;\n            // Set credentials to use for this request.\n            request.Credentials = CredentialCache.DefaultCredentials;\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse ();\n\n            Console.WriteLine (&quot;Content length is {0}&quot;, response.ContentLength);\n            Console.WriteLine (&quot;Content type is {0}&quot;, response.ContentType);\n             \n            // Get the stream associated with the response.\n            Stream receiveStream = response.GetResponseStream ();\n\n            // Pipes the stream to a higher level stream reader with the required encoding format. \n            StreamReader readStream = new StreamReader (receiveStream, Encoding.UTF8);\n\n            Console.WriteLine (&quot;Response stream received.&quot;);\n            Console.WriteLine (readStream.ReadToEnd ());\n            response.Close ();\n            readStream.Close ();\n        }\n    }\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLResponse1#1\">Imports System\nImports System.Net\nImports System.Text\nImports System.IO\n\n\n    Public Class Test\n\n        &#39; Specify the URL to receive the request.\n        Public Shared Sub Main(ByVal args() As String)\n        Dim request As HttpWebRequest = CType(WebRequest.Create(args(0)), HttpWebRequest)\n\n\n        &#39; Set some reasonable limits on resources used by this request\n        request.MaximumAutomaticRedirections = 4\n        request.MaximumResponseHeadersLength = 4\n\n        &#39; Set credentials to use for this request.\n        request.Credentials = CredentialCache.DefaultCredentials\n\n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n\n        Console.WriteLine(&quot;Content length is {0}&quot;, response.ContentLength)\n        Console.WriteLine(&quot;Content type is {0}&quot;, response.ContentType)\n\n        &#39; Get the stream associated with the response.\n        Dim receiveStream As Stream = response.GetResponseStream()\n\n        &#39; Pipes the stream to a higher level stream reader with the required encoding format. \n        Dim readStream As New StreamReader(receiveStream, Encoding.UTF8)\n\n        Console.WriteLine(&quot;Response stream received.&quot;)\n        Console.WriteLine(readStream.ReadToEnd())\n        response.Close()\n        readStream.Close()\n    End Sub &#39;Main\nEnd Class &#39;Test\n&#39;\n&#39;The output from this example will vary depending on the value passed into Main \n&#39;but will be similar to the following:\n&#39;\n&#39;Content length is 1542\n&#39;Content type is text/html; charset=utf-8\n&#39;Response stream received.\n&#39;&lt;html&gt;\n&#39;...\n&#39;&lt;/html&gt;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebRequest_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Net_HttpWebRequest_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data needed to serialize the target object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>serializationInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> to populate with data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>streamingContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that specifies the destination for this serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any objects included in the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> are automatically tracked and serialized by the formatter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpWebRequest.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Abort\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Accept\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.AddRange\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Address\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.AllowAutoRedirect\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.AllowReadStreamBuffering\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.AllowWriteStreamBuffering\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.AutomaticDecompression\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.BeginGetRequestStream\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.BeginGetResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ClientCertificates\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Connection\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ConnectionGroupName\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ContentLength\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ContentType\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ContinueDelegate\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ContinueTimeout\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.CookieContainer\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Credentials\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Date\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.DefaultCachePolicy\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.EndGetRequestStream\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.EndGetResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Expect\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.GetRequestStream\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.GetResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.HaveResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Headers\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Host\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.IfModifiedSince\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.KeepAlive\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.MaximumAutomaticRedirections\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.MaximumResponseHeadersLength\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.MediaType\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Method\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Pipelined\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.PreAuthenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ProtocolVersion\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Proxy\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ReadWriteTimeout\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Referer\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.RequestUri\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.SendChunked\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ServerCertificateValidationCallback\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ServicePoint\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.SupportsCookieContainer\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.ISerializable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.Timeout\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.TransferEncoding\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.UseDefaultCredentials\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebRequest.UserAgent\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"3e774fb8-a5d4-f40b-2fa9-fa9dca4b6398\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an HTTP-specific implementation of the  class.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.HttpWebRequest\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpWebRequest.yml","open_to_public_contributors":true,"api_name":["System.Net.HttpWebRequest","System.Net.HttpWebRequest..ctor","System.Net.HttpWebRequest.Abort","System.Net.HttpWebRequest.Accept","System.Net.HttpWebRequest.AddRange","System.Net.HttpWebRequest.Address","System.Net.HttpWebRequest.AllowAutoRedirect","System.Net.HttpWebRequest.AllowReadStreamBuffering","System.Net.HttpWebRequest.AllowWriteStreamBuffering","System.Net.HttpWebRequest.AutomaticDecompression","System.Net.HttpWebRequest.BeginGetRequestStream","System.Net.HttpWebRequest.BeginGetResponse","System.Net.HttpWebRequest.ClientCertificates","System.Net.HttpWebRequest.Connection","System.Net.HttpWebRequest.ConnectionGroupName","System.Net.HttpWebRequest.ContentLength","System.Net.HttpWebRequest.ContentType","System.Net.HttpWebRequest.ContinueDelegate","System.Net.HttpWebRequest.ContinueTimeout","System.Net.HttpWebRequest.CookieContainer","System.Net.HttpWebRequest.Credentials","System.Net.HttpWebRequest.Date","System.Net.HttpWebRequest.DefaultCachePolicy","System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength","System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength","System.Net.HttpWebRequest.EndGetRequestStream","System.Net.HttpWebRequest.EndGetResponse","System.Net.HttpWebRequest.Expect","System.Net.HttpWebRequest.GetObjectData","System.Net.HttpWebRequest.GetRequestStream","System.Net.HttpWebRequest.GetResponse","System.Net.HttpWebRequest.HaveResponse","System.Net.HttpWebRequest.Headers","System.Net.HttpWebRequest.Host","System.Net.HttpWebRequest.IfModifiedSince","System.Net.HttpWebRequest.KeepAlive","System.Net.HttpWebRequest.MaximumAutomaticRedirections","System.Net.HttpWebRequest.MaximumResponseHeadersLength","System.Net.HttpWebRequest.MediaType","System.Net.HttpWebRequest.Method","System.Net.HttpWebRequest.Pipelined","System.Net.HttpWebRequest.PreAuthenticate","System.Net.HttpWebRequest.ProtocolVersion","System.Net.HttpWebRequest.Proxy","System.Net.HttpWebRequest.ReadWriteTimeout","System.Net.HttpWebRequest.Referer","System.Net.HttpWebRequest.RequestUri","System.Net.HttpWebRequest.SendChunked","System.Net.HttpWebRequest.ServerCertificateValidationCallback","System.Net.HttpWebRequest.ServicePoint","System.Net.HttpWebRequest.SupportsCookieContainer","System.Net.HttpWebRequest.ISerializable.GetObjectData","System.Net.HttpWebRequest.Timeout","System.Net.HttpWebRequest.TransferEncoding","System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing","System.Net.HttpWebRequest.UseDefaultCredentials","System.Net.HttpWebRequest.UserAgent"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.HttpWebRequest","System::Net::HttpWebRequest","System.Net.HttpWebRequest.#ctor","System::Net::HttpWebRequest::#ctor","System.Net.HttpWebRequest.Abort","System::Net::HttpWebRequest::Abort","System.Net.HttpWebRequest.Accept","System::Net::HttpWebRequest::Accept","System.Net.HttpWebRequest.AddRange","System::Net::HttpWebRequest::AddRange","System.Net.HttpWebRequest.Address","System::Net::HttpWebRequest::Address","System.Net.HttpWebRequest.AllowAutoRedirect","System::Net::HttpWebRequest::AllowAutoRedirect","System.Net.HttpWebRequest.AllowReadStreamBuffering","System::Net::HttpWebRequest::AllowReadStreamBuffering","System.Net.HttpWebRequest.AllowWriteStreamBuffering","System::Net::HttpWebRequest::AllowWriteStreamBuffering","System.Net.HttpWebRequest.AutomaticDecompression","System::Net::HttpWebRequest::AutomaticDecompression","System.Net.HttpWebRequest.BeginGetRequestStream","System::Net::HttpWebRequest::BeginGetRequestStream","System.Net.HttpWebRequest.BeginGetResponse","System::Net::HttpWebRequest::BeginGetResponse","System.Net.HttpWebRequest.ClientCertificates","System::Net::HttpWebRequest::ClientCertificates","System.Net.HttpWebRequest.Connection","System::Net::HttpWebRequest::Connection","System.Net.HttpWebRequest.ConnectionGroupName","System::Net::HttpWebRequest::ConnectionGroupName","System.Net.HttpWebRequest.ContentLength","System::Net::HttpWebRequest::ContentLength","System.Net.HttpWebRequest.ContentType","System::Net::HttpWebRequest::ContentType","System.Net.HttpWebRequest.ContinueDelegate","System::Net::HttpWebRequest::ContinueDelegate","System.Net.HttpWebRequest.ContinueTimeout","System::Net::HttpWebRequest::ContinueTimeout","System.Net.HttpWebRequest.CookieContainer","System::Net::HttpWebRequest::CookieContainer","System.Net.HttpWebRequest.Credentials","System::Net::HttpWebRequest::Credentials","System.Net.HttpWebRequest.Date","System::Net::HttpWebRequest::Date","System.Net.HttpWebRequest.DefaultCachePolicy","System::Net::HttpWebRequest::DefaultCachePolicy","System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength","System::Net::HttpWebRequest::DefaultMaximumErrorResponseLength","System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength","System::Net::HttpWebRequest::DefaultMaximumResponseHeadersLength","System.Net.HttpWebRequest.EndGetRequestStream","System::Net::HttpWebRequest::EndGetRequestStream","System.Net.HttpWebRequest.EndGetResponse","System::Net::HttpWebRequest::EndGetResponse","System.Net.HttpWebRequest.Expect","System::Net::HttpWebRequest::Expect","System.Net.HttpWebRequest.GetObjectData","System::Net::HttpWebRequest::GetObjectData","System.Net.HttpWebRequest.GetRequestStream","System::Net::HttpWebRequest::GetRequestStream","System.Net.HttpWebRequest.GetResponse","System::Net::HttpWebRequest::GetResponse","System.Net.HttpWebRequest.HaveResponse","System::Net::HttpWebRequest::HaveResponse","System.Net.HttpWebRequest.Headers","System::Net::HttpWebRequest::Headers","System.Net.HttpWebRequest.Host","System::Net::HttpWebRequest::Host","System.Net.HttpWebRequest.IfModifiedSince","System::Net::HttpWebRequest::IfModifiedSince","System.Net.HttpWebRequest.KeepAlive","System::Net::HttpWebRequest::KeepAlive","System.Net.HttpWebRequest.MaximumAutomaticRedirections","System::Net::HttpWebRequest::MaximumAutomaticRedirections","System.Net.HttpWebRequest.MaximumResponseHeadersLength","System::Net::HttpWebRequest::MaximumResponseHeadersLength","System.Net.HttpWebRequest.MediaType","System::Net::HttpWebRequest::MediaType","System.Net.HttpWebRequest.Method","System::Net::HttpWebRequest::Method","System.Net.HttpWebRequest.Pipelined","System::Net::HttpWebRequest::Pipelined","System.Net.HttpWebRequest.PreAuthenticate","System::Net::HttpWebRequest::PreAuthenticate","System.Net.HttpWebRequest.ProtocolVersion","System::Net::HttpWebRequest::ProtocolVersion","System.Net.HttpWebRequest.Proxy","System::Net::HttpWebRequest::Proxy","System.Net.HttpWebRequest.ReadWriteTimeout","System::Net::HttpWebRequest::ReadWriteTimeout","System.Net.HttpWebRequest.Referer","System::Net::HttpWebRequest::Referer","System.Net.HttpWebRequest.RequestUri","System::Net::HttpWebRequest::RequestUri","System.Net.HttpWebRequest.SendChunked","System::Net::HttpWebRequest::SendChunked","System.Net.HttpWebRequest.ServerCertificateValidationCallback","System::Net::HttpWebRequest::ServerCertificateValidationCallback","System.Net.HttpWebRequest.ServicePoint","System::Net::HttpWebRequest::ServicePoint","System.Net.HttpWebRequest.SupportsCookieContainer","System::Net::HttpWebRequest::SupportsCookieContainer","System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData","System::Net::HttpWebRequest::System#Runtime#Serialization#ISerializable#GetObjectData","System.Net.HttpWebRequest.Timeout","System::Net::HttpWebRequest::Timeout","System.Net.HttpWebRequest.TransferEncoding","System::Net::HttpWebRequest::TransferEncoding","System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing","System::Net::HttpWebRequest::UnsafeAuthenticatedConnectionSharing","System.Net.HttpWebRequest.UseDefaultCredentials","System::Net::HttpWebRequest::UseDefaultCredentials","System.Net.HttpWebRequest.UserAgent","System::Net::HttpWebRequest::UserAgent"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"3e774fb8-a5d4-f40b-2fa9-fa9dca4b6398","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/HttpWebRequest.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HttpWebRequest class | Microsoft Docs","_op_ogTitle":"HttpWebRequest class","description":"Provides an HTTP-specific implementation of the  class.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.HttpWebRequest","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httpwebrequest","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httpwebrequest","fileRelativePath":"System.Net.HttpWebRequest.html"},"themesRelativePathToOutputRoot":"_themes/"}