{"content":"    \r\n    <h1 id=\"System_Windows_Forms_Timer\">\r\n      <span class=\"lang-csharp\">Timer</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Implements a timer that raises an event at user-defined intervals. This timer is optimized for use in Windows Forms applications and must be used in a window.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;Tick&quot;)]\n[System.ComponentModel.DefaultProperty(&quot;Interval&quot;)]\n[System.ComponentModel.ToolboxItemFilter(&quot;System.Windows.Forms&quot;)]\npublic class Timer : System.ComponentModel.Component</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Timer</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A Timer is used to raise an event at user-defined intervals. This Windows timer is designed for a single-threaded environment where UI threads are used to perform processing. It requires that the user code have a UI message pump available and always operate from the same thread, or marshal the call onto another thread.  </p>\n<p> When you use this timer, use the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event to perform a polling operation or to display a splash screen for a specified period of time. Whenever the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property is set to <code>true</code> and the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property is greater than zero, the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event is raised at intervals based on the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property setting.  </p>\n<p> This class provides methods to set the interval, and to start and stop the timer.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds. If you require a multithreaded timer with greater accuracy, use the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> class in the <a class=\"xref\" href=\"system.timers\" data-linktype=\"relative-path\">System.Timers</a> namespace.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer__ctor\" data-linktype=\"self-bookmark\">Timer()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer__ctor_System_ComponentModel_IContainer_\" data-linktype=\"self-bookmark\">Timer(IContainer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> class together with the specified container.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_Enabled\" data-linktype=\"self-bookmark\">Enabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets whether the timer is running.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_Interval\" data-linktype=\"self-bookmark\">Interval</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the time, in milliseconds, before the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event is raised relative to the last occurrence of the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_Tag\" data-linktype=\"self-bookmark\">Tag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an arbitrary string representing some type of user state.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Disposes of the resources, other than memory, used by the timer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_OnTick_System_EventArgs_\" data-linktype=\"self-bookmark\">OnTick(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_Start\" data-linktype=\"self-bookmark\">Start()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts the timer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_Stop\" data-linktype=\"self-bookmark\">Stop()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stops the timer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Timer_Tick\" data-linktype=\"self-bookmark\">Tick</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the specified timer interval has elapsed and the timer is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer__ctor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timer()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Timer ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a new timer is created, it is disabled; that is, <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> is set to <code>false</code>. To enable the timer, call the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Start_\" data-linktype=\"relative-path\">Start</a> method or set <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> to <code>true</code>.  </p>\n<p> If the timer is disabled and the timer is out of scope, the timer will be disposed when garbage collection occurs. If the timer is enabled, even if it is out of scope, it is not subject to garbage collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer__ctor_System_ComponentModel_IContainer_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timer(IContainer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> class together with the specified container.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Timer (System.ComponentModel.IContainer container);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>container</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.icontainer\" data-linktype=\"relative-path\">IContainer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.componentmodel.icontainer\" data-linktype=\"relative-path\">IContainer</a> that represents the container for the timer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> constructor enables you to associate a <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> with any <a class=\"xref\" href=\"system.componentmodel.container\" data-linktype=\"relative-path\">Container</a> object. By associating the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> like this, you hand over control of the lifetime of the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> to the <a class=\"xref\" href=\"system.componentmodel.container\" data-linktype=\"relative-path\">Container</a>. This can be useful if you use a number of components in your application and want to dispose of all of them simultaneously. For example, if you associate a <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a>, an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>, and a <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> with a <a class=\"xref\" href=\"system.componentmodel.container\" data-linktype=\"relative-path\">Container</a>, calling <a class=\"xref\" href=\"system.componentmodel.container#System_ComponentModel_Container_Dispose_\" data-linktype=\"relative-path\">Dispose</a> on the <a class=\"xref\" href=\"system.componentmodel.container\" data-linktype=\"relative-path\">Container</a> will force disposal of all of these components as well.  </p>\n<p> When a new timer is created, it is disabled; that is, <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> is set to <code>false</code>. To enable the timer, call the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Start_\" data-linktype=\"relative-path\">Start</a> method or set <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> to <code>true</code>.  </p>\n<p> This instance will exist until its container releases it to garbage collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_Enabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer_Enabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets whether the timer is running.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Enabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the timer is currently enabled; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The timer is not subject to garbage collection when the value is <code>true</code>.  </p>\n<p> Calling the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Start_\" data-linktype=\"relative-path\">Start</a> method is the same as setting Enabled to <code>true</code>. Likewise, calling the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method is the same as setting Enabled to <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Timer Example 2#1\">public ref class Class1\n{\nprivate:\n   static System::Windows::Forms::Timer^ myTimer = gcnew System::Windows::Forms::Timer;\n   static int alarmCounter = 1;\n   static bool exitFlag = false;\n\n   // This is the method to run when the timer is raised.\n   static void TimerEventProcessor( Object^ /*myObject*/, EventArgs^ /*myEventArgs*/ )\n   {\n      myTimer-&gt;Stop();\n      \n      // Displays a message box asking whether to continue running the timer.\n      if ( MessageBox::Show( &quot;Continue running?&quot;, String::Format( &quot;Count is: {0}&quot;, alarmCounter ), MessageBoxButtons::YesNo ) == DialogResult::Yes )\n      {\n         \n         // Restarts the timer and increments the counter.\n         alarmCounter += 1;\n         myTimer-&gt;Enabled = true;\n      }\n      else\n      {\n         \n         // Stops the timer.\n         exitFlag = true;\n      }\n   }\n\n\npublic:\n   static void Main()\n   {\n      \n      /* Adds the event and the event handler for the method that will \n                process the timer event to the timer. */\n      myTimer-&gt;Tick += gcnew EventHandler( TimerEventProcessor );\n      \n      // Sets the timer interval to 5 seconds.\n      myTimer-&gt;Interval = 5000;\n      myTimer-&gt;Start();\n      \n      // Runs the timer, and raises the event.\n      while ( exitFlag == false )\n      {\n         \n         // Processes all the events in the queue.\n         Application::DoEvents();\n      }\n   }\n\n};\n\nint main()\n{\n   Class1::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Timer Example 2#1\">Public Class Class1\n    Private Shared WithEvents myTimer As New System.Windows.Forms.Timer()\n    Private Shared alarmCounter As Integer = 1\n    Private Shared exitFlag As Boolean = False    \n    \n    &#39; This is the method to run when the timer is raised.\n    Private Shared Sub TimerEventProcessor(myObject As Object, _\n                                           ByVal myEventArgs As EventArgs) _\n                                       Handles myTimer.Tick\n        myTimer.Stop()\n        \n        &#39; Displays a message box asking whether to continue running the timer.\n        If MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; &amp; alarmCounter, _\n                            MessageBoxButtons.YesNo) = DialogResult.Yes Then\n            &#39; Restarts the timer and increments the counter.\n            alarmCounter += 1\n            myTimer.Enabled = True\n        Else\n            &#39; Stops the timer.\n            exitFlag = True\n        End If\n    End Sub\n    \n    Public Shared Sub Main()\n        &#39; Adds the event and the event handler for the method that will\n        &#39; process the timer event to the timer.\n        \n        &#39; Sets the timer interval to 5 seconds.\n        myTimer.Interval = 5000\n        myTimer.Start()\n        \n        &#39; Runs the timer, and raises the event.\n        While exitFlag = False\n            &#39; Processes all the events in the queue.\n            Application.DoEvents()\n        End While\n\n    End Sub    \n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Timer Example 2#1\">public class Class1 {\n    static System.Windows.Forms.Timer myTimer = new System.Windows.Forms.Timer();\n    static int alarmCounter = 1;\n    static bool exitFlag = false;\n \n    // This is the method to run when the timer is raised.\n    private static void TimerEventProcessor(Object myObject,\n                                            EventArgs myEventArgs) {\n       myTimer.Stop();\n \n       // Displays a message box asking whether to continue running the timer.\n       if(MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; + alarmCounter, \n          MessageBoxButtons.YesNo) == DialogResult.Yes) {\n          // Restarts the timer and increments the counter.\n          alarmCounter +=1;\n          myTimer.Enabled = true;\n       }\n       else {\n          // Stops the timer.\n          exitFlag = true;\n       }\n    }\n \n    public static int Main() {\n       /* Adds the event and the event handler for the method that will \n          process the timer event to the timer. */\n       myTimer.Tick += new EventHandler(TimerEventProcessor);\n \n       // Sets the timer interval to 5 seconds.\n       myTimer.Interval = 5000;\n       myTimer.Start();\n \n       // Runs the timer, and raises the event.\n       while(exitFlag == false) {\n          // Processes all the events in the queue.\n          Application.DoEvents();\n       }\n    return 0;\n    }\n }\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_Interval\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer_Interval_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Interval</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the time, in milliseconds, before the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event is raised relative to the last occurrence of the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Interval { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> specifying the number of milliseconds before the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event is raised relative to the last occurrence of the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event. The value cannot be less than one.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the number of seconds in the interval, divide this number by 1,000.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Timer Example 2#1\">public ref class Class1\n{\nprivate:\n   static System::Windows::Forms::Timer^ myTimer = gcnew System::Windows::Forms::Timer;\n   static int alarmCounter = 1;\n   static bool exitFlag = false;\n\n   // This is the method to run when the timer is raised.\n   static void TimerEventProcessor( Object^ /*myObject*/, EventArgs^ /*myEventArgs*/ )\n   {\n      myTimer-&gt;Stop();\n      \n      // Displays a message box asking whether to continue running the timer.\n      if ( MessageBox::Show( &quot;Continue running?&quot;, String::Format( &quot;Count is: {0}&quot;, alarmCounter ), MessageBoxButtons::YesNo ) == DialogResult::Yes )\n      {\n         \n         // Restarts the timer and increments the counter.\n         alarmCounter += 1;\n         myTimer-&gt;Enabled = true;\n      }\n      else\n      {\n         \n         // Stops the timer.\n         exitFlag = true;\n      }\n   }\n\n\npublic:\n   static void Main()\n   {\n      \n      /* Adds the event and the event handler for the method that will \n                process the timer event to the timer. */\n      myTimer-&gt;Tick += gcnew EventHandler( TimerEventProcessor );\n      \n      // Sets the timer interval to 5 seconds.\n      myTimer-&gt;Interval = 5000;\n      myTimer-&gt;Start();\n      \n      // Runs the timer, and raises the event.\n      while ( exitFlag == false )\n      {\n         \n         // Processes all the events in the queue.\n         Application::DoEvents();\n      }\n   }\n\n};\n\nint main()\n{\n   Class1::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Timer Example 2#1\">Public Class Class1\n    Private Shared WithEvents myTimer As New System.Windows.Forms.Timer()\n    Private Shared alarmCounter As Integer = 1\n    Private Shared exitFlag As Boolean = False    \n    \n    &#39; This is the method to run when the timer is raised.\n    Private Shared Sub TimerEventProcessor(myObject As Object, _\n                                           ByVal myEventArgs As EventArgs) _\n                                       Handles myTimer.Tick\n        myTimer.Stop()\n        \n        &#39; Displays a message box asking whether to continue running the timer.\n        If MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; &amp; alarmCounter, _\n                            MessageBoxButtons.YesNo) = DialogResult.Yes Then\n            &#39; Restarts the timer and increments the counter.\n            alarmCounter += 1\n            myTimer.Enabled = True\n        Else\n            &#39; Stops the timer.\n            exitFlag = True\n        End If\n    End Sub\n    \n    Public Shared Sub Main()\n        &#39; Adds the event and the event handler for the method that will\n        &#39; process the timer event to the timer.\n        \n        &#39; Sets the timer interval to 5 seconds.\n        myTimer.Interval = 5000\n        myTimer.Start()\n        \n        &#39; Runs the timer, and raises the event.\n        While exitFlag = False\n            &#39; Processes all the events in the queue.\n            Application.DoEvents()\n        End While\n\n    End Sub    \n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Timer Example 2#1\">public class Class1 {\n    static System.Windows.Forms.Timer myTimer = new System.Windows.Forms.Timer();\n    static int alarmCounter = 1;\n    static bool exitFlag = false;\n \n    // This is the method to run when the timer is raised.\n    private static void TimerEventProcessor(Object myObject,\n                                            EventArgs myEventArgs) {\n       myTimer.Stop();\n \n       // Displays a message box asking whether to continue running the timer.\n       if(MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; + alarmCounter, \n          MessageBoxButtons.YesNo) == DialogResult.Yes) {\n          // Restarts the timer and increments the counter.\n          alarmCounter +=1;\n          myTimer.Enabled = true;\n       }\n       else {\n          // Stops the timer.\n          exitFlag = true;\n       }\n    }\n \n    public static int Main() {\n       /* Adds the event and the event handler for the method that will \n          process the timer event to the timer. */\n       myTimer.Tick += new EventHandler(TimerEventProcessor);\n \n       // Sets the timer interval to 5 seconds.\n       myTimer.Interval = 5000;\n       myTimer.Start();\n \n       // Runs the timer, and raises the event.\n       while(exitFlag == false) {\n          // Processes all the events in the queue.\n          Application.DoEvents();\n       }\n    return 0;\n    }\n }\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_Tag\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer_Tag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tag</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an arbitrary string representing some type of user state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Tag { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An arbitrary string representing some type of user state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Disposes of the resources, other than memory, used by the timer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources. <code>false</code> to release only the unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call Dispose when you are finished using the timer. The Dispose method leaves the timer in an unusable state. After you call Dispose, you must release all references to the timer so the memory it was occupying can be reclaimed by garbage collection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call Dispose before you release your last reference to the timer. Otherwise, the resources the timer is using will not be freed until garbage collection calls the destructor of the timer object.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_OnTick_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer_OnTick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTick(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTick (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data. This is always <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called for each timer tick. It calls any methods that are added through <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a>. If you are inheriting from <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a>, you can override this method.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_Start\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start()</div>        \r\n          </div>\r\n    \r\n            <p>Starts the timer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Start ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also start the timer by setting the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Timer Example 2#1\">public ref class Class1\n{\nprivate:\n   static System::Windows::Forms::Timer^ myTimer = gcnew System::Windows::Forms::Timer;\n   static int alarmCounter = 1;\n   static bool exitFlag = false;\n\n   // This is the method to run when the timer is raised.\n   static void TimerEventProcessor( Object^ /*myObject*/, EventArgs^ /*myEventArgs*/ )\n   {\n      myTimer-&gt;Stop();\n      \n      // Displays a message box asking whether to continue running the timer.\n      if ( MessageBox::Show( &quot;Continue running?&quot;, String::Format( &quot;Count is: {0}&quot;, alarmCounter ), MessageBoxButtons::YesNo ) == DialogResult::Yes )\n      {\n         \n         // Restarts the timer and increments the counter.\n         alarmCounter += 1;\n         myTimer-&gt;Enabled = true;\n      }\n      else\n      {\n         \n         // Stops the timer.\n         exitFlag = true;\n      }\n   }\n\n\npublic:\n   static void Main()\n   {\n      \n      /* Adds the event and the event handler for the method that will \n                process the timer event to the timer. */\n      myTimer-&gt;Tick += gcnew EventHandler( TimerEventProcessor );\n      \n      // Sets the timer interval to 5 seconds.\n      myTimer-&gt;Interval = 5000;\n      myTimer-&gt;Start();\n      \n      // Runs the timer, and raises the event.\n      while ( exitFlag == false )\n      {\n         \n         // Processes all the events in the queue.\n         Application::DoEvents();\n      }\n   }\n\n};\n\nint main()\n{\n   Class1::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Timer Example 2#1\">Public Class Class1\n    Private Shared WithEvents myTimer As New System.Windows.Forms.Timer()\n    Private Shared alarmCounter As Integer = 1\n    Private Shared exitFlag As Boolean = False    \n    \n    &#39; This is the method to run when the timer is raised.\n    Private Shared Sub TimerEventProcessor(myObject As Object, _\n                                           ByVal myEventArgs As EventArgs) _\n                                       Handles myTimer.Tick\n        myTimer.Stop()\n        \n        &#39; Displays a message box asking whether to continue running the timer.\n        If MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; &amp; alarmCounter, _\n                            MessageBoxButtons.YesNo) = DialogResult.Yes Then\n            &#39; Restarts the timer and increments the counter.\n            alarmCounter += 1\n            myTimer.Enabled = True\n        Else\n            &#39; Stops the timer.\n            exitFlag = True\n        End If\n    End Sub\n    \n    Public Shared Sub Main()\n        &#39; Adds the event and the event handler for the method that will\n        &#39; process the timer event to the timer.\n        \n        &#39; Sets the timer interval to 5 seconds.\n        myTimer.Interval = 5000\n        myTimer.Start()\n        \n        &#39; Runs the timer, and raises the event.\n        While exitFlag = False\n            &#39; Processes all the events in the queue.\n            Application.DoEvents()\n        End While\n\n    End Sub    \n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Timer Example 2#1\">public class Class1 {\n    static System.Windows.Forms.Timer myTimer = new System.Windows.Forms.Timer();\n    static int alarmCounter = 1;\n    static bool exitFlag = false;\n \n    // This is the method to run when the timer is raised.\n    private static void TimerEventProcessor(Object myObject,\n                                            EventArgs myEventArgs) {\n       myTimer.Stop();\n \n       // Displays a message box asking whether to continue running the timer.\n       if(MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; + alarmCounter, \n          MessageBoxButtons.YesNo) == DialogResult.Yes) {\n          // Restarts the timer and increments the counter.\n          alarmCounter +=1;\n          myTimer.Enabled = true;\n       }\n       else {\n          // Stops the timer.\n          exitFlag = true;\n       }\n    }\n \n    public static int Main() {\n       /* Adds the event and the event handler for the method that will \n          process the timer event to the timer. */\n       myTimer.Tick += new EventHandler(TimerEventProcessor);\n \n       // Sets the timer interval to 5 seconds.\n       myTimer.Interval = 5000;\n       myTimer.Start();\n \n       // Runs the timer, and raises the event.\n       while(exitFlag == false) {\n          // Processes all the events in the queue.\n          Application.DoEvents();\n       }\n    return 0;\n    }\n }\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_Stop\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer_Stop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stop()</div>        \r\n          </div>\r\n    \r\n            <p>Stops the timer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Stop ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also stop the timer by setting the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>false</code>. A <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> object may be enabled and disabled multiple times within the same application session.  </p>\n<p> Calling <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Start_\" data-linktype=\"relative-path\">Start</a> after you have disabled a <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> by calling Stop will cause the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> to restart the interrupted interval. If your <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> is set for a 5000-millisecond interval, and you call Stop at around 3000 milliseconds, calling <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Start_\" data-linktype=\"relative-path\">Start</a> will cause the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> to wait 5000 milliseconds before raising the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Tick\" data-linktype=\"relative-path\">Tick</a> event.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Calling Stop on any <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> within a Windows Forms application can cause messages from other <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> components in the application to be processed immediately, because all <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> components operate on the main application thread. If you have two <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a> components, one set to 700 milliseconds and one set to 500 milliseconds, and you call Stop on the first <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a>, your application may receive an event callback for the second component first. If this proves problematic, consider using the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">Timer</a> class in the <a class=\"xref\" href=\"system.threading\" data-linktype=\"relative-path\">System.Threading</a> namespace instead.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Timer Example 2#1\">public ref class Class1\n{\nprivate:\n   static System::Windows::Forms::Timer^ myTimer = gcnew System::Windows::Forms::Timer;\n   static int alarmCounter = 1;\n   static bool exitFlag = false;\n\n   // This is the method to run when the timer is raised.\n   static void TimerEventProcessor( Object^ /*myObject*/, EventArgs^ /*myEventArgs*/ )\n   {\n      myTimer-&gt;Stop();\n      \n      // Displays a message box asking whether to continue running the timer.\n      if ( MessageBox::Show( &quot;Continue running?&quot;, String::Format( &quot;Count is: {0}&quot;, alarmCounter ), MessageBoxButtons::YesNo ) == DialogResult::Yes )\n      {\n         \n         // Restarts the timer and increments the counter.\n         alarmCounter += 1;\n         myTimer-&gt;Enabled = true;\n      }\n      else\n      {\n         \n         // Stops the timer.\n         exitFlag = true;\n      }\n   }\n\n\npublic:\n   static void Main()\n   {\n      \n      /* Adds the event and the event handler for the method that will \n                process the timer event to the timer. */\n      myTimer-&gt;Tick += gcnew EventHandler( TimerEventProcessor );\n      \n      // Sets the timer interval to 5 seconds.\n      myTimer-&gt;Interval = 5000;\n      myTimer-&gt;Start();\n      \n      // Runs the timer, and raises the event.\n      while ( exitFlag == false )\n      {\n         \n         // Processes all the events in the queue.\n         Application::DoEvents();\n      }\n   }\n\n};\n\nint main()\n{\n   Class1::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Timer Example 2#1\">Public Class Class1\n    Private Shared WithEvents myTimer As New System.Windows.Forms.Timer()\n    Private Shared alarmCounter As Integer = 1\n    Private Shared exitFlag As Boolean = False    \n    \n    &#39; This is the method to run when the timer is raised.\n    Private Shared Sub TimerEventProcessor(myObject As Object, _\n                                           ByVal myEventArgs As EventArgs) _\n                                       Handles myTimer.Tick\n        myTimer.Stop()\n        \n        &#39; Displays a message box asking whether to continue running the timer.\n        If MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; &amp; alarmCounter, _\n                            MessageBoxButtons.YesNo) = DialogResult.Yes Then\n            &#39; Restarts the timer and increments the counter.\n            alarmCounter += 1\n            myTimer.Enabled = True\n        Else\n            &#39; Stops the timer.\n            exitFlag = True\n        End If\n    End Sub\n    \n    Public Shared Sub Main()\n        &#39; Adds the event and the event handler for the method that will\n        &#39; process the timer event to the timer.\n        \n        &#39; Sets the timer interval to 5 seconds.\n        myTimer.Interval = 5000\n        myTimer.Start()\n        \n        &#39; Runs the timer, and raises the event.\n        While exitFlag = False\n            &#39; Processes all the events in the queue.\n            Application.DoEvents()\n        End While\n\n    End Sub    \n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Timer Example 2#1\">public class Class1 {\n    static System.Windows.Forms.Timer myTimer = new System.Windows.Forms.Timer();\n    static int alarmCounter = 1;\n    static bool exitFlag = false;\n \n    // This is the method to run when the timer is raised.\n    private static void TimerEventProcessor(Object myObject,\n                                            EventArgs myEventArgs) {\n       myTimer.Stop();\n \n       // Displays a message box asking whether to continue running the timer.\n       if(MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; + alarmCounter, \n          MessageBoxButtons.YesNo) == DialogResult.Yes) {\n          // Restarts the timer and increments the counter.\n          alarmCounter +=1;\n          myTimer.Enabled = true;\n       }\n       else {\n          // Stops the timer.\n          exitFlag = true;\n       }\n    }\n \n    public static int Main() {\n       /* Adds the event and the event handler for the method that will \n          process the timer event to the timer. */\n       myTimer.Tick += new EventHandler(TimerEventProcessor);\n \n       // Sets the timer interval to 5 seconds.\n       myTimer.Interval = 5000;\n       myTimer.Start();\n \n       // Runs the timer, and raises the event.\n       while(exitFlag == false) {\n          // Processes all the events in the queue.\n          Application.DoEvents();\n       }\n    return 0;\n    }\n }\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_ToString\">\r\n    \r\n            <a id=\"System_Windows_Forms_Timer_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current <a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method returns a string that includes the value of the <a class=\"xref\" href=\"system.windows.forms.timer#System_Windows_Forms_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Timer_Tick\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tick</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the specified timer interval has elapsed and the timer is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Tick;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Assert_\" data-linktype=\"relative-path\">Assert</a> method on the <a class=\"xref\" href=\"system.diagnostics.debug\" data-linktype=\"relative-path\">Debug</a> class from within the Tick event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the Tick event repeatedly. We recommend that you refrain from testing assertions within this event, and use the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Write_\" data-linktype=\"relative-path\">Write</a>, <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteIf_\" data-linktype=\"relative-path\">WriteIf</a>, <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, or <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteLineIf_\" data-linktype=\"relative-path\">WriteLineIf</a> methods instead.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Timer Example 2#1\">public ref class Class1\n{\nprivate:\n   static System::Windows::Forms::Timer^ myTimer = gcnew System::Windows::Forms::Timer;\n   static int alarmCounter = 1;\n   static bool exitFlag = false;\n\n   // This is the method to run when the timer is raised.\n   static void TimerEventProcessor( Object^ /*myObject*/, EventArgs^ /*myEventArgs*/ )\n   {\n      myTimer-&gt;Stop();\n      \n      // Displays a message box asking whether to continue running the timer.\n      if ( MessageBox::Show( &quot;Continue running?&quot;, String::Format( &quot;Count is: {0}&quot;, alarmCounter ), MessageBoxButtons::YesNo ) == DialogResult::Yes )\n      {\n         \n         // Restarts the timer and increments the counter.\n         alarmCounter += 1;\n         myTimer-&gt;Enabled = true;\n      }\n      else\n      {\n         \n         // Stops the timer.\n         exitFlag = true;\n      }\n   }\n\n\npublic:\n   static void Main()\n   {\n      \n      /* Adds the event and the event handler for the method that will \n                process the timer event to the timer. */\n      myTimer-&gt;Tick += gcnew EventHandler( TimerEventProcessor );\n      \n      // Sets the timer interval to 5 seconds.\n      myTimer-&gt;Interval = 5000;\n      myTimer-&gt;Start();\n      \n      // Runs the timer, and raises the event.\n      while ( exitFlag == false )\n      {\n         \n         // Processes all the events in the queue.\n         Application::DoEvents();\n      }\n   }\n\n};\n\nint main()\n{\n   Class1::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Timer Example 2#1\">Public Class Class1\n    Private Shared WithEvents myTimer As New System.Windows.Forms.Timer()\n    Private Shared alarmCounter As Integer = 1\n    Private Shared exitFlag As Boolean = False    \n    \n    &#39; This is the method to run when the timer is raised.\n    Private Shared Sub TimerEventProcessor(myObject As Object, _\n                                           ByVal myEventArgs As EventArgs) _\n                                       Handles myTimer.Tick\n        myTimer.Stop()\n        \n        &#39; Displays a message box asking whether to continue running the timer.\n        If MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; &amp; alarmCounter, _\n                            MessageBoxButtons.YesNo) = DialogResult.Yes Then\n            &#39; Restarts the timer and increments the counter.\n            alarmCounter += 1\n            myTimer.Enabled = True\n        Else\n            &#39; Stops the timer.\n            exitFlag = True\n        End If\n    End Sub\n    \n    Public Shared Sub Main()\n        &#39; Adds the event and the event handler for the method that will\n        &#39; process the timer event to the timer.\n        \n        &#39; Sets the timer interval to 5 seconds.\n        myTimer.Interval = 5000\n        myTimer.Start()\n        \n        &#39; Runs the timer, and raises the event.\n        While exitFlag = False\n            &#39; Processes all the events in the queue.\n            Application.DoEvents()\n        End While\n\n    End Sub    \n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Timer Example 2#1\">public class Class1 {\n    static System.Windows.Forms.Timer myTimer = new System.Windows.Forms.Timer();\n    static int alarmCounter = 1;\n    static bool exitFlag = false;\n \n    // This is the method to run when the timer is raised.\n    private static void TimerEventProcessor(Object myObject,\n                                            EventArgs myEventArgs) {\n       myTimer.Stop();\n \n       // Displays a message box asking whether to continue running the timer.\n       if(MessageBox.Show(&quot;Continue running?&quot;, &quot;Count is: &quot; + alarmCounter, \n          MessageBoxButtons.YesNo) == DialogResult.Yes) {\n          // Restarts the timer and increments the counter.\n          alarmCounter +=1;\n          myTimer.Enabled = true;\n       }\n       else {\n          // Stops the timer.\n          exitFlag = true;\n       }\n    }\n \n    public static int Main() {\n       /* Adds the event and the event handler for the method that will \n          process the timer event to the timer. */\n       myTimer.Tick += new EventHandler(TimerEventProcessor);\n \n       // Sets the timer interval to 5 seconds.\n       myTimer.Interval = 5000;\n       myTimer.Start();\n \n       // Runs the timer, and raises the event.\n       while(exitFlag == false) {\n          // Processes all the events in the queue.\n          Application.DoEvents();\n       }\n    return 0;\n    }\n }\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.Timer.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.Timer.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.Enabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.Interval\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.OnTick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.Start\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.Stop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.Tag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.Tick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.add_Tick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.remove_Tick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Timer.ToString\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"864505f4-eed2-62d1-ebc5-6839b19245d5\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\Timer.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements a timer that raises an event at user-defined intervals. This timer is optimized for use in Windows Forms applications and must be used in a window.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.Timer\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.Timer.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.Timer.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.Timer","System.Windows.Forms.Timer..ctor","System.Windows.Forms.Timer.Dispose","System.Windows.Forms.Timer.Enabled","System.Windows.Forms.Timer.Interval","System.Windows.Forms.Timer.OnTick","System.Windows.Forms.Timer.Start","System.Windows.Forms.Timer.Stop","System.Windows.Forms.Timer.Tag","System.Windows.Forms.Timer.Tick","System.Windows.Forms.Timer.add_Tick","System.Windows.Forms.Timer.remove_Tick","System.Windows.Forms.Timer.ToString"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.Timer","System::Windows::Forms::Timer","System.Windows.Forms.Timer.#ctor","System::Windows::Forms::Timer::#ctor","System.Windows.Forms.Timer.Dispose","System::Windows::Forms::Timer::Dispose","System.Windows.Forms.Timer.Enabled","System::Windows::Forms::Timer::Enabled","System.Windows.Forms.Timer.Interval","System::Windows::Forms::Timer::Interval","System.Windows.Forms.Timer.OnTick","System::Windows::Forms::Timer::OnTick","System.Windows.Forms.Timer.Start","System::Windows::Forms::Timer::Start","System.Windows.Forms.Timer.Stop","System::Windows::Forms::Timer::Stop","System.Windows.Forms.Timer.Tag","System::Windows::Forms::Timer::Tag","System.Windows.Forms.Timer.Tick","System::Windows::Forms::Timer::Tick","System.Windows.Forms.Timer.ToString","System::Windows::Forms::Timer::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"864505f4-eed2-62d1-ebc5-6839b19245d5","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\Timer.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/Timer.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Timer class | Microsoft Docs","_op_ogTitle":"Timer class","description":"Implements a timer that raises an event at user-defined intervals. This timer is optimized for use in Windows Forms applications and must be used in a window.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.Timer","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.timer","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.timer","fileRelativePath":"System.Windows.Forms.Timer.html"},"themesRelativePathToOutputRoot":"_themes/"}