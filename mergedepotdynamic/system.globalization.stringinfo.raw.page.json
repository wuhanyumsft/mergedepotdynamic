{"content":"    \r\n    <h1 id=\"System_Globalization_StringInfo\">\r\n      <span class=\"lang-csharp\">StringInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides functionality to split a string into text elements and to iterate through those text elements.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class StringInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StringInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character.  </p>\n<p> The StringInfo class enables you to work with a string as a series of textual elements rather than individual <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects.  </p>\n<p> To instantiate a StringInfo object that represents a specified string, you can do either of the following:  </p>\n<ul>\n<li><p>Call the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo__ctor_System_String_\" data-linktype=\"relative-path\">StringInfo(String)</a> constructor and pass it the string that the StringInfo object is to represent as an argument.  </p>\n</li>\n<li><p>Call the default <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo__ctor\" data-linktype=\"relative-path\">StringInfo()</a> constructor, and assign the string that the StringInfo object is to represent to the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_String_\" data-linktype=\"relative-path\">String</a> property.  </p>\n<p>You can work with the individual text elements in a string in two ways:  </p>\n</li>\n<li><p>By enumerating each text element. To do this, you call the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_GetTextElementEnumerator_\" data-linktype=\"relative-path\">GetTextElementEnumerator</a> method, and then repeatedly call the <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method on the returned <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> object until the method returns <code>false</code>.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_ParseCombiningCharacters_\" data-linktype=\"relative-path\">ParseCombiningCharacters</a> method to retrieve an array that contains the starting index of each text element. You can then retrieve individual text elements by passing these indexes to the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_SubstringByTextElements_\" data-linktype=\"relative-path\">SubstringByTextElements</a> method.  </p>\n<p>The following example illustrates both ways of working with the text elements in a string. It creates two strings:  </p>\n</li>\n<li><p><code>strCombining</code>, which is a string of Arabic characters that includes three text elements with multiple <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects. The first text element is the base character ARABIC LETTER ALEF (U+-627) followed by ARABIC HAMZA BELOW (U+-655) and ARABIC KASRA (U+0650). The second text element is ARABIC LETTER HEH (U+0647) followed by ARABIC FATHA (U+-64E). The third text element is ARABIC LETTTER BEH (U+0628) followed by ARABIC DAMMATAN (U+064C).  </p>\n</li>\n<li><p><code>strSurrogates</code>, which is a string that includes three surrogate pairs: GREEK ACROPHONIC FIVE TALENTS (U+10148) from the Supplementary Multilingual Plane, U+20026 from the Supplementary Ideographic Plane, and U+F1001 from the private user area. The UTF-16 encoding of each character is a surrogate pair that consists of a high surrogate followed by a low surrogate.  </p>\n<p>Each string is parsed once by the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_ParseCombiningCharacters_\" data-linktype=\"relative-path\">ParseCombiningCharacters</a> method and then by the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_GetTextElementEnumerator_\" data-linktype=\"relative-path\">GetTextElementEnumerator</a> method. Both methods correctly parse the text elements in the two strings and display the results of the parsing operation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.StringInfo.Class#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // The Unicode code points specify Arabic base characters and \n      // combining character sequences.\n      string strCombining = &quot;\\u0627\\u0655\\u0650\\u064A\\u0647\\u064E&quot; +\n                            &quot;\\u0627\\u0628\\u064C&quot;;\n\n      // The Unicode code points specify private surrogate pairs.\n      string strSurrogates = Char.ConvertFromUtf32(0x10148) +\n                             Char.ConvertFromUtf32(0x20026) + &quot;a&quot; +\n                             Char.ConvertFromUtf32(0xF1001);\n      \n      EnumerateTextElements(strCombining);\n      EnumerateTextElements(strSurrogates);\n   }\n\n   public static void EnumerateTextElements(string str)\n   {\n      // Get the Enumerator.\n      TextElementEnumerator teEnum = null;      \n\n      // Parse the string using the ParseCombiningCharacters method.\n      Console.WriteLine(&quot;\\nParsing with ParseCombiningCharacters:&quot;);\n      int[] teIndices = StringInfo.ParseCombiningCharacters(str);\n      \n      for (int i = 0; i &lt; teIndices.Length; i++) {\n         if (i &lt; teIndices.Length - 1)\n            Console.WriteLine(&quot;Text Element {0} ({1}..{2})= {3}&quot;, i, \n               teIndices[i], teIndices[i + 1] - 1, \n               ShowHexValues(str.Substring(teIndices[i], teIndices[i + 1] - \n                             teIndices[i])));\n         else\n            Console.WriteLine(&quot;Text Element {0} ({1}..{2})= {3}&quot;, i, \n               teIndices[i], str.Length - 1, \n               ShowHexValues(str.Substring(teIndices[i])));\n      }\n      Console.WriteLine();\n\n      // Parse the string with the GetTextElementEnumerator method.\n      Console.WriteLine(&quot;Parsing with TextElementEnumerator:&quot;);\n      teEnum = StringInfo.GetTextElementEnumerator(str);\n\n      int teCount = - 1;\n\n      while (teEnum.MoveNext()) {\n         // Displays the current element.\n         // Both GetTextElement() and Current retrieve the current\n         // text element. The latter returns it as an Object.\n         teCount++;\n         Console.WriteLine(&quot;Text Element {0} ({1}..{2})= {3}&quot;, teCount, \n            teEnum.ElementIndex, teEnum.ElementIndex + \n            teEnum.GetTextElement().Length - 1, ShowHexValues((string)(teEnum.Current)));\n      }\n   }\n   \n   private static string ShowHexValues(string s)\n   {\n      string hexString = &quot;&quot;;\n      foreach (var ch in s)\n         hexString += String.Format(&quot;{0:X4} &quot;, Convert.ToUInt16(ch));\n\n      return hexString;\n   }\n}\n// The example displays the following output:\n//       Parsing with ParseCombiningCharacters:\n//       Text Element 0 (0..2)= 0627 0655 0650\n//       Text Element 1 (3..3)= 064A\n//       Text Element 2 (4..5)= 0647 064E\n//       Text Element 3 (6..6)= 0627\n//       Text Element 4 (7..8)= 0628 064C\n//       \n//       Parsing with TextElementEnumerator:\n//       Text Element 0 (0..2)= 0627 0655 0650\n//       Text Element 1 (3..3)= 064A\n//       Text Element 2 (4..5)= 0647 064E\n//       Text Element 3 (6..6)= 0627\n//       Text Element 4 (7..8)= 0628 064C\n//       \n//       Parsing with ParseCombiningCharacters:\n//       Text Element 0 (0..1)= D800 DD48\n//       Text Element 1 (2..3)= D840 DC26\n//       Text Element 2 (4..4)= 0061\n//       Text Element 3 (5..6)= DB84 DC01\n//       \n//       Parsing with TextElementEnumerator:\n//       Text Element 0 (0..1)= D800 DD48\n//       Text Element 1 (2..3)= D840 DC26\n//       Text Element 2 (4..4)= 0061\n//       Text Element 3 (5..6)= DB84 DC01\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.StringInfo.Class#1\">Imports System.Globalization\n\nPublic Module Example\n   Public Sub Main()\n      &#39; The Unicode code points specify Arabic base characters and \n      &#39; combining character sequences.\n      Dim strCombining As String = ChrW(&amp;H627) &amp; ChrW(&amp;h0655) + ChrW(&amp;H650) &amp; \n              ChrW(&amp;H64A) &amp; ChrW(&amp;H647) &amp; ChrW(&amp;H64E) &amp; ChrW(&amp;H627) &amp; \n              ChrW(&amp;H628) &amp; ChrW(&amp;H64C)\n\n      &#39; The Unicode code points specify private surrogate pairs.\n      Dim strSurrogates As String = Char.ConvertFromUtf32(&amp;h10148) +\n                                    Char.ConvertFromUtf32(&amp;h20026) + &quot;a&quot; +\n                                    Char.ConvertFromUtf32(&amp;hF1001)\n      \n      EnumerateTextElements(strCombining)\n      EnumerateTextElements(strSurrogates)\n   End Sub\n\n   Public Sub EnumerateTextElements(str As String)\n      &#39; Get the Enumerator.\n      Dim teEnum As TextElementEnumerator = Nothing      \n\n      &#39; Parse the string using the ParseCombiningCharacters method.\n      Console.WriteLine()\n      Console.WriteLine(&quot;Parsing with ParseCombiningCharacters:&quot;)\n      Dim teIndices As Integer() = StringInfo.ParseCombiningCharacters(str)\n      \n      For i As Integer = 0 To teIndices.Length - 1\n         If i &lt; teIndices.Length - 1 Then\n            Console.WriteLine(&quot;Text Element {0} ({1}..{2})= {3}&quot;, i, \n               TEIndices(i), TEIndices((i + 1)) - 1, \n               ShowHexValues(str.Substring(TEIndices(i), TEIndices((i + 1)) - \n                             teIndices(i))))\n         Else\n            Console.WriteLine(&quot;Text Element {0} ({1}..{2})= {3}&quot;, i, \n               teIndices(i), str.Length - 1, \n               ShowHexValues(str.Substring(teIndices(i))))\n         End If\n      Next\n      Console.WriteLine()\n\n      &#39; Parse the string with the GetTextElementEnumerator method.\n      Console.WriteLine(&quot;Parsing with TextElementEnumerator:&quot;)\n      teEnum = StringInfo.GetTextElementEnumerator(str)\n\n      Dim TECount As Integer = - 1\n\n      While teEnum.MoveNext()\n         &#39; Prints the current element.\n         &#39; Both GetTextElement() and Current retrieve the current\n         &#39; text element. The latter returns it as an Object.\n         TECount += 1\n         Console.WriteLine(&quot;Text Element {0} ({1}..{2})= {3}&quot;, teCount, \n            teEnum.ElementIndex, teEnum.ElementIndex + \n            teEnum.GetTextElement().Length - 1, ShowHexValues(CStr(teEnum.Current)))\n      End While\n   End Sub\n   \n   Private Function ShowHexValues(s As String) As String\n      Dim hexString As String = &quot;&quot;\n      For Each ch In s\n         hexString += String.Format(&quot;{0:X4} &quot;, Convert.ToUInt16(ch))\n      Next\n      Return hexString\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Parsing with ParseCombiningCharacters:\n&#39;       Text Element 0 (0..2)= 0627 0655 0650\n&#39;       Text Element 1 (3..3)= 064A\n&#39;       Text Element 2 (4..5)= 0647 064E\n&#39;       Text Element 3 (6..6)= 0627\n&#39;       Text Element 4 (7..8)= 0628 064C\n&#39;       \n&#39;       Parsing with TextElementEnumerator:\n&#39;       Text Element 0 (0..2)= 0627 0655 0650\n&#39;       Text Element 1 (3..3)= 064A\n&#39;       Text Element 2 (4..5)= 0647 064E\n&#39;       Text Element 3 (6..6)= 0627\n&#39;       Text Element 4 (7..8)= 0628 064C\n&#39;       \n&#39;       Parsing with ParseCombiningCharacters:\n&#39;       Text Element 0 (0..1)= D800 DD48\n&#39;       Text Element 1 (2..3)= D840 DC26\n&#39;       Text Element 2 (4..4)= 0061\n&#39;       Text Element 3 (5..6)= DB84 DC01\n&#39;       \n&#39;       Parsing with TextElementEnumerator:\n&#39;       Text Element 0 (0..1)= D800 DD48\n&#39;       Text Element 1 (2..3)= D840 DC26\n&#39;       Text Element 2 (4..4)= 0061\n&#39;       Text Element 3 (5..6)= DB84 DC01\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo__ctor\" data-linktype=\"self-bookmark\">StringInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo__ctor_System_String_\" data-linktype=\"self-bookmark\">StringInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class to a specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_LengthInTextElements\" data-linktype=\"self-bookmark\">LengthInTextElements</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of text elements in the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_String\" data-linktype=\"self-bookmark\">String</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates a hash code for the value of the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_GetNextTextElement_System_String_\" data-linktype=\"self-bookmark\">GetNextTextElement(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the first text element in a specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_GetNextTextElement_System_String_System_Int32_\" data-linktype=\"self-bookmark\">GetNextTextElement(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the text element at the specified index of the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_GetTextElementEnumerator_System_String_\" data-linktype=\"self-bookmark\">GetTextElementEnumerator(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the text elements of the entire string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_GetTextElementEnumerator_System_String_System_Int32_\" data-linktype=\"self-bookmark\">GetTextElementEnumerator(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the text elements of the string, starting at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_ParseCombiningCharacters_System_String_\" data-linktype=\"self-bookmark\">ParseCombiningCharacters(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the indexes of each base character, high surrogate, or control character within the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_SubstringByTextElements_System_Int32_\" data-linktype=\"self-bookmark\">SubstringByTextElements(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a substring of text elements from the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object starting from a specified text element and continuing through the last text element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_StringInfo_SubstringByTextElements_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SubstringByTextElements(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a substring of text elements from the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object starting from a specified text element and continuing through the specified number of text elements.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo__ctor\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the new <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object is initialized to the empty string (&quot;&quot;). You can assign another string to it by using the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_String_\" data-linktype=\"relative-path\">String</a> property.  You can also instantiate a <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object that represents a specified string in a single step by calling the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo__ctor_System_String_\" data-linktype=\"relative-path\">StringInfo(String)</a> constructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class to a specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringInfo (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string to initialize this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor assigns the value argument to the object&#39;s <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_String_\" data-linktype=\"relative-path\">String</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_LengthInTextElements\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_LengthInTextElements_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LengthInTextElements</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of text elements in the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LengthInTextElements { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of base characters, surrogate pairs, and combining character sequences in this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_String\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_String_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string String { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string that is the value of the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object is instantiated, its String property is set to one of the following values:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> if the default  <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo__ctor\" data-linktype=\"relative-path\">StringInfo()</a> is called. You should then use the String property to assign the string that this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object rperesents.  </p>\n</li>\n<li><p>The string supplied as the <code>value</code> argument to the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo__ctor_System_String_\" data-linktype=\"relative-path\">StringInfo(String)</a> constructor.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter is a <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object and its <span class=\"xref\">stem.Globalization.StringInfo.String*</span> property equals the <span class=\"xref\">stem.Globalization.StringInfo.String*</span> property of this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Calculates a hash code for the value of the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code based on the string value of this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior of GetHashCode is dependent on its implementation, which might change from one version of the common language runtime to another. This might happen to improve the performance of GetHashCode. To make the behavior of GetHashCode constant, the application should override the runtime implementation of GetHashCode with an implementation known to never change.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_GetNextTextElement_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_GetNextTextElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNextTextElement(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the first text element in a specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetNextTextElement (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string from which to get the text element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the first text element in the specified string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character.  </p>\n<p> This method only returns the first text element. To iterate through the text elements of the string, the application should use the <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> object generated by the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_GetTextElementEnumerator_\" data-linktype=\"relative-path\">GetTextElementEnumerator</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_GetNextTextElement_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_GetNextTextElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNextTextElement(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the text element at the specified index of the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetNextTextElement (string str, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string from which to get the text element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which the text element starts.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the text element at the specified index of the specified string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for <code>str</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character.  </p>\n<p> This method only returns the first text element of the substring that starts at the specified index. To iterate through the text elements of the string, the application should use the <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> generated by the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_GetTextElementEnumerator_\" data-linktype=\"relative-path\">GetTextElementEnumerator</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_GetTextElementEnumerator_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_GetTextElementEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTextElementEnumerator(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the text elements of the entire string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.TextElementEnumerator GetTextElementEnumerator (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to iterate through.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> for the entire string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character.  </p>\n<p> The text element enumerator is used only to read data in the string; it cannot modify the underlying string. The enumerator does not have exclusive access to the string.  </p>\n<p> The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string. When the enumerator is in an invalid state, calling <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception.  </p>\n<p> Initially, the enumerator is positioned before the first text element in the string. <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position. Therefore, after an enumerator is created or after <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called, <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> must be called to advance the enumerator to the first text element of the string before reading the value of <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called.  </p>\n<p> After the end of the string is passed, the enumerator is again in an invalid state and calling <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. Calling <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception if the last call to <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling the GetTextElementEnumerator method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"stringinfo#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\npublic sealed class App {\n   static void Main() {\n      // The string below contains combining characters.\n      String s = &quot;a\\u0304\\u0308bc\\u0327&quot;;\n\n      // Show each &#39;character&#39; in the string.\n      EnumTextElements(s);\n\n      // Show the index in the string where each &#39;character&#39; starts.\n      EnumTextElementIndexes(s);\n   }\n\n   // Show how to enumerate each real character (honoring surrogates) in a string.\n   static void EnumTextElements(String s) {\n      // This StringBuilder holds the output results.\n      StringBuilder sb = new StringBuilder();\n\n      // Use the enumerator returned from GetTextElementEnumerator \n      // method to examine each real character.\n      TextElementEnumerator charEnum = StringInfo.GetTextElementEnumerator(s);\n      while (charEnum.MoveNext()) {\n         sb.AppendFormat(\n           &quot;Character at index {0} is &#39;{1}&#39;{2}&quot;,\n           charEnum.ElementIndex, charEnum.GetTextElement(),\n           Environment.NewLine);\n      }\n\n      // Show the results.\n      Console.WriteLine(&quot;Result of GetTextElementEnumerator:&quot;);\n      Console.WriteLine(sb);\n   }\n\n   // Show how to discover the index of each real character (honoring surrogates) in a string.\n   static void EnumTextElementIndexes(String s) {\n      // This StringBuilder holds the output results.\n      StringBuilder sb = new StringBuilder();\n\n      // Use the ParseCombiningCharacters method to \n      // get the index of each real character in the string.\n      Int32[] textElemIndex = StringInfo.ParseCombiningCharacters(s);\n\n      // Iterate through each real character showing the character and the index where it was found.\n      for (Int32 i = 0; i &lt; textElemIndex.Length; i++) {\n         sb.AppendFormat(\n            &quot;Character {0} starts at index {1}{2}&quot;,\n            i, textElemIndex[i], Environment.NewLine);\n      }\n\n      // Show the results.\n      Console.WriteLine(&quot;Result of ParseCombiningCharacters:&quot;);\n      Console.WriteLine(sb);\n   }\n}\n\n// This code produces the following output.\n//\n// Result of GetTextElementEnumerator:\n// Character at index 0 is &#39;a-&quot;&#39;\n// Character at index 3 is &#39;b&#39;\n// Character at index 4 is &#39;c,&#39;\n// \n// Result of ParseCombiningCharacters:\n// Character 0 starts at index 0\n// Character 1 starts at index 3\n// Character 2 starts at index 4\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringinfo#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\n\n\n// Show how to enumerate each real character (honoring surrogates)\n// in a string.\n\nvoid EnumTextElements(String^ combiningChars)\n{\n    // This StringBuilder holds the output results.\n    StringBuilder^ sb = gcnew StringBuilder();\n\n    // Use the enumerator returned from GetTextElementEnumerator\n    // method to examine each real character.\n    TextElementEnumerator^ charEnum =\n        StringInfo::GetTextElementEnumerator(combiningChars);\n    while (charEnum-&gt;MoveNext())\n    {\n        sb-&gt;AppendFormat(&quot;Character at index {0} is &#39;{1}&#39;{2}&quot;, \n            charEnum-&gt;ElementIndex, charEnum-&gt;GetTextElement(), \n            Environment::NewLine);\n    }\n\n    // Show the results.\n    Console::WriteLine(&quot;Result of GetTextElementEnumerator:&quot;);\n    Console::WriteLine(sb);\n}\n\n\n// Show how to discover the index of each real character\n// (honoring surrogates) in a string.\n\nvoid EnumTextElementIndexes(String^ combiningChars)\n{\n    // This StringBuilder holds the output results.\n    StringBuilder^ sb = gcnew StringBuilder();\n\n    // Use the ParseCombiningCharacters method to\n    // get the index of each real character in the string.\n    array &lt;int&gt;^ textElemIndex =\n        StringInfo::ParseCombiningCharacters(combiningChars);\n\n    // Iterate through each real character showing the character\n    // and the index where it was found.\n    for (int i = 0; i &lt; textElemIndex-&gt;Length; i++)\n    {\n        sb-&gt;AppendFormat(&quot;Character {0} starts at index {1}{2}&quot;,\n            i, textElemIndex[i], Environment::NewLine);\n    }\n\n    // Show the results.\n    Console::WriteLine(&quot;Result of ParseCombiningCharacters:&quot;);\n    Console::WriteLine(sb);\n}\n\nint main()\n{\n\n    // The string below contains combining characters.\n    String^ combiningChars = L&quot;a\\u0304\\u0308bc\\u0327&quot;;\n\n    // Show each &#39;character&#39; in the string.\n    EnumTextElements(combiningChars);\n\n    // Show the index in the string where each &#39;character&#39; starts.\n    EnumTextElementIndexes(combiningChars);\n\n};\n\n// This code produces the following output.\n//\n// Result of GetTextElementEnumerator:\n// Character at index 0 is &#39;a-&quot;&#39;\n// Character at index 3 is &#39;b&#39;\n// Character at index 4 is &#39;c,&#39;\n//\n// Result of ParseCombiningCharacters:\n// Character 0 starts at index 0\n// Character 1 starts at index 3\n// Character 2 starts at index 4\n</code></pre><pre><code class=\"lang-vb\" name=\"stringinfo#1\">Imports System.Text\nImports System.Globalization\n\nPublic Module Example\n   Public Sub Main()\n      &#39; The string below contains combining characters.\n      Dim s As String = &quot;a&quot; + ChrW(&amp;h0304) + ChrW(&amp;h0308) + &quot;bc&quot; + ChrW(&amp;h0327)\n\n      &#39; Show each &#39;character&#39; in the string.\n      EnumTextElements(s)\n\n      &#39; Show the index in the string where each &#39;character&#39; starts.\n      EnumTextElementIndexes(s)\n   End Sub\n\n   &#39; Show how to enumerate each real character (honoring surrogates) in a string.\n   Sub EnumTextElements(s As String)\n      &#39; This StringBuilder holds the output results.\n      Dim sb As New StringBuilder()\n\n      &#39; Use the enumerator returned from GetTextElementEnumerator \n      &#39; method to examine each real character.\n      Dim charEnum As TextElementEnumerator = StringInfo.GetTextElementEnumerator(s)\n      Do While charEnum.MoveNext()\n         sb.AppendFormat(&quot;Character at index {0} is &#39;{1}&#39;{2}&quot;,\n                         charEnum.ElementIndex, \n                         charEnum.GetTextElement(),\n                         Environment.NewLine)\n      Loop\n\n      &#39; Show the results.\n      Console.WriteLine(&quot;Result of GetTextElementEnumerator:&quot;)\n      Console.WriteLine(sb)\n   End Sub\n\n   &#39; Show how to discover the index of each real character (honoring surrogates) in a string.\n   Sub EnumTextElementIndexes(s As String)\n      &#39; This StringBuilder holds the output results.\n      Dim sb As New StringBuilder()\n\n      &#39; Use the ParseCombiningCharacters method to \n      &#39; get the index of each real character in the string.\n      Dim textElemIndex() As Integer = StringInfo.ParseCombiningCharacters(s)\n\n      &#39; Iterate through each real character showing the character and the index where it was found.\n      For i As Int32 = 0 To textElemIndex.Length - 1\n         sb.AppendFormat(&quot;Character {0} starts at index {1}{2}&quot;,\n                         i, textElemIndex(i), Environment.NewLine)\n      Next\n\n      &#39; Show the results.\n      Console.WriteLine(&quot;Result of ParseCombiningCharacters:&quot;)\n      Console.WriteLine(sb)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Result of GetTextElementEnumerator:\n&#39;       Character at index 0 is &#39;a-&quot;&#39;\n&#39;       Character at index 3 is &#39;b&#39;\n&#39;       Character at index 4 is &#39;c,&#39;\n&#39;       \n&#39;       Result of ParseCombiningCharacters:\n&#39;       Character 0 starts at index 0\n&#39;       Character 1 starts at index 3\n&#39;       Character 2 starts at index 4\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_GetTextElementEnumerator_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_GetTextElementEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTextElementEnumerator(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the text elements of the string, starting at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.TextElementEnumerator GetTextElementEnumerator (string str, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to iterate through.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which to start iterating.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> for the string starting at <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for <code>str</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character.  </p>\n<p> The text element enumerator is used only to read data in the string; it cannot modify the underlying string. The enumerator does not have exclusive access to the string.  </p>\n<p> The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string. When the enumerator is in an invalid state, calling <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception.  </p>\n<p> Initially, the enumerator is positioned before the first text element in the string. <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position. Therefore, after an enumerator is created or after <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called, <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> must be called to advance the enumerator to the first text element of the string before reading the value of <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called.  </p>\n<p> After the end of the string is passed, the enumerator is again in an invalid state and calling <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. Calling <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception if the last call to <a class=\"xref\" href=\"system.globalization.textelementenumerator#System_Globalization_TextElementEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_ParseCombiningCharacters_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_ParseCombiningCharacters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParseCombiningCharacters(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the indexes of each base character, high surrogate, or control character within the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int[] ParseCombiningCharacters (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </div>\r\n                  <p>An array of integers that contains the zero-based indexes of each base character, high surrogate, or control character within the specified string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate. A high surrogate is a Unicode code point in the range U+D800 through U+DBFF and a low surrogate is a Unicode code point in the range U+DC00 through U+DFFF.  </p>\n<p> A control character is a character for which the Unicode value is U+007F or in the range U+0000 through U+001F or U+0080 through U+009F.  </p>\n<p> The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be a base character, a surrogate pair, or a combining character sequence. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> defines a combining character sequence as a combination of a base character and one or more combining characters. A surrogate pair can represent a base character or a combining character.  </p>\n<p> If a combining character sequence is invalid, every combining character in that sequence is also returned.  </p>\n<p> Each index in the resulting array is the beginning of a text element, that is, the index of the base character or the high surrogate.  </p>\n<p> The length of each element is easily computed as the difference between successive indexes. The length of the array will always be less than or equal to the length of the string. For example, given the string &quot;\\u4f00\\u302a\\ud800\\udc00\\u4f01&quot;, this method returns the indexes 0, 2, and 4.  </p>\n<h2 id=\"equivalent-members\">Equivalent Members</h2>\n<p> Starting in version 2.0 of the .NET Framework, the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_SubstringByTextElements_\" data-linktype=\"relative-path\">SubstringByTextElements</a> method and <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_LengthInTextElements_\" data-linktype=\"relative-path\">LengthInTextElements</a> property provide an easy to use implementation of the functionality offered by the ParseCombiningCharacters method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling the ParseCombiningCharacters method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"stringinfo#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\npublic sealed class App {\n   static void Main() {\n      // The string below contains combining characters.\n      String s = &quot;a\\u0304\\u0308bc\\u0327&quot;;\n\n      // Show each &#39;character&#39; in the string.\n      EnumTextElements(s);\n\n      // Show the index in the string where each &#39;character&#39; starts.\n      EnumTextElementIndexes(s);\n   }\n\n   // Show how to enumerate each real character (honoring surrogates) in a string.\n   static void EnumTextElements(String s) {\n      // This StringBuilder holds the output results.\n      StringBuilder sb = new StringBuilder();\n\n      // Use the enumerator returned from GetTextElementEnumerator \n      // method to examine each real character.\n      TextElementEnumerator charEnum = StringInfo.GetTextElementEnumerator(s);\n      while (charEnum.MoveNext()) {\n         sb.AppendFormat(\n           &quot;Character at index {0} is &#39;{1}&#39;{2}&quot;,\n           charEnum.ElementIndex, charEnum.GetTextElement(),\n           Environment.NewLine);\n      }\n\n      // Show the results.\n      Console.WriteLine(&quot;Result of GetTextElementEnumerator:&quot;);\n      Console.WriteLine(sb);\n   }\n\n   // Show how to discover the index of each real character (honoring surrogates) in a string.\n   static void EnumTextElementIndexes(String s) {\n      // This StringBuilder holds the output results.\n      StringBuilder sb = new StringBuilder();\n\n      // Use the ParseCombiningCharacters method to \n      // get the index of each real character in the string.\n      Int32[] textElemIndex = StringInfo.ParseCombiningCharacters(s);\n\n      // Iterate through each real character showing the character and the index where it was found.\n      for (Int32 i = 0; i &lt; textElemIndex.Length; i++) {\n         sb.AppendFormat(\n            &quot;Character {0} starts at index {1}{2}&quot;,\n            i, textElemIndex[i], Environment.NewLine);\n      }\n\n      // Show the results.\n      Console.WriteLine(&quot;Result of ParseCombiningCharacters:&quot;);\n      Console.WriteLine(sb);\n   }\n}\n\n// This code produces the following output.\n//\n// Result of GetTextElementEnumerator:\n// Character at index 0 is &#39;a-&quot;&#39;\n// Character at index 3 is &#39;b&#39;\n// Character at index 4 is &#39;c,&#39;\n// \n// Result of ParseCombiningCharacters:\n// Character 0 starts at index 0\n// Character 1 starts at index 3\n// Character 2 starts at index 4\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringinfo#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\n\n\n// Show how to enumerate each real character (honoring surrogates)\n// in a string.\n\nvoid EnumTextElements(String^ combiningChars)\n{\n    // This StringBuilder holds the output results.\n    StringBuilder^ sb = gcnew StringBuilder();\n\n    // Use the enumerator returned from GetTextElementEnumerator\n    // method to examine each real character.\n    TextElementEnumerator^ charEnum =\n        StringInfo::GetTextElementEnumerator(combiningChars);\n    while (charEnum-&gt;MoveNext())\n    {\n        sb-&gt;AppendFormat(&quot;Character at index {0} is &#39;{1}&#39;{2}&quot;, \n            charEnum-&gt;ElementIndex, charEnum-&gt;GetTextElement(), \n            Environment::NewLine);\n    }\n\n    // Show the results.\n    Console::WriteLine(&quot;Result of GetTextElementEnumerator:&quot;);\n    Console::WriteLine(sb);\n}\n\n\n// Show how to discover the index of each real character\n// (honoring surrogates) in a string.\n\nvoid EnumTextElementIndexes(String^ combiningChars)\n{\n    // This StringBuilder holds the output results.\n    StringBuilder^ sb = gcnew StringBuilder();\n\n    // Use the ParseCombiningCharacters method to\n    // get the index of each real character in the string.\n    array &lt;int&gt;^ textElemIndex =\n        StringInfo::ParseCombiningCharacters(combiningChars);\n\n    // Iterate through each real character showing the character\n    // and the index where it was found.\n    for (int i = 0; i &lt; textElemIndex-&gt;Length; i++)\n    {\n        sb-&gt;AppendFormat(&quot;Character {0} starts at index {1}{2}&quot;,\n            i, textElemIndex[i], Environment::NewLine);\n    }\n\n    // Show the results.\n    Console::WriteLine(&quot;Result of ParseCombiningCharacters:&quot;);\n    Console::WriteLine(sb);\n}\n\nint main()\n{\n\n    // The string below contains combining characters.\n    String^ combiningChars = L&quot;a\\u0304\\u0308bc\\u0327&quot;;\n\n    // Show each &#39;character&#39; in the string.\n    EnumTextElements(combiningChars);\n\n    // Show the index in the string where each &#39;character&#39; starts.\n    EnumTextElementIndexes(combiningChars);\n\n};\n\n// This code produces the following output.\n//\n// Result of GetTextElementEnumerator:\n// Character at index 0 is &#39;a-&quot;&#39;\n// Character at index 3 is &#39;b&#39;\n// Character at index 4 is &#39;c,&#39;\n//\n// Result of ParseCombiningCharacters:\n// Character 0 starts at index 0\n// Character 1 starts at index 3\n// Character 2 starts at index 4\n</code></pre><pre><code class=\"lang-vb\" name=\"stringinfo#1\">Imports System.Text\nImports System.Globalization\n\nPublic Module Example\n   Public Sub Main()\n      &#39; The string below contains combining characters.\n      Dim s As String = &quot;a&quot; + ChrW(&amp;h0304) + ChrW(&amp;h0308) + &quot;bc&quot; + ChrW(&amp;h0327)\n\n      &#39; Show each &#39;character&#39; in the string.\n      EnumTextElements(s)\n\n      &#39; Show the index in the string where each &#39;character&#39; starts.\n      EnumTextElementIndexes(s)\n   End Sub\n\n   &#39; Show how to enumerate each real character (honoring surrogates) in a string.\n   Sub EnumTextElements(s As String)\n      &#39; This StringBuilder holds the output results.\n      Dim sb As New StringBuilder()\n\n      &#39; Use the enumerator returned from GetTextElementEnumerator \n      &#39; method to examine each real character.\n      Dim charEnum As TextElementEnumerator = StringInfo.GetTextElementEnumerator(s)\n      Do While charEnum.MoveNext()\n         sb.AppendFormat(&quot;Character at index {0} is &#39;{1}&#39;{2}&quot;,\n                         charEnum.ElementIndex, \n                         charEnum.GetTextElement(),\n                         Environment.NewLine)\n      Loop\n\n      &#39; Show the results.\n      Console.WriteLine(&quot;Result of GetTextElementEnumerator:&quot;)\n      Console.WriteLine(sb)\n   End Sub\n\n   &#39; Show how to discover the index of each real character (honoring surrogates) in a string.\n   Sub EnumTextElementIndexes(s As String)\n      &#39; This StringBuilder holds the output results.\n      Dim sb As New StringBuilder()\n\n      &#39; Use the ParseCombiningCharacters method to \n      &#39; get the index of each real character in the string.\n      Dim textElemIndex() As Integer = StringInfo.ParseCombiningCharacters(s)\n\n      &#39; Iterate through each real character showing the character and the index where it was found.\n      For i As Int32 = 0 To textElemIndex.Length - 1\n         sb.AppendFormat(&quot;Character {0} starts at index {1}{2}&quot;,\n                         i, textElemIndex(i), Environment.NewLine)\n      Next\n\n      &#39; Show the results.\n      Console.WriteLine(&quot;Result of ParseCombiningCharacters:&quot;)\n      Console.WriteLine(sb)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Result of GetTextElementEnumerator:\n&#39;       Character at index 0 is &#39;a-&quot;&#39;\n&#39;       Character at index 3 is &#39;b&#39;\n&#39;       Character at index 4 is &#39;c,&#39;\n&#39;       \n&#39;       Result of ParseCombiningCharacters:\n&#39;       Character 0 starts at index 0\n&#39;       Character 1 starts at index 3\n&#39;       Character 2 starts at index 4\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_SubstringByTextElements_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_SubstringByTextElements_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubstringByTextElements(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a substring of text elements from the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object starting from a specified text element and continuing through the last text element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SubstringByTextElements (int startingTextElement);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startingTextElement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of a text element in this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A substring of text elements in this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object, starting from the text element index specified by the <code>startingTextElement</code> parameter and continuing through the last text element in this object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startingTextElement</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The string that is the value of the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object is the empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Consider a string that consists of five text elements, indexed from 0 through 4. If the <code>startingTextElement</code> parameter is 1, the  SubstringByTextElements method returns a substring that consists of the text elements for which the indexes are 1, 2, 3, and 4.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_StringInfo_SubstringByTextElements_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_StringInfo_SubstringByTextElements_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubstringByTextElements(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a substring of text elements from the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object starting from a specified text element and continuing through the specified number of text elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SubstringByTextElements (int startingTextElement, int lengthInTextElements);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startingTextElement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of a text element in this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lengthInTextElements</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of text elements to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A substring of text elements in this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object. The substring consists of the number of text elements specified by the <code>lengthInTextElements</code> parameter and starts from the text element index specified by the <code>startingTextElement</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startingTextElement</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startingTextElement</code> is greater than or equal to the length of the string that is the value of the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.  </p>\n<p> -or-  </p>\n<p> <code>lengthInTextElements</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The string that is the value of the current <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object is the empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> <code>startingTextElement</code> + <code>lengthInTextElements</code> specify an index that is greater than the number of text elements in this <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Consider a string that consists of five text elements, indexed from 0 through 4. If the <code>startingTextElement</code> parameter is 1 and the <code>lengthInTextElements</code> parameter is 3, the SubstringByTextElements method returns a substring that consists of the text elements for which the indexes are 1, 2, and 3.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.StringInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.StringInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo.GetNextTextElement\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo.GetTextElementEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo.LengthInTextElements\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo.ParseCombiningCharacters\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo.String\">\r\n<meta name=\"APIName\" content=\"System.Globalization.StringInfo.SubstringByTextElements\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2bffc8cd-dec8-5585-d1d8-78c556fff158\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides functionality to split a string into text elements and to iterate through those text elements.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.StringInfo\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.StringInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.StringInfo.yml","open_to_public_contributors":true,"api_name":["System.Globalization.StringInfo","System.Globalization.StringInfo..ctor","System.Globalization.StringInfo.Equals","System.Globalization.StringInfo.GetHashCode","System.Globalization.StringInfo.GetNextTextElement","System.Globalization.StringInfo.GetTextElementEnumerator","System.Globalization.StringInfo.LengthInTextElements","System.Globalization.StringInfo.ParseCombiningCharacters","System.Globalization.StringInfo.String","System.Globalization.StringInfo.SubstringByTextElements"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.StringInfo","System::Globalization::StringInfo","System.Globalization.StringInfo.#ctor","System::Globalization::StringInfo::#ctor","System.Globalization.StringInfo.Equals","System::Globalization::StringInfo::Equals","System.Globalization.StringInfo.GetHashCode","System::Globalization::StringInfo::GetHashCode","System.Globalization.StringInfo.GetNextTextElement","System::Globalization::StringInfo::GetNextTextElement","System.Globalization.StringInfo.GetTextElementEnumerator","System::Globalization::StringInfo::GetTextElementEnumerator","System.Globalization.StringInfo.LengthInTextElements","System::Globalization::StringInfo::LengthInTextElements","System.Globalization.StringInfo.ParseCombiningCharacters","System::Globalization::StringInfo::ParseCombiningCharacters","System.Globalization.StringInfo.String","System::Globalization::StringInfo::String","System.Globalization.StringInfo.SubstringByTextElements","System::Globalization::StringInfo::SubstringByTextElements"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2bffc8cd-dec8-5585-d1d8-78c556fff158","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/StringInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StringInfo class | Microsoft Docs","_op_ogTitle":"StringInfo class","description":"Provides functionality to split a string into text elements and to iterate through those text elements.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.StringInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.stringinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.stringinfo","fileRelativePath":"System.Globalization.StringInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}