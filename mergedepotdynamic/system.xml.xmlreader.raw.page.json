{"content":"    \r\n    <h1 id=\"System_Xml_XmlReader\">\r\n      <span class=\"lang-csharp\">XmlReader</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a reader that provides fast, noncached, forward-only access to XML data.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Core/XmlReader.cs#086471e5cca0825f\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;{debuggerDisplayProxy}&quot;)]\n[System.Diagnostics.DebuggerDisplay(&quot;{debuggerDisplayProxy}&quot;)]\npublic abstract class XmlReader : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlReader</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Core/XmlReader.cs#086471e5cca0825f\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> XmlReader provides forward-only, read-only access to XML data in adocument or stream. This class conforms to the W3C <a href=\"http://www.w3.org/TR/2006/REC-xml-20060816/\" data-linktype=\"external\">Extensible Markup Language (XML) 1.0 (fourth edition)</a> and the <a href=\"http://www.w3.org/TR/REC-xml-names/\" data-linktype=\"external\">Namespaces in XML 1.0 (third edition)</a> recommendations.  </p>\n<p> XmlReadermethods let you move through XML data and read the contents of a node. The properties of the class reflect the value of the current node, which is where the reader is positioned.The <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadState_\" data-linktype=\"relative-path\">ReadState</a> property value indicates the current state of the XML reader. For example, the property is set to <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a> by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> method and <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a> by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Close_\" data-linktype=\"relative-path\">Close</a> method. XmlReader also provides data conformance checks and validation against a DTD or schema.  </p>\n<p> XmlReaderuses a pull model to retrieve data. This model:  </p>\n<ul>\n<li><p>Simplifies state management by a natural, top-down procedural refinement.  </p>\n</li>\n<li><p>Supports multiple input streams and layering.  </p>\n</li>\n<li><p>Enables the client to give the parser a buffer into which the string is directly written, and thus avoids the necessity of an extra string copy.  </p>\n</li>\n<li><p>Supports selective processing. The client can skip items and process those that are of interest to the application. You can also set properties in advance to manage how the XML stream is processed (for example, normalization).  </p>\n<p>In this section:  </p>\n<p><a href=\"#xmlreader_create\" data-linktype=\"self-bookmark\">Creating an XML reader</a><br><a href=\"#xmlreader_validate\" data-linktype=\"self-bookmark\">Validating XML data</a><br><a href=\"#xmlreader_data\" data-linktype=\"self-bookmark\">Data conformance</a><br><a href=\"#xmlreader_nodes\" data-linktype=\"self-bookmark\">Navigating through nodes</a><br><a href=\"#xmlreader_elements\" data-linktype=\"self-bookmark\">Reading XML elements</a><br><a href=\"#xmlreader_attributes\" data-linktype=\"self-bookmark\">Reading XML attributes</a><br><a href=\"#xmlreader_content\" data-linktype=\"self-bookmark\">Reading XML content</a><br><a href=\"#xmlreader_clr\" data-linktype=\"self-bookmark\">Converting to CLR types</a><br><a href=\"#xmlreader_async\" data-linktype=\"self-bookmark\">Asynchronous programming</a><br><a href=\"#xmlreader_security\" data-linktype=\"self-bookmark\">Security considerations</a>  </p>\n</li>\n</ul>\n<p><a name=\"xmlreader_create\"></a>   </p>\n<h2 id=\"creating-an-xml-reader\">Creating an XML reader</h2>\n<p> Use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method to create an XmlReaderinstance.  </p>\n<p> Although the .NET Framework provides concrete implementations of the XmlReader class, such as the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a>, <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a>, and the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> classes, we recommend that you use the specialized classes only in these scenarios:  </p>\n<ul>\n<li><p>When you want to readan XML DOM subtree from an <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object, use the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> class. (However, this class doesn&#39;t support DTD or schema validation.)  </p>\n</li>\n<li><p>If you must expand entities on request, you don&#39;t want your text content normalized, or you don&#39;t want default attributes returned, use the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class.  </p>\n<p>To specify the set of features you want to enable on the XML reader, pass an <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">System.Xml.XmlReaderSettings</a> object to the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method. You can use a single <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">System.Xml.XmlReaderSettings</a> object to create multiple readers with the same functionality, or modify the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">System.Xml.XmlReaderSettings</a>object to create a new reader with a different set of features. You can also easily add features to an existing reader.  </p>\n<p>If you don&#39;t use a<a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">System.Xml.XmlReaderSettings</a>object, default settings are used. See the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> reference page for details.  </p>\n<p>XmlReader throws an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> on XML parse errors. After an exception is thrown, the state of the reader is not predictable. For example, the reported node type may be different from the actual node type of the current node. Use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadState_\" data-linktype=\"relative-path\">ReadState</a> property to check whether the reader is in error state.  </p>\n</li>\n</ul>\n<p><a name=\"xmlreader_validate\"></a>   </p>\n<h2 id=\"validating-xml-data\">Validating XML data</h2>\n<p> To define the structure of an XML document and its element relationships, data types, and content constraints, you use a document type definition (DTD) or XML Schema definition language (XSD) schema. An XML document is considered to be well formed if it meets all the syntactical requirements defined by the <a href=\"http://www.w3.org/TR/2006/REC-xml-20060816/\" data-linktype=\"external\">W3C XML 1.0 Recommendation</a>. It&#39;s considered valid if it&#39;s well formed and also conforms to the constraints defined by its DTD or schema. (See the <a href=\"http://www.w3.org/TR/xmlschema-1/\" data-linktype=\"external\">W3C XML Schema Part 1: Structures</a> and the <a href=\"http://www.w3.org/TR/xmlschema-2/\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a>recommendations.) Therefore, although all valid XML documents are well formed, not all well-formed XML documents are valid.  </p>\n<p> You can validate the data against a DTD, an inline XSD Schema, or an XSD Schema stored in an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> object (a cache); these scenarios are described on the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> reference page. XmlReader doesn&#39;t support XML-Data Reduced (XDR) schema validation.  </p>\n<p> You use the following settings on the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class to specify what type of validation, if any, theXmlReader instance supports.  </p>\n<table>\n<thead>\n<tr>\n<th>Use this <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> member</th>\n<th>To specify</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_DtdProcessing_\" data-linktype=\"relative-path\">DtdProcessing</a> property</td>\n<td>Whether to allow DTD processing. The default is to disallow DTD processing.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_ValidationType_\" data-linktype=\"relative-path\">ValidationType</a> property</td>\n<td>Whether the reader should validate data, and what type of validation to perform (DTD or schema). The default is no data validation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_ValidationEventHandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> event</td>\n<td>An event handler for receiving information about validation events. If an event handler is not provided, an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> is thrown on the first validation error.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_ValidationFlags_\" data-linktype=\"relative-path\">ValidationFlags</a> property</td>\n<td>Additional validation options through the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationflags\" data-linktype=\"relative-path\">XmlSchemaValidationFlags</a> enumeration members:<br><br> -   <code>AllowXmlAttributes</code>-- Allow XML attributes (<code>xml:*</code>) in instance documents even when they&#39;re not defined in the schema. The attributes are validated based on their data type.See the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationflags\" data-linktype=\"relative-path\">XmlSchemaValidationFlags</a> reference page for  the setting to use in specific scenarios. (Disabled by default.)<br>-   <code>ProcessIdentityConstraints</code> --Process identity constraints (<code>xs:ID</code>, <code>xs:IDREF</code>, <code>xs:key</code>, <code>xs:keyref</code>, <code>xs:unique</code>) encountered during validation. (Enabled by default.)<br>-   <code>ProcessSchemaLocation</code> --Process schemas specified by the <code>xsi:schemaLocation</code> or <code>xsi:noNamespaceSchemaLocation</code> attribute. (Enabled by default.)<br>-   <code>ProcessInlineSchema</code>-- Process inline XML Schemas during validation. (Disabled by default.)<br>-   <code>ReportValidationWarnings</code>--Report events if a validation warning occurs. A warning is typically issued when there is no DTD or XML Schema to validate a particular element or attribute against. The <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_ValidationEventHandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> is used for notification. (Disabled by default.)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Schemas_\" data-linktype=\"relative-path\">Schemas</a></td>\n<td>The <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> to use for validation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property</td>\n<td>The <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a>for  resolving and accessing external resources. This can include external entities such as DTD and schemas, and any <code>xs:include</code> or <code>xs:import</code> elements contained in the XML Schema. If you don&#39;t specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a>, the XmlReader uses a default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no user credentials.</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"xmlreader_data\"></a>   </p>\n<h2 id=\"data-conformance\">Data conformance</h2>\n<p> XML readers that are created by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> methodmeet the following compliance requirements by default:  </p>\n<ul>\n<li><p>New lines and attribute value are normalized according to the W3C <a href=\"http://www.w3.org/TR/2006/REC-xml-20060816/\" data-linktype=\"external\">XML 1.0 Recommendation</a>.  </p>\n</li>\n<li><p>All entities are automatically expanded.  </p>\n</li>\n<li><p>Default attributes declared in the document type definition are always added even when the reader doesn&#39;t validate.  </p>\n</li>\n<li><p>Declaration of XML prefix mapped to the correct XML namespace URI is allowed.  </p>\n</li>\n<li><p>The notation names in a single <code>NotationType</code> attribute declaration and<code>NmTokens</code> in a single <code>Enumeration</code> attribute declarationare distinct.  </p>\n<p>Use these <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> properties to specify the type of conformance checks you want to enable:  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Use this <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> property</th>\n<th>To</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_CheckCharacters_\" data-linktype=\"relative-path\">CheckCharacters</a> property</td>\n<td>Enable or disable checks for the following:<br><br> -   Characters are within the range of legal XML characters, as defined by the <a href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#charsets\" data-linktype=\"external\">2.2 Characters</a> section of the W3C XML 1.0 Recommendation.<br>-   All XML names are valid, as defined by the <a href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name\" data-linktype=\"external\">2.3 Common Syntactic Constructs</a> section of the W3C XML 1.0 Recommendation.<br><br> When this property is set to <code>true</code> (default), an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> exception is thrown if the XML file contains illegal characters or invalid XML names (for example, an element name starts with a number).</td>\n<td>Character and name checking is enabled.<br><br> Setting <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_CheckCharacters_\" data-linktype=\"relative-path\">CheckCharacters</a> to <code>false</code> turns off character checking for character entity references. If the reader is processing text data, it always checks that XML names are valid, regardless of this setting. <strong>Note:</strong>  The XML 1.0 recommendation requires document-level conformance when a DTD is present. Therefore, if the reader is configured to support <a class=\"xref\" href=\"system.xml.conformancelevel\" data-linktype=\"relative-path\">System.Xml.ConformanceLevel</a>, but the XML data contains a document type definition (DTD), an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> is thrown.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_ConformanceLevel_\" data-linktype=\"relative-path\">ConformanceLevel</a> property</td>\n<td>Choose the level of conformance to enforce:<br><br> -   <a class=\"xref\" href=\"system.xml.conformancelevel\" data-linktype=\"relative-path\">ConformanceLevel</a>. Conforms to the rules for a <a href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed\" data-linktype=\"external\">well-formed XML 1.0 document</a>.<br>-   <a class=\"xref\" href=\"system.xml.conformancelevel\" data-linktype=\"relative-path\">ConformanceLevel</a>. Conforms to the rules for a well-formed document fragment that can be consumed as an <a href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities\" data-linktype=\"external\">external parsed entity</a>.<br>-   <a class=\"xref\" href=\"system.xml.conformancelevel\" data-linktype=\"relative-path\">ConformanceLevel</a>. Conforms to the level decided by the reader.<br><br> If the data isn&#39;t in conformance, an <a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a> exception is thrown.</td>\n<td><a class=\"xref\" href=\"system.xml.conformancelevel\" data-linktype=\"relative-path\">ConformanceLevel</a></td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"xmlreader_nodes\"></a>   </p>\n<h2 id=\"navigating-through-nodes\">Navigating through nodes</h2>\n<p> The current node is the XML node on which the XML reader is currently positioned. All XmlReadermethods perform operations in relation to this node, and all XmlReaderproperties reflect the value of the current node.  </p>\n<p> The following methods make it easy to navigate through nodes and parse data.  </p>\n<table>\n<thead>\n<tr>\n<th>Use this <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> method</th>\n<th>To</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a></td>\n<td>Read the first node, and advance through the stream one node at a time. Such calls are typically performed inside a <code>while</code> loop.<br><br> Use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_NodeType_\" data-linktype=\"relative-path\">NodeType</a> property to get the type (for example, attribute, comment, element, and so on) of the current node.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Skip_\" data-linktype=\"relative-path\">Skip</a></td>\n<td>Skip the children of the current node and move to the next node.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContent_\" data-linktype=\"relative-path\">MoveToContent</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContentAsync_\" data-linktype=\"relative-path\">MoveToContentAsync</a></td>\n<td>Skip non-content nodes and move to the next content node or to the end of the file.<br><br> Non-content nodes include <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, and <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.<br><br> Content nodes include non-white space text, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>, <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> , and<a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadSubtree_\" data-linktype=\"relative-path\">ReadSubtree</a></td>\n<td>Read an element and all its children, and return a new XmlReader instance set to <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">System.Xml.ReadState</a>.<br><br> This method is useful for creating boundaries around XML elements; for example, if you want to pass data to another component for processing and you want to limit how much of your data the component can access.</td>\n</tr>\n</tbody>\n</table>\n<p> See the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> reference page for an example of navigating through a text stream one node at a time and displaying the type of each node.  </p>\n<p> The following sections describe how you can read specific types of data, such as elements, attributes, and typed data.  </p>\n<p><a name=\"xmlreader_elements\"></a>   </p>\n<h2 id=\"reading-xml-elements\">Reading XML elements</h2>\n<p> The following table lists the methods and properties that the XmlReader class provides for processing elements. After the XmlReader is positioned on an element, the node properties, such as <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Name_\" data-linktype=\"relative-path\">Name</a>, reflect the element values. In addition to the members described below, any of the general methods and properties of the XmlReader class can also be used to process elements. For example, you can use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml_\" data-linktype=\"relative-path\">ReadInnerXml</a> method to read the contents of an element.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> See section 3.1 of the <a href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#sec-starttags\" data-linktype=\"external\">W3C XML 1.0 Recommendation</a> for definitions of start tags, end tags, and empty element tags.  </p>\n</div>\n<table>\n<thead>\n<tr>\n<th>Use this XmlReader member</th>\n<th>To</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_\" data-linktype=\"relative-path\">IsStartElement</a> method</td>\n<td>Check if the current node is a start tag or an empty element tag.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadStartElement_\" data-linktype=\"relative-path\">ReadStartElement</a> method</td>\n<td>Check that the current node is an element and advance the reader to the next node (calls <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_\" data-linktype=\"relative-path\">IsStartElement</a> followed by <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a>).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadEndElement_\" data-linktype=\"relative-path\">ReadEndElement</a> method</td>\n<td>Check that the current node is an end tag and advance the reader to the next node.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementString_\" data-linktype=\"relative-path\">ReadElementString</a> method</td>\n<td>Read a text-only element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToDescendant_\" data-linktype=\"relative-path\">ReadToDescendant</a> method</td>\n<td>Advance the XML reader to the next descendant (child) element that has the specified name.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadToNextSibling_\" data-linktype=\"relative-path\">ReadToNextSibling</a> method</td>\n<td>Advance the XML reader to the next sibling element that has the specified name.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsEmptyElement_\" data-linktype=\"relative-path\">IsEmptyElement</a> property</td>\n<td>Check if the current element has an end element tag. For example:<br><br> -   <code>&lt;item num=&quot;123&quot;/&gt;</code> (<a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsEmptyElement_\" data-linktype=\"relative-path\">IsEmptyElement</a> is <code>true</code>.)<br>-   <code>&lt;item num=&quot;123&quot;&gt; &lt;/item&gt;</code> (<a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsEmptyElement_\" data-linktype=\"relative-path\">IsEmptyElement</a> is <code>false</code>, although the element&#39;s content is empty.)</td>\n</tr>\n</tbody>\n</table>\n<p> For an example of reading the text content of elements, see the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadString_\" data-linktype=\"relative-path\">ReadString</a> method. The following example processes elements by using a <code>while</code> loop.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#10\">While reader.Read()\n  If reader.IsStartElement() Then\n    If reader.IsEmptyElement Then\n      Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n    Else\n      Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name)\n      reader.Read() &#39; Read the start tag.\n      If reader.IsStartElement() Then &#39; Handle nested elements.\n        Console.Write(vbCr + vbLf + &quot;&lt;{0}&gt;&quot;, reader.Name)\n      End If\n      Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n    End If\n  End If\nEnd While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#10\">while (reader.Read()) {\n  if (reader.IsStartElement()) {\n    if (reader.IsEmptyElement)\n      Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n    else {\n      Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n      reader.Read(); // Read the start tag.\n      if (reader.IsStartElement())  // Handle nested elements.\n        Console.Write(&quot;\\r\\n&lt;{0}&gt;&quot;, reader.Name);\n      Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n    }\n  } \n} \n</code></pre><p><a name=\"xmlreader_attributes\"></a>   </p>\n<h2 id=\"reading-xml-attributes\">Reading XML attributes</h2>\n<p> XML attributes are most commonly found on elements, but they&#39;re also allowed on XML declaration and document type nodes.  </p>\n<p> When positioned on an element node, the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a> method lets you go through the attribute list of the element. Note that after <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a> has been called, node properties such as <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> reflect the properties of that attribute, not the properties of the element the attribute belongs to.  </p>\n<p> The XmlReader class provides these methods and properties to read and process attributes on elements.  </p>\n<table>\n<thead>\n<tr>\n<th>Use this XmlReader member</th>\n<th>To</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_HasAttributes_\" data-linktype=\"relative-path\">HasAttributes</a> property</td>\n<td>Check whether the current node has any attributes.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_AttributeCount_\" data-linktype=\"relative-path\">AttributeCount</a> property</td>\n<td>Get the number of attributes on the current element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToFirstAttribute_\" data-linktype=\"relative-path\">MoveToFirstAttribute</a> method</td>\n<td>Move to the first attribute in an element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToNextAttribute_\" data-linktype=\"relative-path\">MoveToNextAttribute</a> method</td>\n<td>Move to the next attribute in an element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a> method</td>\n<td>Move to a specified attribute.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_GetAttribute_\" data-linktype=\"relative-path\">GetAttribute</a> method or <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_\" data-linktype=\"relative-path\">Item</a> property</td>\n<td>Get the value of a specified attribute.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsDefault_\" data-linktype=\"relative-path\">IsDefault</a> property</td>\n<td>Check whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToElement_\" data-linktype=\"relative-path\">MoveToElement</a> method</td>\n<td>Move to the element that owns the current attribute. Use this method to return to an element after navigating through its attributes.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadAttributeValue_\" data-linktype=\"relative-path\">ReadAttributeValue</a> method</td>\n<td>Parse the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code>nodes.</td>\n</tr>\n</tbody>\n</table>\n<p> Any of the general XmlReader methods and properties can also be used to process attributes. For example, after the XmlReader is positioned on an attribute, the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Name_\" data-linktype=\"relative-path\">Name</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> properties reflect the values of the attribute. You can also use any of the content <code>Read</code> methods to get the value of the attribute.  </p>\n<p> This example uses the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_AttributeCount_\" data-linktype=\"relative-path\">AttributeCount</a> property to navigate through all the attributes on an element.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#1\">&#39; Display all attributes.\nIf reader.HasAttributes Then\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;)\n  Dim i As Integer\n  For i = 0 To (reader.AttributeCount - 1)\n    Console.WriteLine(&quot;  {0}&quot;, reader(i))\n  Next i\n  &#39; Move the reader back to the element node.\n  reader.MoveToElement() \nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#1\">// Display all attributes.\nif (reader.HasAttributes) {\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n  for (int i = 0; i &lt; reader.AttributeCount; i++) {\n    Console.WriteLine(&quot;  {0}&quot;, reader[i]);\n  }\n  // Move the reader back to the element node.\n  reader.MoveToElement(); \n}\n</code></pre><p> This example uses the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToNextAttribute_\" data-linktype=\"relative-path\">MoveToNextAttribute</a> method in a <code>while</code> loop to navigate through the attributes.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#6\">If reader.HasAttributes Then\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;)\n  While reader.MoveToNextAttribute()\n    Console.WriteLine(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n  End While\n  &#39; Move the reader back to the element node.\n  reader.MoveToElement()\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#6\">if (reader.HasAttributes) {\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n  while (reader.MoveToNextAttribute()) {\n    Console.WriteLine(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n  }\n  // Move the reader back to the element node.\n  reader.MoveToElement();\n}\n</code></pre><p> <strong>Reading attributes on XML declaration nodes</strong>  </p>\n<p> When the XML reader is positioned on an XML declaration node, the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> property returns the version, standalone, and encoding information as a single string. XmlReader objects created by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method, the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class, and the <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a>class expose the version, standalone, and encoding items as attributes.  </p>\n<p> <strong>Reading attributes on document type nodes</strong>  </p>\n<p> When the XML reader is positioned on a document type node, the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_GetAttribute_\" data-linktype=\"relative-path\">GetAttribute</a> method and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Item_\" data-linktype=\"relative-path\">Item</a> property can be used to return the values for the SYSTEM and PUBLIC literals. For example, calling <code>reader.GetAttribute(&quot;PUBLIC&quot;)</code> returns the PUBLIC value.  </p>\n<p> <strong>Reading attributes on processing instruction nodes</strong>  </p>\n<p> When the XmlReader is positioned on a processing instruction node, the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> property returns the entire text content. Items in the processing instruction node aren&#39;t treated as attributes. They can&#39;t be read with the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_GetAttribute_\" data-linktype=\"relative-path\">GetAttribute</a> or <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a> method.  </p>\n<p><a name=\"xmlreader_content\"></a>   </p>\n<h2 id=\"reading-xml-content\">Reading XML content</h2>\n<p> The XMLReader class includes the following members that read content from an XML file and return the content as string values. (To return CLR types, see the <a href=\"#xmlreader_clr\" data-linktype=\"self-bookmark\">next section</a>.)  </p>\n<table>\n<thead>\n<tr>\n<th>Use this XmlReader member</th>\n<th>To</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> property</td>\n<td>Get the text content of the current node. The value returned depends on the node type; see the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> reference page for details.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadString_\" data-linktype=\"relative-path\">ReadString</a> method</td>\n<td>Get the content of an element or text node as a string. This method stops on processing instructions and comments.<br><br> For details on how this method handles specific node types, see the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadString_\" data-linktype=\"relative-path\">ReadString</a> reference page.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml_\" data-linktype=\"relative-path\">ReadInnerXml</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXmlAsync_\" data-linktype=\"relative-path\">ReadInnerXmlAsync</a> methods</td>\n<td>Get all the content of the current node, including the markup, but excluding start and end tags. For example, for:<br><br> <code>&lt;node&gt;this&lt;child id=&quot;123&quot;/&gt;&lt;/node&gt;</code><br><br> <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml_\" data-linktype=\"relative-path\">ReadInnerXml</a> returns:<br><br> <code>this&lt;child id=&quot;123&quot;/&gt;</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXml_\" data-linktype=\"relative-path\">ReadOuterXml</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXmlAsync_\" data-linktype=\"relative-path\">ReadOuterXmlAsync</a> methods</td>\n<td>Get all the content of the current node and its children, including markup and start/end tags. For example, for:<br><br> <code>&lt;node&gt;this&lt;child id=&quot;123&quot;/&gt;&lt;/node&gt;</code><br><br> <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXml_\" data-linktype=\"relative-path\">ReadOuterXml</a> returns:<br><br> <code>&lt;node&gt;this&lt;child id=&quot;123&quot;/&gt;&lt;/node&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"xmlreader_clr\"></a>   </p>\n<h2 id=\"converting-to-clr-types\">Converting to CLR types</h2>\n<p> You can use the members of the XmlReader class (listed in the following table) to read XML data and return values as common language runtime (CLR) types instead of strings. These members enable you to get values in the representation that is most appropriate for your coding task without having to manually parse or convert string values.  </p>\n<ul>\n<li><p>The <strong>ReadElementContentAs</strong> methods can only be called on element node types. These methods cannot be used on elements that contain child elements or mixed content. When called, the XmlReader object reads the start tag, reads the element content, and then moves past the end element tag. Processing instructions and comments are ignored and entities are expanded.  </p>\n</li>\n<li><p>The <strong>ReadContentAs</strong>methods read the text content at the current reader position, and if the XML data doesn&#39;t have any schema or data type information associated with it, convert the text content to the requested return type. Text, white space, significant white space and CDATA sections are concatenated. Comments and processing instructions are skipped, and entity references are automatically resolved.  </p>\n<p>The XmlReader class uses the rules defined by the <a href=\"http://www.w3.org/TR/xmlschema-2/\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a>recommendation.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Use this XmlReadermethod</th>\n<th>To return this CLR type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBoolean_\" data-linktype=\"relative-path\">ReadContentAsBoolean</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBoolean_\" data-linktype=\"relative-path\">ReadElementContentAsBoolean</a></td>\n<td><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDateTime_\" data-linktype=\"relative-path\">ReadContentAsDateTime</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDateTime_\" data-linktype=\"relative-path\">ReadElementContentAsDateTime</a></td>\n<td><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsDouble_\" data-linktype=\"relative-path\">ReadContentAsDouble</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDouble_\" data-linktype=\"relative-path\">ReadElementContentAsDouble</a></td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsLong_\" data-linktype=\"relative-path\">ReadContentAsLong</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsLong_\" data-linktype=\"relative-path\">ReadElementContentAsLong</a></td>\n<td><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsInt_\" data-linktype=\"relative-path\">ReadContentAsInt</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsInt_\" data-linktype=\"relative-path\">ReadElementContentAsInt</a></td>\n<td><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsString_\" data-linktype=\"relative-path\">ReadContentAsString</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString_\" data-linktype=\"relative-path\">ReadElementContentAsString</a></td>\n<td><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAs_\" data-linktype=\"relative-path\">ReadContentAs</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAs_\" data-linktype=\"relative-path\">ReadElementContentAs</a></td>\n<td>The type you specify with the <code>returnType</code> parameter</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObject_\" data-linktype=\"relative-path\">ReadContentAsObject</a> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObject_\" data-linktype=\"relative-path\">ReadElementContentAsObject</a></td>\n<td>The most appropriate type, as specified by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ValueType_\" data-linktype=\"relative-path\">ValueType</a> property. See <a href=\"../Topic/Type%20Support%20in%20the%20System.Xml%20Classes.md\" data-linktype=\"relative-path\">Type Support in the System.Xml Classes</a> for mapping information.</td>\n</tr>\n</tbody>\n</table>\n<p> If an element can&#39;t easily be converted to a CLR type because of its format, you can use a schema mapping to ensure a successful conversion. The following example uses an .xsd file to convert the <code>hire-date</code> element to the <code>xs:date</code> type, and then uses the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsDateTime_\" data-linktype=\"relative-path\">ReadElementContentAsDateTime</a> method to return the element as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.  </p>\n<p> <strong>Input (hireDate.xml):</strong>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#9\">&lt;employee xmlns=&quot;urn:empl-hire&quot;&gt;\n    &lt;ID&gt;12365&lt;/ID&gt;\n    &lt;hire-date&gt;2003-01-08&lt;/hire-date&gt;\n    &lt;title&gt;Accountant&lt;/title&gt;\n&lt;/employee&gt;\n</code></pre><p> <strong>Schema (hireDate.xsd):</strong>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#10\">&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;urn:empl-hire&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n  &lt;xs:element name=&quot;employee&quot;&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=&quot;ID&quot; type=&quot;xs:unsignedShort&quot; /&gt;\n        &lt;xs:element name=&quot;hire-date&quot; type=&quot;xs:date&quot; /&gt;\n        &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot; /&gt;\n      &lt;/xs:sequence&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre><p> <strong>Code:</strong>  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadElementContentAs#13\">&#39; Create a validating XmlReader object. The schema \n&#39; provides the necessary type information.\nDim settings As XmlReaderSettings = New XmlReaderSettings()\nsettings.ValidationType = ValidationType.Schema\nsettings.Schemas.Add(&quot;urn:empl-hire&quot;, &quot;hireDate.xsd&quot;)\nUsing reader As XmlReader = XmlReader.Create(&quot;hireDate.xml&quot;, settings) \n  &#39; Move to the hire-date element.\n  reader.MoveToContent()\n  reader.ReadToDescendant(&quot;hire-date&quot;)\n\n  &#39; Return the hire-date as a DateTime object.\n  Dim hireDate As DateTime = reader.ReadElementContentAsDateTime()\n  Console.WriteLine(&quot;Six Month Review Date: {0}&quot;, hireDate.AddMonths(6))\nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadElementContentAs#13\">// Create a validating XmlReader object. The schema \n// provides the necessary type information.\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.ValidationType = ValidationType.Schema;\nsettings.Schemas.Add(&quot;urn:empl-hire&quot;, &quot;hireDate.xsd&quot;);\nusing (XmlReader reader = XmlReader.Create(&quot;hireDate.xml&quot;, settings)) {\n\n  // Move to the hire-date element.\n  reader.MoveToContent();\n  reader.ReadToDescendant(&quot;hire-date&quot;);\n\n  // Return the hire-date as a DateTime object.\n  DateTime hireDate = reader.ReadElementContentAsDateTime();\n  Console.WriteLine(&quot;Six Month Review Date: {0}&quot;, hireDate.AddMonths(6));\n}\n</code></pre><p> <strong>Output:</strong>  </p>\n<pre><code>Six Month Review Date:  7/8/2003 12:00:00 AM\n</code></pre><p><a name=\"xmlreader_async\"></a>   </p>\n<h2 id=\"asynchronous-programming\">Asynchronous programming</h2>\n<p> Most of the XmlReader methods have asynchronous counterparts that have &quot;Async&quot; at the end of their method names. For example, the asynchronous equivalent of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObject_\" data-linktype=\"relative-path\">ReadContentAsObject</a> is <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObjectAsync_\" data-linktype=\"relative-path\">ReadContentAsObjectAsync</a>.  </p>\n<p> The following methods can be used with asynchronous method calls:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_GetAttribute_\" data-linktype=\"relative-path\">GetAttribute</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToFirstAttribute_\" data-linktype=\"relative-path\">MoveToFirstAttribute</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToNextAttribute_\" data-linktype=\"relative-path\">MoveToNextAttribute</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToElement_\" data-linktype=\"relative-path\">MoveToElement</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadAttributeValue_\" data-linktype=\"relative-path\">ReadAttributeValue</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadSubtree_\" data-linktype=\"relative-path\">ReadSubtree</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ResolveEntity_\" data-linktype=\"relative-path\">ResolveEntity</a>  \n\n<p>The following sections describe asynchronous usage for methods that don&#39;t have asynchronous counterparts.  </p>\n<p><strong>ReadStartElement method</strong>  </p>\n<pre><code class=\"lang-vb\" name=\"System.Xml.XmlReader.Class#1\">    &lt;Extension()&gt;\n    Public Async Function ReadStartElementAsync(reader As XmlReader, localname As String, ns As String) As Task\n        If (Await reader.MoveToContentAsync() &lt;&gt; XmlNodeType.Element) Then\n            Throw New InvalidOperationException(reader.NodeType.ToString() + &quot; is an invalid XmlNodeType&quot;)\n        End If\n\n        If ((reader.LocalName = localname) And (reader.NamespaceURI = ns)) Then\n            Await reader.ReadAsync()\n        Else\n            Throw New InvalidOperationException(&quot;localName or namespace doesnâ€™t match&quot;)\n        End If\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Xml.XmlReader.Class#1\">        public static async Task ReadStartElementAsync(this XmlReader reader, string localname, string ns)\n        {\n            if (await reader.MoveToContentAsync() != XmlNodeType.Element)\n            {\n                throw new InvalidOperationException(reader.NodeType.ToString() + &quot; is an invalid XmlNodeType&quot;);\n            }\n            if ((reader.LocalName == localname) &amp;&amp; (reader.NamespaceURI == ns))\n            {\n                await reader.ReadAsync();\n            }\n            else\n            {\n                throw new InvalidOperationException(&quot;localName or namespace doesnâ€™t match&quot;);\n            }\n        }\n</code></pre><p><strong>ReadEndElement method</strong>  </p>\n<pre><code class=\"lang-vb\" name=\"System.Xml.XmlReader.Class#2\">    &lt;Extension()&gt;\n    Public Async Function ReadEndElementAsync(reader As XmlReader) As task\n        If (Await reader.MoveToContentAsync() &lt;&gt; XmlNodeType.EndElement) Then\n            Throw New InvalidOperationException()\n        End If\n        Await reader.ReadAsync()\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Xml.XmlReader.Class#2\">        public static async Task ReadEndElementAsync(this XmlReader reader)\n        {\n            if (await reader.MoveToContentAsync() != XmlNodeType.EndElement)\n            {\n                throw new InvalidOperationException();\n            }\n            await reader.ReadAsync();\n        }\n</code></pre><p><strong>ReadToNextSibling method</strong>  </p>\n<pre><code class=\"lang-vb\" name=\"System.Xml.XmlReader.Class#3\">    &lt;Extension()&gt;\n    Public Async Function ReadToNextSiblingAsync(reader As XmlReader, localName As String, namespaceURI As String) As Task(Of Boolean)\n        If (localName = Nothing Or localName.Length = 0) Then\n            Throw New ArgumentException(&quot;localName is empty or null&quot;)\n        End If\n\n        If (namespaceURI = Nothing) Then\n            Throw New ArgumentNullException(&quot;namespaceURI&quot;)\n        End If\n\n        &#39; atomize local name and namespace\n        localName = reader.NameTable.Add(localName)\n        namespaceURI = reader.NameTable.Add(namespaceURI)\n\n        &#39; find the next sibling\n        Dim nt As XmlNodeType\n        Do\n\n            Await reader.SkipAsync()\n            If (reader.ReadState &lt;&gt; ReadState.Interactive) Then\n                Exit Do\n            End If\n            nt = reader.NodeType\n            If ((nt = XmlNodeType.Element) And\n               ((CObj(localName) = CObj(reader.LocalName))) And\n               (CObj(namespaceURI) = CObj(reader.NamespaceURI))) Then\n                Return True\n            End If\n        Loop While (nt &lt;&gt; XmlNodeType.EndElement And (Not reader.EOF))\n\n        Return False\n\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Xml.XmlReader.Class#3\">        public static async Task&lt;bool&gt; ReadToNextSiblingAsync(this XmlReader reader, string localName, string namespaceURI)\n        {\n            if (localName == null || localName.Length == 0)\n            {\n                throw new ArgumentException(&quot;localName is empty or null&quot;);\n            }\n            if (namespaceURI == null)\n            {\n                throw new ArgumentNullException(&quot;namespaceURI&quot;);\n            }\n\n            // atomize local name and namespace\n            localName = reader.NameTable.Add(localName);\n            namespaceURI = reader.NameTable.Add(namespaceURI);\n\n            // find the next sibling\n            XmlNodeType nt;\n            do\n            {\n                await reader.SkipAsync();\n                if (reader.ReadState != ReadState.Interactive)\n                    break;\n                nt = reader.NodeType;\n                if (nt == XmlNodeType.Element &amp;&amp;\n                     ((object)localName == (object)reader.LocalName) &amp;&amp;\n                     ((object)namespaceURI ==(object)reader.NamespaceURI))\n                {\n                    return true;\n                }\n            } while (nt != XmlNodeType.EndElement &amp;&amp; !reader.EOF);\n            \n            return false;\n        }\n</code></pre><p><strong>ReadToFollowing method</strong>  </p>\n<pre><code class=\"lang-vb\" name=\"System.Xml.XmlReader.Class#4\">    &lt;Extension()&gt;\n    Public Async Function ReadToFollowingAsync(reader As XmlReader, localName As String, namespaceURI As String) As Task(Of Boolean)\n        If (localName = Nothing Or localName.Length = 0) Then\n            Throw New ArgumentException(&quot;localName is empty or null&quot;)\n        End If\n\n        If (namespaceURI = Nothing) Then\n            Throw New ArgumentNullException(&quot;namespaceURI&quot;)\n        End If\n\n        &#39; atomize local name and namespace\n        localName = reader.NameTable.Add(localName)\n        namespaceURI = reader.NameTable.Add(namespaceURI)\n\n        &#39; find element with that name\n        While (Await reader.ReadAsync())\n            If ((reader.NodeType = XmlNodeType.Element) And\n               (CObj(localName) = CObj(reader.LocalName)) And\n               (CObj(namespaceURI) = CObj(reader.NamespaceURI))) Then\n                Return True\n            End If\n        End While\n\n        Return False\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Xml.XmlReader.Class#4\">        public static async Task&lt;bool&gt; ReadToFollowingAsync(this XmlReader reader, string localName, string namespaceURI)\n        {\n            if (localName == null || localName.Length == 0)\n            {\n                throw new ArgumentException(&quot;localName is empty or null&quot;);\n            }\n            if (namespaceURI == null)\n            {\n                throw new ArgumentNullException(&quot;namespaceURI&quot;);\n            }\n\n            // atomize local name and namespace\n            localName = reader.NameTable.Add(localName);\n            namespaceURI = reader.NameTable.Add(namespaceURI);\n\n            // find element with that name\n            while (await reader.ReadAsync())\n            {\n                if (reader.NodeType == XmlNodeType.Element &amp;&amp; ((object)localName == (object)reader.LocalName) &amp;&amp; ((object)namespaceURI == (object)reader.NamespaceURI))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n</code></pre><p><strong>ReadToDescendant method</strong>  </p>\n<pre><code class=\"lang-vb\" name=\"System.Xml.XmlReader.Class#5\">    &lt;Extension()&gt;\n    Public Async Function ReadToDescendantAsync(reader As XmlReader, localName As String, namespaceURI As String) As Task(Of Boolean)\n        If (localName = Nothing Or localName.Length = 0) Then\n            Throw New ArgumentException(&quot;localName is empty or null&quot;)\n        End If\n\n        If (namespaceURI = Nothing) Then\n            Throw New ArgumentNullException(&quot;namespaceURI&quot;)\n        End If\n\n        &#39; save the element or root depth\n        Dim parentDepth As Integer = reader.Depth\n        If (reader.NodeType &lt;&gt; XmlNodeType.Element) Then\n            &#39; adjust the depth if we are on root node\n            If (reader.ReadState = ReadState.Initial) Then\n                parentDepth -= 1\n            Else\n                Return False\n            End If\n        ElseIf (reader.IsEmptyElement) Then\n            Return False\n        End If\n        &#39; atomize local name and namespace\n        localName = reader.NameTable.Add(localName)\n        namespaceURI = reader.NameTable.Add(namespaceURI)\n\n        &#39; find the descendant\n        While (Await reader.ReadAsync() And reader.Depth &gt; parentDepth)\n            If (reader.NodeType = XmlNodeType.Element And\n               (CObj(localName) = CObj(reader.LocalName)) And\n               (CObj(namespaceURI) = CObj(reader.NamespaceURI))) Then\n                Return True\n            End If\n        End While\n\n        Return False\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Xml.XmlReader.Class#5\">        public static async Task&lt;bool&gt; ReadToDescendantAsync(this XmlReader reader, string localName, string namespaceURI)\n        {\n            if (localName == null || localName.Length == 0)\n            {\n                throw new ArgumentException(&quot;localName is empty or null&quot;);\n            }\n            if (namespaceURI == null)\n            {\n                throw new ArgumentNullException(&quot;namespaceURI&quot;);\n            }\n            // save the element or root depth\n            int parentDepth = reader.Depth;\n            if (reader.NodeType != XmlNodeType.Element)\n            {\n                // adjust the depth if we are on root node\n                if (reader.ReadState == ReadState.Initial)\n                {\n                    parentDepth--;\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            else if (reader.IsEmptyElement)\n            {\n                return false;\n            }\n\n            // atomize local name and namespace\n            localName = reader.NameTable.Add(localName);\n            namespaceURI = reader.NameTable.Add(namespaceURI);\n\n            // find the descendant\n            while (await reader.ReadAsync() &amp;&amp; reader.Depth &gt; parentDepth)\n            {\n                if (reader.NodeType == XmlNodeType.Element &amp;&amp; ((object)localName == (object)reader.LocalName) &amp;&amp; ((object)namespaceURI == (object)reader.NamespaceURI))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n</code></pre></li>\n</ul>\n<p><a name=\"xmlreader_security\"></a>   </p>\n<h2 id=\"security-considerations\">Security considerations</h2>\n<p> Consider the following when working with the XmlReader class:  </p>\n<ul>\n<li><p>Exceptions thrown from the XmlReader can disclose path information that you might not want bubbled up to your app. Your app must catch exceptions and process them appropriately.  </p>\n</li>\n<li><p>Do not enable DTD processing if you&#39;re concerned about denial of service issues or if you&#39;re dealing with untrusted sources. DTD processing is disabled by default for XmlReader objects created by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method.  </p>\n<p> If you have DTD processing enabled, you can use the <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> to restrict the resources that the XmlReader can access. You can also design your app so that the XML processing is memory and time constrained. For example, you can configure time-out limits in your ASP.NET app.  </p>\n</li>\n<li><p>XML data can include references to external resources such as a schema file. By default, external resources are resolved by using an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> object with no user credentials. You can secure this further by doing one of the following:  </p>\n<ul>\n<li><p>Restrict the resources that the XmlReader can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n</li>\n<li><p>Do not allow the XmlReader to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationflags\" data-linktype=\"relative-path\">XmlSchemaValidationFlags</a> and <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationflags\" data-linktype=\"relative-path\">XmlSchemaValidationFlags</a> validation flags of an <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object aren&#39;t set by default. This helps to protect the XmlReader against schema-based attacks when it is processing XML data from an untrusted source. When these flags are set, the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> of the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object is used to resolve schema locations encountered in the instance document in the XmlReader. If the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property is set to <code>null</code>, schema locations aren&#39;t resolved even if the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationflags\" data-linktype=\"relative-path\">XmlSchemaValidationFlags</a> and <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationflags\" data-linktype=\"relative-path\">XmlSchemaValidationFlags</a> validation flags are set.  </p>\n<p> Schemas added during validation add new types and can change the validation outcome of the document being validated. As a result, external schemas should only be resolved from trusted sources.  </p>\n<p> We recommend disabling the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationflags\" data-linktype=\"relative-path\">XmlSchemaValidationFlags</a> flag when validating untrusted, large XML documents in high availability scenarios against a schema that has identity constraints over a large part of the document. This flag is enabled by default.  </p>\n</li>\n<li><p>XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process. To limit the size of the input that is sent to the XmlReader, you can:  </p>\n<ul>\n<li><p>Limit the size of the document by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_MaxCharactersInDocument_\" data-linktype=\"relative-path\">MaxCharactersInDocument</a> property.  </p>\n</li>\n<li><p>Limit the number of characters that result from expanding entities by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_MaxCharactersFromEntities_\" data-linktype=\"relative-path\">MaxCharactersFromEntities</a> property.  </p>\n</li>\n<li><p>Create a custom <code>IStream</code> implementation for the XmlReader.  </p>\n</li>\n</ul>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunk_\" data-linktype=\"relative-path\">ReadValueChunk</a> method can be used to handle large streams of data. This method reads a small number of characters at a time instead of allocating a single string for the whole value.  </p>\n</li>\n<li><p>When reading an XML document with a large number of unique local names, namespaces, or prefixes, a problem can occur. If you are using a class that derives from XmlReader, and you call the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_LocalName_\" data-linktype=\"relative-path\">LocalName</a>, <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a>, or <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a> property for each item, the returned string is added to a <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a>. The collection held by the <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a> never decreases in size, creating a virtual memory leak of the string handles. One mitigation for this is to derive from the <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a> class and enforce a maximum size quota. (There is no way to prevent the use of a <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a>, or to switch the <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a> when it is full). Another mitigation is to avoid using the properties mentioned and instead use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a> method with the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_\" data-linktype=\"relative-path\">IsStartElement</a> method where possible; those methods don&#39;t return strings and thus avoid the problem of overfilling the <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a> collection.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> objects can contain sensitive information such as user credentials. An untrusted component could use the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object and its user credentials to create XmlReader objects to read data. Be careful when caching <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> objects, or when passing the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object from one component to another.  </p>\n</li>\n<li><p>Do not accept supporting components, such as <a class=\"xref\" href=\"system.xml.nametable\" data-linktype=\"relative-path\">NameTable</a>, <a class=\"xref\" href=\"system.xml.xmlnamespacemanager\" data-linktype=\"relative-path\">XmlNamespaceManager</a>, and <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> objects, from an untrusted source.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader__ctor\" data-linktype=\"self-bookmark\">XmlReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>XmlReader</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_AttributeCount\" data-linktype=\"self-bookmark\">AttributeCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the number of attributes on the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_BaseURI\" data-linktype=\"self-bookmark\">BaseURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the base URI of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_CanReadBinaryContent\" data-linktype=\"self-bookmark\">CanReadBinaryContent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implements the binary content read methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_CanReadValueChunk\" data-linktype=\"self-bookmark\">CanReadValueChunk</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implements the <span class=\"xref\">stem.Xml.XmlReader.ReadValueChunk*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_CanResolveEntity\" data-linktype=\"self-bookmark\">CanResolveEntity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Depth\" data-linktype=\"self-bookmark\">Depth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the depth of the current node in the XML document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_EOF\" data-linktype=\"self-bookmark\">EOF</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_HasAttributes\" data-linktype=\"self-bookmark\">HasAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current node has any attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_HasValue\" data-linktype=\"self-bookmark\">HasValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current node can have a <span class=\"xref\">stem.Xml.XmlReader.Value*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_IsDefault\" data-linktype=\"self-bookmark\">IsDefault</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_IsEmptyElement\" data-linktype=\"self-bookmark\">IsEmptyElement</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, <code><myelement></myelement></code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Item_System_String_\" data-linktype=\"self-bookmark\">Item(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.Name*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Item_System_String_System_String_\" data-linktype=\"self-bookmark\">Item(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_LocalName\" data-linktype=\"self-bookmark\">LocalName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the local name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the qualified name of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_NamespaceURI\" data-linktype=\"self-bookmark\">NamespaceURI</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_NameTable\" data-linktype=\"self-bookmark\">NameTable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the type of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Prefix\" data-linktype=\"self-bookmark\">Prefix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the namespace prefix associated with the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_QuoteChar\" data-linktype=\"self-bookmark\">QuoteChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadState\" data-linktype=\"self-bookmark\">ReadState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the state of the reader.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_SchemaInfo\" data-linktype=\"self-bookmark\">SchemaInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the schema information that has been assigned to the current node as a result of schema validation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Settings\" data-linktype=\"self-bookmark\">Settings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object used to create this <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the text value of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ValueType\" data-linktype=\"self-bookmark\">ValueType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets The Common Language Runtime (CLR) type for the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_XmlLang\" data-linktype=\"self-bookmark\">XmlLang</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the current <code>xml:lang</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_XmlSpace\" data-linktype=\"self-bookmark\">XmlSpace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the current <code>xml:space</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, changes the <span class=\"xref\">stem.Xml.XmlReader.ReadState*</span> to <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_IO_Stream_\" data-linktype=\"self-bookmark\">Create(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance using the specified stream with default settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_IO_TextReader_\" data-linktype=\"self-bookmark\">Create(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified text reader.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_String_\" data-linktype=\"self-bookmark\">Create(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance with specified URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_\" data-linktype=\"self-bookmark\">Create(Stream,XmlReaderSettings)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance with the specified stream and settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_\" data-linktype=\"self-bookmark\">Create(TextReader,XmlReaderSettings)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified text reader and settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_\" data-linktype=\"self-bookmark\">Create(String,XmlReaderSettings)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified URI and settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_Xml_XmlReader_System_Xml_XmlReaderSettings_\" data-linktype=\"self-bookmark\">Create(XmlReader,XmlReaderSettings)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified XML reader and settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_String_\" data-linktype=\"self-bookmark\">Create(Stream,XmlReaderSettings,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance using the specified stream, base URI, and settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"self-bookmark\">Create(Stream,XmlReaderSettings,XmlParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance using the specified stream, settings, and context information for parsing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_String_\" data-linktype=\"self-bookmark\">Create(TextReader,XmlReaderSettings,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified text reader, settings, and base URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"self-bookmark\">Create(TextReader,XmlReaderSettings,XmlParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified text reader, settings, and context information for parsing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\" data-linktype=\"self-bookmark\">Create(String,XmlReaderSettings,XmlParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified URI, settings, and context information for parsing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_GetAttribute_System_Int32_\" data-linktype=\"self-bookmark\">GetAttribute(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_GetAttribute_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.Name*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_GetAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">GetAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_GetValueAsync\" data-linktype=\"self-bookmark\">GetValueAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously gets the value of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_IsName_System_String_\" data-linktype=\"self-bookmark\">IsName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the string argument is a valid XML name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_IsNameToken_System_String_\" data-linktype=\"self-bookmark\">IsNameToken(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether or not the string argument is a valid XML name token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_IsStartElement\" data-linktype=\"self-bookmark\">IsStartElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calls <span class=\"xref\">stem.Xml.XmlReader.MoveToContent*</span> and tests if the current content node is a start tag or empty element tag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_IsStartElement_System_String_\" data-linktype=\"self-bookmark\">IsStartElement(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calls <span class=\"xref\">stem.Xml.XmlReader.MoveToContent*</span> and tests if the current content node is a start tag or empty element tag and if the <span class=\"xref\">stem.Xml.XmlReader.Name*</span> property of the element found matches the given argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_IsStartElement_System_String_System_String_\" data-linktype=\"self-bookmark\">IsStartElement(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calls <span class=\"xref\">stem.Xml.XmlReader.MoveToContent*</span> and tests if the current content node is a start tag or empty element tag and if the <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span> properties of the element found match the given strings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_LookupNamespace_System_String_\" data-linktype=\"self-bookmark\">LookupNamespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, resolves a namespace prefix in the current element&#39;s scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_MoveToAttribute_System_Int32_\" data-linktype=\"self-bookmark\">MoveToAttribute(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, moves to the attribute with the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_MoveToAttribute_System_String_\" data-linktype=\"self-bookmark\">MoveToAttribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, moves to the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.Name*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_MoveToAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">MoveToAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, moves to the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_MoveToContent\" data-linktype=\"self-bookmark\">MoveToContent()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks whether the current node is a content (non-white space text, <code>CDATA</code>, <code>Element</code>, <code>EndElement</code>, <code>EntityReference</code>, or <code>EndEntity</code>) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: <code>ProcessingInstruction</code>, <code>DocumentType</code>, <code>Comment</code>, <code>Whitespace</code>, or <code>SignificantWhitespace</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_MoveToContentAsync\" data-linktype=\"self-bookmark\">MoveToContentAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_MoveToElement\" data-linktype=\"self-bookmark\">MoveToElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, moves to the element that contains the current attribute node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_MoveToFirstAttribute\" data-linktype=\"self-bookmark\">MoveToFirstAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, moves to the first attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_MoveToNextAttribute\" data-linktype=\"self-bookmark\">MoveToNextAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, moves to the next attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Read\" data-linktype=\"self-bookmark\">Read()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, reads the next node from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadAsync\" data-linktype=\"self-bookmark\">ReadAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the next node from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadAttributeValue\" data-linktype=\"self-bookmark\">ReadAttributeValue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, parses the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"self-bookmark\">ReadContentAs(Type,IXmlNamespaceResolver)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content as an object of the type specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"self-bookmark\">ReadContentAsAsync(Type,IXmlNamespaceResolver)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the content as an object of the type specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content and returns the Base64 decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBase64Async(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the content and returns the Base64 decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the content and returns the <code>BinHex</code> decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadContentAsBinHexAsync(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the content and returns the <code>BinHex</code> decoded binary bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsBoolean\" data-linktype=\"self-bookmark\">ReadContentAsBoolean()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a <code>Boolean</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsDateTime\" data-linktype=\"self-bookmark\">ReadContentAsDateTime()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsDateTimeOffset\" data-linktype=\"self-bookmark\">ReadContentAsDateTimeOffset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsDecimal\" data-linktype=\"self-bookmark\">ReadContentAsDecimal()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsDouble\" data-linktype=\"self-bookmark\">ReadContentAsDouble()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsFloat\" data-linktype=\"self-bookmark\">ReadContentAsFloat()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a single-precision floating point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsInt\" data-linktype=\"self-bookmark\">ReadContentAsInt()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsLong\" data-linktype=\"self-bookmark\">ReadContentAsLong()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsObject\" data-linktype=\"self-bookmark\">ReadContentAsObject()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsObjectAsync\" data-linktype=\"self-bookmark\">ReadContentAsObjectAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the text content at the current position as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsString\" data-linktype=\"self-bookmark\">ReadContentAsString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the text content at the current position as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadContentAsStringAsync\" data-linktype=\"self-bookmark\">ReadContentAsStringAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the text content at the current position as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"self-bookmark\">ReadElementContentAs(Type,IXmlNamespaceResolver)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element content as the requested type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAs(Type,IXmlNamespaceResolver,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\" data-linktype=\"self-bookmark\">ReadElementContentAsAsync(Type,IXmlNamespaceResolver)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the element content as the requested type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element and decodes the <code>Base64</code> content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBase64Async(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the element and decodes the <code>Base64</code> content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the element and decodes the <code>BinHex</code> content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadElementContentAsBinHexAsync(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the element and decodes the <code>BinHex</code> content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsBoolean\" data-linktype=\"self-bookmark\">ReadElementContentAsBoolean()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsBoolean_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsBoolean(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsDateTime\" data-linktype=\"self-bookmark\">ReadElementContentAsDateTime()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsDateTime_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsDateTime(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsDecimal\" data-linktype=\"self-bookmark\">ReadElementContentAsDecimal()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsDecimal_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsDecimal(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsDouble\" data-linktype=\"self-bookmark\">ReadElementContentAsDouble()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as a double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsDouble_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsDouble(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsFloat\" data-linktype=\"self-bookmark\">ReadElementContentAsFloat()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsFloat_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsFloat(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsInt\" data-linktype=\"self-bookmark\">ReadElementContentAsInt()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as a 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsInt_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsInt(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsLong\" data-linktype=\"self-bookmark\">ReadElementContentAsLong()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as a 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsLong_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsLong(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsObject\" data-linktype=\"self-bookmark\">ReadElementContentAsObject()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsObject_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsObject(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsObjectAsync\" data-linktype=\"self-bookmark\">ReadElementContentAsObjectAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the current element and returns the contents as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"self-bookmark\">ReadElementContentAsString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the current element and returns the contents as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsString_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementContentAsString(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementContentAsStringAsync\" data-linktype=\"self-bookmark\">ReadElementContentAsStringAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the current element and returns the contents as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementString\" data-linktype=\"self-bookmark\">ReadElementString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a text-only element. However, we recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a> method instead, because it provides a more straightforward way to handle this operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementString_System_String_\" data-linktype=\"self-bookmark\">ReadElementString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the <span class=\"xref\">stem.Xml.XmlReader.Name*</span> property of the element found matches the given string before reading a text-only element. However, we recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a> method instead, because it provides a more straightforward way to handle this operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadElementString_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadElementString(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span> properties of the element found matches the given strings before reading a text-only element. However, we recommend that you use the <span class=\"xref\">stem.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)</span> method instead, because it provides a more straightforward way to handle this operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadEndElement\" data-linktype=\"self-bookmark\">ReadEndElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the current content node is an end tag and advances the reader to the next node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadInnerXml\" data-linktype=\"self-bookmark\">ReadInnerXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, reads all the content, including markup, as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadInnerXmlAsync\" data-linktype=\"self-bookmark\">ReadInnerXmlAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads all the content, including markup, as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadOuterXml\" data-linktype=\"self-bookmark\">ReadOuterXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadOuterXmlAsync\" data-linktype=\"self-bookmark\">ReadOuterXmlAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the content, including markup, representing this node and all its children.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadStartElement\" data-linktype=\"self-bookmark\">ReadStartElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the current node is an element and advances the reader to the next node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadStartElement_System_String_\" data-linktype=\"self-bookmark\">ReadStartElement(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the current content node is an element with the given <span class=\"xref\">stem.Xml.XmlReader.Name*</span> and advances the reader to the next node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadStartElement_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadStartElement(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks that the current content node is an element with the given <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span> and advances the reader to the next node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadString\" data-linktype=\"self-bookmark\">ReadString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, reads the contents of an element or text node as a string. However, we recommend that you use the <span class=\"xref\">stem.Xml.XmlReader.ReadElementContentAsString*</span> method instead, because it provides a more straightforward way to handle this operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadSubtree\" data-linktype=\"self-bookmark\">ReadSubtree()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <code>XmlReader</code> instance that can be used to read the current node, and all its descendants.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadToDescendant_System_String_\" data-linktype=\"self-bookmark\">ReadToDescendant(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the next descendant element with the specified qualified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadToDescendant_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadToDescendant(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the next descendant element with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadToFollowing_System_String_\" data-linktype=\"self-bookmark\">ReadToFollowing(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads until an element with the specified qualified name is found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadToFollowing_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadToFollowing(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads until an element with the specified local name and namespace URI is found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadToNextSibling_System_String_\" data-linktype=\"self-bookmark\">ReadToNextSibling(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the <code>XmlReader</code> to the next sibling element with the specified qualified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadToNextSibling_System_String_System_String_\" data-linktype=\"self-bookmark\">ReadToNextSibling(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the <code>XmlReader</code> to the next sibling element with the specified local name and namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadValueChunk_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadValueChunk(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads large streams of text embedded in an XML document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ReadValueChunkAsync_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadValueChunkAsync(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads large streams of text embedded in an XML document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_ResolveEntity\" data-linktype=\"self-bookmark\">ResolveEntity()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, resolves the entity reference for <code>EntityReference</code> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_Skip\" data-linktype=\"self-bookmark\">Skip()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Skips the children of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlReader_SkipAsync\" data-linktype=\"self-bookmark\">SkipAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously skips the children of the current node.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader__ctor\">\r\n    \r\n            <a id=\"System_Xml_XmlReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlReader()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>XmlReader</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected XmlReader ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called by derived class constructors to initialize state in this type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_AttributeCount\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_AttributeCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AttributeCount</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the number of attributes on the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int AttributeCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of attributes on the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is relevant to <code>Element</code>, <code>DocumentType</code> and <code>XmlDeclaration</code> nodes only. (Other node types do not have attributes.)</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#1\">&#39; Display all attributes.\nIf reader.HasAttributes Then\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;)\n  Dim i As Integer\n  For i = 0 To (reader.AttributeCount - 1)\n    Console.WriteLine(&quot;  {0}&quot;, reader(i))\n  Next i\n  &#39; Move the reader back to the element node.\n  reader.MoveToElement() \nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#1\">// Display all attributes.\nif (reader.HasAttributes) {\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n  for (int i = 0; i &lt; reader.AttributeCount; i++) {\n    Console.WriteLine(&quot;  {0}&quot;, reader[i]);\n  }\n  // Move the reader back to the element node.\n  reader.MoveToElement(); \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_BaseURI\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_BaseURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseURI</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the base URI of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string BaseURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The base URI of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. DTD entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), <code>String.Empty</code> is returned.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_CanReadBinaryContent\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_CanReadBinaryContent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanReadBinaryContent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implements the binary content read methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CanReadBinaryContent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the binary content read methods are implemented; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The binary content read methods include the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a>, <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a>, <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBase64_\" data-linktype=\"relative-path\">ReadElementContentAsBase64</a>, and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBinHex_\" data-linktype=\"relative-path\">ReadElementContentAsBinHex</a> methods. If this property returns <code>false</code> a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> is returned when any of the binary read methods is called.  </p>\n<p> All Microsoft .NET Framework implementations of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> class return <code>true</code> for this property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_CanReadValueChunk\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_CanReadValueChunk_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanReadValueChunk</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implements the <span class=\"xref\">stem.Xml.XmlReader.ReadValueChunk*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CanReadValueChunk { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implements the <span class=\"xref\">stem.Xml.XmlReader.ReadValueChunk*</span> method; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Text parsing <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> objects that were created from the static <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method always return <code>true</code>. All other Microsoft .NET Framework implementations of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> class, including the <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> class, return <code>false</code>.  </p>\n<p> If this property returns <code>false</code> a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> is returned when the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunk_\" data-linktype=\"relative-path\">ReadValueChunk</a> method is called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_CanResolveEntity\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_CanResolveEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanResolveEntity</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CanResolveEntity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader can parse and resolve entities; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property always returns <code>false</code> for implementations of <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that do not support DTD information. In this case, calling <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ResolveEntity_\" data-linktype=\"relative-path\">ResolveEntity</a> throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Depth\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Depth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Depth</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the depth of the current node in the XML document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int Depth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The depth of the current node in the XML document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_Depth_\" data-linktype=\"relative-path\">Depth</a> (in the <code>XmlTextReader</code> class) for an example using this property.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_EOF\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_EOF_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EOF</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool EOF { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader is positioned at the end of the stream; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_HasAttributes\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_HasAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current node has any attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool HasAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node has attributes; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#6\">If reader.HasAttributes Then\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;)\n  While reader.MoveToNextAttribute()\n    Console.WriteLine(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n  End While\n  &#39; Move the reader back to the element node.\n  reader.MoveToElement()\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#6\">if (reader.HasAttributes) {\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n  while (reader.MoveToNextAttribute()) {\n    Console.WriteLine(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n  }\n  // Move the reader back to the element node.\n  reader.MoveToElement();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_HasValue\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_HasValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasValue</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current node can have a <span class=\"xref\">stem.Xml.XmlReader.Value*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool HasValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the node on which the reader is currently positioned can have a <code>Value</code>; otherwise, <code>false</code>. If <code>false</code>, the node has a value of <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists node types that have a value to return.  </p>\n<table>\n<thead>\n<tr>\n<th>Node Type</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Attribute</code></td>\n<td>The value of the attribute.</td>\n</tr>\n<tr>\n<td><code>CDATA</code></td>\n<td>The content of the CDATA section.</td>\n</tr>\n<tr>\n<td><code>Comment</code></td>\n<td>The content of the comment.</td>\n</tr>\n<tr>\n<td><code>DocumentType</code></td>\n<td>The internal subset.</td>\n</tr>\n<tr>\n<td><code>ProcessingInstruction</code></td>\n<td>The entire content, excluding the target.</td>\n</tr>\n<tr>\n<td><code>SignificantWhitespace</code></td>\n<td>The white space between markup in a mixed content model.</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>The content of the text node.</td>\n</tr>\n<tr>\n<td><code>Whitespace</code></td>\n<td>The white space between markup.</td>\n</tr>\n<tr>\n<td><code>XmlDeclaration</code></td>\n<td>The content of the declaration.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_HasValue_\" data-linktype=\"relative-path\">HasValue</a> (in the <code>XmlTextReader</code> class) for a sample using this method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_IsDefault\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_IsDefault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefault</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsDefault { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; <code>false</code> if the attribute value was explicitly set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>IsDefault</code> always returns <code>false</code> for implementations of <code>XmlReader</code> that do not support schema or DTD information. This property applies only to an attribute node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the root element.  </p>\n<pre><code>using System;  \nusing System.IO;  \nusing System.Xml;  \n\npublic class Sample   \n{  \n  public static void Main(){  \n\n    // Create the reader.  \n    XmlReader reader = XmlReader.Create(&quot;book4.xml&quot;);  \n\n    reader.MoveToContent();  \n\n    // Display each of the attribute nodes, including default attributes.  \n    while (reader.MoveToNextAttribute()){  \n        if (reader.IsDefault)  \n          Console.Write(&quot;(default attribute) &quot;);  \n        Console.WriteLine(&quot;{0} = {1}&quot;, reader.Name, reader.Value);    \n    }             \n\n    //Close the reader.  \n    reader.Close();       \n\n  }  \n} // End class\n</code></pre><p> The example uses the following files as input.  </p>\n<p> <code>book4.xml</code>  </p>\n<pre><code>&lt;!DOCTYPE book SYSTEM &#39;book.dtd&#39;&gt;  \n&lt;book ISBN = &#39;1-861001-57-5&#39;&gt;  \n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;  \n  &lt;price&gt;19.95&lt;/price&gt;  \n&lt;/book&gt;\n</code></pre><p> <code>book.dtd</code>  </p>\n<pre><code>&lt;!ELEMENT book (title,price)&gt;   \n&lt;!ATTLIST book   \n   genre CDATA &quot;novel&quot;  \n   ISBN CDATA #REQUIRED&gt;  \n&lt;!ELEMENT title (#PCDATA)&gt;  \n&lt;!ELEMENT price (#PCDATA)&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_IsEmptyElement\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_IsEmptyElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEmptyElement</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, <code><myelement></myelement></code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsEmptyElement { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node is an element (<span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> equals <code>XmlNodeType.Element</code>) that ends with <code>/&gt;</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property enables you to determine the difference between the following:  </p>\n<p> <code>&lt;item num=&quot;123&quot;/&gt;</code> (<code>IsEmptyElement</code> is <code>true</code>).  </p>\n<p> <code>&lt;item num=&quot;123&quot;&gt;&lt;/item&gt;</code> (<code>IsEmptyElement</code> is <code>false</code>, although element content is empty).  </p>\n<p> A corresponding <code>EndElement</code> node is not generated for empty elements.  </p>\n<p> If default content has been added to an element due to schema validation, <code>IsEmptyElement</code> still returns <code>true</code>. It has no bearing on whether or not the element has a default value. In other words, <code>IsEmptyElement</code> simply reports whether or not the element in the source document had an end element tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each element.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#10\">While reader.Read()\n  If reader.IsStartElement() Then\n    If reader.IsEmptyElement Then\n      Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n    Else\n      Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name)\n      reader.Read() &#39; Read the start tag.\n      If reader.IsStartElement() Then &#39; Handle nested elements.\n        Console.Write(vbCr + vbLf + &quot;&lt;{0}&gt;&quot;, reader.Name)\n      End If\n      Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n    End If\n  End If\nEnd While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#10\">while (reader.Read()) {\n  if (reader.IsStartElement()) {\n    if (reader.IsEmptyElement)\n      Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n    else {\n      Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n      reader.Read(); // Read the start tag.\n      if (reader.IsStartElement())  // Handle nested elements.\n        Console.Write(&quot;\\r<br>&lt;{0}&gt;&quot;, reader.Name);\n      Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n    }\n  } \n} \n</code></pre><p> The example uses the file, <code>elems.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#3\">&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n  &lt;misc/&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string this[int i] { get; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>i</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property does not move the reader.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#1\">&#39; Display all attributes.\nIf reader.HasAttributes Then\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;)\n  Dim i As Integer\n  For i = 0 To (reader.AttributeCount - 1)\n    Console.WriteLine(&quot;  {0}&quot;, reader(i))\n  Next i\n  &#39; Move the reader back to the element node.\n  reader.MoveToElement() \nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#1\">// Display all attributes.\nif (reader.HasAttributes) {\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n  for (int i = 0; i &lt; reader.AttributeCount; i++) {\n    Console.WriteLine(&quot;  {0}&quot;, reader[i]);\n  }\n  // Move the reader back to the element node.\n  reader.MoveToElement(); \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Item_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.Name*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string this[string name] { get; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property does not move the reader.  </p>\n<p> If the reader is positioned on a <code>DocumentType</code> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <code>reader[&quot;PUBLIC&quot;]</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the ISBN attribute.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#7\">reader.ReadToDescendant(&quot;book&quot;)\nDim isbn As String = reader(&quot;ISBN&quot;)\nConsole.WriteLine(&quot;The ISBN value: &quot; + isbn)\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#7\">reader.ReadToDescendant(&quot;book&quot;);\nstring isbn =reader[&quot;ISBN&quot;];\nConsole.WriteLine(&quot;The ISBN value: &quot; + isbn);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Item_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string this[string name, string namespaceURI] { get; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property does not move the reader.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_LocalName\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_LocalName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalName</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the local name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string LocalName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the current node with the prefix removed. For example, <code>LocalName</code> is <code>book</code> for the element <code><bk:book></bk:book></code>.  </p>\n<p> For node types that do not have a name (like <code>Text</code>, <code>Comment</code>, and so on), this property returns <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#9\">Dim reader As XmlReader = XmlReader.Create(&quot;book2.xml&quot;)\n        \n&#39; Parse the file.  If they exist, display the prefix and \n&#39; namespace URI of each node.\nWhile reader.Read()\n  If reader.IsStartElement() Then\n    If reader.Prefix = String.Empty Then\n      Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n    Else\n      Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n      Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI)\n    End If\n  End If\nEnd While\nreader.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#9\">XmlReader reader = XmlReader.Create(&quot;book2.xml&quot;);\n\n// Parse the file.  If they exist, display the prefix and \n// namespace URI of each node.\nwhile (reader.Read()) {\n  if (reader.IsStartElement()) {\n    if (reader.Prefix==String.Empty)\n      Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n    else {\n      Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n      Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n    }\n  }\n}       \nreader.Close();\n</code></pre><p> The example uses the file, book2.xml, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#5\">&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;bk:genre&gt;novel&lt;/bk:genre&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Name\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the qualified name of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The qualified name of the current node. For example, <code>Name</code> is <code>bk:book</code> for the element <code><bk:book></bk:book></code>.  </p>\n<p> The name returned is dependent on the <span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> of the node. The following node types return the listed values. All other node types return an empty string.  </p>\n <table><thead><tr><th> Node type<br>\n </th><th> Name<br>\n </th></tr></thead><tbody><tr><td><code>Attribute</code></td><td> The name of the attribute.<br>\n </td></tr><tr><td><code>DocumentType</code></td><td> The document type name.<br>\n </td></tr><tr><td><code>Element</code></td><td> The tag name.<br>\n </td></tr><tr><td><code>EntityReference</code></td><td> The name of the entity referenced.<br>\n </td></tr><tr><td><code>ProcessingInstruction</code></td><td> The target of the processing instruction.<br>\n </td></tr><tr><td><code>XmlDeclaration</code></td><td> The literal string <code>xml</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#8\">Dim settings As New XmlReaderSettings()\nsettings.DtdProcessing = DtdProcessing.Parse\nDim reader As XmlReader = XmlReader.Create(&quot;items.xml&quot;, settings)\nreader.MoveToContent()\n&#39; Parse the file and display each of the nodes.\nWhile reader.Read()\n  Select Case reader.NodeType\n    Case XmlNodeType.Element\n      Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n    Case XmlNodeType.Text\n      Console.Write(reader.Value)\n    Case XmlNodeType.CDATA\n      Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n    Case XmlNodeType.ProcessingInstruction\n      Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n    Case XmlNodeType.Comment\n      Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n    Case XmlNodeType.XmlDeclaration\n      Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n    Case XmlNodeType.Document\n    Case XmlNodeType.DocumentType\n      Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n    Case XmlNodeType.EntityReference\n      Console.Write(reader.Name)\n    Case XmlNodeType.EndElement\n      Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n  End Select\nEnd While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#8\">XmlReaderSettings settings = new XmlReaderSettings();\nsettings.DtdProcessing = DtdProcessing.Parse;\nXmlReader reader = XmlReader.Create(&quot;items.xml&quot;, settings);\n  \nreader.MoveToContent();\n  // Parse the file and display each of the nodes.\n  while (reader.Read()) {\n    switch (reader.NodeType) {\n      case XmlNodeType.Element:\n          Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n          break;\n      case XmlNodeType.Text:\n          Console.Write(reader.Value);\n          break;\n       case XmlNodeType.CDATA:\n           Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n           break;\n       case XmlNodeType.ProcessingInstruction:\n           Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n           break;\n       case XmlNodeType.Comment:\n           Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n           break;\n       case XmlNodeType.XmlDeclaration:\n           Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n           break;\n       case XmlNodeType.Document:\n           break;\n       case XmlNodeType.DocumentType:\n           Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n           break;\n       case XmlNodeType.EntityReference:\n           Console.Write(reader.Name);\n           break;\n       case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n   } \n}\n</code></pre><p> The sample uses the <code>items.xml</code> file.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#2\">&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;Test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;Test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_NamespaceURI\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_NamespaceURI_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NamespaceURI</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string NamespaceURI { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI of the current node; otherwise an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is relevant to <code>Element</code> and <code>Attribute</code> nodes only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#9\">Dim reader As XmlReader = XmlReader.Create(&quot;book2.xml&quot;)\n        \n&#39; Parse the file.  If they exist, display the prefix and \n&#39; namespace URI of each node.\nWhile reader.Read()\n  If reader.IsStartElement() Then\n    If reader.Prefix = String.Empty Then\n      Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n    Else\n      Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n      Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI)\n    End If\n  End If\nEnd While\nreader.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#9\">XmlReader reader = XmlReader.Create(&quot;book2.xml&quot;);\n\n// Parse the file.  If they exist, display the prefix and \n// namespace URI of each node.\nwhile (reader.Read()) {\n  if (reader.IsStartElement()) {\n    if (reader.Prefix==String.Empty)\n      Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n    else {\n      Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n      Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n    }\n  }\n}       \nreader.Close();\n</code></pre><p> The example uses the file, book2.xml, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#5\">&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;bk:genre&gt;novel&lt;/bk:genre&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_NameTable\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_NameTable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameTable</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> associated with this implementation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Xml.XmlNameTable NameTable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a></div>\r\n                  </div>\r\n                  <p>The <code>XmlNameTable</code> enabling you to get the atomized version of a string within the node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All node and attribute names returned from <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> are atomized using the <code>NameTable</code>. When the same name is returned multiple times (for example, <code>Customer</code>), then the same <code>String</code> object will be returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_NodeType\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the type of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Xml.XmlNodeType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>One of the enumeration values that specify the type of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#8\">Dim settings As New XmlReaderSettings()\nsettings.DtdProcessing = DtdProcessing.Parse\nDim reader As XmlReader = XmlReader.Create(&quot;items.xml&quot;, settings)\nreader.MoveToContent()\n&#39; Parse the file and display each of the nodes.\nWhile reader.Read()\n  Select Case reader.NodeType\n    Case XmlNodeType.Element\n      Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n    Case XmlNodeType.Text\n      Console.Write(reader.Value)\n    Case XmlNodeType.CDATA\n      Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n    Case XmlNodeType.ProcessingInstruction\n      Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n    Case XmlNodeType.Comment\n      Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n    Case XmlNodeType.XmlDeclaration\n      Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n    Case XmlNodeType.Document\n    Case XmlNodeType.DocumentType\n      Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n    Case XmlNodeType.EntityReference\n      Console.Write(reader.Name)\n    Case XmlNodeType.EndElement\n      Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n  End Select\nEnd While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#8\">XmlReaderSettings settings = new XmlReaderSettings();\nsettings.DtdProcessing = DtdProcessing.Parse;\nXmlReader reader = XmlReader.Create(&quot;items.xml&quot;, settings);\n  \nreader.MoveToContent();\n  // Parse the file and display each of the nodes.\n  while (reader.Read()) {\n    switch (reader.NodeType) {\n      case XmlNodeType.Element:\n          Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n          break;\n      case XmlNodeType.Text:\n          Console.Write(reader.Value);\n          break;\n       case XmlNodeType.CDATA:\n           Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n           break;\n       case XmlNodeType.ProcessingInstruction:\n           Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n           break;\n       case XmlNodeType.Comment:\n           Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n           break;\n       case XmlNodeType.XmlDeclaration:\n           Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n           break;\n       case XmlNodeType.Document:\n           break;\n       case XmlNodeType.DocumentType:\n           Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n           break;\n       case XmlNodeType.EntityReference:\n           Console.Write(reader.Name);\n           break;\n       case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n   } \n}\n</code></pre><p> The sample uses the <code>items.xml</code> file.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#2\">&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;Test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;Test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Prefix\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Prefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the namespace prefix associated with the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string Prefix { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace prefix associated with the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#9\">Dim reader As XmlReader = XmlReader.Create(&quot;book2.xml&quot;)\n        \n&#39; Parse the file.  If they exist, display the prefix and \n&#39; namespace URI of each node.\nWhile reader.Read()\n  If reader.IsStartElement() Then\n    If reader.Prefix = String.Empty Then\n      Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName)\n    Else\n      Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName)\n      Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI)\n    End If\n  End If\nEnd While\nreader.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#9\">XmlReader reader = XmlReader.Create(&quot;book2.xml&quot;);\n\n// Parse the file.  If they exist, display the prefix and \n// namespace URI of each node.\nwhile (reader.Read()) {\n  if (reader.IsStartElement()) {\n    if (reader.Prefix==String.Empty)\n      Console.WriteLine(&quot;&lt;{0}&gt;&quot;, reader.LocalName);\n    else {\n      Console.Write(&quot;&lt;{0}:{1}&gt;&quot;, reader.Prefix, reader.LocalName);\n      Console.WriteLine(&quot; The namespace URI is &quot; + reader.NamespaceURI);\n    }\n  }\n}       \nreader.Close();\n</code></pre><p> The example uses the file, book2.xml, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#5\">&lt;book xmlns:bk=&#39;urn:samples&#39;&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;bk:genre&gt;novel&lt;/bk:genre&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_QuoteChar\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_QuoteChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QuoteChar</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual char QuoteChar { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The quotation mark character (&quot; or &#39;) used to enclose the value of an attribute node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property applies only to an attribute node.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadState\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadState</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the state of the reader.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Xml.ReadState ReadState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a></div>\r\n                  </div>\r\n                  <p>One of the enumeration values that specifies the state of the reader.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadStateproperty has one of the following values:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>, when the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a>method is called.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>, when the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> method has been called, and additional methods may be called on the reader.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>, when the end of the XML document has been reached successfully.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>, when the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Close_\" data-linktype=\"relative-path\">Close</a> method is called.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>, when an error is preventing the read operation from continuing.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_SchemaInfo\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_SchemaInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the schema information that has been assigned to the current node as a result of schema validation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> object containing the schema information for the current node. Schema information can be set on elements, attributes, or on text nodes with a non-null <span class=\"xref\">stem.Xml.XmlReader.ValueType*</span> (typed values).  </p>\n<p> If the current node is not one of the above node types, or if the <code>XmlReader</code> instance does not report schema information, this property returns <code>null</code>.  </p>\n<p> If this property is called from an <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> or an <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a> object, this property always returns <code>null</code>. These <code>XmlReader</code> implementations do not expose schema information through the <code>SchemaInfo</code> property.  </p>\n <div class=\"alert NOTE\"><br> If you have to get the post-schema-validation information set (PSVI) for an element, position the reader on the end tag of the element, rather than on the start tag. You get the PSVI through the <code>SchemaInfo</code> property of a reader. The validating reader that is created through <span class=\"xref\">stem.Xml.XmlReader.Create*</span> with the <span class=\"xref\">stem.Xml.XmlReaderSettings.ValidationType*</span> property set to <a class=\"xref\" href=\"system.xml.validationtype\" data-linktype=\"relative-path\">ValidationType</a> has complete PSVI for an element only when the reader is positioned on the end tag of an element.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> interface exposes a subset of the Post Schema Validation Infoset (PSVI) associated with an XML node.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Settings\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Settings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Settings</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object used to create this <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlReaderSettings Settings { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object used to create this reader instance. If this reader was not created using the <span class=\"xref\">stem.Xml.XmlReader.Create*</span> method, this property returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object can contain sensitive information such as user credentials. Applications must be careful when caching this object or passing it to another component.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> class is used to specify the set of features to support on the created reader instance. The <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object returned by this property cannot be modified. Any attempt to change individual settings results in an exception being thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Value\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the text value of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string Value { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value returned depends on the <span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> of the node. The following table lists node types that have a value to return. All other node types return <code>String.Empty</code>.  </p>\n <table><thead><tr><th> Node type<br>\n </th><th> Value<br>\n </th></tr></thead><tbody><tr><td><code>Attribute</code></td><td> The value of the attribute.<br>\n </td></tr><tr><td><code>CDATA</code></td><td> The content of the CDATA section.<br>\n </td></tr><tr><td><code>Comment</code></td><td> The content of the comment.<br>\n </td></tr><tr><td><code>DocumentType</code></td><td> The internal subset.<br>\n </td></tr><tr><td><code>ProcessingInstruction</code></td><td> The entire content, excluding the target.<br>\n </td></tr><tr><td><code>SignificantWhitespace</code></td><td> The white space between markup in a mixed content model.<br>\n </td></tr><tr><td><code>Text</code></td><td> The content of the text node.<br>\n </td></tr><tr><td><code>Whitespace</code></td><td> The white space between markup.<br>\n </td></tr><tr><td><code>XmlDeclaration</code></td><td> The content of the declaration.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the asynchronous version of this property, see the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_GetValueAsync_\" data-linktype=\"relative-path\">GetValueAsync</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#8\">Dim settings As New XmlReaderSettings()\nsettings.DtdProcessing = DtdProcessing.Parse\nDim reader As XmlReader = XmlReader.Create(&quot;items.xml&quot;, settings)\nreader.MoveToContent()\n&#39; Parse the file and display each of the nodes.\nWhile reader.Read()\n  Select Case reader.NodeType\n    Case XmlNodeType.Element\n      Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n    Case XmlNodeType.Text\n      Console.Write(reader.Value)\n    Case XmlNodeType.CDATA\n      Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n    Case XmlNodeType.ProcessingInstruction\n      Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n    Case XmlNodeType.Comment\n      Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n    Case XmlNodeType.XmlDeclaration\n      Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n    Case XmlNodeType.Document\n    Case XmlNodeType.DocumentType\n      Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n    Case XmlNodeType.EntityReference\n      Console.Write(reader.Name)\n    Case XmlNodeType.EndElement\n      Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n  End Select\nEnd While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#8\">XmlReaderSettings settings = new XmlReaderSettings();\nsettings.DtdProcessing = DtdProcessing.Parse;\nXmlReader reader = XmlReader.Create(&quot;items.xml&quot;, settings);\n  \nreader.MoveToContent();\n  // Parse the file and display each of the nodes.\n  while (reader.Read()) {\n    switch (reader.NodeType) {\n      case XmlNodeType.Element:\n          Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n          break;\n      case XmlNodeType.Text:\n          Console.Write(reader.Value);\n          break;\n       case XmlNodeType.CDATA:\n           Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n           break;\n       case XmlNodeType.ProcessingInstruction:\n           Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n           break;\n       case XmlNodeType.Comment:\n           Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n           break;\n       case XmlNodeType.XmlDeclaration:\n           Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n           break;\n       case XmlNodeType.Document:\n           break;\n       case XmlNodeType.DocumentType:\n           Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n           break;\n       case XmlNodeType.EntityReference:\n           Console.Write(reader.Name);\n           break;\n       case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n   } \n}\n</code></pre><p> The sample uses the <code>items.xml</code> file.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#2\">&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;Test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;Test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ValueType\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ValueType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValueType</div>        \r\n          </div>\r\n    \r\n            <p>Gets The Common Language Runtime (CLR) type for the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type ValueType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The CLR type that corresponds to the typed value of the node. The default is <code>System.String</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See <a href=\"../Topic/Type%20Support%20in%20the%20System.Xml%20Classes.md\" data-linktype=\"relative-path\">Type Support in the System.Xml Classes</a> for a list of the default mappings.  </p>\n<p> An element of type <code>xs:int</code> has a <code>ValueType</code> of <code>System.Int32</code> by default. However, the <code>ValueType</code> could be one of the valid types that can be mapped to <code>xs:int</code>, such as <code>System.Int16</code> or <code>System.Double</code>.  </p>\n<p> If a node is un-typed, or if the node is an element that contains mixed content, the node value is mapped to the <code>System.String</code> type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_XmlLang\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_XmlLang_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlLang</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the current <code>xml:lang</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string XmlLang { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The current <code>xml:lang</code> scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property represents the <code>xml:lang</code> scope within which the current node resides. For example, here is an XML fragment with <code>xml:lang</code> set to US English in the root element:  </p>\n<pre><code>&lt;root xml:lang=&quot;en-us&quot;&gt;   \n&lt;name&gt;Fred&lt;/name&gt;   \n&lt;/root&gt;\n</code></pre><p> When the reader is positioned on the <code>name</code> element, you can use this property to find that it is in the scope of a US English <code>xml:lang</code> attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_XmlLang_\" data-linktype=\"relative-path\">XmlLang</a> for an example of using this property.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_XmlSpace\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_XmlSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlSpace</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the current <code>xml:space</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlSpace XmlSpace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a> values. If no <code>xml:space</code> scope exists, this property defaults to <code>XmlSpace.None</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>See <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_XmlSpace_\" data-linktype=\"relative-path\">XmlSpace</a> (in the <code>XmlTextReader</code> class) for an example using this property.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Close\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, changes the <span class=\"xref\">stem.Xml.XmlReader.ReadState*</span> to <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method also releases any resources held during reading. If Close has already been called, no action is performed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance using the specified stream with default settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.IO.Stream input);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream that contains the XML data.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> does not have sufficient permissions to access the location of the XML data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object as one of its arguments, and pass in an <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object with the correct settings.  </p>\n<p> A default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object that reads from a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.Create#8\">        Dim fs As New FileStream(&quot;C:\\data\\books.xml&quot;, FileMode.OpenOrCreate, FileAccess.Read, FileShare.Read)\n        \n        &#39; Create the XmlReader object.\n        Dim reader As XmlReader = XmlReader.Create(fs)\n    \n    End Sub &#39;FileStream\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.Create#8\">\nFileStream fs = new FileStream(@&quot;C:\\data\\books.xml&quot;, FileMode.OpenOrCreate, \n                                                                    FileAccess.Read, FileShare.Read);\n\n// Create the XmlReader object.\nXmlReader reader = XmlReader.Create(fs);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified text reader.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.IO.TextReader input);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration is not used by the XML reader to decode the data stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object as one of its arguments, and pass in an <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object with the correct settings.  </p>\n<p> A default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a>with the necessary credentials using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a> class to read an XML string.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.Create#7\">        Dim xmlData As String = &quot;&lt;item productID=&#39;124390&#39;&gt;&quot; &amp; _ \n                                             &quot;&lt;price&gt;5.95&lt;/price&gt;&quot; &amp; _ \n                                             &quot;&lt;/item&gt;&quot;\n        \n        &#39; Create the XmlReader object.\n        Dim reader As XmlReader = XmlReader.Create(New StringReader(xmlData))\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.Create#7\">string xmlData =&quot;&lt;item productID=&#39;124390&#39;&gt;&quot; +\n                        &quot;&lt;price&gt;5.95&lt;/price&gt;&quot; +\n                        &quot;&lt;/item&gt;&quot;;\n\n// Create the XmlReader object.\nXmlReader reader = XmlReader.Create(new StringReader(xmlData));\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance with specified URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (string inputUri);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputUri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URI for the file that contains the XML data. The <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> class is used to convert the path to a canonical data representation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>inputUri</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> does not have sufficient permissions to access the location of the XML data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file identified by the URI does not exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uriformatexception\" data-linktype=\"relative-path\">UriFormatException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>, instead.<br>\n</div>  \n\n<p> The URI format is not correct.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object as one of its arguments, and pass in an <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object with the correct settings.  </p>\n<p> A default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object that reads XML data file specified by the URI.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.Create#6\">        &#39; Create the XmlReader object.\n        Dim reader As XmlReader = XmlReader.Create(&quot;books.xml&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.Create#6\">// Create the XmlReader object.\nXmlReader reader = XmlReader.Create(&quot;books.xml&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(Stream,XmlReaderSettings)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance with the specified stream and settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream that contains the XML data.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance. This value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, use the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can use one of the following methods to control which resources the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access:  </p>\n<ul>\n<li><p>Restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n<p>-or-  </p>\n</li>\n<li><p>Do not allow the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(TextReader,XmlReaderSettings)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified text reader and settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn&#39;t used by the XML reader to decode the data stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. This value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, use the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can use one of the following methods to control which resources the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access:  </p>\n<ul>\n<li><p>Restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n<p>-or-  </p>\n</li>\n<li><p>Do not allow the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String,XmlReaderSettings)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified URI and settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (string inputUri, System.Xml.XmlReaderSettings settings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputUri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URI for the file containing the XML data. The <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> object on the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object is used to convert the path to a canonical data representation. If <span class=\"xref\">stem.Xml.XmlReaderSettings.XmlResolver*</span> is <code>null</code>, a new <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> object is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance. This value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>inputUri</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified by the URI cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uriformatexception\" data-linktype=\"relative-path\">UriFormatException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>, instead.<br>\n</div>  \n\n<p> The URI format is not correct.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> This means that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access any locations that does not require authentication. If the external resource is located on a network resource that requires authentication, use the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object that supports document type definition (DTD) validation.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.Create#3\">        &#39; Set the validation settings.\n        Dim settings As New XmlReaderSettings()\n        settings.DtdProcessing = DtdProcessing.Parse\n        settings.ValidationType = ValidationType.DTD\n        AddHandler settings.ValidationEventHandler, AddressOf ValidationCallBack\n        \n        &#39; Create the XmlReader object.\n        Dim reader As XmlReader = XmlReader.Create(&quot;itemDTD.xml&quot;, settings)\n        \n        &#39; Parse the file. \n        While reader.Read()\n        End While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.Create#3\">// Set the validation settings.\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.DtdProcessing = DtdProcessing.Parse;\nsettings.ValidationType = ValidationType.DTD;\nsettings.ValidationEventHandler += new ValidationEventHandler (ValidationCallBack);\n \n // Create the XmlReader object.\nXmlReader reader = XmlReader.Create(&quot;itemDTD.xml&quot;, settings);\n\n// Parse the file. \nwhile (reader.Read()) {}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_Xml_XmlReader_System_Xml_XmlReaderSettings_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(XmlReader,XmlReaderSettings)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified XML reader and settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.Xml.XmlReader reader, System.Xml.XmlReaderSettings settings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that you want to use as the underlying XML reader.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance.  </p>\n<p> The conformance level of the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object must either match the conformance level of the underlying reader, or it must be set to <a class=\"xref\" href=\"system.xml.conformancelevel\" data-linktype=\"relative-path\">ConformanceLevel</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is wrapped around the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>reader</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>If the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object specifies a conformance level that is not consistent with conformance level of the underlying reader.  </p>\n<p> -or-  </p>\n<p> The underlying <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is in an <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a> or <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a> state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method allows you add additional features to an underlying <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object. The underlying <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object can be another <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object created by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method, or an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object created using one of the concrete <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implementations.  </p>\n<p> A default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a schema.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can use one of the following methods to control which resources the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access:  </p>\n<ul>\n<li><p>Restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n<p>-or-  </p>\n</li>\n<li><p>Do not allow the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object that is wrapped around an <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.Create#5\">        &#39; Create the XmlNodeReader object.\n        Dim doc As New XmlDocument()\n        doc.Load(&quot;books.xml&quot;)\n        Dim nodeReader As New XmlNodeReader(doc)\n        \n        &#39; Set the validation settings.\n        Dim settings As New XmlReaderSettings()\n        settings.ValidationType = ValidationType.Schema\n        settings.Schemas.Add(&quot;urn:bookstore-schema&quot;, &quot;books.xsd&quot;)\n        AddHandler settings.ValidationEventHandler, AddressOf ValidationCallBack\n        \n        &#39; Create a validating reader that wraps the XmlNodeReader object.\n        Dim reader As XmlReader = XmlReader.Create(nodeReader, settings)\n        &#39; Parse the XML file.\n        While reader.Read()\n        End While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.Create#5\">// Create the XmlNodeReader object.\nXmlDocument doc = new XmlDocument();\ndoc.Load(&quot;books.xml&quot;);\nXmlNodeReader nodeReader = new XmlNodeReader(doc);\n\n// Set the validation settings.\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.ValidationType = ValidationType.Schema;\nsettings.Schemas.Add(&quot;urn:bookstore-schema&quot;, &quot;books.xsd&quot;);\nsettings.ValidationEventHandler += new ValidationEventHandler (ValidationCallBack);\n\n// Create a validating reader that wraps the XmlNodeReader object.\nXmlReader reader = XmlReader.Create(nodeReader, settings);\n// Parse the XML file.\nwhile (reader.Read());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(Stream,XmlReaderSettings,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance using the specified stream, base URI, and settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings, string baseUri);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream that contains the XML data.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance. This value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>baseUri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base URI for the entity or document being read. This value can be <code>null</code>.  </p>\n<p> <strong>Security Note</strong> The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, use the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can use one of the following methods to control which resources the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access:  </p>\n<ul>\n<li><p>Restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n<p>-or-  </p>\n</li>\n<li><p>Do not allow the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_IO_Stream_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(Stream,XmlReaderSettings,XmlParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance using the specified stream, settings, and context information for parsing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream that contains the XML data.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance. This value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The context information required to parse the XML fragment. The context information can include the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> to use, encoding, namespace scope, the current <code>xml:lang</code> and <code>xml:space</code> scope, base URI, and document type definition.  </p>\n<p> This value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, use the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can use one of the following methods to control which resources the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access:  </p>\n<ul>\n<li><p>Restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n<p>-or-  </p>\n</li>\n<li><p>Do not allow the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(TextReader,XmlReaderSettings,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified text reader, settings, and base URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings, string baseUri);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn&#39;t used by the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to decode the data stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance. This value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>baseUri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base URI for the entity or document being read. This value can be <code>null</code>.  </p>\n<p> <strong>Security Note</strong> The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, use the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can use one of the following methods to control which resources the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access:  </p>\n<ul>\n<li><p>Restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n<p>-or-  </p>\n</li>\n<li><p>Do not allow the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_IO_TextReader_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(TextReader,XmlReaderSettings,XmlParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified text reader, settings, and context information for parsing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn&#39;t used by the XML reader to decode the data stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance. This value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The context information required to parse the XML fragment. The context information can include the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> to use, encoding, namespace scope, the current <code>xml:lang</code> and <code>xml:space</code> scope, base URI, and document type definition.  </p>\n<p> This value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>input</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlReaderSettings.NameTable*</span> and <span class=\"xref\">stem.Xml.XmlParserContext.NameTable*</span> properties both contain values. (Only one of these <code>NameTable</code> properties can be set and used).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> If the external resource is located on a network resource that requires authentication, use the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can use one of the following methods to control which resources the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access:  </p>\n<ul>\n<li><p>Restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n<p>-or-  </p>\n</li>\n<li><p>Do not allow the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to open any external resources by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to <code>null</code>.  </p>\n</li>\n</ul>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object that reads an XML fragment.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.Create#1\">        Dim xmlFrag As String = &quot;&lt;item rk:ID=&#39;abc-23&#39;&gt;hammer&lt;/item&gt; &quot; &amp; _\n                                             &quot;&lt;item rk:ID=&#39;r2-435&#39;&gt;paint&lt;/item&gt;&quot; &amp; _\n                                             &quot;&lt;item rk:ID=&#39;abc-39&#39;&gt;saw&lt;/item&gt;&quot;\n        \n        &#39; Create the XmlNamespaceManager.\n        Dim nt As New NameTable()\n        Dim nsmgr As New XmlNamespaceManager(nt)\n        nsmgr.AddNamespace(&quot;rk&quot;, &quot;urn:store-items&quot;)\n        \n        &#39; Create the XmlParserContext.\n        Dim context As New XmlParserContext(Nothing, nsmgr, Nothing, XmlSpace.None)\n        \n        &#39; Create the reader. \n        Dim settings As New XmlReaderSettings()\n        settings.ConformanceLevel = ConformanceLevel.Fragment\n        Dim reader As XmlReader = XmlReader.Create(New StringReader(xmlFrag), settings, context)\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.Create#1\">string xmlFrag =&quot;&lt;item rk:ID=&#39;abc-23&#39;&gt;hammer&lt;/item&gt; &quot; +\n                        &quot;&lt;item rk:ID=&#39;r2-435&#39;&gt;paint&lt;/item&gt;&quot; +\n                        &quot;&lt;item rk:ID=&#39;abc-39&#39;&gt;saw&lt;/item&gt;&quot;;\n\n// Create the XmlNamespaceManager.\nNameTable nt = new NameTable();\nXmlNamespaceManager nsmgr = new XmlNamespaceManager(nt);\nnsmgr.AddNamespace(&quot;rk&quot;, &quot;urn:store-items&quot;);\n\n// Create the XmlParserContext.\nXmlParserContext context = new XmlParserContext(null, nsmgr, null, XmlSpace.None);\n\n// Create the reader. \nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.ConformanceLevel = ConformanceLevel.Fragment;\nXmlReader reader = XmlReader.Create(new StringReader(xmlFrag), settings, context);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Create_System_String_System_Xml_XmlReaderSettings_System_Xml_XmlParserContext_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String,XmlReaderSettings,XmlParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance by using the specified URI, settings, and context information for parsing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.XmlReader Create (string inputUri, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputUri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URI for the file containing the XML data. The <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> object on the <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> object is used to convert the path to a canonical data representation. If <span class=\"xref\">stem.Xml.XmlReaderSettings.XmlResolver*</span> is <code>null</code>, a new <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> object is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>settings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The settings for the new <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance. This value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlparsercontext\" data-linktype=\"relative-path\">XmlParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The context information required to parse the XML fragment. The context information can include the <a class=\"xref\" href=\"system.xml.xmlnametable\" data-linktype=\"relative-path\">XmlNameTable</a> to use, encoding, namespace scope, the current <code>xml:lang</code> and <code>xml:space</code> scope, base URI, and document type definition.  </p>\n<p> This value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>An object that is used to read the XML data in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>inputUri</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> does not have sufficient permissions to access the location of the XML data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlReaderSettings.NameTable*</span> and <span class=\"xref\">stem.Xml.XmlParserContext.NameTable*</span> properties both contain values. (Only one of these <code>NameTable</code> properties can be set and used).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified by the URI cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uriformatexception\" data-linktype=\"relative-path\">UriFormatException</a></div>\r\n                  </div>\r\n                  <p>The URI format is not correct.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default an <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.5.2, no default <a class=\"xref\" href=\"system.xml.xmlurlresolver\" data-linktype=\"relative-path\">XmlUrlResolver</a> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> using the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property.  </p>\n</div>\n<p> This means that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access any locations that does not require authentication. If the external resource is located on a network resource that requires authentication, use the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to specify an <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> with the necessary credentials.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You can restrict the resources that the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can access by setting the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_XmlResolver_\" data-linktype=\"relative-path\">XmlResolver</a> property to an <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.  </p>\n</div>\n<p> The created <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object expands entity references and performs XML normalization of new line characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Dispose\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_GetAttribute_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string GetAttribute (int i);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>i</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute. The index is zero-based. (The first attribute has index 0.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. This method does not move the reader.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>i</code> is out of range. It must be non-negative and less than the size of the attribute collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the third attribute.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#2\">reader.ReadToFollowing(&quot;book&quot;)\nDim isbn As String = reader.GetAttribute(2)\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#2\">reader.ReadToFollowing(&quot;book&quot;);\nstring isbn = reader.GetAttribute(2);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_GetAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.Name*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string GetAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found or the value is <code>String.Empty</code>, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not move the reader.  </p>\n<p> If the reader is positioned on a <code>DocumentType</code> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <code>reader.GetAttribute(&quot;PUBLIC&quot;)</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the ISBN attribute.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#3\">reader.ReadToFollowing(&quot;book&quot;)\nDim isbn As String = reader.GetAttribute(&quot;ISBN&quot;)\nConsole.WriteLine(&quot;The ISBN value: &quot; + isbn)\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#3\">reader.ReadToFollowing(&quot;book&quot;);\nstring isbn = reader.GetAttribute(&quot;ISBN&quot;);\nConsole.WriteLine(&quot;The ISBN value: &quot; + isbn);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_GetAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_GetAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the value of the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string GetAttribute (string name, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified attribute. If the attribute is not found or the value is <code>String.Empty</code>, <code>null</code> is returned. This method does not move the reader.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following XML contains an attribute in a specific namespace:  </p>\n<pre><code>&lt;test xmlns:dt=&quot;urn:datatypes&quot; dt:type=&quot;int&quot;/&gt;\n</code></pre><p> You can lookup the <code>dt:type</code> attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):  </p>\n<pre><code>String dt = reader.GetAttribute(&quot;dt:type&quot;);  \nString dt2 = reader.GetAttribute(&quot;type&quot;,&quot;urn:datatypes&quot;);\n</code></pre><p> To lookup the <code>xmlns:dt</code> attribute, use one of the following arguments:  </p>\n<pre><code>String dt3 = reader.GetAttribute(&quot;xmlns:dt&quot;);  \nString dt4 = reader.GetAttribute(&quot;dt&quot;,http://www.w3.org/2000/xmlns/);\n</code></pre><p> You can also get this information using the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_GetValueAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_GetValueAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValueAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously gets the value of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;string&gt; GetValueAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_IsName_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_IsName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the string argument is a valid XML name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsName (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name to validate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the name is valid; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>str</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"http://go.microsoft.com/fwlink/?LinkId=49863\" data-linktype=\"external\">W3C XML 1.0 Recommendation</a> to determine whether the name is valid.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_IsNameToken_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_IsNameToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNameToken(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether or not the string argument is a valid XML name token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsNameToken (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name token to validate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if it is a valid name token; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>str</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"http://go.microsoft.com/fwlink/?LinkId=49863\" data-linktype=\"external\">W3C XML 1.0 Recommendation</a> to determine whether the name token is valid.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_IsStartElement\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_IsStartElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStartElement()</div>        \r\n          </div>\r\n    \r\n            <p>Calls <span class=\"xref\">stem.Xml.XmlReader.MoveToContent*</span> and tests if the current content node is a start tag or empty element tag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsStartElement ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <span class=\"xref\">stem.Xml.XmlReader.MoveToContent*</span> finds a start tag or empty element tag; <code>false</code> if a node type other than <code>XmlNodeType.Element</code> was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>Incorrect XML is encountered in the input stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each element.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#10\">While reader.Read()\n  If reader.IsStartElement() Then\n    If reader.IsEmptyElement Then\n      Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name)\n    Else\n      Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name)\n      reader.Read() &#39; Read the start tag.\n      If reader.IsStartElement() Then &#39; Handle nested elements.\n        Console.Write(vbCr + vbLf + &quot;&lt;{0}&gt;&quot;, reader.Name)\n      End If\n      Console.WriteLine(reader.ReadString()) &#39;Read the text content of the element.\n    End If\n  End If\nEnd While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#10\">while (reader.Read()) {\n  if (reader.IsStartElement()) {\n    if (reader.IsEmptyElement)\n      Console.WriteLine(&quot;&lt;{0}/&gt;&quot;, reader.Name);\n    else {\n      Console.Write(&quot;&lt;{0}&gt; &quot;, reader.Name);\n      reader.Read(); // Read the start tag.\n      if (reader.IsStartElement())  // Handle nested elements.\n        Console.Write(&quot;\\r<br>&lt;{0}&gt;&quot;, reader.Name);\n      Console.WriteLine(reader.ReadString());  //Read the text content of the element.\n    }\n  } \n} \n</code></pre><p> The example uses the file, <code>elems.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#3\">&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n  &lt;misc/&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_IsStartElement_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_IsStartElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStartElement(String)</div>        \r\n          </div>\r\n    \r\n            <p>Calls <span class=\"xref\">stem.Xml.XmlReader.MoveToContent*</span> and tests if the current content node is a start tag or empty element tag and if the <span class=\"xref\">stem.Xml.XmlReader.Name*</span> property of the element found matches the given argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsStartElement (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string matched against the <code>Name</code> property of the element found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the resulting node is an element and the <code>Name</code> property matches the specified string. <code>false</code> if a node type other than <code>XmlNodeType.Element</code> was found or if the element <code>Name</code> property does not match the specified string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>Incorrect XML is encountered in the input stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each price element.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#17\">  &#39; Parse the file and display each price node.\n  While reader.Read()\n    If reader.IsStartElement(&quot;price&quot;) Then\n      Console.WriteLine(reader.ReadInnerXml())\n    End If\n  End While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#17\">  // Parse the file and display each price node.\n  while (reader.Read()) {\n    if (reader.IsStartElement(&quot;price&quot;)) {\n       Console.WriteLine(reader.ReadInnerXml());\n    }\n  }   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_IsStartElement_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_IsStartElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStartElement(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Calls <span class=\"xref\">stem.Xml.XmlReader.MoveToContent*</span> and tests if the current content node is a start tag or empty element tag and if the <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span> properties of the element found match the given strings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsStartElement (string localname, string ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to match against the <code>LocalName</code> property of the element found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to match against the <code>NamespaceURI</code> property of the element found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the resulting node is an element. <code>false</code> if a node type other than <code>XmlNodeType.Element</code> was found or if the <code>LocalName</code> and <code>NamespaceURI</code> properties of the element do not match the specified strings.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>Incorrect XML is encountered in the input stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_LookupNamespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_LookupNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LookupNamespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, resolves a namespace prefix in the current element&#39;s scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string LookupNamespace (string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace URI to which the prefix maps or <code>null</code> if no matching prefix is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the following XML string, if the reader is positioned on the <code>href</code> attribute, the prefix <code>a</code> is resolved by calling <code>reader.LookupNamespace(&quot;a&quot;)</code>. The returned string is <code>urn:456</code>.  </p>\n<pre><code>&lt;root xmlns:a=&quot;urn:456&quot;&gt;  \n  &lt;item&gt;  \n  &lt;ref href=&quot;a:b&quot;/&gt;  \n  &lt;/item&gt;  \n &lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_MoveToAttribute_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, moves to the attribute with the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void MoveToAttribute (int i);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>i</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The parameter has a negative value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#4\">If reader.HasAttributes Then\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;)\n  Dim i As Integer\n  For i = 0 To reader.AttributeCount\n    reader.MoveToAttribute(i)\n    Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n  Next i\n  reader.MoveToElement() &#39;Moves the reader back to the element node.\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#4\">if (reader.HasAttributes) {\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n  for (int i = 0; i &lt; reader.AttributeCount; i++) {\n    reader.MoveToAttribute(i);\n    Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n  }\nreader.MoveToElement(); // Moves the reader back to the element node.\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_MoveToAttribute_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, moves to the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.Name*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool MoveToAttribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute is found; otherwise, <code>false</code>. If <code>false</code>, the reader&#39;s position does not change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The parameter is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After calling <code>MoveToAttribute</code>, the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> properties reflect the properties of that attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_MoveToAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_MoveToAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, moves to the attribute with the specified <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool MoveToAttribute (string name, string ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute is found; otherwise, <code>false</code>. If <code>false</code>, the reader&#39;s position does not change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Both parameter values are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After calling <code>MoveToAttribute</code>, the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_NamespaceURI_\" data-linktype=\"relative-path\">NamespaceURI</a>, and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Prefix_\" data-linktype=\"relative-path\">Prefix</a> properties reflect the properties of that attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_MoveToContent\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_MoveToContent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToContent()</div>        \r\n          </div>\r\n    \r\n            <p>Checks whether the current node is a content (non-white space text, <code>CDATA</code>, <code>Element</code>, <code>EndElement</code>, <code>EntityReference</code>, or <code>EndEntity</code>) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: <code>ProcessingInstruction</code>, <code>DocumentType</code>, <code>Comment</code>, <code>Whitespace</code>, or <code>SignificantWhitespace</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlNodeType MoveToContent ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> of the current node found by the method or <code>XmlNodeType.None</code> if the reader has reached the end of the input stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>Incorrect XML encountered in the input stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the current node is an attribute node, this method moves the reader back to the element that owns the attribute.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContentAsync_\" data-linktype=\"relative-path\">MoveToContentAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This is useful when you want to write code that can skip over random XML markup without breaking. For example, suppose you have the following code:  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlReader.MoveToContent Example#1\">      if ( reader-&gt;MoveToContent() == XmlNodeType::Element &amp;&amp;\n         reader-&gt;Name-&gt;Equals( &quot;price&quot; ) )\n      {\n         _price = reader-&gt;ReadString();\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlReader.MoveToContent Example#1\">if (reader.MoveToContent() == XmlNodeType.Element &amp;&amp; reader.Name == &quot;price&quot;) \n {\n    _price = reader.ReadString();\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlReader.MoveToContent Example#1\">        If reader.MoveToContent() = XmlNodeType.Element And reader.Name = &quot;price&quot; Then\n            _price = reader.ReadString()\n        End If\n</code></pre><p> This code can handle the following inputs without breaking:  </p>\n<pre><code>&lt;price&gt;123.4&lt;/price&gt;\n</code></pre><p> and  </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot;&gt;&lt;!DOCTYPE price SYSTEM  \n  &quot;abc&quot;&gt;&lt;price&gt;123.4&lt;/price&gt;\n</code></pre><p> and  </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot;&gt;&lt;!DOCTYPE price SYSTEM &quot;abc&quot;  \n  [&lt;!ENTTIY p  \n  &quot;123.4&quot;&gt;]&gt;&lt;price&gt;&amp;p;&lt;/price&gt;\n</code></pre><p> and  </p>\n<pre><code>&lt;!-- some test comment --&gt;&lt;?processing  \n  instruction?&gt;&lt;price&gt;123.4&lt;/price&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_MoveToContentAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_MoveToContentAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToContentAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt; MoveToContentAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>&gt;</div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> of the current node found by the method or <code>XmlNodeType.None</code> if the reader has reached the end of the input stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToContent_\" data-linktype=\"relative-path\">MoveToContent</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_MoveToElement\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_MoveToElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToElement()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, moves to the element that contains the current attribute node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool MoveToElement ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <code>false</code> if the reader is not positioned on an attribute (the position of the reader does not change).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: <code>Element</code>, <code>DocumentType</code>, or <code>XmlDeclaration</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#4\">If reader.HasAttributes Then\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;)\n  Dim i As Integer\n  For i = 0 To reader.AttributeCount\n    reader.MoveToAttribute(i)\n    Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n  Next i\n  reader.MoveToElement() &#39;Moves the reader back to the element node.\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#4\">if (reader.HasAttributes) {\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n  for (int i = 0; i &lt; reader.AttributeCount; i++) {\n    reader.MoveToAttribute(i);\n    Console.Write(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n  }\nreader.MoveToElement(); // Moves the reader back to the element node.\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_MoveToFirstAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_MoveToFirstAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToFirstAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, moves to the first attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool MoveToFirstAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if an attribute exists (the reader moves to the first attribute); otherwise, <code>false</code> (the position of the reader does not change).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the value of the first attribute.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#5\">reader.ReadToFollowing(&quot;book&quot;)\nreader.MoveToFirstAttribute()\nDim genre As String = reader.Value\nConsole.WriteLine(&quot;The genre value: &quot; + genre)\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#5\">reader.ReadToFollowing(&quot;book&quot;);\nreader.MoveToFirstAttribute();\nstring genre = reader.Value;\nConsole.WriteLine(&quot;The genre value: &quot; + genre);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_MoveToNextAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_MoveToNextAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToNextAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, moves to the next attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool MoveToNextAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there is a next attribute; <code>false</code> if there are no more attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the current node is an element node, this method is equivalent to <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToFirstAttribute_\" data-linktype=\"relative-path\">MoveToFirstAttribute</a>. If <code>MoveToNextAttribute</code> returns <code>true</code>, the reader moves to the next attribute; otherwise, the position of the reader does not change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays all attributes on the current node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#6\">If reader.HasAttributes Then\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;)\n  While reader.MoveToNextAttribute()\n    Console.WriteLine(&quot; {0}={1}&quot;, reader.Name, reader.Value)\n  End While\n  &#39; Move the reader back to the element node.\n  reader.MoveToElement()\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#6\">if (reader.HasAttributes) {\n  Console.WriteLine(&quot;Attributes of &lt;&quot; + reader.Name + &quot;&gt;&quot;);\n  while (reader.MoveToNextAttribute()) {\n    Console.WriteLine(&quot; {0}={1}&quot;, reader.Name, reader.Value);\n  }\n  // Move the reader back to the element node.\n  reader.MoveToElement();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Read\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, reads the next node from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool Read ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the next node was read successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while parsing the XML.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is first created and initialized, there is no information available. You must call Read to read the first node. The Read method sets the state of the XML reader to initiate <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a> and moves through the XML file sequentially until it reaches the end of the file, at which point the method returns a value of <code>false</code>.  </p>\n<p> This method requires at least four bytes from the data stream in order to begin parsing. If fewer than four bytes are returned and there is no more data in the stream, the method returns <code>false</code>. If there is more data in the stream, the method will block parsing until receipt of the fourth byte.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadAsync_\" data-linktype=\"relative-path\">ReadAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an XML file and displays each of the nodes.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#8\">Dim settings As New XmlReaderSettings()\nsettings.DtdProcessing = DtdProcessing.Parse\nDim reader As XmlReader = XmlReader.Create(&quot;items.xml&quot;, settings)\nreader.MoveToContent()\n&#39; Parse the file and display each of the nodes.\nWhile reader.Read()\n  Select Case reader.NodeType\n    Case XmlNodeType.Element\n      Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name)\n    Case XmlNodeType.Text\n      Console.Write(reader.Value)\n    Case XmlNodeType.CDATA\n      Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value)\n    Case XmlNodeType.ProcessingInstruction\n      Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value)\n    Case XmlNodeType.Comment\n      Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value)\n    Case XmlNodeType.XmlDeclaration\n      Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;)\n    Case XmlNodeType.Document\n    Case XmlNodeType.DocumentType\n      Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value)\n    Case XmlNodeType.EntityReference\n      Console.Write(reader.Name)\n    Case XmlNodeType.EndElement\n      Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n  End Select\nEnd While\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#8\">XmlReaderSettings settings = new XmlReaderSettings();\nsettings.DtdProcessing = DtdProcessing.Parse;\nXmlReader reader = XmlReader.Create(&quot;items.xml&quot;, settings);\n  \nreader.MoveToContent();\n  // Parse the file and display each of the nodes.\n  while (reader.Read()) {\n    switch (reader.NodeType) {\n      case XmlNodeType.Element:\n          Console.Write(&quot;&lt;{0}&gt;&quot;, reader.Name);\n          break;\n      case XmlNodeType.Text:\n          Console.Write(reader.Value);\n          break;\n       case XmlNodeType.CDATA:\n           Console.Write(&quot;&lt;![CDATA[{0}]]&gt;&quot;, reader.Value);\n           break;\n       case XmlNodeType.ProcessingInstruction:\n           Console.Write(&quot;&lt;?{0} {1}?&gt;&quot;, reader.Name, reader.Value);\n           break;\n       case XmlNodeType.Comment:\n           Console.Write(&quot;&lt;!--{0}--&gt;&quot;, reader.Value);\n           break;\n       case XmlNodeType.XmlDeclaration:\n           Console.Write(&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;);\n           break;\n       case XmlNodeType.Document:\n           break;\n       case XmlNodeType.DocumentType:\n           Console.Write(&quot;&lt;!DOCTYPE {0} [{1}]&quot;, reader.Name, reader.Value);\n           break;\n       case XmlNodeType.EntityReference:\n           Console.Write(reader.Name);\n           break;\n       case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n   } \n}\n</code></pre><p> The sample uses the <code>items.xml</code> file.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#2\">&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!-- This is a sample XML document --&gt;\n&lt;!DOCTYPE Items [&lt;!ENTITY number &quot;123&quot;&gt;]&gt;\n&lt;Items&gt;\n  &lt;Item&gt;Test with an entity: &amp;number;&lt;/Item&gt;\n  &lt;Item&gt;Test with a child element &lt;more/&gt; stuff&lt;/Item&gt;\n  &lt;Item&gt;Test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;\n  &lt;Item&gt;Test with a char entity: &amp;#65;&lt;/Item&gt;\n  &lt;!-- Fourteen chars in this element.--&gt;\n  &lt;Item&gt;1234567890ABCD&lt;/Item&gt;\n&lt;/Items&gt;\n</code></pre><p> <strong>Output:</strong>  </p>\n<pre><code>&lt;Item&gt;Test with an entity: 123&lt;/Item&gt;&lt;Item&gt;Test with a child element &lt;more&gt; stuff&lt;/Item&gt;&lt;Item&gt;Test with a CDATA section &lt;![CDATA[&lt;456&gt;]]&gt; def&lt;/Item&gt;&lt;Item&gt;Test with a char entity: A&lt;/Item&gt;&lt;!-- Fourteen chars in this element.--&gt;&lt;Item&gt;1234567890ABCD&lt;/Item&gt;&lt;/Items&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the next node from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;bool&gt; ReadAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </div>\r\n                  <p><code>true</code> if the next node was read successfully; <code>false</code> if there are no more nodes to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadAttributeValue\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadAttributeValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAttributeValue()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, parses the attribute value into one or more <code>Text</code>, <code>EntityReference</code>, or <code>EndEntity</code> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool ReadAttributeValue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there are nodes to return.  </p>\n<p> <code>false</code> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  </p>\n<p> An empty attribute, such as, <code>misc=&quot;&quot;</code>, returns <code>true</code> with a single node with a value of <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method after calling <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_MoveToAttribute_\" data-linktype=\"relative-path\">MoveToAttribute</a> to read through the text or entity reference nodes that make up the attribute value. The <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Depth_\" data-linktype=\"relative-path\">Depth</a> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAs(Type,IXmlNamespaceResolver)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content as an object of the type specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object ReadContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the value to be returned.  </p>\n<p> <strong>Note</strong> With the release of the .NET Framework 3.5, the value of the <code>returnType</code> parameter can now be the <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceResolver</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <a class=\"xref\" href=\"system.xml.xmlqualifiedname\" data-linktype=\"relative-path\">XmlQualifiedName</a> object to an <code>xs:string</code>.  </p>\n<p> This value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The concatenated text content or attribute value converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content is not in the correct format for the target type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>returnType</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>Read <code>Decimal.MaxValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the text content at the current reader position and converts it to the requested return type. Text, white space, significant white space and CDATA sections are concatenated. Comments and processing instructions are skipped and entity references are automatically resolved.  </p>\n<p> This method is used to read, convert if necessary, and return atomic value items from the current node content. If the input type is a valid mappings for the type of the current node then an instance of the target type containing the value of the current node is returned. See the Remarks section in the<a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> referencepage for a list of the default mappings.  </p>\n<p> For example, if you had the following XML text:  </p>\n<pre><code>&lt;elem&gt;123 &lt;!-- comment --&gt; &lt;?pi my_text?&gt; 456 &lt;?pi another_pi?&gt;&lt;/elem&gt;\n</code></pre><p> If the data is typed and a string array is supplied to the ReadContentAs method call, then the integer values are converted from strings according to the list of valid CLR type mappings.  </p>\n<p> If the data is untyped and a string array is supplied to the ReadContentAs method call, then the content is parsed into separate strings. An array containing two strings is returned with the values &quot;123&quot; and &quot;456&quot;. The spaces are not preserved from the content.  </p>\n<p> In general when reading untyped data the content is parsed according to the supplied type. For example, if an integer array is supplied to the ReadContentAs method call then the string is parsed into an array of integers {123,456}.  </p>\n<p> In the following example the XML text is not separated by spaces  </p>\n<pre><code>&lt;elem&gt;123&lt;!-- comment --&gt;&lt;?pi my_text?&gt;456789&lt;?pi another_pi?&gt;&lt;/elem&gt;\n</code></pre><p> If the content is untyped and a string array is supplied to the ReadContentAs method call then an array containing one concatenated string is returned with the value &quot;123456789&quot;.  </p>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsAsync_\" data-linktype=\"relative-path\">ReadContentAsAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ReadContentAs method to return the contents of the colors element into an array of string objects.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadContentAs#2\">  Using reader As XmlReader = XmlReader.Create(&quot;dataFile_2.xml&quot;)\n\n    reader.ReadToDescendant(&quot;item&quot;)\n                \n    reader.MoveToAttribute(&quot;colors&quot;)\n    Dim colors As String() = CType(reader.ReadContentAs(GetType(String()), Nothing), String())\n    Dim color As String\n    For Each color In  colors\n      Console.WriteLine(&quot;Colors: {0}&quot;, color)\n    Next color\n            \n  End Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadContentAs#2\">  using (XmlReader reader = XmlReader.Create(&quot;dataFile_2.xml&quot;)) {\n        reader.ReadToDescendant(&quot;item&quot;);\n\n        reader.MoveToAttribute(&quot;colors&quot;);\n        string[] colors = (string[]) reader.ReadContentAs(typeof(string[]),null);\n        foreach (string color in colors) {\n           Console.WriteLine(&quot;Colors: {0}&quot;, color);\n        }             \t\t\n  }\n</code></pre><p> The example uses the <code>dataFile_2.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadContentAs#3\">&lt;root&gt;\n  &lt;item sale-item=&#39;true&#39; productID=&#39;123456&#39; colors=&#39;blue green black&#39;&gt;\n    &lt;price&gt;9.95&lt;/price&gt;\n  &lt;/item&gt;\n  &lt;item sale-item=&#39;false&#39; productID=&#39;124390&#39;&gt;\n    &lt;price&gt;5.95&lt;/price&gt;\n  &lt;/item&gt;\n  &lt;item sale-item=&#39;true&#39; productID=&#39;53298&#39;&gt;\n    &lt;price&gt;12.95&lt;/price&gt;\n  &lt;/item&gt;\n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsAsync(Type,IXmlNamespaceResolver)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the content as an object of the type specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;object&gt; ReadContentAsAsync (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the value to be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceResolver</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> object that is used to resolve any namespace prefixes related to type conversion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>The concatenated text content or attribute value converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAs_\" data-linktype=\"relative-path\">ReadContentAs</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content and returns the Base64 decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadContentAsBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method streams the content, decodes the <code>Base64</code> content, and returns the decoded binary bytes (for example, an inline <code>Base64</code> encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, &quot;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&quot;. You can obtain RFCs from the <a href=\"http://go.microsoft.com/fwlink/?LinkId=37119\" data-linktype=\"external\">Request for Comments Web site</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You should not access any of the reader properties between calls to the ReadContentAsBase64 method until the method returns the value <code>0</code>.  </p>\n</div>\n<p> This method has the following behavior:  </p>\n<ul>\n<li><p>ReadContentAsBase64 returns the value <code>0</code> when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  </p>\n</li>\n<li><p>If you ask for fewer, or the exact number of, bytes than are left in the stream the reader remains in its current position.  </p>\n</li>\n<li><p>ReadContentAsBase64 is not supported on the following XML node types: <code>Element</code>, <code>XmlDeclaration</code>, <code>None</code>, <code>Document</code>, <code>DocumentType</code>, <code>Notation</code>, <code>Entity</code>, <code>DocumentFragment</code>.  </p>\n<p>For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBase64Async_\" data-linktype=\"relative-path\">ReadContentAsBase64Async</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsBase64Async_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsBase64Async_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBase64Async(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the content and returns the Base64 decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;int&gt; ReadContentAsBase64Async (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the content and returns the <code>BinHex</code> decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadContentAsBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method streams the content, decodes the <code>BinHex</code> content, and returns the decoded binary bytes (for example, an inline <code>BinHex</code> encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You should not access any of the reader properties between calls to the ReadContentAsBinHex method until the method returns the value <code>0</code>.  </p>\n</div>\n<p> This method has the following behavior:  </p>\n<ul>\n<li><p>ReadContentAsBinHex returns the value <code>0</code> when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  </p>\n</li>\n<li><p>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.  </p>\n</li>\n<li><p>ReadContentAsBinHex is not supported on the following XML node types: <code>Element</code>, <code>XmlDeclaration</code>, <code>None</code>, <code>Document</code>, <code>DocumentType</code>, <code>Notation, Entity</code>, <code>DocumentFragment</code>.  </p>\n<p>For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBinHexAsync_\" data-linktype=\"relative-path\">ReadContentAsBinHexAsync</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsBinHexAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBinHexAsync(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the content and returns the <code>BinHex</code> decoded binary bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;int&gt; ReadContentAsBinHexAsync (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsBoolean\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsBoolean()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a <code>Boolean</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadContentAsBoolean ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>The text content as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> If the content is typed <code>xsd:boolean</code>, the reader returns an unboxed <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object. If the content is not typed <code>xsd:boolean</code>, the reader attempts to convert it to a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ReadContentAsBoolean method to read the attribute as a B<code>oolean</code> value.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadContentAs#1\">  Using reader As XmlReader = XmlReader.Create(&quot;dataFile_2.xml&quot;)\n                \n    reader.ReadToDescendant(&quot;item&quot;)\n                \n    Do\n      reader.MoveToAttribute(&quot;sale-item&quot;)\n      Dim onSale As [Boolean] = reader.ReadContentAsBoolean()\n      If onSale Then\n        Console.WriteLine(reader(&quot;productID&quot;))\n      End If\n    Loop While reader.ReadToNextSibling(&quot;item&quot;)\n            \n  End Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadContentAs#1\">  using (XmlReader reader = XmlReader.Create(&quot;dataFile_2.xml&quot;)) {\n        reader.ReadToDescendant(&quot;item&quot;);\n        do {\n            reader.MoveToAttribute(&quot;sale-item&quot;);\n            Boolean onSale = reader.ReadContentAsBoolean();\n            if (onSale) {\n               Console.WriteLine(reader[&quot;productID&quot;]);\n            }\n        } while (reader.ReadToNextSibling(&quot;item&quot;));\t\n  }\n</code></pre><p> The example uses the <code>dataFile_2.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadContentAs#3\">&lt;root&gt;\n  &lt;item sale-item=&#39;true&#39; productID=&#39;123456&#39; colors=&#39;blue green black&#39;&gt;\n    &lt;price&gt;9.95&lt;/price&gt;\n  &lt;/item&gt;\n  &lt;item sale-item=&#39;false&#39; productID=&#39;124390&#39;&gt;\n    &lt;price&gt;5.95&lt;/price&gt;\n  &lt;/item&gt;\n  &lt;item sale-item=&#39;true&#39; productID=&#39;53298&#39;&gt;\n    &lt;price&gt;12.95&lt;/price&gt;\n  &lt;/item&gt;\n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsDateTime\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsDateTime()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime ReadContentAsDateTime ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The text content as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> If the content is typed <code>xsd:dateTime</code>, the reader returns an unboxed <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object. If the content is not typed <code>xsd:dateTime</code>, the reader attempts to convert it to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot rely on the <a class=\"xref\" href=\"system.datetime#System_DateTime_Year_\" data-linktype=\"relative-path\">Year</a> value when the content is typed as <code>xsd:gMonthDay</code>. <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> always sets the <a class=\"xref\" href=\"system.datetime#System_DateTime_Year_\" data-linktype=\"relative-path\">Year</a> value to 1904 in this case.  </p>\n</div>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsDateTimeOffset\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsDateTimeOffset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsDateTimeOffset()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTimeOffset ReadContentAsDateTimeOffset ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a></div>\r\n                  </div>\r\n                  <p>The text content as a <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsDecimal\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsDecimal()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual decimal ReadContentAsDecimal ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The text content at the current position as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> If the content is typed <code>xsd:decimal</code>, the reader returns an unboxed <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object. If the content is not typed <code>xsd:decimal</code>, the reader attempts to convert it to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsDouble\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsDouble()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual double ReadContentAsDouble ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The text content as a double-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> If the content is typed <code>xsd:double</code>, the reader returns a double-precision floating-point number. If the content is not typed <code>xsd:double</code>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsFloat\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsFloat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsFloat()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a single-precision floating point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual float ReadContentAsFloat ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The text content at the current position as a single-precision floating point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> If the content is typed <code>xsd:float</code>, the reader returns an unboxed a single-precision floating point number. If the content is not typed <code>xsd:float</code>, the reader attempts to convert it to a single-precision floating point number according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsInt\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsInt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsInt()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadContentAsInt ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The text content as a 32-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> If the content is typed <code>xsd:integer</code>, the reader returns an unboxed 32-bit signed integer. If the content is not typed <code>xsd:integer</code>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsLong\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsLong_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsLong()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual long ReadContentAsLong ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The text content as a 64-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> If the content is typed <code>xsd:long</code>, the reader returns an unboxed 64-bit signed integer. If the content is not typed <code>xsd:long</code>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> The following table describes this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as <code>XmlConvert.ToXxx</code> on attribute value.</td>\n<td>The reader remains in the current position</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsObject\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsObject()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object ReadContentAsObject ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The text content as the most appropriate common language runtime (CLR) object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> If the content is typed, the reader returns a boxed CLR of the most appropriate type, specified by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ValueType_\" data-linktype=\"relative-path\">ValueType</a> property. If the content is a list type, the reader returns an array of boxed objects of the appropriate type.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a validation error occurs while parsing the content and the reader is an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object created by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method, the reader returns the content as a string. In other words when a validation error or warning occurs, the content is considered to be untyped.  </p>\n</div>\n<p> If the content is not typed, the reader returns the content as a string.  </p>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>The value of the element if the reader is a schema validating reader (<a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_ValidationType_\" data-linktype=\"relative-path\">ValidationType</a> is set to <a class=\"xref\" href=\"system.xml.validationtype\" data-linktype=\"relative-path\">ValidationType</a>); otherwise an empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObjectAsync_\" data-linktype=\"relative-path\">ReadContentAsObjectAsync</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsObjectAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsObjectAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsObjectAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the text content at the current position as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;object&gt; ReadContentAsObjectAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>The text content as the most appropriate common language runtime (CLR) object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsObject_\" data-linktype=\"relative-path\">ReadContentAsObject</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsString\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsString()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the text content at the current position as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadContentAsString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text content as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The attempted cast is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The string format is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.  </p>\n<p> This method can be used convert typed values to a string, or to read the text content while skipping comments and processing instructions.  </p>\n<p> The following table describes how this method treats each node type.  </p>\n<table>\n<thead>\n<tr>\n<th>XmlNodeType</th>\n<th>Return value</th>\n<th>Reader behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Text</code><br><br> <code>CDATA</code><br><br> <code>Whitespace</code><br><br> <code>SignificantWhitespace</code><br><br> <code>EntityReference</code><br><br> <code>EndEntity</code></td>\n<td>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>Same as calling <code>XmlConvert.ToXxx</code> on the attribute value.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Comment</code><br><br> <code>ProcessingInstruction</code></td>\n<td>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</td>\n<td>Moves to the next start element or end element tag. Entity references are automatically expanded.</td>\n</tr>\n<tr>\n<td><code>EndElement</code></td>\n<td>An empty string.</td>\n<td>The reader remains in the current position.</td>\n</tr>\n<tr>\n<td><code>Element</code><br><br> <code>XmlDeclaration</code><br><br> <code>None</code><br><br> <code>Document</code><br><br> <code>DocumentType</code><br><br> <code>Notation</code><br><br> <code>Entity</code><br><br> <code>DocumentFragment</code></td>\n<td>An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</td>\n<td>Undefined, although typically the reader remains in the current position.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsStringAsync_\" data-linktype=\"relative-path\">ReadContentAsStringAsync</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadContentAsStringAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadContentAsStringAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadContentAsStringAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the text content at the current position as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;string&gt; ReadContentAsStringAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>The text content as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsString_\" data-linktype=\"relative-path\">ReadContentAsString</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAs(Type,IXmlNamespaceResolver)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element content as the requested type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object ReadElementContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the value to be returned.  </p>\n<p> <strong>Note</strong> With the release of the .NET Framework 3.5, the value of the <code>returnType</code> parameter can now be the <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceResolver</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> object that is used to resolve any namespace prefixes related to type conversion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element content converted to the requested typed object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>Read <code>Decimal.MaxValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsAsync_\" data-linktype=\"relative-path\">ReadElementContentAsAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ReadElementContentAs method to read the content of the <code>date</code> node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadElementContentAs#5\">    Using reader As XmlReader = XmlReader.Create(&quot;dataFile.xml&quot;)\n      reader.ReadToFollowing(&quot;date&quot;)\n      Dim [date] As DateTime = CType(reader.ReadElementContentAs(GetType(System.DateTime), Nothing), DateTime)\n                \n      &#39; If the current culture is &quot;en-US&quot;,\n      &#39; this writes &quot;Wednesday, January 8, 2003&quot;.\n      Console.WriteLine([date].ToLongDateString())\n    End Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadElementContentAs#5\">  using (XmlReader reader = XmlReader.Create(&quot;dataFile.xml&quot;)) {\n       reader.ReadToFollowing(&quot;date&quot;);\n       DateTime date = (DateTime) reader.ReadElementContentAs(typeof(System.DateTime), null);\n\t\n       // If the current culture is &quot;en-US&quot;,\n       // this writes &quot;Wednesday, January 8, 2003&quot;.\n       Console.WriteLine(date.ToLongDateString());\t\n  }\n</code></pre><p> The example uses the <code>dataFile.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#8\">&lt;root&gt;\n  &lt;stringValue&gt;\n     &lt;!--comment--&gt;\n     &lt;?some pi?&gt;\n      text value of the element.\n  &lt;/stringValue&gt;\n  &lt;longValue&gt;270000000000001&lt;/longValue&gt;\n  &lt;number&gt;0&lt;/number&gt;\n  &lt;double&gt;2E10&lt;/double&gt;\n  &lt;date&gt;2003-01-08T15:00:00-00:00&lt;/date&gt;\n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAs_System_Type_System_Xml_IXmlNamespaceResolver_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAs(Type,IXmlNamespaceResolver,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object ReadElementContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the value to be returned.  </p>\n<p> <strong>Note</strong> With the release of the .NET Framework 3.5, the value of the <code>returnType</code> parameter can now be the <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceResolver</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> object that is used to resolve any namespace prefixes related to type conversion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element content converted to the requested typed object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>Read <code>Decimal.MaxValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsAsync_System_Type_System_Xml_IXmlNamespaceResolver_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsAsync(Type,IXmlNamespaceResolver)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the element content as the requested type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;object&gt; ReadElementContentAsAsync (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the value to be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceResolver</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.ixmlnamespaceresolver\" data-linktype=\"relative-path\">IXmlNamespaceResolver</a> object that is used to resolve any namespace prefixes related to type conversion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>The element content converted to the requested typed object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAs_\" data-linktype=\"relative-path\">ReadElementContentAs</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element and decodes the <code>Base64</code> content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadElementContentAsBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The element contains mixed-content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the element content, decodes it using <code>Base64</code> encoding, and returns the decoded binary bytes (for example, an inline <code>Base64</code>-encoded GIF image) into the buffer. For more information, see RFC 1521, &quot;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&quot;. You can obtain RFCs from the <a href=\"http://go.microsoft.com/fwlink/?LinkId=37119\" data-linktype=\"external\">Request for Comments Web site</a>.  </p>\n<p> ReadElementContentAsBase64 can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  </p>\n<p> This method is very similar to the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBase64_\" data-linktype=\"relative-path\">ReadContentAsBase64</a> method except that it can only be called on element node types.  </p>\n<p> If the <code>count</code> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reads all the remaining bytes in the document and returns the number of bytes read. The next <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method call returns a zero and moves the reader to the node following the <code>EndElement</code>.  </p>\n<p> If you call <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBase64Async_\" data-linktype=\"relative-path\">ReadElementContentAsBase64Async</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an inline <code>Base64</code> encoded image. The <code>Base64</code> data is embedded within the <code>&lt;image&gt;</code> element. A <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> is used to create a new binary data file.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader_Read_Write_Binary#4\">    Public Shared Sub Base64DecodeImageFile() \n        \n        Dim buffer(999) As Byte\n        Dim readBytes As Integer = 0\n        \n        Using reader As XmlReader = XmlReader.Create(&quot;output.xml&quot;)\n\n                Dim outputFile As New FileStream(&quot;C:\\artFiles\\data<br>ewImage.jpg&quot;, FileMode.OpenOrCreate, FileAccess.Write, FileShare.Write)\n                &#39; Read to the image element.\n                reader.ReadToFollowing(&quot;image&quot;)\n                &#39; Read the Base64 data.\n                Console.WriteLine(vbCr + vbLf + &quot;Reading Base64...&quot;)\n                Dim bw As New BinaryWriter(outputFile)\n                readBytes = reader.ReadElementContentAsBase64(buffer, 0, 50)\n                While (readBytes &gt; 0)\n                    bw.Write(buffer, 0, readBytes)\n                    readBytes = reader.ReadElementContentAsBase64(buffer, 0, 50)\n                End While\n                outputFile.Close()\n            \n        End Using\n    \n    End Sub &#39;Base64DecodeImageFile\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader_Read_Write_Binary#4\">\npublic static void Base64DecodeImageFile() {\n\n  byte[] buffer = new byte[1000];\n  int readBytes = 0;\n\n  using (XmlReader reader = XmlReader.Create(&quot;output.xml&quot;)) {\n\t\t\t\t\t   \n        FileStream outputFile = new FileStream(@&quot;C:\\artFiles\\data<br>ewImage.jpg&quot;,\n\t\t\t\t\tFileMode.OpenOrCreate, FileAccess.Write, FileShare.Write);\n        // Read to the image element.\n        reader.ReadToFollowing(&quot;image&quot;);\n        // Read the Base64 data.\n        Console.WriteLine(&quot;\\r<br>Reading Base64...&quot;);\n        BinaryWriter bw = new BinaryWriter(outputFile);\n        while ((readBytes = reader.ReadElementContentAsBase64(buffer, 0, 50))&gt;0) {\n            bw.Write(buffer, 0, readBytes);\n        }\n        outputFile.Close();\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsBase64Async_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsBase64Async_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBase64Async(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the element and decodes the <code>Base64</code> content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;int&gt; ReadElementContentAsBase64Async (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBase64_\" data-linktype=\"relative-path\">ReadElementContentAsBase64</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the element and decodes the <code>BinHex</code> content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadElementContentAsBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The element contains mixed-content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the element content, decodes it using <code>BinHex</code> encoding, and returns the decoded binary bytes (for example, an inline <code>BinHex</code>-encoded GIF image) into the buffer.  </p>\n<p> This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  </p>\n<p> This method is very similar to the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadContentAsBinHex_\" data-linktype=\"relative-path\">ReadContentAsBinHex</a> method except that it can only be called on element node types.  </p>\n<p> If the <code>count</code> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reads all the remaining bytes in the document and returns the number of bytes read. The next <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method call returns a zero and moves the reader to the node following the <code>EndElement</code>.  </p>\n<p> If you call <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBinHexAsync_\" data-linktype=\"relative-path\">ReadElementContentAsBinHexAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads an inline <code>BinHex</code> encoded image. The <code>BinHex</code> data is embedded within the <code>&lt;image&gt;</code> element. A <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> is used to create a new binary data file.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader_Read_Write_Binary#2\">    Public Shared Sub BinHexDecodeImageFile() \n        \n        Dim buffer(999) As Byte\n        Dim readBytes As Integer = 0\n        \n        Using reader As XmlReader = XmlReader.Create(&quot;output.xml&quot;)\n                \n                Dim outputFile As New FileStream(&quot;C:\\artFiles\\data<br>ewImage.jpg&quot;, FileMode.OpenOrCreate, FileAccess.Write, FileShare.Write)\n                &#39; Read to the image element.\n                reader.ReadToFollowing(&quot;image&quot;)\n                &#39; Read the BinHex data.\n                Console.WriteLine(vbCr + vbLf + &quot;Reading BinHex...&quot;)\n                Dim bw As New BinaryWriter(outputFile)\n                readBytes = reader.ReadElementContentAsBinHex(buffer, 0, 50)\n                While (readBytes &gt; 0)\n                    bw.Write(buffer, 0, readBytes)\n                    readBytes = reader.ReadElementContentAsBinHex(buffer, 0, 50)\n                End While\n                outputFile.Close()\n            \n        End Using\n    \n    End Sub &#39;BinHexDecodeImageFile\n    \n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader_Read_Write_Binary#2\">public static void BinHexDecodeImageFile() {\n\n  byte[] buffer = new byte[1000];\n  int readBytes = 0;\n\n  using (XmlReader reader = XmlReader.Create(&quot;output.xml&quot;)) {\n\t\t\t\t\t   \n        FileStream outputFile = new FileStream(@&quot;C:\\artFiles\\data<br>ewImage.jpg&quot;, FileMode.OpenOrCreate, \n                                                                      FileAccess.Write, FileShare.Write);\n        // Read to the image element.\n        reader.ReadToFollowing(&quot;image&quot;);\n        // Read the BinHex data.\n        Console.WriteLine(&quot;\\r<br>Reading BinHex...&quot;);\n        BinaryWriter bw = new BinaryWriter(outputFile);\n        while ((readBytes = reader.ReadElementContentAsBinHex(buffer, 0, 50))&gt;0) {\n            bw.Write(buffer, 0, readBytes);\n        }\n        outputFile.Close();\n\t\t\n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsBinHexAsync_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsBinHexAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBinHexAsync(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the element and decodes the <code>BinHex</code> content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;int&gt; ReadElementContentAsBinHexAsync (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to copy the resulting text. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset into the buffer where to start copying the result.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The number of bytes written to the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsBinHex_\" data-linktype=\"relative-path\">ReadElementContentAsBinHex</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsBoolean\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBoolean()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadElementContentAsBoolean ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>The element content as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the element content is typed <code>xsd:boolean</code>, the reader returns an unboxed <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object. If the content is not typed <code>xsd:boolean</code>, the reader attempts to convert it to a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsBoolean_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsBoolean(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadElementContentAsBoolean (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>The element content as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:boolean</code>, the reader returns an unboxed <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object. If the content is not typed <code>xsd:boolean</code>, the reader attempts to convert it to a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsDateTime\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsDateTime()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime ReadElementContentAsDateTime ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The element content as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:dateTime</code>, the reader returns an unboxed <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object. If the content is not typed <code>xsd:dateTime</code>, the reader attempts to convert it to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot rely on the <a class=\"xref\" href=\"system.datetime#System_DateTime_Year_\" data-linktype=\"relative-path\">Year</a> value when the content is typed as <code>xsd:gMonthDay</code>. <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> always sets the <a class=\"xref\" href=\"system.datetime#System_DateTime_Year_\" data-linktype=\"relative-path\">Year</a> value to 1904 in this case.  </p>\n</div>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ReadElementContentAsDateTime method to read the content of the <code>date</code> element.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadElementContentAs#4\">    Using reader As XmlReader = XmlReader.Create(&quot;dataFile.xml&quot;)\n      reader.ReadToFollowing(&quot;date&quot;)\n      Dim [date] As DateTime = reader.ReadElementContentAsDateTime()\n                \n      &#39; If the current culture is &quot;en-US&quot;,\n      &#39; this writes &quot;Wednesday, January 8, 2003&quot;.\n      Console.WriteLine([date].ToLongDateString())\n    End Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadElementContentAs#4\">  using (XmlReader reader = XmlReader.Create(&quot;dataFile.xml&quot;)) {\n       reader.ReadToFollowing(&quot;date&quot;);\n       DateTime date = reader.ReadElementContentAsDateTime();\n\t\n       // If the current culture is &quot;en-US&quot;,\n       // this writes &quot;Wednesday, January 8, 2003&quot;.\n       Console.WriteLine(date.ToLongDateString());\n  }\n</code></pre><p> The example uses the <code>dataFile.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#8\">&lt;root&gt;\n  &lt;stringValue&gt;\n     &lt;!--comment--&gt;\n     &lt;?some pi?&gt;\n      text value of the element.\n  &lt;/stringValue&gt;\n  &lt;longValue&gt;270000000000001&lt;/longValue&gt;\n  &lt;number&gt;0&lt;/number&gt;\n  &lt;double&gt;2E10&lt;/double&gt;\n  &lt;date&gt;2003-01-08T15:00:00-00:00&lt;/date&gt;\n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsDateTime_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsDateTime(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual DateTime ReadElementContentAsDateTime (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The element contents as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:dateTime</code>, the reader returns an unboxed <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object. If the content is not typed <code>xsd:dateTime</code>, the reader attempts to convert it to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot rely on the <a class=\"xref\" href=\"system.datetime#System_DateTime_Year_\" data-linktype=\"relative-path\">Year</a> value when the content is typed as <code>xsd:gMonthDay</code>. <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> always sets the <a class=\"xref\" href=\"system.datetime#System_DateTime_Year_\" data-linktype=\"relative-path\">Year</a> value to 1904 in this case.  </p>\n</div>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsDecimal\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsDecimal()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual decimal ReadElementContentAsDecimal ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The element content as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> The reader attempts to convert the element content to an <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsDecimal_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsDecimal(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual decimal ReadElementContentAsDecimal (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The element content as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> The reader attempts to convert the element content to an <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsDouble\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsDouble()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as a double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual double ReadElementContentAsDouble ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The element content as a double-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a double-precision floating-point number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:double</code>, the reader returns a double-precision floating-point number. If the content is not typed <code>xsd:double</code>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the method to return the element content as a double-precision floating-point number.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadElementContentAs#7\">    Using reader As XmlReader = XmlReader.Create(&quot;dataFile.xml&quot;)\n      reader.ReadToFollowing(&quot;double&quot;)\n      Dim number As [Double] = reader.ReadElementContentAsDouble()\n      &#39; Do some processing with the number object.\n    End Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadElementContentAs#7\">  using (XmlReader reader = XmlReader.Create(&quot;dataFile.xml&quot;)) {\n       reader.ReadToFollowing(&quot;double&quot;);\n       Double number = reader.ReadElementContentAsDouble();\n       // Do some processing with the number object.\t\n  }\n</code></pre><p> The example uses the <code>dataFile.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#8\">&lt;root&gt;\n  &lt;stringValue&gt;\n     &lt;!--comment--&gt;\n     &lt;?some pi?&gt;\n      text value of the element.\n  &lt;/stringValue&gt;\n  &lt;longValue&gt;270000000000001&lt;/longValue&gt;\n  &lt;number&gt;0&lt;/number&gt;\n  &lt;double&gt;2E10&lt;/double&gt;\n  &lt;date&gt;2003-01-08T15:00:00-00:00&lt;/date&gt;\n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsDouble_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsDouble(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual double ReadElementContentAsDouble (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The element content as a double-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:double</code>, the reader returns a double-precision floating-point number. If the content is not typed <code>xsd:double</code>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsFloat\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsFloat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsFloat()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual float ReadElementContentAsFloat ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The element content as a single-precision floating point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a single-precision floating-point number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> The reader attempts to convert the element content to a single-precision floating point number according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsFloat_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsFloat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsFloat(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual float ReadElementContentAsFloat (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The element content as a single-precision floating point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a single-precision floating-point number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> The reader attempts to convert the element content to a single-precision floating point number according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsInt\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsInt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsInt()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as a 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadElementContentAsInt ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The element content as a 32-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a 32-bit signed integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:integer</code>, the reader returns an unboxed 32-bit signed integer. If the content is not typed <code>xsd:integer</code>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsInt_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsInt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsInt(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadElementContentAsInt (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The element content as a 32-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a 32-bit signed integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:integer</code>, the reader returns an unboxed 32-bit signed integer. If the content is not typed <code>xsd:integer</code>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsLong\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsLong_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsLong()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as a 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual long ReadElementContentAsLong ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The element content as a 64-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a 64-bit signed integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:long</code>, the reader returns an unboxed 64-bit signed integer. If the content is not typed <code>xsd:long</code>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ReadElementContentAsLong method to read the content of the <code>longValue</code> element.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadElementContentAs#3\">    Using reader As XmlReader = XmlReader.Create(&quot;dataFile.xml&quot;)\n      reader.ReadToFollowing(&quot;longValue&quot;)\n      Dim number As Long = reader.ReadElementContentAsLong()\n      &#39; Do some processing with the number object.\n    End Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadElementContentAs#3\">  using (XmlReader reader = XmlReader.Create(&quot;dataFile.xml&quot;)) {\n       reader.ReadToFollowing(&quot;longValue&quot;);\n       long number = reader.ReadElementContentAsLong();\n       // Do some processing with the number object.\n  }\n</code></pre><p> The example uses the <code>dataFile.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#8\">&lt;root&gt;\n  &lt;stringValue&gt;\n     &lt;!--comment--&gt;\n     &lt;?some pi?&gt;\n      text value of the element.\n  &lt;/stringValue&gt;\n  &lt;longValue&gt;270000000000001&lt;/longValue&gt;\n  &lt;number&gt;0&lt;/number&gt;\n  &lt;double&gt;2E10&lt;/double&gt;\n  &lt;date&gt;2003-01-08T15:00:00-00:00&lt;/date&gt;\n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsLong_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsLong_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsLong(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual long ReadElementContentAsLong (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The element content as a 64-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a 64-bit signed integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> If the content is typed <code>xsd:long</code>, the reader returns an unboxed 64-bit signed integer. If the content is not typed <code>xsd:long</code>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsObject\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsObject()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object ReadElementContentAsObject ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A boxed common language runtime (CLR) object of the most appropriate type. The <span class=\"xref\">stem.Xml.XmlReader.ValueType*</span> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to the requested type</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObjectAsync_\" data-linktype=\"relative-path\">ReadElementContentAsObjectAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the method to read the content of the <code>price</code> node. The reader uses the information in the schema to map the content to the correct data type.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadElementContentAs#6\">  &#39; Create a validating reader.\n  Dim settings As New XmlReaderSettings()\n  settings.ValidationType = ValidationType.Schema\n  settings.Schemas.Add(&quot;urn:items&quot;, &quot;item.xsd&quot;)\n  Dim reader As XmlReader = XmlReader.Create(&quot;item.xml&quot;, settings)\n        \n  &#39; Get the CLR type of the price element. \n  reader.ReadToFollowing(&quot;price&quot;)\n  Console.WriteLine(reader.ValueType)\n        \n  &#39; Return the value of the price element as Decimal object.\n  Dim price As [Decimal] = CType(reader.ReadElementContentAsObject(), [Decimal])\n        \n  &#39; Add 2.50 to the price.\n  price = [Decimal].Add(price, 2.5D)\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadElementContentAs#6\">  // Create a validating reader.\n  XmlReaderSettings settings = new XmlReaderSettings();\n  settings.ValidationType = ValidationType.Schema;\n  settings.Schemas.Add(&quot;urn:items&quot;, &quot;item.xsd&quot;);\t\n   XmlReader reader = XmlReader.Create(&quot;item.xml&quot;, settings); \n\n  // Get the CLR type of the price element. \n  reader.ReadToFollowing(&quot;price&quot;);\n  Console.WriteLine(reader.ValueType);\n\n  // Return the value of the price element as Decimal object.\n  Decimal price = (Decimal) reader.ReadElementContentAsObject();\n\n  // Add 2.50 to the price.\n  price = Decimal.Add(price, 2.50m);\n</code></pre><p> The example uses the following two files as input.  </p>\n<p> <code>item.xml</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#11\">&lt;item xmlns=&quot;urn:items&quot; productID=&#39;123098&#39;&gt;\n &lt;name&gt;hammer&lt;/name&gt;\n &lt;price&gt;9.95&lt;/price&gt;\n &lt;supplierID&gt;1929&lt;/supplierID&gt;\n&lt;/item&gt;\n</code></pre><p> <code>item.xsd</code>  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#12\">&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:tns=&quot;urn:items&quot; attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;urn:items&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n  &lt;xs:element name=&quot;item&quot;&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot; /&gt;\n        &lt;xs:element name=&quot;supplierID&quot; type=&quot;xs:unsignedShort&quot; /&gt;\n      &lt;/xs:sequence&gt;\n      &lt;xs:attribute name=&quot;productID&quot; type=&quot;xs:unsignedInt&quot; use=&quot;required&quot; /&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsObject_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsObject(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object ReadElementContentAsObject (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A boxed common language runtime (CLR) object of the most appropriate type. The <span class=\"xref\">stem.Xml.XmlReader.ValueType*</span> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsObjectAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsObjectAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsObjectAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the current element and returns the contents as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;object&gt; ReadElementContentAsObjectAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A boxed common language runtime (CLR) object of the most appropriate type. The <span class=\"xref\">stem.Xml.XmlReader.ValueType*</span> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsObject_\" data-linktype=\"relative-path\">ReadElementContentAsObject</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsString\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsString()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the current element and returns the contents as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadElementContentAsString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The element content as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsStringAsync_\" data-linktype=\"relative-path\">ReadElementContentAsStringAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads the <code>stringValue</code> element and returns the text content (ignoring the comment and processing instruction).  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadElementContentAs#1\">    Using reader As XmlReader = XmlReader.Create(&quot;dataFile.xml&quot;)\n      reader.ReadToFollowing(&quot;stringValue&quot;)\n      Console.WriteLine(reader.ReadElementContentAsString())\n    End Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadElementContentAs#1\">  using (XmlReader reader = XmlReader.Create(&quot;dataFile.xml&quot;)) {\n       reader.ReadToFollowing(&quot;stringValue&quot;);\n       Console.WriteLine(reader.ReadElementContentAsString());\t\t\t\n  }\n</code></pre><p> The example uses the <code>dataFile.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#8\">&lt;root&gt;\n  &lt;stringValue&gt;\n     &lt;!--comment--&gt;\n     &lt;?some pi?&gt;\n      text value of the element.\n  &lt;/stringValue&gt;\n  &lt;longValue&gt;270000000000001&lt;/longValue&gt;\n  &lt;number&gt;0&lt;/number&gt;\n  &lt;double&gt;2E10&lt;/double&gt;\n  &lt;date&gt;2003-01-08T15:00:00-00:00&lt;/date&gt;\n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsString_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsString(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadElementContentAsString (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The element content as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current element contains child elements.  </p>\n<p> -or-  </p>\n<p> The element content cannot be converted to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The method is called with <code>null</code> arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified local name and namespace URI do not match that of the current element being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.  </p>\n<p> For more information, see the Remarks section of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> reference page and the <a href=\"http://go.microsoft.com/fwlink/?LinkId=4871\" data-linktype=\"external\">W3C XML Schema Part 2: Datatypes</a> recommendation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads the <code>stringValue</code> element and returns the text content (ignoring the comment and processing instruction).  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReader.ReadElementContentAs#2\">    Using reader As XmlReader = XmlReader.Create(&quot;dataFile.xml&quot;)\n      reader.ReadToFollowing(&quot;stringValue&quot;)\n      Console.WriteLine(reader.ReadElementContentAsString(&quot;stringValue&quot;, &quot;&quot;))\n    End Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReader.ReadElementContentAs#2\">  using (XmlReader reader = XmlReader.Create(&quot;dataFile.xml&quot;)) {\n       reader.ReadToFollowing(&quot;stringValue&quot;);\n       Console.WriteLine(reader.ReadElementContentAsString(&quot;stringValue&quot;, &quot;&quot;));\n  }\n</code></pre><p> The example uses the <code>dataFile.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlReader.ReadElementContentAs#8\">&lt;root&gt;\n  &lt;stringValue&gt;\n     &lt;!--comment--&gt;\n     &lt;?some pi?&gt;\n      text value of the element.\n  &lt;/stringValue&gt;\n  &lt;longValue&gt;270000000000001&lt;/longValue&gt;\n  &lt;number&gt;0&lt;/number&gt;\n  &lt;double&gt;2E10&lt;/double&gt;\n  &lt;date&gt;2003-01-08T15:00:00-00:00&lt;/date&gt;\n&lt;/root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementContentAsStringAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementContentAsStringAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementContentAsStringAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the current element and returns the contents as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;string&gt; ReadElementContentAsStringAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>The element content as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString_\" data-linktype=\"relative-path\">ReadElementContentAsString</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementString\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementString()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a text-only element. However, we recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a> method instead, because it provides a more straightforward way to handle this operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadElementString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text contained in the element that was read. An empty string if the element is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The next content node is not a start tag; or the element found does not contain a simple text value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>We recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a> method to read a text element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementString_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the <span class=\"xref\">stem.Xml.XmlReader.Name*</span> property of the element found matches the given string before reading a text-only element. However, we recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a> method instead, because it provides a more straightforward way to handle this operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadElementString (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text contained in the element that was read. An empty string if the element is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>If the next content node is not a start tag; if the element <code>Name</code> does not match the given argument; or if the element found does not contain a simple text value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>We recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString\" data-linktype=\"relative-path\">ReadElementContentAsString()</a> method to read a text element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadElementString_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadElementString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadElementString(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span> properties of the element found matches the given strings before reading a text-only element. However, we recommend that you use the <span class=\"xref\">stem.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)</span> method instead, because it provides a more straightforward way to handle this operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadElementString (string localname, string ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name to check.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text contained in the element that was read. An empty string if the element is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>If the next content node is not a start tag; if the element <code>LocalName</code> or <code>NamespaceURI</code> do not match the given arguments; or if the element found does not contain a simple text value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>We recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString_System_String_System_String_\" data-linktype=\"relative-path\">ReadElementContentAsString(String,String)</a> method to read a text element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadEndElement\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadEndElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadEndElement()</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the current content node is an end tag and advances the reader to the next node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ReadEndElement ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The current node is not an end tag or if incorrect XML is encountered in the input stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each element.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#11\">Using reader As XmlReader = XmlReader.Create(&quot;book3.xml&quot;)               \n  &#39; Parse the XML document.  ReadString is used to \n  &#39; read the text content of the elements.\n  reader.Read()\n  reader.ReadStartElement(&quot;book&quot;)\n  reader.ReadStartElement(&quot;title&quot;)\n  Console.Write(&quot;The content of the title element:  &quot;)\n  Console.WriteLine(reader.ReadString())\n  reader.ReadEndElement()\n  reader.ReadStartElement(&quot;price&quot;)\n  Console.Write(&quot;The content of the price element:  &quot;)\n  Console.WriteLine(reader.ReadString())\n  reader.ReadEndElement()\n  reader.ReadEndElement()            \nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#11\">using (XmlReader reader = XmlReader.Create(&quot;book3.xml&quot;)) {\n\n  // Parse the XML document.  ReadString is used to \n  // read the text content of the elements.\n  reader.Read(); \n  reader.ReadStartElement(&quot;book&quot;);  \n  reader.ReadStartElement(&quot;title&quot;);   \n  Console.Write(&quot;The content of the title element:  &quot;);\n  Console.WriteLine(reader.ReadString());\n  reader.ReadEndElement();\n  reader.ReadStartElement(&quot;price&quot;);\n  Console.Write(&quot;The content of the price element:  &quot;);\n  Console.WriteLine(reader.ReadString());\n  reader.ReadEndElement();\n  reader.ReadEndElement();\n\n}\n</code></pre><p> The example uses the <code>book3.xml</code> file.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#6\">&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadInnerXml\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadInnerXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInnerXml()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, reads all the content, including markup, as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadInnerXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.  </p>\n<p> If the current node is neither an element nor attribute, an empty string is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The XML was not well-formed, or an error occurred while parsing the XML.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns all the content of the current node including the markup. The current node (start tag) and corresponding end node (end tag) are not returned. For example, if you had the following:  </p>\n<pre><code>&lt;node&gt;  \n this &lt;child id=&quot;123&quot;/&gt;  \n&lt;/node&gt;\n</code></pre><p> <code>ReadInnerXml</code> returns <code>this &lt;child id=&quot;123&quot;/&gt;</code>  </p>\n<p> This method handles element and attribute nodes in the following manner:  </p>\n<table>\n<thead>\n<tr>\n<th>Node type</th>\n<th>Position before the call</th>\n<th>XML fragment</th>\n<th>Return value</th>\n<th>Position after the call</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Element</code></td>\n<td>On the <code>item1</code> start tag.</td>\n<td>&lt;item1&gt;text1&lt;/item1&gt;&lt;item2&gt;text2&lt;/item2&gt;</td>\n<td>text1</td>\n<td>On the <code>item2</code> start tag.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>On the <code>attr1</code> attribute node.</td>\n<td>&lt;item attr1=&quot;val1&quot; attr2=&quot;val2&quot;&gt;text&lt;/item&gt;</td>\n<td>val1</td>\n<td>Remains on the <code>attr1</code> attribute node.</td>\n</tr>\n</tbody>\n</table>\n<p> If the reader is positioned on a leaf node, calling <code>ReadInnerXml</code> is equivalent to calling <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a>. The method returns <code>String.Empty</code> (except for attribute nodes, in which case the value of the attribute is returned).  </p>\n<p> This method checks for well-formed XML. If <code>ReadInnerXml</code> is called from an <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a>, this method also validates the content returned.  </p>\n<p> As implemented in the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a>, <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> and <code>XmlValidatingReader</code> classes the <code>ReadOuterXml</code> method is namespace aware.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXmlAsync_\" data-linktype=\"relative-path\">ReadInnerXmlAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares the <code>ReadInnerXml</code> and <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXml_\" data-linktype=\"relative-path\">ReadOuterXml</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#12\">&#39; Load the file and ignore all white space.\nDim settings As New XmlReaderSettings()\nsettings.IgnoreWhitespace = True\nUsing reader As XmlReader = XmlReader.Create(&quot;2books.xml&quot;)\n\n  &#39; Moves the reader to the root element.\n  reader.MoveToContent()\n                \n  &#39; Moves to book node.\n  reader.Read()\n                \n  &#39; Note that ReadInnerXml only returns the markup of the node&#39;s children\n  &#39; so the book&#39;s attributes are not returned.\n  Console.WriteLine(&quot;Read the first book using ReadInnerXml...&quot;)\n  Console.WriteLine(reader.ReadInnerXml())\n                \n  &#39; ReadOuterXml returns the markup for the current node and its children\n  &#39; so the book&#39;s attributes are also returned.\n  Console.WriteLine(&quot;Read the second book using ReadOuterXml...&quot;)\n  Console.WriteLine(reader.ReadOuterXml())\n\nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#12\">// Load the file and ignore all white space.\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.IgnoreWhitespace = true;\nusing (XmlReader reader = XmlReader.Create(&quot;2books.xml&quot;)) {\n\n  // Moves the reader to the root element.\n  reader.MoveToContent();\n \n  // Moves to book node.\n  reader.Read(); \n\n  // Note that ReadInnerXml only returns the markup of the node&#39;s children\n  // so the book&#39;s attributes are not returned.\n  Console.WriteLine(&quot;Read the first book using ReadInnerXml...&quot;);\n  Console.WriteLine(reader.ReadInnerXml());\n\n  // ReadOuterXml returns the markup for the current node and its children\n  // so the book&#39;s attributes are also returned.\n  Console.WriteLine(&quot;Read the second book using ReadOuterXml...&quot;);\n  Console.WriteLine(reader.ReadOuterXml());      \n\n}\n</code></pre><p> The example uses <code>2books.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#7\">&lt;!--sample XML fragment--&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;10-861003-324&#39;&gt;\n    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n    &lt;price&gt;19.95&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;\n    &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n    &lt;price&gt;24.95&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadInnerXmlAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadInnerXmlAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInnerXmlAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads all the content, including markup, as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;string&gt; ReadInnerXmlAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml_\" data-linktype=\"relative-path\">ReadInnerXml</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadOuterXml\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadOuterXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOuterXml()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadOuterXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The XML was not well-formed, or an error occurred while parsing the XML.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is similar to <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadInnerXml_\" data-linktype=\"relative-path\">ReadInnerXml</a> except it also returns the start and end tags.  </p>\n<p> This method handles element and attribute nodes in the following manner:  </p>\n<table>\n<thead>\n<tr>\n<th>Node type</th>\n<th>Position before the call</th>\n<th>XML fragment</th>\n<th>Return value</th>\n<th>Position After the Call</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Element</code></td>\n<td>On the <code>item1</code> start tag.</td>\n<td>&lt;item1&gt;text1&lt;/item1&gt;&lt;item2&gt;text2&lt;/item2&gt;</td>\n<td>&lt;item1&gt;text1&lt;/item1&gt;</td>\n<td>On the <code>item2</code> start tag.</td>\n</tr>\n<tr>\n<td><code>Attribute</code></td>\n<td>On the <code>attr1</code> attribute node.</td>\n<td>&lt;item attr1=&quot;val1&quot; attr2=&quot;val2&quot;&gt;text&lt;/item&gt;</td>\n<td>attr1=&quot;val1&quot;</td>\n<td>Remains on the <code>attr1</code> attribute node.</td>\n</tr>\n</tbody>\n</table>\n<p> If the reader is positioned on a leaf node, calling <code>ReadOuterXml</code> is equivalent to calling <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a>. The method returns <code>String.Empty</code> (except for attribute nodes, in which case the attribute markup is returned).  </p>\n<p> This method checks for well-formed XML. If <code>ReadOuterXml</code> is called from an <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a>, this method also validates the content returned  </p>\n<p> As implemented in the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a>, <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> and <code>XmlValidatingReader</code> classes the <code>ReadOuterXml</code> method is namespace aware. Given the following XML text <code>&lt;A xmlns:S=&quot;urn:1&quot;&gt;&lt;S:B&gt;hello&lt;/S:B&gt;&lt;/A&gt;</code>, if the reader were positioned on the <code>S:B</code> start tag, <code>ReadOuterXml</code> returns <code>&lt;S:B xmlns:S=&quot;urn:1&quot;&gt;hello&lt;S:B/&gt;</code>.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXmlAsync_\" data-linktype=\"relative-path\">ReadOuterXmlAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares the <code>ReadInnerXml</code> and <code>ReadOuterXml</code> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#12\">&#39; Load the file and ignore all white space.\nDim settings As New XmlReaderSettings()\nsettings.IgnoreWhitespace = True\nUsing reader As XmlReader = XmlReader.Create(&quot;2books.xml&quot;)\n\n  &#39; Moves the reader to the root element.\n  reader.MoveToContent()\n                \n  &#39; Moves to book node.\n  reader.Read()\n                \n  &#39; Note that ReadInnerXml only returns the markup of the node&#39;s children\n  &#39; so the book&#39;s attributes are not returned.\n  Console.WriteLine(&quot;Read the first book using ReadInnerXml...&quot;)\n  Console.WriteLine(reader.ReadInnerXml())\n                \n  &#39; ReadOuterXml returns the markup for the current node and its children\n  &#39; so the book&#39;s attributes are also returned.\n  Console.WriteLine(&quot;Read the second book using ReadOuterXml...&quot;)\n  Console.WriteLine(reader.ReadOuterXml())\n\nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#12\">// Load the file and ignore all white space.\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.IgnoreWhitespace = true;\nusing (XmlReader reader = XmlReader.Create(&quot;2books.xml&quot;)) {\n\n  // Moves the reader to the root element.\n  reader.MoveToContent();\n \n  // Moves to book node.\n  reader.Read(); \n\n  // Note that ReadInnerXml only returns the markup of the node&#39;s children\n  // so the book&#39;s attributes are not returned.\n  Console.WriteLine(&quot;Read the first book using ReadInnerXml...&quot;);\n  Console.WriteLine(reader.ReadInnerXml());\n\n  // ReadOuterXml returns the markup for the current node and its children\n  // so the book&#39;s attributes are also returned.\n  Console.WriteLine(&quot;Read the second book using ReadOuterXml...&quot;);\n  Console.WriteLine(reader.ReadOuterXml());      \n\n}\n</code></pre><p> The example uses <code>2books.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#7\">&lt;!--sample XML fragment--&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;10-861003-324&#39;&gt;\n    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n    &lt;price&gt;19.95&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;\n    &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n    &lt;price&gt;24.95&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadOuterXmlAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadOuterXmlAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOuterXmlAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the content, including markup, representing this node and all its children.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;string&gt; ReadOuterXmlAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadOuterXml_\" data-linktype=\"relative-path\">ReadOuterXml</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadStartElement\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadStartElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadStartElement()</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the current node is an element and advances the reader to the next node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ReadStartElement ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>Incorrect XML was encountered in the input stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method calls <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_\" data-linktype=\"relative-path\">IsStartElement</a> followed by <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> to position you on the content of that element found in the input stream.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadStartElement_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadStartElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadStartElement(String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the current content node is an element with the given <span class=\"xref\">stem.Xml.XmlReader.Name*</span> and advances the reader to the next node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ReadStartElement (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>Incorrect XML was encountered in the input stream.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Xml.XmlReader.Name*</span> of the element does not match the given <code>name</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A call to this method corresponds to a call to <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_\" data-linktype=\"relative-path\">IsStartElement</a> followed by a call to <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the text content of each element.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#11\">Using reader As XmlReader = XmlReader.Create(&quot;book3.xml&quot;)               \n  &#39; Parse the XML document.  ReadString is used to \n  &#39; read the text content of the elements.\n  reader.Read()\n  reader.ReadStartElement(&quot;book&quot;)\n  reader.ReadStartElement(&quot;title&quot;)\n  Console.Write(&quot;The content of the title element:  &quot;)\n  Console.WriteLine(reader.ReadString())\n  reader.ReadEndElement()\n  reader.ReadStartElement(&quot;price&quot;)\n  Console.Write(&quot;The content of the price element:  &quot;)\n  Console.WriteLine(reader.ReadString())\n  reader.ReadEndElement()\n  reader.ReadEndElement()            \nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#11\">using (XmlReader reader = XmlReader.Create(&quot;book3.xml&quot;)) {\n\n  // Parse the XML document.  ReadString is used to \n  // read the text content of the elements.\n  reader.Read(); \n  reader.ReadStartElement(&quot;book&quot;);  \n  reader.ReadStartElement(&quot;title&quot;);   \n  Console.Write(&quot;The content of the title element:  &quot;);\n  Console.WriteLine(reader.ReadString());\n  reader.ReadEndElement();\n  reader.ReadStartElement(&quot;price&quot;);\n  Console.Write(&quot;The content of the price element:  &quot;);\n  Console.WriteLine(reader.ReadString());\n  reader.ReadEndElement();\n  reader.ReadEndElement();\n\n}\n</code></pre><p> The example uses the <code>book3.xml</code> file.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#6\">&lt;book&gt;\n  &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n  &lt;price&gt;19.95&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadStartElement_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadStartElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadStartElement(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks that the current content node is an element with the given <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span> and advances the reader to the next node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ReadStartElement (string localname, string ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>Incorrect XML was encountered in the input stream.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Xml.XmlReader.LocalName*</span> and <span class=\"xref\">stem.Xml.XmlReader.NamespaceURI*</span> properties of the element found do not match the given arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A call to this method corresponds to a call to <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_IsStartElement_\" data-linktype=\"relative-path\">IsStartElement</a> followed by a call to <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadString\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadString()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, reads the contents of an element or text node as a string. However, we recommend that you use the <span class=\"xref\">stem.Xml.XmlReader.ReadElementContentAsString*</span> method instead, because it provides a more straightforward way to handle this operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The contents of the element or an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while parsing the XML.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>We recommend that you use the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadElementContentAsString_\" data-linktype=\"relative-path\">ReadElementContentAsString</a> method to read the contents of an element or text node as a string.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadSubtree\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadSubtree_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadSubtree()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <code>XmlReader</code> instance that can be used to read the current node, and all its descendants.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlReader ReadSubtree ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </div>\r\n                  <p>A new XML reader instance set to <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>. Calling the <span class=\"xref\">stem.Xml.XmlReader.Read*</span> method positions the new reader on the node that was current before the call to the ReadSubtree method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReadSubtree can be called only on element nodes. When the entire sub-tree has been read, calls to the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> method returns <code>false</code>. When the new XML reader has been closed, the original readeris positioned on the <code>EndElement</code> node of the sub-tree. Thus, if you called the ReadSubtree method on the start tag of the book element, after the sub-tree has been read and the new XML reader has been closed, the original XML reader is positioned on the end tag of the book element.  </p>\n<p> You should not perform any operations on the original reader until the new reader has been closed. This action is not supported and can result in unpredictable behavior.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The ReadSubtree method isn&#39;t intended for creatingcopies of the XML data that you can work with independently. It&#39;s designedto create a boundary around an XML element. This is useful if you want to pass data to another component for processing and you wish to limit how much of your data the component can access. When you pass an XML reader returned by the ReadSubtree method to another application, the application can access only that XML element, not the entire XML document.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the ReadSubtree method.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#13\">Dim settings As New XmlReaderSettings()\nsettings.IgnoreWhitespace = True\nUsing reader As XmlReader = XmlReader.Create(&quot;books.xml&quot;, settings)\n\n  &#39; Position the reader on the second book node.\n  reader.ReadToFollowing(&quot;Book&quot;)\n  reader.Skip()\n                \n  &#39; Create another reader that contains just the second book node.\n  Dim inner As XmlReader = reader.ReadSubtree()\n            \n  inner.ReadToDescendant(&quot;Title&quot;)\n  Console.WriteLine(inner.Name)\n\n  &#39; Do additional processing on the inner reader. After you \n  &#39; are done, call Close on the inner reader and \n  &#39; continue processing using the original reader.\n  inner.Close()\n\nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#13\">XmlReaderSettings settings = new XmlReaderSettings();\nsettings.IgnoreWhitespace = true;\nusing (XmlReader reader = XmlReader.Create(&quot;books.xml&quot;, settings)) {\n\n  // Position the reader on the second book node\n  reader.ReadToFollowing(&quot;Book&quot;);\n  reader.Skip();\n       \n  // Create another reader that contains just the second book node.\n  XmlReader inner = reader.ReadSubtree();\n\n  inner.ReadToDescendant(&quot;Title&quot;);\n  Console.WriteLine(inner.Name);\n\n  // Do additional processing on the inner reader. After you \n  // are done, call Close on the inner reader and \n  // continue processing using the original reader.\n  inner.Close(); \n\n}\n</code></pre><p> Use the following XML data to run the examples in this topic:  </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;  \n&lt;Books&gt;  \n  &lt;Book&gt;  \n    &lt;Title&gt;A Brief History of Time&lt;/Title&gt;  \n  &lt;/Book&gt;  \n  &lt;Book&gt;  \n    &lt;Title&gt;Principle Of Relativity&lt;/Title&gt;  \n  &lt;/Book&gt;  \n  &lt;Book&gt;  \n    &lt;Title&gt;Victory of Reason&lt;/Title&gt;  \n  &lt;/Book&gt;  \n  &lt;Book&gt;  \n    &lt;Title&gt;The Unicorn that did not Fail&lt;/Title&gt;  \n  &lt;/Book&gt;  \n  &lt;Book&gt;  \n    &lt;Title&gt;Rational Ontology&lt;/Title&gt;  \n  &lt;/Book&gt;  \n  &lt;Book&gt;  \n    &lt;Title&gt;The Meaning of Pizza&lt;/Title&gt;  \n  &lt;/Book&gt;  \n&lt;/Books&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadToDescendant_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadToDescendant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadToDescendant(String)</div>        \r\n          </div>\r\n    \r\n            <p>Advances the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the next descendant element with the specified qualified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadToDescendant (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the element you wish to move to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a matching descendant element is found; otherwise <code>false</code>. If a matching child element is not found, the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is positioned on the end tag (<span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> is <code>XmlNodeType.EndElement</code>) of the element.  </p>\n<p> If the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is not positioned on an element when ReadToDescendant was called, this method returns <code>false</code> and the position of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is not changed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The parameter is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses the second book node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#14\">Using reader As XmlReader = XmlReader.Create(&quot;2books.xml&quot;)\n\n  &#39; Move the reader to the second book node.\n  reader.MoveToContent()\n  reader.ReadToDescendant(&quot;book&quot;)\n  reader.Skip() &#39;Skip the first book.\n  &#39; Parse the file starting with the second book node.\n  Do\n    Select Case reader.NodeType\n      Case XmlNodeType.Element\n        Console.Write(&quot;&lt;{0}&quot;, reader.Name)\n        While reader.MoveToNextAttribute()\n            Console.Write(&quot; {0}=&#39;{1}&#39;&quot;, reader.Name, reader.Value)\n        End While\n        Console.Write(&quot;&gt;&quot;)\n      Case XmlNodeType.Text\n        Console.Write(reader.Value)\n      Case XmlNodeType.EndElement\n        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n    End Select\n  Loop While reader.Read()\n\nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#14\">using (XmlReader reader = XmlReader.Create(&quot;2books.xml&quot;)) {\n\n  // Move the reader to the second book node.\n  reader.MoveToContent(); \n  reader.ReadToDescendant(&quot;book&quot;);\n  reader.Skip(); //Skip the first book.\n\n  // Parse the file starting with the second book node.\n  do {\n     switch (reader.NodeType) {\n        case XmlNodeType.Element:\n           Console.Write(&quot;&lt;{0}&quot;, reader.Name);\n           while (reader.MoveToNextAttribute()) {\n               Console.Write(&quot; {0}=&#39;{1}&#39;&quot;, reader.Name, reader.Value);\n           }\n           Console.Write(&quot;&gt;&quot;);\n           break;\n        case XmlNodeType.Text:\n           Console.Write(reader.Value);\n           break;\n        case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n     }       \n  }  while (reader.Read());    \n\n}\n</code></pre><p> The example uses the file, <code>2books.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#7\">&lt;!--sample XML fragment--&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;10-861003-324&#39;&gt;\n    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n    &lt;price&gt;19.95&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;\n    &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n    &lt;price&gt;24.95&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadToDescendant_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadToDescendant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadToDescendant(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Advances the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to the next descendant element with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadToDescendant (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element you wish to move to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element you wish to move to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a matching descendant element is found; otherwise <code>false</code>. If a matching child element is not found, the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is positioned on the end tag (<span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> is <code>XmlNodeType.EndElement</code>) of the element.  </p>\n<p> If the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is not positioned on an element when ReadToDescendant was called, this method returns <code>false</code> and the position of the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is not changed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Both parameter values are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadToFollowing_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadToFollowing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadToFollowing(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reads until an element with the specified qualified name is found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadToFollowing (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a matching element is found; otherwise <code>false</code> and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is in an end of file state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The parameter is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is functionally equivalent executing the <code>following::name</code> XPath expression from the current node. It provides a quick way to find a named element in the XML document. It advances the reader to the next following element that matches the specified name and returns <code>true</code> if a matching element is found. Using the example below, the reader would read to the first instance of the specified element while reading forward.  </p>\n<pre><code class=\"lang-xml\">&lt;!--&quot;sample.xml&quot;--&gt;  \n&lt;?xmlversion=&quot;1.0&quot;&gt;  \n   &lt;items&gt;  \n      &lt;item xmls=&quot;urn:1&quot;/&gt;  \n   &lt;/items&gt;  \n&lt;/xml&gt;\n</code></pre><pre><code class=\"lang-c#\">XmlTextReader reader = newXmlTextReader(&quot;sample.xml&quot;);  \n\nreader.ReadToFollowing(&quot;item&quot;);\n</code></pre><p> This method can be called on all node types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadToFollowing_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadToFollowing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadToFollowing(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Reads until an element with the specified local name and namespace URI is found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadToFollowing (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a matching element is found; otherwise <code>false</code> and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is in an end of file state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Both parameter values are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is functionally equivalent executing the <code>following::name</code> XPath expression from the current node. It provides a quick way to find a named element in the XML document. It advances the reader to the next following element that matches the specified name and returns <code>true</code> if a matching element is found.  </p>\n<pre><code class=\"lang-xml\">&lt;!--&quot;sample.xml&quot;--&gt;  \n&lt;?xmlversion=&quot;1.0&quot;&gt;  \n   &lt;items&gt;  \n      &lt;item xmls=&quot;urn:1&quot;/&gt;  \n   &lt;/items&gt;  \n&lt;/xml&gt;\n</code></pre><pre><code class=\"lang-c#\">XmlTextReader reader = newXmlTextReader(&quot;sample.xml&quot;);  \n\nreader.ReadToFollowing(&quot;item&quot;, &quot;urn:1&quot;);\n</code></pre><p> This method can be called on all node types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadToNextSibling_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadToNextSibling_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadToNextSibling(String)</div>        \r\n          </div>\r\n    \r\n            <p>Advances the <code>XmlReader</code> to the next sibling element with the specified qualified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadToNextSibling (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The qualified name of the sibling element you wish to move to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a matching sibling element is found; otherwise <code>false</code>. If a matching sibling element is not found, the <code>XmlReader</code> is positioned on the end tag (<span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> is <code>XmlNodeType.EndElement</code>) of the parent element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The parameter is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Do not call ReadToNextSibling when the <code>XmlReader</code> is an initial state (<a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadState_\" data-linktype=\"relative-path\">ReadState</a> is <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>). You can call <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> to advance the <code>XmlReader</code> and then call the ReadToNextSibling method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads the ISBN attribute on each book node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#15\">Using reader As XmlReader = XmlReader.Create(&quot;books.xml&quot;)\n  reader.ReadToFollowing(&quot;book&quot;)\n  Do\n    Console.WriteLine(&quot;ISBN: {0}&quot;, reader.GetAttribute(&quot;ISBN&quot;))\n  Loop While reader.ReadToNextSibling(&quot;book&quot;)\nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#15\">using (XmlReader reader = XmlReader.Create(&quot;books.xml&quot;)) {\n    reader.ReadToFollowing(&quot;book&quot;);\n    do {\n       Console.WriteLine(&quot;ISBN: {0}&quot;, reader.GetAttribute(&quot;ISBN&quot;)); \n    } while (reader.ReadToNextSibling(&quot;book&quot;));\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadToNextSibling_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadToNextSibling_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadToNextSibling(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Advances the <code>XmlReader</code> to the next sibling element with the specified local name and namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadToNextSibling (string localName, string namespaceURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the sibling element you wish to move to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI of the sibling element you wish to move to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a matching sibling element is found; otherwise, <code>false</code>. If a matching sibling element is not found, the <code>XmlReader</code> is positioned on the end tag (<span class=\"xref\">stem.Xml.XmlReader.NodeType*</span> is <code>XmlNodeType.EndElement</code>) of the parent element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Both parameter values are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Do not call ReadToNextSibling when the <code>XmlReader</code> is an initial state (<a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadState_\" data-linktype=\"relative-path\">ReadState</a> is <a class=\"xref\" href=\"system.xml.readstate\" data-linktype=\"relative-path\">ReadState</a>). You can call <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> to advance the <code>XmlReader</code> and then call the ReadToNextSibling method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadValueChunk_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadValueChunk_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadValueChunk(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads large streams of text embedded in an XML document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadValueChunk (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of characters that serves as the buffer to which the text contents are written. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset within the buffer where the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can start to copy the results.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters read into the buffer. The value zero is returned when there is no more text content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>buffer</code> value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index into the buffer, or index + count is larger than the allocated buffer size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implementation does not support this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlexception\" data-linktype=\"relative-path\">XmlException</a></div>\r\n                  </div>\r\n                  <p>The XML data is not well-formed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method enables reading of very large streams of text embedded in an XML document in a streaming fashion, that is, a small number of characters at a time instead of allocating a single string for the whole value. This method can be called on any node that has a value (<a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_HasValue_\" data-linktype=\"relative-path\">HasValue</a> is <code>true</code>), however actual streaming of the node value only occurs when called on a text, white space and significant white space nodes. Other node type values are cached, including attributes and CDATA nodes.  </p>\n<p> This method returns only the content of the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> property and does not move the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.  </p>\n<p> This method reads the specified number of characters (<code>count</code>) of the node value into a character buffer (<code>buffer</code>) at a specified offset (<code>index</code>) and returns the number of characters written to the buffer. It returns the <code>0</code> when it has reached the end of the value. It cannot be restarted to read through the value again.  </p>\n<p> In between calls to ReadValueChunk the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> properties do no change except for the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> property. When the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> property is accessed it may either return a partial value (with characters not yet returned by ReadValueChunk) or a full value depending on the implementation. All the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> implementations in the <a class=\"xref\" href=\"system.xml\" data-linktype=\"relative-path\">System.Xml</a> namespace return a partial value for the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Value_\" data-linktype=\"relative-path\">Value</a> property implementation.  </p>\n<p> Any Read method can be called in between calls to ReadValueChunk. If this occurs, the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> moves to the next <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a> in the stream and any characters not yet returned are skipped.  </p>\n<p> There may be a case when ReadValueChunk returns less than the requested number of characters. For example, if you had a 200-character long value with a surrogate pair at positions 127 and 128 and you called ReadValueChunk with a 128-character buffer, the method call would return 127 characters instead of the requested 128. The surrogate pair would then be returned in the next ReadValueChunk call. In this case, ReadValueChunk did not return the requested 128 characters because doing so would have resulted in an incomplete surrogate pair at the end of the buffer.  </p>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunkAsync_\" data-linktype=\"relative-path\">ReadValueChunkAsync</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ReadValueChunkAsync_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ReadValueChunkAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadValueChunkAsync(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads large streams of text embedded in an XML document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;int&gt; ReadValueChunkAsync (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of characters that serves as the buffer to which the text contents are written. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset within the buffer where the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> can start to copy the results.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The number of characters read into the buffer. The value zero is returned when there is no more text content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadValueChunk_\" data-linktype=\"relative-path\">ReadValueChunk</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_ResolveEntity\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_ResolveEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveEntity()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, resolves the entity reference for <code>EntityReference</code> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void ResolveEntity ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the reader is positioned on an <code>EntityReference</code> node (<code>XmlNodeType.EntityReference</code>), if <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a> is called after calling this method, the entity replacement text is parsed. When the entity replacement text is finished, an <code>EndEntity</code> node is returned to close the entity reference scope.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> After calling this method, if the entity is part of an attribute value, you must call <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_ReadAttributeValue_\" data-linktype=\"relative-path\">ReadAttributeValue</a> to step into the entity.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_Skip\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_Skip_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Skip()</div>        \r\n          </div>\r\n    \r\n            <p>Skips the children of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Skip ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> method was called before a previous asynchronous operation finished. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œAn asynchronous operation is already in progress.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the following XML input if the reader is positioned on the <code>&lt;a&gt;</code> node or any of its attributes, calling <code>Skip</code> positions the reader to the <code>&lt;b&gt;</code> node.  </p>\n<p> If the reader is positioned on a leaf node already (such as the <code>&lt;x&gt;</code> node or the text node <code>abc</code>), calling <code>Skip</code> is the same as calling <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Read_\" data-linktype=\"relative-path\">Read</a>.  </p>\n<pre><code>&lt;a name=&quot;bob&quot; age=&quot;123&quot;&gt;  \n &lt;x/&gt;abc&lt;y/&gt;  \n&lt;/a&gt;  \n&lt;b&gt;  \n...  \n&lt;/b&gt;\n</code></pre><p> This method checks for well-formed XML.  </p>\n<p> If the reader is an <a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a>, this method also validates the skipped content.  </p>\n<p> The <code>XmlReader</code> implementation determines whether or not the <code>Skip</code> method will expand external entities. The following table describes whether the external entities are expanded for the various types of <code>XmlReader</code> objects.  </p>\n<table>\n<thead>\n<tr>\n<th>Type of XmlReader</th>\n<th>Expands external entities</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a></td>\n<td>No.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance created by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method that is reading text data.</td>\n<td>No.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance created by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method that is reading binary data.</td>\n<td>Not applicable.</td>\n</tr>\n<tr>\n<td>A schema validating <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance created by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> method.</td>\n<td>Yes.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlvalidatingreader\" data-linktype=\"relative-path\">XmlValidatingReader</a></td>\n<td>Yes.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance returned by a <a class=\"xref\" href=\"system.xml.xpath.xpathnavigator\" data-linktype=\"relative-path\">XPathNavigator</a> object.</td>\n<td>Not applicable.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a></td>\n<td>No.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance wrapped around another <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance.</td>\n<td>Depends on the implementation of the underlying <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. (The <code>Skip</code> method on the underlying <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> is called).</td>\n</tr>\n</tbody>\n</table>\n<p> For the asynchronous version of this method, see <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_SkipAsync_\" data-linktype=\"relative-path\">SkipAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses an XML file starting on the second book node.  </p>\n<pre><code class=\"lang-vb\" name=\"XmlReaderBasic#14\">Using reader As XmlReader = XmlReader.Create(&quot;2books.xml&quot;)\n\n  &#39; Move the reader to the second book node.\n  reader.MoveToContent()\n  reader.ReadToDescendant(&quot;book&quot;)\n  reader.Skip() &#39;Skip the first book.\n  &#39; Parse the file starting with the second book node.\n  Do\n    Select Case reader.NodeType\n      Case XmlNodeType.Element\n        Console.Write(&quot;&lt;{0}&quot;, reader.Name)\n        While reader.MoveToNextAttribute()\n            Console.Write(&quot; {0}=&#39;{1}&#39;&quot;, reader.Name, reader.Value)\n        End While\n        Console.Write(&quot;&gt;&quot;)\n      Case XmlNodeType.Text\n        Console.Write(reader.Value)\n      Case XmlNodeType.EndElement\n        Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name)\n    End Select\n  Loop While reader.Read()\n\nEnd Using\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlReaderBasic#14\">using (XmlReader reader = XmlReader.Create(&quot;2books.xml&quot;)) {\n\n  // Move the reader to the second book node.\n  reader.MoveToContent(); \n  reader.ReadToDescendant(&quot;book&quot;);\n  reader.Skip(); //Skip the first book.\n\n  // Parse the file starting with the second book node.\n  do {\n     switch (reader.NodeType) {\n        case XmlNodeType.Element:\n           Console.Write(&quot;&lt;{0}&quot;, reader.Name);\n           while (reader.MoveToNextAttribute()) {\n               Console.Write(&quot; {0}=&#39;{1}&#39;&quot;, reader.Name, reader.Value);\n           }\n           Console.Write(&quot;&gt;&quot;);\n           break;\n        case XmlNodeType.Text:\n           Console.Write(reader.Value);\n           break;\n        case XmlNodeType.EndElement:\n           Console.Write(&quot;&lt;/{0}&gt;&quot;, reader.Name);\n           break;\n     }       \n  }  while (reader.Read());    \n\n}\n</code></pre><p> The example uses the file, <code>2books.xml</code>, as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XML_Core_Files#7\">&lt;!--sample XML fragment--&gt;\n&lt;bookstore&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;10-861003-324&#39;&gt;\n    &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n    &lt;price&gt;19.95&lt;/price&gt;\n  &lt;/book&gt;\n  &lt;book genre=&#39;novel&#39; ISBN=&#39;1-861001-57-5&#39;&gt;\n    &lt;title&gt;Pride And Prejudice&lt;/title&gt;\n    &lt;price&gt;24.95&lt;/price&gt;\n  &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlReader_SkipAsync\">\r\n    \r\n            <a id=\"System_Xml_XmlReader_SkipAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously skips the children of the current node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task SkipAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>The current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> asynchronous method was called without setting the <span class=\"xref\">stem.Xml.XmlReaderSettings.Async*</span> flag to <code>true</code>. In this case, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown with the message â€œSet XmlReaderSettings.Async to true if you want to use Async Methods.â€</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the asynchronous version of <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Skip_\" data-linktype=\"relative-path\">Skip</a>, with the same functionality. To use this method, you must set the <a class=\"xref\" href=\"system.xml.xmlreadersettings#System_Xml_XmlReaderSettings_Async_\" data-linktype=\"relative-path\">Async</a> flag to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlReader.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlReader.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.AttributeCount\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.BaseURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.CanReadBinaryContent\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.CanReadValueChunk\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.CanResolveEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Close\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Create\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Depth\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.EOF\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.GetAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.GetValueAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.HasAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.HasValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.IsDefault\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.IsEmptyElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.IsName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.IsNameToken\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.IsStartElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Item\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.LocalName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.LookupNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.MoveToAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.MoveToContent\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.MoveToContentAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.MoveToElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.MoveToFirstAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.MoveToNextAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.NamespaceURI\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.NameTable\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Prefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.QuoteChar\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Read\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAs\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsBase64Async\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsBinHexAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsBoolean\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsDateTime\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsDateTimeOffset\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsDecimal\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsDouble\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsFloat\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsInt\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsLong\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsObject\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsObjectAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsString\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadContentAsStringAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAs\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsBase64Async\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsBinHexAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsBoolean\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsDateTime\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsDecimal\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsDouble\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsFloat\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsInt\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsLong\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsObject\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsObjectAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsString\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementContentAsStringAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadElementString\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadEndElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadInnerXmlAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadOuterXml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadOuterXmlAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadStartElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadState\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadString\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadSubtree\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadToDescendant\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadToFollowing\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadToNextSibling\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadValueChunk\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ReadValueChunkAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ResolveEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.SchemaInfo\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Settings\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Skip\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.SkipAsync\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.Value\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.ValueType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.XmlLang\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlReader.XmlSpace\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0586389f-2120-0d29-3621-3811275ae6ef\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Xml\\XmlReader.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a reader that provides fast, noncached, forward-only access to XML data.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.XmlReader\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlReader.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlReader.yml","open_to_public_contributors":true,"api_name":["System.Xml.XmlReader","System.Xml.XmlReader..ctor","System.Xml.XmlReader.AttributeCount","System.Xml.XmlReader.BaseURI","System.Xml.XmlReader.CanReadBinaryContent","System.Xml.XmlReader.CanReadValueChunk","System.Xml.XmlReader.CanResolveEntity","System.Xml.XmlReader.Close","System.Xml.XmlReader.Create","System.Xml.XmlReader.Depth","System.Xml.XmlReader.Dispose","System.Xml.XmlReader.EOF","System.Xml.XmlReader.GetAttribute","System.Xml.XmlReader.GetValueAsync","System.Xml.XmlReader.HasAttributes","System.Xml.XmlReader.HasValue","System.Xml.XmlReader.IsDefault","System.Xml.XmlReader.IsEmptyElement","System.Xml.XmlReader.IsName","System.Xml.XmlReader.IsNameToken","System.Xml.XmlReader.IsStartElement","System.Xml.XmlReader.Item","System.Xml.XmlReader.LocalName","System.Xml.XmlReader.LookupNamespace","System.Xml.XmlReader.MoveToAttribute","System.Xml.XmlReader.MoveToContent","System.Xml.XmlReader.MoveToContentAsync","System.Xml.XmlReader.MoveToElement","System.Xml.XmlReader.MoveToFirstAttribute","System.Xml.XmlReader.MoveToNextAttribute","System.Xml.XmlReader.Name","System.Xml.XmlReader.NamespaceURI","System.Xml.XmlReader.NameTable","System.Xml.XmlReader.NodeType","System.Xml.XmlReader.Prefix","System.Xml.XmlReader.QuoteChar","System.Xml.XmlReader.Read","System.Xml.XmlReader.ReadAsync","System.Xml.XmlReader.ReadAttributeValue","System.Xml.XmlReader.ReadContentAs","System.Xml.XmlReader.ReadContentAsAsync","System.Xml.XmlReader.ReadContentAsBase64","System.Xml.XmlReader.ReadContentAsBase64Async","System.Xml.XmlReader.ReadContentAsBinHex","System.Xml.XmlReader.ReadContentAsBinHexAsync","System.Xml.XmlReader.ReadContentAsBoolean","System.Xml.XmlReader.ReadContentAsDateTime","System.Xml.XmlReader.ReadContentAsDateTimeOffset","System.Xml.XmlReader.ReadContentAsDecimal","System.Xml.XmlReader.ReadContentAsDouble","System.Xml.XmlReader.ReadContentAsFloat","System.Xml.XmlReader.ReadContentAsInt","System.Xml.XmlReader.ReadContentAsLong","System.Xml.XmlReader.ReadContentAsObject","System.Xml.XmlReader.ReadContentAsObjectAsync","System.Xml.XmlReader.ReadContentAsString","System.Xml.XmlReader.ReadContentAsStringAsync","System.Xml.XmlReader.ReadElementContentAs","System.Xml.XmlReader.ReadElementContentAsAsync","System.Xml.XmlReader.ReadElementContentAsBase64","System.Xml.XmlReader.ReadElementContentAsBase64Async","System.Xml.XmlReader.ReadElementContentAsBinHex","System.Xml.XmlReader.ReadElementContentAsBinHexAsync","System.Xml.XmlReader.ReadElementContentAsBoolean","System.Xml.XmlReader.ReadElementContentAsDateTime","System.Xml.XmlReader.ReadElementContentAsDecimal","System.Xml.XmlReader.ReadElementContentAsDouble","System.Xml.XmlReader.ReadElementContentAsFloat","System.Xml.XmlReader.ReadElementContentAsInt","System.Xml.XmlReader.ReadElementContentAsLong","System.Xml.XmlReader.ReadElementContentAsObject","System.Xml.XmlReader.ReadElementContentAsObjectAsync","System.Xml.XmlReader.ReadElementContentAsString","System.Xml.XmlReader.ReadElementContentAsStringAsync","System.Xml.XmlReader.ReadElementString","System.Xml.XmlReader.ReadEndElement","System.Xml.XmlReader.ReadInnerXml","System.Xml.XmlReader.ReadInnerXmlAsync","System.Xml.XmlReader.ReadOuterXml","System.Xml.XmlReader.ReadOuterXmlAsync","System.Xml.XmlReader.ReadStartElement","System.Xml.XmlReader.ReadState","System.Xml.XmlReader.ReadString","System.Xml.XmlReader.ReadSubtree","System.Xml.XmlReader.ReadToDescendant","System.Xml.XmlReader.ReadToFollowing","System.Xml.XmlReader.ReadToNextSibling","System.Xml.XmlReader.ReadValueChunk","System.Xml.XmlReader.ReadValueChunkAsync","System.Xml.XmlReader.ResolveEntity","System.Xml.XmlReader.SchemaInfo","System.Xml.XmlReader.Settings","System.Xml.XmlReader.Skip","System.Xml.XmlReader.SkipAsync","System.Xml.XmlReader.Value","System.Xml.XmlReader.ValueType","System.Xml.XmlReader.XmlLang","System.Xml.XmlReader.XmlSpace"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.XmlReader","System::Xml::XmlReader","System.Xml.XmlReader.#ctor","System::Xml::XmlReader::#ctor","System.Xml.XmlReader.AttributeCount","System::Xml::XmlReader::AttributeCount","System.Xml.XmlReader.BaseURI","System::Xml::XmlReader::BaseURI","System.Xml.XmlReader.CanReadBinaryContent","System::Xml::XmlReader::CanReadBinaryContent","System.Xml.XmlReader.CanReadValueChunk","System::Xml::XmlReader::CanReadValueChunk","System.Xml.XmlReader.CanResolveEntity","System::Xml::XmlReader::CanResolveEntity","System.Xml.XmlReader.Close","System::Xml::XmlReader::Close","System.Xml.XmlReader.Create","System::Xml::XmlReader::Create","System.Xml.XmlReader.Depth","System::Xml::XmlReader::Depth","System.Xml.XmlReader.Dispose","System::Xml::XmlReader::Dispose","System.Xml.XmlReader.EOF","System::Xml::XmlReader::EOF","System.Xml.XmlReader.GetAttribute","System::Xml::XmlReader::GetAttribute","System.Xml.XmlReader.GetValueAsync","System::Xml::XmlReader::GetValueAsync","System.Xml.XmlReader.HasAttributes","System::Xml::XmlReader::HasAttributes","System.Xml.XmlReader.HasValue","System::Xml::XmlReader::HasValue","System.Xml.XmlReader.IsDefault","System::Xml::XmlReader::IsDefault","System.Xml.XmlReader.IsEmptyElement","System::Xml::XmlReader::IsEmptyElement","System.Xml.XmlReader.IsName","System::Xml::XmlReader::IsName","System.Xml.XmlReader.IsNameToken","System::Xml::XmlReader::IsNameToken","System.Xml.XmlReader.IsStartElement","System::Xml::XmlReader::IsStartElement","System.Xml.XmlReader.Item","System::Xml::XmlReader::Item","System.Xml.XmlReader.LocalName","System::Xml::XmlReader::LocalName","System.Xml.XmlReader.LookupNamespace","System::Xml::XmlReader::LookupNamespace","System.Xml.XmlReader.MoveToAttribute","System::Xml::XmlReader::MoveToAttribute","System.Xml.XmlReader.MoveToContent","System::Xml::XmlReader::MoveToContent","System.Xml.XmlReader.MoveToContentAsync","System::Xml::XmlReader::MoveToContentAsync","System.Xml.XmlReader.MoveToElement","System::Xml::XmlReader::MoveToElement","System.Xml.XmlReader.MoveToFirstAttribute","System::Xml::XmlReader::MoveToFirstAttribute","System.Xml.XmlReader.MoveToNextAttribute","System::Xml::XmlReader::MoveToNextAttribute","System.Xml.XmlReader.Name","System::Xml::XmlReader::Name","System.Xml.XmlReader.NamespaceURI","System::Xml::XmlReader::NamespaceURI","System.Xml.XmlReader.NameTable","System::Xml::XmlReader::NameTable","System.Xml.XmlReader.NodeType","System::Xml::XmlReader::NodeType","System.Xml.XmlReader.Prefix","System::Xml::XmlReader::Prefix","System.Xml.XmlReader.QuoteChar","System::Xml::XmlReader::QuoteChar","System.Xml.XmlReader.Read","System::Xml::XmlReader::Read","System.Xml.XmlReader.ReadAsync","System::Xml::XmlReader::ReadAsync","System.Xml.XmlReader.ReadAttributeValue","System::Xml::XmlReader::ReadAttributeValue","System.Xml.XmlReader.ReadContentAs","System::Xml::XmlReader::ReadContentAs","System.Xml.XmlReader.ReadContentAsAsync","System::Xml::XmlReader::ReadContentAsAsync","System.Xml.XmlReader.ReadContentAsBase64","System::Xml::XmlReader::ReadContentAsBase64","System.Xml.XmlReader.ReadContentAsBase64Async","System::Xml::XmlReader::ReadContentAsBase64Async","System.Xml.XmlReader.ReadContentAsBinHex","System::Xml::XmlReader::ReadContentAsBinHex","System.Xml.XmlReader.ReadContentAsBinHexAsync","System::Xml::XmlReader::ReadContentAsBinHexAsync","System.Xml.XmlReader.ReadContentAsBoolean","System::Xml::XmlReader::ReadContentAsBoolean","System.Xml.XmlReader.ReadContentAsDateTime","System::Xml::XmlReader::ReadContentAsDateTime","System.Xml.XmlReader.ReadContentAsDateTimeOffset","System::Xml::XmlReader::ReadContentAsDateTimeOffset","System.Xml.XmlReader.ReadContentAsDecimal","System::Xml::XmlReader::ReadContentAsDecimal","System.Xml.XmlReader.ReadContentAsDouble","System::Xml::XmlReader::ReadContentAsDouble","System.Xml.XmlReader.ReadContentAsFloat","System::Xml::XmlReader::ReadContentAsFloat","System.Xml.XmlReader.ReadContentAsInt","System::Xml::XmlReader::ReadContentAsInt","System.Xml.XmlReader.ReadContentAsLong","System::Xml::XmlReader::ReadContentAsLong","System.Xml.XmlReader.ReadContentAsObject","System::Xml::XmlReader::ReadContentAsObject","System.Xml.XmlReader.ReadContentAsObjectAsync","System::Xml::XmlReader::ReadContentAsObjectAsync","System.Xml.XmlReader.ReadContentAsString","System::Xml::XmlReader::ReadContentAsString","System.Xml.XmlReader.ReadContentAsStringAsync","System::Xml::XmlReader::ReadContentAsStringAsync","System.Xml.XmlReader.ReadElementContentAs","System::Xml::XmlReader::ReadElementContentAs","System.Xml.XmlReader.ReadElementContentAsAsync","System::Xml::XmlReader::ReadElementContentAsAsync","System.Xml.XmlReader.ReadElementContentAsBase64","System::Xml::XmlReader::ReadElementContentAsBase64","System.Xml.XmlReader.ReadElementContentAsBase64Async","System::Xml::XmlReader::ReadElementContentAsBase64Async","System.Xml.XmlReader.ReadElementContentAsBinHex","System::Xml::XmlReader::ReadElementContentAsBinHex","System.Xml.XmlReader.ReadElementContentAsBinHexAsync","System::Xml::XmlReader::ReadElementContentAsBinHexAsync","System.Xml.XmlReader.ReadElementContentAsBoolean","System::Xml::XmlReader::ReadElementContentAsBoolean","System.Xml.XmlReader.ReadElementContentAsDateTime","System::Xml::XmlReader::ReadElementContentAsDateTime","System.Xml.XmlReader.ReadElementContentAsDecimal","System::Xml::XmlReader::ReadElementContentAsDecimal","System.Xml.XmlReader.ReadElementContentAsDouble","System::Xml::XmlReader::ReadElementContentAsDouble","System.Xml.XmlReader.ReadElementContentAsFloat","System::Xml::XmlReader::ReadElementContentAsFloat","System.Xml.XmlReader.ReadElementContentAsInt","System::Xml::XmlReader::ReadElementContentAsInt","System.Xml.XmlReader.ReadElementContentAsLong","System::Xml::XmlReader::ReadElementContentAsLong","System.Xml.XmlReader.ReadElementContentAsObject","System::Xml::XmlReader::ReadElementContentAsObject","System.Xml.XmlReader.ReadElementContentAsObjectAsync","System::Xml::XmlReader::ReadElementContentAsObjectAsync","System.Xml.XmlReader.ReadElementContentAsString","System::Xml::XmlReader::ReadElementContentAsString","System.Xml.XmlReader.ReadElementContentAsStringAsync","System::Xml::XmlReader::ReadElementContentAsStringAsync","System.Xml.XmlReader.ReadElementString","System::Xml::XmlReader::ReadElementString","System.Xml.XmlReader.ReadEndElement","System::Xml::XmlReader::ReadEndElement","System.Xml.XmlReader.ReadInnerXml","System::Xml::XmlReader::ReadInnerXml","System.Xml.XmlReader.ReadInnerXmlAsync","System::Xml::XmlReader::ReadInnerXmlAsync","System.Xml.XmlReader.ReadOuterXml","System::Xml::XmlReader::ReadOuterXml","System.Xml.XmlReader.ReadOuterXmlAsync","System::Xml::XmlReader::ReadOuterXmlAsync","System.Xml.XmlReader.ReadStartElement","System::Xml::XmlReader::ReadStartElement","System.Xml.XmlReader.ReadState","System::Xml::XmlReader::ReadState","System.Xml.XmlReader.ReadString","System::Xml::XmlReader::ReadString","System.Xml.XmlReader.ReadSubtree","System::Xml::XmlReader::ReadSubtree","System.Xml.XmlReader.ReadToDescendant","System::Xml::XmlReader::ReadToDescendant","System.Xml.XmlReader.ReadToFollowing","System::Xml::XmlReader::ReadToFollowing","System.Xml.XmlReader.ReadToNextSibling","System::Xml::XmlReader::ReadToNextSibling","System.Xml.XmlReader.ReadValueChunk","System::Xml::XmlReader::ReadValueChunk","System.Xml.XmlReader.ReadValueChunkAsync","System::Xml::XmlReader::ReadValueChunkAsync","System.Xml.XmlReader.ResolveEntity","System::Xml::XmlReader::ResolveEntity","System.Xml.XmlReader.SchemaInfo","System::Xml::XmlReader::SchemaInfo","System.Xml.XmlReader.Settings","System::Xml::XmlReader::Settings","System.Xml.XmlReader.Skip","System::Xml::XmlReader::Skip","System.Xml.XmlReader.SkipAsync","System::Xml::XmlReader::SkipAsync","System.Xml.XmlReader.Value","System::Xml::XmlReader::Value","System.Xml.XmlReader.ValueType","System::Xml::XmlReader::ValueType","System.Xml.XmlReader.XmlLang","System::Xml::XmlReader::XmlLang","System.Xml.XmlReader.XmlSpace","System::Xml::XmlReader::XmlSpace"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0586389f-2120-0d29-3621-3811275ae6ef","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Xml\\XmlReader.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml/XmlReader.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlReader class | Microsoft Docs","_op_ogTitle":"XmlReader class","description":"Represents a reader that provides fast, noncached, forward-only access to XML data.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Xml/toc.json","toc_rel":"_splitted/System.Xml/toc.json","source_url":"","ms.assetid":"System.Xml.XmlReader","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmlreader","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmlreader","fileRelativePath":"System.Xml.XmlReader.html"},"themesRelativePathToOutputRoot":"_themes/"}