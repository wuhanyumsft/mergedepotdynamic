{"content":"    \r\n    <h1 id=\"System_StringComparer\">\r\n      <span class=\"lang-csharp\">StringComparer</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StringComparer</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>An object derived from the StringComparer class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules. You can use the StringComparer class to create a type-specific comparison to sort the elements in a generic collection. Classes such as <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, and <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> use the StringComparer class for sorting purposes.  </p>\n<p> A comparison operation that is represented by the StringComparer class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules. For more information about word and ordinal comparison rules, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<h2 id=\"implemented-properties\">Implemented Properties</h2>\n<p> You might be confused about how to use the StringComparer class properties because of a seeming contradiction. The StringComparer class is declared <code>abstract</code> (<code>MustInherit</code> in Visual Basic), which means its members can be invoked only on an object of a class derived from the StringComparer class. The contradiction is that each property of the StringComparer class is declared <code>static</code> (<code>Shared</code> in Visual Basic), which means the property can be invoked without first creating a derived class.  </p>\n<p> You can call a StringComparer property directly because each property actually returns an instance of an anonymous class that is derived from the StringComparer class. Consequently, the type of each property value is StringComparer, which is the base class of the anonymous class, not the type of the anonymous class itself. Each StringComparer class property returns a StringComparer object that supports predefined case and comparison rules.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer__ctor\" data-linktype=\"self-bookmark\">StringComparer()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_CurrentCulture\" data-linktype=\"self-bookmark\">CurrentCulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_CurrentCultureIgnoreCase\" data-linktype=\"self-bookmark\">CurrentCultureIgnoreCase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_InvariantCulture\" data-linktype=\"self-bookmark\">InvariantCulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_InvariantCultureIgnoreCase\" data-linktype=\"self-bookmark\">InvariantCultureIgnoreCase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_Ordinal\" data-linktype=\"self-bookmark\">Ordinal</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-sensitive ordinal string comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_OrdinalIgnoreCase\" data-linktype=\"self-bookmark\">OrdinalIgnoreCase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-insensitive ordinal string comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_Compare_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Compare(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_Compare_System_String_System_String_\" data-linktype=\"self-bookmark\">Compare(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_Create_System_Globalization_CultureInfo_System_Boolean_\" data-linktype=\"self-bookmark\">Create(CultureInfo,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that compares strings according to the rules of a specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_Equals_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, indicates whether two objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_Equals_System_String_System_String_\" data-linktype=\"self-bookmark\">Equals(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, indicates whether two strings are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_GetHashCode_System_Object_\" data-linktype=\"self-bookmark\">GetHashCode(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the hash code for the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_StringComparer_GetHashCode_System_String_\" data-linktype=\"self-bookmark\">GetHashCode(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the hash code for the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer__ctor\">\r\n    \r\n            <a id=\"System_StringComparer__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringComparer()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected StringComparer ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_CurrentCulture\">\r\n    \r\n            <a id=\"System_StringComparer_CurrentCulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentCulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static StringComparer CurrentCulture { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The<a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> returned by the CurrentCulture property can be used when strings are linguistically relevant. For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.  </p>\n<p> The current culture is the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object associated with the current thread.  </p>\n<p> The CurrentCulture property actually returns an instance of an anonymous class derived from the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class.  </p>\n<p> Each call to the CurrentCulture property <code>get</code> accessor returns a new <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object, as the following code shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.StringComparer.CurrentCulture#1\">   Private Sub CompareCurrentCultureStringComparers()\n      Dim stringComparer1 As StringComparer = StringComparer.CurrentCulture\n      Dim stringComparer2 As StringComparer = StringComparer.CurrentCulture\n      &#39; Displays False\n      Console.WriteLine(StringComparer.ReferenceEquals(stringComparer1, _\n                                                       stringComparer2))\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.StringComparer.CurrentCulture#1\">   private void CompareCurrentCultureStringComparer()\n   {\n      StringComparer stringComparer1 = StringComparer.CurrentCulture;\n      StringComparer stringComparer2 = StringComparer.CurrentCulture;\n      // Displays false\n      Console.WriteLine(StringComparer.ReferenceEquals(stringComparer1, \n                                                       stringComparer2));\n   }\n</code></pre><p> To improve performance, you can store the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object in a local variable rather than retrieve the value of the CurrentCulture property multiple times.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the properties and the <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Create_\" data-linktype=\"relative-path\">Create</a> method of the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class. The example illustrates how different <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> objects sort three versions of the Latin letter I.  </p>\n<pre><code class=\"lang-cs\" name=\"System.StringComparer#1\">// This example demonstrates members of the \n// System.StringComparer class.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n// Create a list of string.\n    List&lt;string&gt; list = new List&lt;string&gt;();\n\n// Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo turkish = new CultureInfo(&quot;tr-TR&quot;);\n\n// Get the culture that is associated with the current thread.\n    CultureInfo thisCulture = Thread.CurrentThread.CurrentCulture;\n\n// Get the standard StringComparers.\n    StringComparer invCmp =   StringComparer.InvariantCulture;\n    StringComparer invICCmp = StringComparer.InvariantCultureIgnoreCase;\n    StringComparer currCmp = StringComparer.CurrentCulture;\n    StringComparer currICCmp = StringComparer.CurrentCultureIgnoreCase;\n    StringComparer ordCmp = StringComparer.Ordinal;\n    StringComparer ordICCmp = StringComparer.OrdinalIgnoreCase;\n\n// Create a StringComparer that uses the Turkish culture and ignores case.\n    StringComparer turkICComp = StringComparer.Create(turkish, true);\n\n// Define three strings consisting of different versions of the letter I.\n// LATIN CAPITAL LETTER I (U+0049)\n    string capitalLetterI = &quot;I&quot;;  \n\n// LATIN SMALL LETTER I (U+0069)\n    string smallLetterI   = &quot;i&quot;;\n\n// LATIN SMALL LETTER DOTLESS I (U+0131)\n    string smallLetterDotlessI = &quot;\\u0131&quot;;\n\n// Add the three strings to the list.\n    list.Add(capitalLetterI);\n    list.Add(smallLetterI);\n    list.Add(smallLetterDotlessI);\n\n// Display the original list order.\n    Display(list, &quot;The original order of the list entries...&quot;);\n\n// Sort the list using the invariant culture.\n    list.Sort(invCmp);\n    Display(list, &quot;Invariant culture...&quot;);\n    list.Sort(invICCmp);\n    Display(list, &quot;Invariant culture, ignore case...&quot;);\n\n// Sort the list using the current culture.\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;, thisCulture.Name);\n    list.Sort(currCmp);\n    Display(list, &quot;Current culture...&quot;);\n    list.Sort(currICCmp);\n    Display(list, &quot;Current culture, ignore case...&quot;);\n\n// Sort the list using the ordinal value of the character code points.\n    list.Sort(ordCmp);\n    Display(list, &quot;Ordinal...&quot;);\n    list.Sort(ordICCmp);\n    Display(list, &quot;Ordinal, ignore case...&quot;);\n\n// Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n// DOTLESS I differently than LATIN SMALL LETTER I.\n    list.Sort(turkICComp);\n    Display(list, &quot;Turkish culture, ignore case...&quot;);\n    }\n\n    public static void Display(List&lt;string&gt; lst, string title)\n    {\n    Char c;\n    int  codePoint;\n    Console.WriteLine(title);\n    foreach (string s in lst)\n        {\n        c = s[0];\n        codePoint = Convert.ToInt32(c);\n        Console.WriteLine(&quot;0x{0:x}&quot;, codePoint); \n        }\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.StringComparer#1\">// This example demonstrates members of the\n// System::StringComparer class.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nvoid Display(List&lt;String^&gt;^ stringList, String^ title)\n{\n    Char firstChar;\n    int codePoint;\n    Console::WriteLine(title);\n    for each (String^ s in stringList)\n    {\n        firstChar = s[0];\n        codePoint = Convert::ToInt32(firstChar);\n        Console::WriteLine(&quot;0x{0:x}&quot;, codePoint);\n    }\n    Console::WriteLine();\n}\n\nint main()\n{\n    // Create a list of string.\n    List&lt;String^&gt;^ stringList = gcnew List&lt;String^&gt;();\n\n    // Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo^ turkishCulture = gcnew CultureInfo(&quot;tr-TR&quot;);\n\n    // Get the culture that is associated with the current thread.\n    CultureInfo^ currentCulture = Thread::CurrentThread-&gt;CurrentCulture;\n\n    // Get the standard StringComparers.\n    StringComparer^ invariant = StringComparer::InvariantCulture;\n    StringComparer^ invariantIgnoreCase =\n        StringComparer::InvariantCultureIgnoreCase;\n    StringComparer^ current = StringComparer::CurrentCulture;\n    StringComparer^ currentIgnoreCase =\n        StringComparer::CurrentCultureIgnoreCase;\n    StringComparer^ ordinal = StringComparer::Ordinal;\n    StringComparer^ ordinalIgnoreCase = StringComparer::OrdinalIgnoreCase;\n\n    // Create a StringComparer that uses the Turkish culture and ignores\n    // case.\n    StringComparer^ turkishIgnoreCase =\n        StringComparer::Create(turkishCulture, true);\n\n    // Define three strings consisting of different versions of the\n    // letter I. LATIN CAPITAL LETTER I (U+0049)\n    String^ capitalLetterI = &quot;I&quot;;\n\n    // LATIN SMALL LETTER I (U+0069)\n    String^ smallLetterI = &quot;i&quot;;\n\n    // LATIN SMALL LETTER DOTLESS I (U+0131)\n    String^ smallLetterDotlessI = L&quot;\\u0131&quot;;\n\n    // Add the three strings to the list.\n    stringList-&gt;Add(capitalLetterI);\n    stringList-&gt;Add(smallLetterI);\n    stringList-&gt;Add(smallLetterDotlessI);\n\n    // Display the original list order.\n    Display(stringList, &quot;The original order of the list entries...&quot;);\n\n    // Sort the list using the invariant culture.\n    stringList-&gt;Sort(invariant);\n    Display(stringList, &quot;Invariant culture...&quot;);\n    stringList-&gt;Sort(invariantIgnoreCase);\n    Display(stringList, &quot;Invariant culture, ignore case...&quot;);\n\n    // Sort the list using the current culture.\n    Console::WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;,\n        currentCulture-&gt;Name);\n    stringList-&gt;Sort(current);\n    Display(stringList, &quot;Current culture...&quot;);\n    stringList-&gt;Sort(currentIgnoreCase);\n    Display(stringList, &quot;Current culture, ignore case...&quot;);\n\n    // Sort the list using the ordinal value of the character code points.\n    stringList-&gt;Sort(ordinal);\n    Display(stringList, &quot;Ordinal...&quot;);\n    stringList-&gt;Sort(ordinalIgnoreCase);\n    Display(stringList, &quot;Ordinal, ignore case...&quot;);\n\n    // Sort the list using the Turkish culture, which treats LATIN SMALL\n    // LETTER DOTLESS I differently than LATIN SMALL LETTER I.\n    stringList-&gt;Sort(turkishIgnoreCase);\n    Display(stringList, &quot;Turkish culture, ignore case...&quot;);\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.StringComparer#1\">&#39; This code example demonstrates members of the System.StringComparer class.\n\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.Globalization\nImports System.Threading\n\nClass Sample\n    \n    Public Shared Sub Main() \n        &#39; Create a list of string.\n        Dim list As New List(Of String) \n        \n        &#39; Get the tr-TR (Turkish-Turkey) culture.\n        Dim turkish As New CultureInfo(&quot;tr-TR&quot;)\n        \n        &#39; Get the culture that is associated with the current thread.\n        Dim thisCulture As CultureInfo = Thread.CurrentThread.CurrentCulture\n        \n        &#39; Get the standard StringComparers.\n        Dim invCmp As StringComparer = StringComparer.InvariantCulture\n        Dim invICCmp As StringComparer = StringComparer.InvariantCultureIgnoreCase\n        Dim currCmp As StringComparer = StringComparer.CurrentCulture\n        Dim currICCmp As StringComparer = StringComparer.CurrentCultureIgnoreCase\n        Dim ordCmp As StringComparer = StringComparer.Ordinal\n        Dim ordICCmp As StringComparer = StringComparer.OrdinalIgnoreCase\n        \n        &#39; Create a StringComparer that uses the Turkish culture and ignores case.\n        Dim turkICComp As StringComparer = StringComparer.Create(turkish, True)\n        \n        &#39; Define three strings consisting of different versions of the letter I.\n        &#39; LATIN CAPITAL LETTER I (U+0049)\n        Dim capitalLetterI As String = &quot;I&quot;\n        \n        &#39; LATIN SMALL LETTER I (U+0069)\n        Dim smallLetterI As String = &quot;i&quot;\n        \n        &#39; LATIN SMALL LETTER DOTLESS I (U+0131)\n        Dim smallLetterDotlessI As String = &quot;ı&quot;\n        \n        &#39; Add the three strings to the list.\n        list.Add(capitalLetterI)\n        list.Add(smallLetterI)\n        list.Add(smallLetterDotlessI)\n        \n        &#39; Display the original list order.\n        Display(list, &quot;The original order of the list entries...&quot;)\n        \n        &#39; Sort the list using the invariant culture.\n        list.Sort(invCmp)\n        Display(list, &quot;Invariant culture...&quot;)\n        list.Sort(invICCmp)\n        Display(list, &quot;Invariant culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the current culture.\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot;.&quot;, thisCulture.Name)\n        list.Sort(currCmp)\n        Display(list, &quot;Current culture...&quot;)\n        list.Sort(currICCmp)\n        Display(list, &quot;Current culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the ordinal value of the character code points.\n        list.Sort(ordCmp)\n        Display(list, &quot;Ordinal...&quot;)\n        list.Sort(ordICCmp)\n        Display(list, &quot;Ordinal, ignore case...&quot;)\n        \n        &#39; Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n        &#39; DOTLESS I differently than LATIN SMALL LETTER I.\n        list.Sort(turkICComp)\n        Display(list, &quot;Turkish culture, ignore case...&quot;)\n    \n    End Sub &#39;Main\n    \n    Public Shared Sub Display(ByVal lst As List(Of String), ByVal title As String)\n        Dim c As Char\n        Dim s As String\n        Dim codePoint As Integer\n\n        Console.WriteLine(title)\n        For Each s In lst\n            c = s(0)\n            codePoint = Convert.ToInt32(c)\n            Console.WriteLine(&quot;0x{0:x}&quot;, codePoint)\n        Next s\n        Console.WriteLine()\n    End Sub &#39;Display\nEnd Class &#39;Sample &#39;\n\n&#39;This code example produces the following results:\n&#39;\n&#39;The original order of the list entries...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Invariant culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Invariant culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;The current culture is &quot;en-US&quot;.\n&#39;Current culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Current culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal, ignore case...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Turkish culture, ignore case...\n&#39;0x131\n&#39;0x49\n&#39;0x69\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_CurrentCultureIgnoreCase\">\r\n    \r\n            <a id=\"System_StringComparer_CurrentCultureIgnoreCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentCultureIgnoreCase</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static StringComparer CurrentCultureIgnoreCase { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current culture is the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object associated with the current thread.  </p>\n<p> The<a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> returned by the CurrentCultureIgnoreCase property can be used when strings are linguistically relevant but their case is not. For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.  </p>\n<p> The CurrentCultureIgnoreCase property actually returns an instance of an anonymous class derived from the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class.  </p>\n<p> Each call to the CurrentCultureIgnoreCase property <code>get</code> accessor returns a new <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object, as the following code shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.StringComparer.CurrentCulture#2\">   Private Sub CompareCurrentCultureInsensitiveStringComparers()\n      Dim stringComparer1, stringComparer2 As StringComparer\n      stringComparer1 = StringComparer.CurrentCultureIgnoreCase\n      stringComparer2 = StringComparer.CurrentCultureIgnoreCase\n      &#39; Displays False\n      Console.WriteLine(StringComparer.ReferenceEquals(stringComparer1, _\n                                                       stringComparer2))\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.StringComparer.CurrentCulture#2\">   private void CompareCurrentCultureInsensitiveStringComparer()\n   {\n      StringComparer stringComparer1, stringComparer2;\n      stringComparer1 = StringComparer.CurrentCultureIgnoreCase;\n      stringComparer2 = StringComparer.CurrentCultureIgnoreCase;\n      // Displays false\n      Console.WriteLine(StringComparer.ReferenceEquals(stringComparer1, \n                                                       stringComparer2));\n   }\n</code></pre><p> To improve performance, you can store the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object in a local variable rather than retrieve the value of the CurrentCultureIgnoreCase property multiple times.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_InvariantCulture\">\r\n    \r\n            <a id=\"System_StringComparer_InvariantCulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvariantCulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static StringComparer InvariantCulture { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The<a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> returned by the InvariantCulture property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  </p>\n<p> The invariant culture is the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.  </p>\n<p> The InvariantCulture property actually returns an instance of an anonymous class derived from the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the properties and the <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Create_\" data-linktype=\"relative-path\">Create</a> method of the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class. The example illustrates how different <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> objects sort three versions of the Latin letter I.  </p>\n<pre><code class=\"lang-cs\" name=\"System.StringComparer#1\">// This example demonstrates members of the \n// System.StringComparer class.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n// Create a list of string.\n    List&lt;string&gt; list = new List&lt;string&gt;();\n\n// Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo turkish = new CultureInfo(&quot;tr-TR&quot;);\n\n// Get the culture that is associated with the current thread.\n    CultureInfo thisCulture = Thread.CurrentThread.CurrentCulture;\n\n// Get the standard StringComparers.\n    StringComparer invCmp =   StringComparer.InvariantCulture;\n    StringComparer invICCmp = StringComparer.InvariantCultureIgnoreCase;\n    StringComparer currCmp = StringComparer.CurrentCulture;\n    StringComparer currICCmp = StringComparer.CurrentCultureIgnoreCase;\n    StringComparer ordCmp = StringComparer.Ordinal;\n    StringComparer ordICCmp = StringComparer.OrdinalIgnoreCase;\n\n// Create a StringComparer that uses the Turkish culture and ignores case.\n    StringComparer turkICComp = StringComparer.Create(turkish, true);\n\n// Define three strings consisting of different versions of the letter I.\n// LATIN CAPITAL LETTER I (U+0049)\n    string capitalLetterI = &quot;I&quot;;  \n\n// LATIN SMALL LETTER I (U+0069)\n    string smallLetterI   = &quot;i&quot;;\n\n// LATIN SMALL LETTER DOTLESS I (U+0131)\n    string smallLetterDotlessI = &quot;\\u0131&quot;;\n\n// Add the three strings to the list.\n    list.Add(capitalLetterI);\n    list.Add(smallLetterI);\n    list.Add(smallLetterDotlessI);\n\n// Display the original list order.\n    Display(list, &quot;The original order of the list entries...&quot;);\n\n// Sort the list using the invariant culture.\n    list.Sort(invCmp);\n    Display(list, &quot;Invariant culture...&quot;);\n    list.Sort(invICCmp);\n    Display(list, &quot;Invariant culture, ignore case...&quot;);\n\n// Sort the list using the current culture.\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;, thisCulture.Name);\n    list.Sort(currCmp);\n    Display(list, &quot;Current culture...&quot;);\n    list.Sort(currICCmp);\n    Display(list, &quot;Current culture, ignore case...&quot;);\n\n// Sort the list using the ordinal value of the character code points.\n    list.Sort(ordCmp);\n    Display(list, &quot;Ordinal...&quot;);\n    list.Sort(ordICCmp);\n    Display(list, &quot;Ordinal, ignore case...&quot;);\n\n// Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n// DOTLESS I differently than LATIN SMALL LETTER I.\n    list.Sort(turkICComp);\n    Display(list, &quot;Turkish culture, ignore case...&quot;);\n    }\n\n    public static void Display(List&lt;string&gt; lst, string title)\n    {\n    Char c;\n    int  codePoint;\n    Console.WriteLine(title);\n    foreach (string s in lst)\n        {\n        c = s[0];\n        codePoint = Convert.ToInt32(c);\n        Console.WriteLine(&quot;0x{0:x}&quot;, codePoint); \n        }\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.StringComparer#1\">// This example demonstrates members of the\n// System::StringComparer class.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nvoid Display(List&lt;String^&gt;^ stringList, String^ title)\n{\n    Char firstChar;\n    int codePoint;\n    Console::WriteLine(title);\n    for each (String^ s in stringList)\n    {\n        firstChar = s[0];\n        codePoint = Convert::ToInt32(firstChar);\n        Console::WriteLine(&quot;0x{0:x}&quot;, codePoint);\n    }\n    Console::WriteLine();\n}\n\nint main()\n{\n    // Create a list of string.\n    List&lt;String^&gt;^ stringList = gcnew List&lt;String^&gt;();\n\n    // Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo^ turkishCulture = gcnew CultureInfo(&quot;tr-TR&quot;);\n\n    // Get the culture that is associated with the current thread.\n    CultureInfo^ currentCulture = Thread::CurrentThread-&gt;CurrentCulture;\n\n    // Get the standard StringComparers.\n    StringComparer^ invariant = StringComparer::InvariantCulture;\n    StringComparer^ invariantIgnoreCase =\n        StringComparer::InvariantCultureIgnoreCase;\n    StringComparer^ current = StringComparer::CurrentCulture;\n    StringComparer^ currentIgnoreCase =\n        StringComparer::CurrentCultureIgnoreCase;\n    StringComparer^ ordinal = StringComparer::Ordinal;\n    StringComparer^ ordinalIgnoreCase = StringComparer::OrdinalIgnoreCase;\n\n    // Create a StringComparer that uses the Turkish culture and ignores\n    // case.\n    StringComparer^ turkishIgnoreCase =\n        StringComparer::Create(turkishCulture, true);\n\n    // Define three strings consisting of different versions of the\n    // letter I. LATIN CAPITAL LETTER I (U+0049)\n    String^ capitalLetterI = &quot;I&quot;;\n\n    // LATIN SMALL LETTER I (U+0069)\n    String^ smallLetterI = &quot;i&quot;;\n\n    // LATIN SMALL LETTER DOTLESS I (U+0131)\n    String^ smallLetterDotlessI = L&quot;\\u0131&quot;;\n\n    // Add the three strings to the list.\n    stringList-&gt;Add(capitalLetterI);\n    stringList-&gt;Add(smallLetterI);\n    stringList-&gt;Add(smallLetterDotlessI);\n\n    // Display the original list order.\n    Display(stringList, &quot;The original order of the list entries...&quot;);\n\n    // Sort the list using the invariant culture.\n    stringList-&gt;Sort(invariant);\n    Display(stringList, &quot;Invariant culture...&quot;);\n    stringList-&gt;Sort(invariantIgnoreCase);\n    Display(stringList, &quot;Invariant culture, ignore case...&quot;);\n\n    // Sort the list using the current culture.\n    Console::WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;,\n        currentCulture-&gt;Name);\n    stringList-&gt;Sort(current);\n    Display(stringList, &quot;Current culture...&quot;);\n    stringList-&gt;Sort(currentIgnoreCase);\n    Display(stringList, &quot;Current culture, ignore case...&quot;);\n\n    // Sort the list using the ordinal value of the character code points.\n    stringList-&gt;Sort(ordinal);\n    Display(stringList, &quot;Ordinal...&quot;);\n    stringList-&gt;Sort(ordinalIgnoreCase);\n    Display(stringList, &quot;Ordinal, ignore case...&quot;);\n\n    // Sort the list using the Turkish culture, which treats LATIN SMALL\n    // LETTER DOTLESS I differently than LATIN SMALL LETTER I.\n    stringList-&gt;Sort(turkishIgnoreCase);\n    Display(stringList, &quot;Turkish culture, ignore case...&quot;);\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.StringComparer#1\">&#39; This code example demonstrates members of the System.StringComparer class.\n\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.Globalization\nImports System.Threading\n\nClass Sample\n    \n    Public Shared Sub Main() \n        &#39; Create a list of string.\n        Dim list As New List(Of String) \n        \n        &#39; Get the tr-TR (Turkish-Turkey) culture.\n        Dim turkish As New CultureInfo(&quot;tr-TR&quot;)\n        \n        &#39; Get the culture that is associated with the current thread.\n        Dim thisCulture As CultureInfo = Thread.CurrentThread.CurrentCulture\n        \n        &#39; Get the standard StringComparers.\n        Dim invCmp As StringComparer = StringComparer.InvariantCulture\n        Dim invICCmp As StringComparer = StringComparer.InvariantCultureIgnoreCase\n        Dim currCmp As StringComparer = StringComparer.CurrentCulture\n        Dim currICCmp As StringComparer = StringComparer.CurrentCultureIgnoreCase\n        Dim ordCmp As StringComparer = StringComparer.Ordinal\n        Dim ordICCmp As StringComparer = StringComparer.OrdinalIgnoreCase\n        \n        &#39; Create a StringComparer that uses the Turkish culture and ignores case.\n        Dim turkICComp As StringComparer = StringComparer.Create(turkish, True)\n        \n        &#39; Define three strings consisting of different versions of the letter I.\n        &#39; LATIN CAPITAL LETTER I (U+0049)\n        Dim capitalLetterI As String = &quot;I&quot;\n        \n        &#39; LATIN SMALL LETTER I (U+0069)\n        Dim smallLetterI As String = &quot;i&quot;\n        \n        &#39; LATIN SMALL LETTER DOTLESS I (U+0131)\n        Dim smallLetterDotlessI As String = &quot;ı&quot;\n        \n        &#39; Add the three strings to the list.\n        list.Add(capitalLetterI)\n        list.Add(smallLetterI)\n        list.Add(smallLetterDotlessI)\n        \n        &#39; Display the original list order.\n        Display(list, &quot;The original order of the list entries...&quot;)\n        \n        &#39; Sort the list using the invariant culture.\n        list.Sort(invCmp)\n        Display(list, &quot;Invariant culture...&quot;)\n        list.Sort(invICCmp)\n        Display(list, &quot;Invariant culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the current culture.\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot;.&quot;, thisCulture.Name)\n        list.Sort(currCmp)\n        Display(list, &quot;Current culture...&quot;)\n        list.Sort(currICCmp)\n        Display(list, &quot;Current culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the ordinal value of the character code points.\n        list.Sort(ordCmp)\n        Display(list, &quot;Ordinal...&quot;)\n        list.Sort(ordICCmp)\n        Display(list, &quot;Ordinal, ignore case...&quot;)\n        \n        &#39; Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n        &#39; DOTLESS I differently than LATIN SMALL LETTER I.\n        list.Sort(turkICComp)\n        Display(list, &quot;Turkish culture, ignore case...&quot;)\n    \n    End Sub &#39;Main\n    \n    Public Shared Sub Display(ByVal lst As List(Of String), ByVal title As String)\n        Dim c As Char\n        Dim s As String\n        Dim codePoint As Integer\n\n        Console.WriteLine(title)\n        For Each s In lst\n            c = s(0)\n            codePoint = Convert.ToInt32(c)\n            Console.WriteLine(&quot;0x{0:x}&quot;, codePoint)\n        Next s\n        Console.WriteLine()\n    End Sub &#39;Display\nEnd Class &#39;Sample &#39;\n\n&#39;This code example produces the following results:\n&#39;\n&#39;The original order of the list entries...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Invariant culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Invariant culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;The current culture is &quot;en-US&quot;.\n&#39;Current culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Current culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal, ignore case...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Turkish culture, ignore case...\n&#39;0x131\n&#39;0x49\n&#39;0x69\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_InvariantCultureIgnoreCase\">\r\n    \r\n            <a id=\"System_StringComparer_InvariantCultureIgnoreCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvariantCultureIgnoreCase</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static StringComparer InvariantCultureIgnoreCase { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The<a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> returned by the InvariantCultureIgnoreCase property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  </p>\n<p> The invariant culture is the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.  </p>\n<p> The InvariantCultureIgnoreCase property actually returns an instance of an anonymous class derived from the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_Ordinal\">\r\n    \r\n            <a id=\"System_StringComparer_Ordinal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ordinal</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-sensitive ordinal string comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static StringComparer Ordinal { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> returned by the Ordinal property performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.  </p>\n<p> The Ordinal property actually returns an instance of an anonymous class derived from the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the properties and the <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Create_\" data-linktype=\"relative-path\">Create</a> method of the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class. The example illustrates how different <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> objects sort three versions of the Latin letter I.  </p>\n<pre><code class=\"lang-cs\" name=\"System.StringComparer#1\">// This example demonstrates members of the \n// System.StringComparer class.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n// Create a list of string.\n    List&lt;string&gt; list = new List&lt;string&gt;();\n\n// Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo turkish = new CultureInfo(&quot;tr-TR&quot;);\n\n// Get the culture that is associated with the current thread.\n    CultureInfo thisCulture = Thread.CurrentThread.CurrentCulture;\n\n// Get the standard StringComparers.\n    StringComparer invCmp =   StringComparer.InvariantCulture;\n    StringComparer invICCmp = StringComparer.InvariantCultureIgnoreCase;\n    StringComparer currCmp = StringComparer.CurrentCulture;\n    StringComparer currICCmp = StringComparer.CurrentCultureIgnoreCase;\n    StringComparer ordCmp = StringComparer.Ordinal;\n    StringComparer ordICCmp = StringComparer.OrdinalIgnoreCase;\n\n// Create a StringComparer that uses the Turkish culture and ignores case.\n    StringComparer turkICComp = StringComparer.Create(turkish, true);\n\n// Define three strings consisting of different versions of the letter I.\n// LATIN CAPITAL LETTER I (U+0049)\n    string capitalLetterI = &quot;I&quot;;  \n\n// LATIN SMALL LETTER I (U+0069)\n    string smallLetterI   = &quot;i&quot;;\n\n// LATIN SMALL LETTER DOTLESS I (U+0131)\n    string smallLetterDotlessI = &quot;\\u0131&quot;;\n\n// Add the three strings to the list.\n    list.Add(capitalLetterI);\n    list.Add(smallLetterI);\n    list.Add(smallLetterDotlessI);\n\n// Display the original list order.\n    Display(list, &quot;The original order of the list entries...&quot;);\n\n// Sort the list using the invariant culture.\n    list.Sort(invCmp);\n    Display(list, &quot;Invariant culture...&quot;);\n    list.Sort(invICCmp);\n    Display(list, &quot;Invariant culture, ignore case...&quot;);\n\n// Sort the list using the current culture.\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;, thisCulture.Name);\n    list.Sort(currCmp);\n    Display(list, &quot;Current culture...&quot;);\n    list.Sort(currICCmp);\n    Display(list, &quot;Current culture, ignore case...&quot;);\n\n// Sort the list using the ordinal value of the character code points.\n    list.Sort(ordCmp);\n    Display(list, &quot;Ordinal...&quot;);\n    list.Sort(ordICCmp);\n    Display(list, &quot;Ordinal, ignore case...&quot;);\n\n// Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n// DOTLESS I differently than LATIN SMALL LETTER I.\n    list.Sort(turkICComp);\n    Display(list, &quot;Turkish culture, ignore case...&quot;);\n    }\n\n    public static void Display(List&lt;string&gt; lst, string title)\n    {\n    Char c;\n    int  codePoint;\n    Console.WriteLine(title);\n    foreach (string s in lst)\n        {\n        c = s[0];\n        codePoint = Convert.ToInt32(c);\n        Console.WriteLine(&quot;0x{0:x}&quot;, codePoint); \n        }\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.StringComparer#1\">// This example demonstrates members of the\n// System::StringComparer class.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nvoid Display(List&lt;String^&gt;^ stringList, String^ title)\n{\n    Char firstChar;\n    int codePoint;\n    Console::WriteLine(title);\n    for each (String^ s in stringList)\n    {\n        firstChar = s[0];\n        codePoint = Convert::ToInt32(firstChar);\n        Console::WriteLine(&quot;0x{0:x}&quot;, codePoint);\n    }\n    Console::WriteLine();\n}\n\nint main()\n{\n    // Create a list of string.\n    List&lt;String^&gt;^ stringList = gcnew List&lt;String^&gt;();\n\n    // Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo^ turkishCulture = gcnew CultureInfo(&quot;tr-TR&quot;);\n\n    // Get the culture that is associated with the current thread.\n    CultureInfo^ currentCulture = Thread::CurrentThread-&gt;CurrentCulture;\n\n    // Get the standard StringComparers.\n    StringComparer^ invariant = StringComparer::InvariantCulture;\n    StringComparer^ invariantIgnoreCase =\n        StringComparer::InvariantCultureIgnoreCase;\n    StringComparer^ current = StringComparer::CurrentCulture;\n    StringComparer^ currentIgnoreCase =\n        StringComparer::CurrentCultureIgnoreCase;\n    StringComparer^ ordinal = StringComparer::Ordinal;\n    StringComparer^ ordinalIgnoreCase = StringComparer::OrdinalIgnoreCase;\n\n    // Create a StringComparer that uses the Turkish culture and ignores\n    // case.\n    StringComparer^ turkishIgnoreCase =\n        StringComparer::Create(turkishCulture, true);\n\n    // Define three strings consisting of different versions of the\n    // letter I. LATIN CAPITAL LETTER I (U+0049)\n    String^ capitalLetterI = &quot;I&quot;;\n\n    // LATIN SMALL LETTER I (U+0069)\n    String^ smallLetterI = &quot;i&quot;;\n\n    // LATIN SMALL LETTER DOTLESS I (U+0131)\n    String^ smallLetterDotlessI = L&quot;\\u0131&quot;;\n\n    // Add the three strings to the list.\n    stringList-&gt;Add(capitalLetterI);\n    stringList-&gt;Add(smallLetterI);\n    stringList-&gt;Add(smallLetterDotlessI);\n\n    // Display the original list order.\n    Display(stringList, &quot;The original order of the list entries...&quot;);\n\n    // Sort the list using the invariant culture.\n    stringList-&gt;Sort(invariant);\n    Display(stringList, &quot;Invariant culture...&quot;);\n    stringList-&gt;Sort(invariantIgnoreCase);\n    Display(stringList, &quot;Invariant culture, ignore case...&quot;);\n\n    // Sort the list using the current culture.\n    Console::WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;,\n        currentCulture-&gt;Name);\n    stringList-&gt;Sort(current);\n    Display(stringList, &quot;Current culture...&quot;);\n    stringList-&gt;Sort(currentIgnoreCase);\n    Display(stringList, &quot;Current culture, ignore case...&quot;);\n\n    // Sort the list using the ordinal value of the character code points.\n    stringList-&gt;Sort(ordinal);\n    Display(stringList, &quot;Ordinal...&quot;);\n    stringList-&gt;Sort(ordinalIgnoreCase);\n    Display(stringList, &quot;Ordinal, ignore case...&quot;);\n\n    // Sort the list using the Turkish culture, which treats LATIN SMALL\n    // LETTER DOTLESS I differently than LATIN SMALL LETTER I.\n    stringList-&gt;Sort(turkishIgnoreCase);\n    Display(stringList, &quot;Turkish culture, ignore case...&quot;);\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.StringComparer#1\">&#39; This code example demonstrates members of the System.StringComparer class.\n\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.Globalization\nImports System.Threading\n\nClass Sample\n    \n    Public Shared Sub Main() \n        &#39; Create a list of string.\n        Dim list As New List(Of String) \n        \n        &#39; Get the tr-TR (Turkish-Turkey) culture.\n        Dim turkish As New CultureInfo(&quot;tr-TR&quot;)\n        \n        &#39; Get the culture that is associated with the current thread.\n        Dim thisCulture As CultureInfo = Thread.CurrentThread.CurrentCulture\n        \n        &#39; Get the standard StringComparers.\n        Dim invCmp As StringComparer = StringComparer.InvariantCulture\n        Dim invICCmp As StringComparer = StringComparer.InvariantCultureIgnoreCase\n        Dim currCmp As StringComparer = StringComparer.CurrentCulture\n        Dim currICCmp As StringComparer = StringComparer.CurrentCultureIgnoreCase\n        Dim ordCmp As StringComparer = StringComparer.Ordinal\n        Dim ordICCmp As StringComparer = StringComparer.OrdinalIgnoreCase\n        \n        &#39; Create a StringComparer that uses the Turkish culture and ignores case.\n        Dim turkICComp As StringComparer = StringComparer.Create(turkish, True)\n        \n        &#39; Define three strings consisting of different versions of the letter I.\n        &#39; LATIN CAPITAL LETTER I (U+0049)\n        Dim capitalLetterI As String = &quot;I&quot;\n        \n        &#39; LATIN SMALL LETTER I (U+0069)\n        Dim smallLetterI As String = &quot;i&quot;\n        \n        &#39; LATIN SMALL LETTER DOTLESS I (U+0131)\n        Dim smallLetterDotlessI As String = &quot;ı&quot;\n        \n        &#39; Add the three strings to the list.\n        list.Add(capitalLetterI)\n        list.Add(smallLetterI)\n        list.Add(smallLetterDotlessI)\n        \n        &#39; Display the original list order.\n        Display(list, &quot;The original order of the list entries...&quot;)\n        \n        &#39; Sort the list using the invariant culture.\n        list.Sort(invCmp)\n        Display(list, &quot;Invariant culture...&quot;)\n        list.Sort(invICCmp)\n        Display(list, &quot;Invariant culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the current culture.\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot;.&quot;, thisCulture.Name)\n        list.Sort(currCmp)\n        Display(list, &quot;Current culture...&quot;)\n        list.Sort(currICCmp)\n        Display(list, &quot;Current culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the ordinal value of the character code points.\n        list.Sort(ordCmp)\n        Display(list, &quot;Ordinal...&quot;)\n        list.Sort(ordICCmp)\n        Display(list, &quot;Ordinal, ignore case...&quot;)\n        \n        &#39; Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n        &#39; DOTLESS I differently than LATIN SMALL LETTER I.\n        list.Sort(turkICComp)\n        Display(list, &quot;Turkish culture, ignore case...&quot;)\n    \n    End Sub &#39;Main\n    \n    Public Shared Sub Display(ByVal lst As List(Of String), ByVal title As String)\n        Dim c As Char\n        Dim s As String\n        Dim codePoint As Integer\n\n        Console.WriteLine(title)\n        For Each s In lst\n            c = s(0)\n            codePoint = Convert.ToInt32(c)\n            Console.WriteLine(&quot;0x{0:x}&quot;, codePoint)\n        Next s\n        Console.WriteLine()\n    End Sub &#39;Display\nEnd Class &#39;Sample &#39;\n\n&#39;This code example produces the following results:\n&#39;\n&#39;The original order of the list entries...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Invariant culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Invariant culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;The current culture is &quot;en-US&quot;.\n&#39;Current culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Current culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal, ignore case...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Turkish culture, ignore case...\n&#39;0x131\n&#39;0x49\n&#39;0x69\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_OrdinalIgnoreCase\">\r\n    \r\n            <a id=\"System_StringComparer_OrdinalIgnoreCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrdinalIgnoreCase</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs a case-insensitive ordinal string comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static StringComparer OrdinalIgnoreCase { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The<a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> returned by the OrdinalIgnoreCase property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.  </p>\n<p> The OrdinalIgnoreCase property actually returns an instance of an anonymous class derived from the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the properties and the <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Create_\" data-linktype=\"relative-path\">Create</a> method of the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class. The example illustrates how different <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> objects sort three versions of the Latin letter I.  </p>\n<pre><code class=\"lang-cs\" name=\"System.StringComparer#1\">// This example demonstrates members of the \n// System.StringComparer class.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n// Create a list of string.\n    List&lt;string&gt; list = new List&lt;string&gt;();\n\n// Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo turkish = new CultureInfo(&quot;tr-TR&quot;);\n\n// Get the culture that is associated with the current thread.\n    CultureInfo thisCulture = Thread.CurrentThread.CurrentCulture;\n\n// Get the standard StringComparers.\n    StringComparer invCmp =   StringComparer.InvariantCulture;\n    StringComparer invICCmp = StringComparer.InvariantCultureIgnoreCase;\n    StringComparer currCmp = StringComparer.CurrentCulture;\n    StringComparer currICCmp = StringComparer.CurrentCultureIgnoreCase;\n    StringComparer ordCmp = StringComparer.Ordinal;\n    StringComparer ordICCmp = StringComparer.OrdinalIgnoreCase;\n\n// Create a StringComparer that uses the Turkish culture and ignores case.\n    StringComparer turkICComp = StringComparer.Create(turkish, true);\n\n// Define three strings consisting of different versions of the letter I.\n// LATIN CAPITAL LETTER I (U+0049)\n    string capitalLetterI = &quot;I&quot;;  \n\n// LATIN SMALL LETTER I (U+0069)\n    string smallLetterI   = &quot;i&quot;;\n\n// LATIN SMALL LETTER DOTLESS I (U+0131)\n    string smallLetterDotlessI = &quot;\\u0131&quot;;\n\n// Add the three strings to the list.\n    list.Add(capitalLetterI);\n    list.Add(smallLetterI);\n    list.Add(smallLetterDotlessI);\n\n// Display the original list order.\n    Display(list, &quot;The original order of the list entries...&quot;);\n\n// Sort the list using the invariant culture.\n    list.Sort(invCmp);\n    Display(list, &quot;Invariant culture...&quot;);\n    list.Sort(invICCmp);\n    Display(list, &quot;Invariant culture, ignore case...&quot;);\n\n// Sort the list using the current culture.\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;, thisCulture.Name);\n    list.Sort(currCmp);\n    Display(list, &quot;Current culture...&quot;);\n    list.Sort(currICCmp);\n    Display(list, &quot;Current culture, ignore case...&quot;);\n\n// Sort the list using the ordinal value of the character code points.\n    list.Sort(ordCmp);\n    Display(list, &quot;Ordinal...&quot;);\n    list.Sort(ordICCmp);\n    Display(list, &quot;Ordinal, ignore case...&quot;);\n\n// Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n// DOTLESS I differently than LATIN SMALL LETTER I.\n    list.Sort(turkICComp);\n    Display(list, &quot;Turkish culture, ignore case...&quot;);\n    }\n\n    public static void Display(List&lt;string&gt; lst, string title)\n    {\n    Char c;\n    int  codePoint;\n    Console.WriteLine(title);\n    foreach (string s in lst)\n        {\n        c = s[0];\n        codePoint = Convert.ToInt32(c);\n        Console.WriteLine(&quot;0x{0:x}&quot;, codePoint); \n        }\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.StringComparer#1\">// This example demonstrates members of the\n// System::StringComparer class.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nvoid Display(List&lt;String^&gt;^ stringList, String^ title)\n{\n    Char firstChar;\n    int codePoint;\n    Console::WriteLine(title);\n    for each (String^ s in stringList)\n    {\n        firstChar = s[0];\n        codePoint = Convert::ToInt32(firstChar);\n        Console::WriteLine(&quot;0x{0:x}&quot;, codePoint);\n    }\n    Console::WriteLine();\n}\n\nint main()\n{\n    // Create a list of string.\n    List&lt;String^&gt;^ stringList = gcnew List&lt;String^&gt;();\n\n    // Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo^ turkishCulture = gcnew CultureInfo(&quot;tr-TR&quot;);\n\n    // Get the culture that is associated with the current thread.\n    CultureInfo^ currentCulture = Thread::CurrentThread-&gt;CurrentCulture;\n\n    // Get the standard StringComparers.\n    StringComparer^ invariant = StringComparer::InvariantCulture;\n    StringComparer^ invariantIgnoreCase =\n        StringComparer::InvariantCultureIgnoreCase;\n    StringComparer^ current = StringComparer::CurrentCulture;\n    StringComparer^ currentIgnoreCase =\n        StringComparer::CurrentCultureIgnoreCase;\n    StringComparer^ ordinal = StringComparer::Ordinal;\n    StringComparer^ ordinalIgnoreCase = StringComparer::OrdinalIgnoreCase;\n\n    // Create a StringComparer that uses the Turkish culture and ignores\n    // case.\n    StringComparer^ turkishIgnoreCase =\n        StringComparer::Create(turkishCulture, true);\n\n    // Define three strings consisting of different versions of the\n    // letter I. LATIN CAPITAL LETTER I (U+0049)\n    String^ capitalLetterI = &quot;I&quot;;\n\n    // LATIN SMALL LETTER I (U+0069)\n    String^ smallLetterI = &quot;i&quot;;\n\n    // LATIN SMALL LETTER DOTLESS I (U+0131)\n    String^ smallLetterDotlessI = L&quot;\\u0131&quot;;\n\n    // Add the three strings to the list.\n    stringList-&gt;Add(capitalLetterI);\n    stringList-&gt;Add(smallLetterI);\n    stringList-&gt;Add(smallLetterDotlessI);\n\n    // Display the original list order.\n    Display(stringList, &quot;The original order of the list entries...&quot;);\n\n    // Sort the list using the invariant culture.\n    stringList-&gt;Sort(invariant);\n    Display(stringList, &quot;Invariant culture...&quot;);\n    stringList-&gt;Sort(invariantIgnoreCase);\n    Display(stringList, &quot;Invariant culture, ignore case...&quot;);\n\n    // Sort the list using the current culture.\n    Console::WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;,\n        currentCulture-&gt;Name);\n    stringList-&gt;Sort(current);\n    Display(stringList, &quot;Current culture...&quot;);\n    stringList-&gt;Sort(currentIgnoreCase);\n    Display(stringList, &quot;Current culture, ignore case...&quot;);\n\n    // Sort the list using the ordinal value of the character code points.\n    stringList-&gt;Sort(ordinal);\n    Display(stringList, &quot;Ordinal...&quot;);\n    stringList-&gt;Sort(ordinalIgnoreCase);\n    Display(stringList, &quot;Ordinal, ignore case...&quot;);\n\n    // Sort the list using the Turkish culture, which treats LATIN SMALL\n    // LETTER DOTLESS I differently than LATIN SMALL LETTER I.\n    stringList-&gt;Sort(turkishIgnoreCase);\n    Display(stringList, &quot;Turkish culture, ignore case...&quot;);\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.StringComparer#1\">&#39; This code example demonstrates members of the System.StringComparer class.\n\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.Globalization\nImports System.Threading\n\nClass Sample\n    \n    Public Shared Sub Main() \n        &#39; Create a list of string.\n        Dim list As New List(Of String) \n        \n        &#39; Get the tr-TR (Turkish-Turkey) culture.\n        Dim turkish As New CultureInfo(&quot;tr-TR&quot;)\n        \n        &#39; Get the culture that is associated with the current thread.\n        Dim thisCulture As CultureInfo = Thread.CurrentThread.CurrentCulture\n        \n        &#39; Get the standard StringComparers.\n        Dim invCmp As StringComparer = StringComparer.InvariantCulture\n        Dim invICCmp As StringComparer = StringComparer.InvariantCultureIgnoreCase\n        Dim currCmp As StringComparer = StringComparer.CurrentCulture\n        Dim currICCmp As StringComparer = StringComparer.CurrentCultureIgnoreCase\n        Dim ordCmp As StringComparer = StringComparer.Ordinal\n        Dim ordICCmp As StringComparer = StringComparer.OrdinalIgnoreCase\n        \n        &#39; Create a StringComparer that uses the Turkish culture and ignores case.\n        Dim turkICComp As StringComparer = StringComparer.Create(turkish, True)\n        \n        &#39; Define three strings consisting of different versions of the letter I.\n        &#39; LATIN CAPITAL LETTER I (U+0049)\n        Dim capitalLetterI As String = &quot;I&quot;\n        \n        &#39; LATIN SMALL LETTER I (U+0069)\n        Dim smallLetterI As String = &quot;i&quot;\n        \n        &#39; LATIN SMALL LETTER DOTLESS I (U+0131)\n        Dim smallLetterDotlessI As String = &quot;ı&quot;\n        \n        &#39; Add the three strings to the list.\n        list.Add(capitalLetterI)\n        list.Add(smallLetterI)\n        list.Add(smallLetterDotlessI)\n        \n        &#39; Display the original list order.\n        Display(list, &quot;The original order of the list entries...&quot;)\n        \n        &#39; Sort the list using the invariant culture.\n        list.Sort(invCmp)\n        Display(list, &quot;Invariant culture...&quot;)\n        list.Sort(invICCmp)\n        Display(list, &quot;Invariant culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the current culture.\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot;.&quot;, thisCulture.Name)\n        list.Sort(currCmp)\n        Display(list, &quot;Current culture...&quot;)\n        list.Sort(currICCmp)\n        Display(list, &quot;Current culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the ordinal value of the character code points.\n        list.Sort(ordCmp)\n        Display(list, &quot;Ordinal...&quot;)\n        list.Sort(ordICCmp)\n        Display(list, &quot;Ordinal, ignore case...&quot;)\n        \n        &#39; Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n        &#39; DOTLESS I differently than LATIN SMALL LETTER I.\n        list.Sort(turkICComp)\n        Display(list, &quot;Turkish culture, ignore case...&quot;)\n    \n    End Sub &#39;Main\n    \n    Public Shared Sub Display(ByVal lst As List(Of String), ByVal title As String)\n        Dim c As Char\n        Dim s As String\n        Dim codePoint As Integer\n\n        Console.WriteLine(title)\n        For Each s In lst\n            c = s(0)\n            codePoint = Convert.ToInt32(c)\n            Console.WriteLine(&quot;0x{0:x}&quot;, codePoint)\n        Next s\n        Console.WriteLine()\n    End Sub &#39;Display\nEnd Class &#39;Sample &#39;\n\n&#39;This code example produces the following results:\n&#39;\n&#39;The original order of the list entries...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Invariant culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Invariant culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;The current culture is &quot;en-US&quot;.\n&#39;Current culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Current culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal, ignore case...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Turkish culture, ignore case...\n&#39;0x131\n&#39;0x49\n&#39;0x69\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_Compare_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_StringComparer_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Compare (object x, object y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to <code>y</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to <code>x</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>x</code> precedes  <code>y</code> in the sort order.<br>\n -or-<br>\n <code>x</code> is <code>null</code> and <code>y</code> is not <code>null</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>x</code> is equal to <code>y</code>.<br>\n -or-<br>\n <code>x</code> and <code>y</code> are both <code>null</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>x</code> follows <code>y</code> in the sort order.<br>\n -or-<br>\n <code>y</code> is <code>null</code> and <code>x</code> is not <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Neither <code>x</code> nor <code>y</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object, and neither <code>x</code> nor <code>y</code> implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Compare_System_String_System_String_\" data-linktype=\"relative-path\">System.StringComparer.Compare(String,String)</a> method is slightly more efficient than the Compare method because no conversion of the <code>x</code> and <code>y</code> arguments is needed to perform the comparison.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_Compare_System_String_System_String_\">\r\n    \r\n            <a id=\"System_StringComparer_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int Compare (string x, string y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string to compare to <code>y</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string to compare to <code>x</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>x</code> precedes <code>y</code> in the sort order.<br>\n -or-<br>\n <code>x</code> is <code>null</code> and <code>y</code> is not <code>null</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>x</code> is equal to <code>y</code>.<br>\n -or-<br>\n <code>x</code> and <code>y</code> are both <code>null</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>x</code> follows <code>y</code> in the sort order.<br>\n -or-<br>\n <code>y</code> is <code>null</code> and <code>x</code> is not <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Compare method is slightly more efficient than the <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Compare_System_Object_System_Object_\" data-linktype=\"relative-path\">System.StringComparer.Compare(Object,Object)</a> method because no conversion of the <code>x</code> and <code>y</code> arguments is needed to perform the comparison.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_Create_System_Globalization_CultureInfo_System_Boolean_\">\r\n    \r\n            <a id=\"System_StringComparer_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(CultureInfo,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that compares strings according to the rules of a specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A culture whose linguistic rules are used to perform a string comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to specify that comparison operations be case-insensitive; <code>false</code> to specify that comparison operations be case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> object that performs string comparisons according to the comparison rules used by the <code>culture</code> parameter and the case rule specified by the <code>ignoreCase</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the properties and the Create method of the <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> class. The example illustrates how different <a class=\"xref\" href=\"system.stringcomparer\" data-linktype=\"relative-path\">StringComparer</a> objects sort three versions of the Latin letter I.  </p>\n<pre><code class=\"lang-cs\" name=\"System.StringComparer#1\">// This example demonstrates members of the \n// System.StringComparer class.\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n// Create a list of string.\n    List&lt;string&gt; list = new List&lt;string&gt;();\n\n// Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo turkish = new CultureInfo(&quot;tr-TR&quot;);\n\n// Get the culture that is associated with the current thread.\n    CultureInfo thisCulture = Thread.CurrentThread.CurrentCulture;\n\n// Get the standard StringComparers.\n    StringComparer invCmp =   StringComparer.InvariantCulture;\n    StringComparer invICCmp = StringComparer.InvariantCultureIgnoreCase;\n    StringComparer currCmp = StringComparer.CurrentCulture;\n    StringComparer currICCmp = StringComparer.CurrentCultureIgnoreCase;\n    StringComparer ordCmp = StringComparer.Ordinal;\n    StringComparer ordICCmp = StringComparer.OrdinalIgnoreCase;\n\n// Create a StringComparer that uses the Turkish culture and ignores case.\n    StringComparer turkICComp = StringComparer.Create(turkish, true);\n\n// Define three strings consisting of different versions of the letter I.\n// LATIN CAPITAL LETTER I (U+0049)\n    string capitalLetterI = &quot;I&quot;;  \n\n// LATIN SMALL LETTER I (U+0069)\n    string smallLetterI   = &quot;i&quot;;\n\n// LATIN SMALL LETTER DOTLESS I (U+0131)\n    string smallLetterDotlessI = &quot;\\u0131&quot;;\n\n// Add the three strings to the list.\n    list.Add(capitalLetterI);\n    list.Add(smallLetterI);\n    list.Add(smallLetterDotlessI);\n\n// Display the original list order.\n    Display(list, &quot;The original order of the list entries...&quot;);\n\n// Sort the list using the invariant culture.\n    list.Sort(invCmp);\n    Display(list, &quot;Invariant culture...&quot;);\n    list.Sort(invICCmp);\n    Display(list, &quot;Invariant culture, ignore case...&quot;);\n\n// Sort the list using the current culture.\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;, thisCulture.Name);\n    list.Sort(currCmp);\n    Display(list, &quot;Current culture...&quot;);\n    list.Sort(currICCmp);\n    Display(list, &quot;Current culture, ignore case...&quot;);\n\n// Sort the list using the ordinal value of the character code points.\n    list.Sort(ordCmp);\n    Display(list, &quot;Ordinal...&quot;);\n    list.Sort(ordICCmp);\n    Display(list, &quot;Ordinal, ignore case...&quot;);\n\n// Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n// DOTLESS I differently than LATIN SMALL LETTER I.\n    list.Sort(turkICComp);\n    Display(list, &quot;Turkish culture, ignore case...&quot;);\n    }\n\n    public static void Display(List&lt;string&gt; lst, string title)\n    {\n    Char c;\n    int  codePoint;\n    Console.WriteLine(title);\n    foreach (string s in lst)\n        {\n        c = s[0];\n        codePoint = Convert.ToInt32(c);\n        Console.WriteLine(&quot;0x{0:x}&quot;, codePoint); \n        }\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.StringComparer#1\">// This example demonstrates members of the\n// System::StringComparer class.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nvoid Display(List&lt;String^&gt;^ stringList, String^ title)\n{\n    Char firstChar;\n    int codePoint;\n    Console::WriteLine(title);\n    for each (String^ s in stringList)\n    {\n        firstChar = s[0];\n        codePoint = Convert::ToInt32(firstChar);\n        Console::WriteLine(&quot;0x{0:x}&quot;, codePoint);\n    }\n    Console::WriteLine();\n}\n\nint main()\n{\n    // Create a list of string.\n    List&lt;String^&gt;^ stringList = gcnew List&lt;String^&gt;();\n\n    // Get the tr-TR (Turkish-Turkey) culture.\n    CultureInfo^ turkishCulture = gcnew CultureInfo(&quot;tr-TR&quot;);\n\n    // Get the culture that is associated with the current thread.\n    CultureInfo^ currentCulture = Thread::CurrentThread-&gt;CurrentCulture;\n\n    // Get the standard StringComparers.\n    StringComparer^ invariant = StringComparer::InvariantCulture;\n    StringComparer^ invariantIgnoreCase =\n        StringComparer::InvariantCultureIgnoreCase;\n    StringComparer^ current = StringComparer::CurrentCulture;\n    StringComparer^ currentIgnoreCase =\n        StringComparer::CurrentCultureIgnoreCase;\n    StringComparer^ ordinal = StringComparer::Ordinal;\n    StringComparer^ ordinalIgnoreCase = StringComparer::OrdinalIgnoreCase;\n\n    // Create a StringComparer that uses the Turkish culture and ignores\n    // case.\n    StringComparer^ turkishIgnoreCase =\n        StringComparer::Create(turkishCulture, true);\n\n    // Define three strings consisting of different versions of the\n    // letter I. LATIN CAPITAL LETTER I (U+0049)\n    String^ capitalLetterI = &quot;I&quot;;\n\n    // LATIN SMALL LETTER I (U+0069)\n    String^ smallLetterI = &quot;i&quot;;\n\n    // LATIN SMALL LETTER DOTLESS I (U+0131)\n    String^ smallLetterDotlessI = L&quot;\\u0131&quot;;\n\n    // Add the three strings to the list.\n    stringList-&gt;Add(capitalLetterI);\n    stringList-&gt;Add(smallLetterI);\n    stringList-&gt;Add(smallLetterDotlessI);\n\n    // Display the original list order.\n    Display(stringList, &quot;The original order of the list entries...&quot;);\n\n    // Sort the list using the invariant culture.\n    stringList-&gt;Sort(invariant);\n    Display(stringList, &quot;Invariant culture...&quot;);\n    stringList-&gt;Sort(invariantIgnoreCase);\n    Display(stringList, &quot;Invariant culture, ignore case...&quot;);\n\n    // Sort the list using the current culture.\n    Console::WriteLine(&quot;The current culture is \\&quot;{0}\\&quot;.&quot;,\n        currentCulture-&gt;Name);\n    stringList-&gt;Sort(current);\n    Display(stringList, &quot;Current culture...&quot;);\n    stringList-&gt;Sort(currentIgnoreCase);\n    Display(stringList, &quot;Current culture, ignore case...&quot;);\n\n    // Sort the list using the ordinal value of the character code points.\n    stringList-&gt;Sort(ordinal);\n    Display(stringList, &quot;Ordinal...&quot;);\n    stringList-&gt;Sort(ordinalIgnoreCase);\n    Display(stringList, &quot;Ordinal, ignore case...&quot;);\n\n    // Sort the list using the Turkish culture, which treats LATIN SMALL\n    // LETTER DOTLESS I differently than LATIN SMALL LETTER I.\n    stringList-&gt;Sort(turkishIgnoreCase);\n    Display(stringList, &quot;Turkish culture, ignore case...&quot;);\n}\n/*\nThis code example produces the following results:\n\nThe original order of the list entries...\n0x49\n0x69\n0x131\n\nInvariant culture...\n0x69\n0x49\n0x131\n\nInvariant culture, ignore case...\n0x49\n0x69\n0x131\n\nThe current culture is &quot;en-US&quot;.\nCurrent culture...\n0x69\n0x49\n0x131\n\nCurrent culture, ignore case...\n0x49\n0x69\n0x131\n\nOrdinal...\n0x49\n0x69\n0x131\n\nOrdinal, ignore case...\n0x69\n0x49\n0x131\n\nTurkish culture, ignore case...\n0x131\n0x49\n0x69\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.StringComparer#1\">&#39; This code example demonstrates members of the System.StringComparer class.\n\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.Globalization\nImports System.Threading\n\nClass Sample\n    \n    Public Shared Sub Main() \n        &#39; Create a list of string.\n        Dim list As New List(Of String) \n        \n        &#39; Get the tr-TR (Turkish-Turkey) culture.\n        Dim turkish As New CultureInfo(&quot;tr-TR&quot;)\n        \n        &#39; Get the culture that is associated with the current thread.\n        Dim thisCulture As CultureInfo = Thread.CurrentThread.CurrentCulture\n        \n        &#39; Get the standard StringComparers.\n        Dim invCmp As StringComparer = StringComparer.InvariantCulture\n        Dim invICCmp As StringComparer = StringComparer.InvariantCultureIgnoreCase\n        Dim currCmp As StringComparer = StringComparer.CurrentCulture\n        Dim currICCmp As StringComparer = StringComparer.CurrentCultureIgnoreCase\n        Dim ordCmp As StringComparer = StringComparer.Ordinal\n        Dim ordICCmp As StringComparer = StringComparer.OrdinalIgnoreCase\n        \n        &#39; Create a StringComparer that uses the Turkish culture and ignores case.\n        Dim turkICComp As StringComparer = StringComparer.Create(turkish, True)\n        \n        &#39; Define three strings consisting of different versions of the letter I.\n        &#39; LATIN CAPITAL LETTER I (U+0049)\n        Dim capitalLetterI As String = &quot;I&quot;\n        \n        &#39; LATIN SMALL LETTER I (U+0069)\n        Dim smallLetterI As String = &quot;i&quot;\n        \n        &#39; LATIN SMALL LETTER DOTLESS I (U+0131)\n        Dim smallLetterDotlessI As String = &quot;ı&quot;\n        \n        &#39; Add the three strings to the list.\n        list.Add(capitalLetterI)\n        list.Add(smallLetterI)\n        list.Add(smallLetterDotlessI)\n        \n        &#39; Display the original list order.\n        Display(list, &quot;The original order of the list entries...&quot;)\n        \n        &#39; Sort the list using the invariant culture.\n        list.Sort(invCmp)\n        Display(list, &quot;Invariant culture...&quot;)\n        list.Sort(invICCmp)\n        Display(list, &quot;Invariant culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the current culture.\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot;.&quot;, thisCulture.Name)\n        list.Sort(currCmp)\n        Display(list, &quot;Current culture...&quot;)\n        list.Sort(currICCmp)\n        Display(list, &quot;Current culture, ignore case...&quot;)\n        \n        &#39; Sort the list using the ordinal value of the character code points.\n        list.Sort(ordCmp)\n        Display(list, &quot;Ordinal...&quot;)\n        list.Sort(ordICCmp)\n        Display(list, &quot;Ordinal, ignore case...&quot;)\n        \n        &#39; Sort the list using the Turkish culture, which treats LATIN SMALL LETTER \n        &#39; DOTLESS I differently than LATIN SMALL LETTER I.\n        list.Sort(turkICComp)\n        Display(list, &quot;Turkish culture, ignore case...&quot;)\n    \n    End Sub &#39;Main\n    \n    Public Shared Sub Display(ByVal lst As List(Of String), ByVal title As String)\n        Dim c As Char\n        Dim s As String\n        Dim codePoint As Integer\n\n        Console.WriteLine(title)\n        For Each s In lst\n            c = s(0)\n            codePoint = Convert.ToInt32(c)\n            Console.WriteLine(&quot;0x{0:x}&quot;, codePoint)\n        Next s\n        Console.WriteLine()\n    End Sub &#39;Display\nEnd Class &#39;Sample &#39;\n\n&#39;This code example produces the following results:\n&#39;\n&#39;The original order of the list entries...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Invariant culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Invariant culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;The current culture is &quot;en-US&quot;.\n&#39;Current culture...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Current culture, ignore case...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal...\n&#39;0x49\n&#39;0x69\n&#39;0x131\n&#39;\n&#39;Ordinal, ignore case...\n&#39;0x69\n&#39;0x49\n&#39;0x131\n&#39;\n&#39;Turkish culture, ignore case...\n&#39;0x131\n&#39;0x49\n&#39;0x69\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_Equals_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_StringComparer_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, indicates whether two objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (object x, object y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to <code>y</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to <code>x</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are both the same type of object and those objects are equal, or both <code>x</code> and <code>y</code> are <code>null</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the runtime does not have to unbox <code>x</code> or <code>y</code> if they are value types or attempt to downcast <code>x</code> or <code>y</code> to strings if they are reference types, the <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Equals_System_String_System_String_\" data-linktype=\"relative-path\">Equals(String,String)</a> method may be slightly more efficient than the Equals method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_Equals_System_String_System_String_\">\r\n    \r\n            <a id=\"System_StringComparer_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, indicates whether two strings are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool Equals (string x, string y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string to compare to <code>y</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string to compare to <code>x</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are equal, or <code>x</code> and <code>y</code> are <code>null</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the runtime does not have to unbox <code>x</code> or <code>y</code> if they are value types or attempt to downcast <code>x</code> or <code>y</code> to strings if they are reference types, the Equals method may be slightly more efficient than the <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_GetHashCode_System_Object_\">\r\n    \r\n            <a id=\"System_StringComparer_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode(Object)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the hash code for the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetHashCode (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Not enough memory is available to allocate the buffer that is required to compute the hash code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_GetHashCode_System_String_\" data-linktype=\"relative-path\">GetHashCode(String)</a> method is more efficient than the GetHashCode method because the <code>obj</code> parameter does not have to be unboxed to perform the operation.  </p>\n<p> The GetHashCode method allocates an amount of memory that is proportional to the size of <code>obj</code> to calculate the hash code of <code>obj</code>. In the case of large strings, trying to retrieve the hash code can throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the <a href=\"../Topic/%3CNetFx45_CultureAwareComparerGetHashCode_LongStrings%3E%20Element.md\" data-linktype=\"relative-path\"><netfx45_cultureawarecomparergethashcode_longstrings></netfx45_cultureawarecomparergethashcode_longstrings></a> element to the <a href=\"../Topic/%3Cruntime%3E%20Element.md\" data-linktype=\"relative-path\">&lt;runtime&gt;</a> section of your application&#39;s configuration file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_StringComparer_GetHashCode_System_String_\">\r\n    \r\n            <a id=\"System_StringComparer_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the hash code for the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetHashCode (string obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Not enough memory is available to allocate the buffer that is required to compute the hash code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetHashCode method is more efficient than the <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_GetHashCode_System_Object_\" data-linktype=\"relative-path\">GetHashCode(Object)</a> method because the <code>obj</code> parameter does not have to be unboxed to perform the operation.  </p>\n<p> The GetHashCode method allocates an amount of memory that is proportional to the size of <code>obj</code> to calculate the hash code of <code>obj</code>. In the case of large strings, trying to retrieve the hash code can throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the <a href=\"../Topic/%3CNetFx45_CultureAwareComparerGetHashCode_LongStrings%3E%20Element.md\" data-linktype=\"relative-path\"><netfx45_cultureawarecomparergethashcode_longstrings></netfx45_cultureawarecomparergethashcode_longstrings></a> element to the <a href=\"../Topic/%3Cruntime%3E%20Element.md\" data-linktype=\"relative-path\">&lt;runtime&gt;</a> section of your application&#39;s configuration file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.StringComparer.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.StringComparer.yml\">\r\n<meta name=\"APIName\" content=\"System.StringComparer\">\r\n<meta name=\"APIName\" content=\"System.StringComparer..ctor\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.Compare\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.Create\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.CurrentCulture\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.CurrentCultureIgnoreCase\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.Equals\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.InvariantCulture\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.InvariantCultureIgnoreCase\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.Ordinal\">\r\n<meta name=\"APIName\" content=\"System.StringComparer.OrdinalIgnoreCase\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"14fbddd0-0827-f597-39fe-183b979ef6b9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.StringComparer\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.StringComparer.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.StringComparer.yml","open_to_public_contributors":true,"api_name":["System.StringComparer","System.StringComparer..ctor","System.StringComparer.Compare","System.StringComparer.Create","System.StringComparer.CurrentCulture","System.StringComparer.CurrentCultureIgnoreCase","System.StringComparer.Equals","System.StringComparer.GetHashCode","System.StringComparer.InvariantCulture","System.StringComparer.InvariantCultureIgnoreCase","System.StringComparer.Ordinal","System.StringComparer.OrdinalIgnoreCase"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.StringComparer","System::StringComparer","System.StringComparer.#ctor","System::StringComparer::#ctor","System.StringComparer.Compare","System::StringComparer::Compare","System.StringComparer.Create","System::StringComparer::Create","System.StringComparer.CurrentCulture","System::StringComparer::CurrentCulture","System.StringComparer.CurrentCultureIgnoreCase","System::StringComparer::CurrentCultureIgnoreCase","System.StringComparer.Equals","System::StringComparer::Equals","System.StringComparer.GetHashCode","System::StringComparer::GetHashCode","System.StringComparer.InvariantCulture","System::StringComparer::InvariantCulture","System.StringComparer.InvariantCultureIgnoreCase","System::StringComparer::InvariantCultureIgnoreCase","System.StringComparer.Ordinal","System::StringComparer::Ordinal","System.StringComparer.OrdinalIgnoreCase","System::StringComparer::OrdinalIgnoreCase"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"14fbddd0-0827-f597-39fe-183b979ef6b9","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/StringComparer.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StringComparer class | Microsoft Docs","_op_ogTitle":"StringComparer class","description":"Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.StringComparer","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.stringcomparer","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.stringcomparer","fileRelativePath":"System.StringComparer.html"},"themesRelativePathToOutputRoot":"_themes/"}