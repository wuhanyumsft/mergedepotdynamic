{"content":"    \r\n    <h1 id=\"System_Collections_IEnumerable\">\r\n      <span class=\"lang-csharp\">IEnumerable</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Exposes an enumerator, which supports a simple iteration over a non-generic collection.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/ienumerable.cs#9be451ac13d86a97\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\n[System.Runtime.InteropServices.Guid(&quot;496B0ABE-CDEE-11d3-88E8-00902754C43A&quot;)]\npublic interface IEnumerable</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/ienumerable.cs#9be451ac13d86a97\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> IEnumerable is the base interface for all non-generic collections that can be enumerated. For the generic version of this interface see <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">System.Collections.Generic.IEnumerable&lt;T&gt;</a>. IEnumerable contains a single method, <a class=\"xref\" href=\"system.collections.ienumerable#System_Collections_IEnumerable_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a>, which returns an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a>. <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> provides the ability to iterate through the collection by exposing a <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> methods.  </p>\n<p> It is a best practice to implement IEnumerable and <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> on your collection classes to enable the <code>foreach</code> (<code>For Each</code> in Visual Basic) syntax, however implementing IEnumerable is not required. If your collection does not implement IEnumerable, you must still follow the iterator pattern to support this syntax by providing a <code>GetEnumerator</code> method that returns an interface, class or struct. When using Visual Basic, you must provide an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> implementation, which is returned by <code>GetEnumerator</code>. When developing with C# you must provide a class that contains a <code>Current</code> property, and <code>MoveNext</code> and <code>Reset</code> methods as described by <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a>, but the class does not have to implement <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a>.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> object that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>For Each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. The <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> method also brings the enumerator back to this position.  At this position, the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interfaces for a custom collection. In this example, GetEnumerator is not explicitly called, but it is implemented to support the use of <code>foreach</code> (<code>For Each</code> in Visual Basic). This code example is part of a larger example for the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections_EnumeratorInterfaces#1\">Imports System\nImports System.Collections\n\n&#39; Simple business object.\nPublic Class Person\n\n    Public Sub New(ByVal fName As String, ByVal lName As String)\n        Me.firstName = fName\n        Me.lastName = lName\n    End Sub\n\n\n    Public firstName As String\n    Public lastName As String\nEnd Class\n\n&#39; Collection of Person objects, which implements IEnumerable so that\n&#39; it can be used with ForEach syntax.\nPublic Class People\n    Implements IEnumerable\n\n    Private _people() As Person\n\n    Public Sub New(ByVal pArray() As Person)\n        _people = New Person(pArray.Length - 1) {}\n\n        Dim i As Integer\n        For i = 0 To pArray.Length - 1\n            _people(i) = pArray(i)\n        Next i\n    End Sub\n\n    &#39; Implementation of GetEnumerator.\n    Public Function GetEnumerator() As IEnumerator _\n      Implements IEnumerable.GetEnumerator\n\n        Return New PeopleEnum(_people)\n    End Function\n\nEnd Class\n\n&#39; When you implement IEnumerable, you must also implement IEnumerator.\nPublic Class PeopleEnum\n    Implements IEnumerator\n\n    Public _people() As Person\n\n    &#39; Enumerators are positioned before the first element\n    &#39; until the first MoveNext() call.\n    Dim position As Integer = -1\n\n    Public Sub New(ByVal list() As Person)\n        _people = list\n    End Sub\n\n    Public Function MoveNext() As Boolean Implements IEnumerator.MoveNext\n        position = position + 1\n        Return (position &lt; _people.Length)\n    End Function\n\n    Public Sub Reset() Implements IEnumerator.Reset\n        position = -1\n    End Sub\n\n    Public ReadOnly Property Current() As Object Implements IEnumerator.Current\n        Get\n            Try\n                Return _people(position)\n            Catch ex As IndexOutOfRangeException\n                Throw New InvalidOperationException()\n            End Try\n        End Get\n    End Property\nEnd Class\n\nClass App\n    Shared Sub Main()\n        Dim peopleArray() As Person = { _\n            New Person(&quot;John&quot;, &quot;Smith&quot;), _\n            New Person(&quot;Jim&quot;, &quot;Johnson&quot;), _\n            New Person(&quot;Sue&quot;, &quot;Rabon&quot;)}\n\n        Dim peopleList As New People(peopleArray)\n        Dim p As Person\n        For Each p In peopleList\n            Console.WriteLine(p.firstName + &quot; &quot; + p.lastName)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code produces output similar to the following:\n&#39; \n&#39; John Smith\n&#39; Jim Johnson\n&#39; Sue Rabon\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections_EnumeratorInterfaces#1\">using System;\nusing System.Collections;\n\n// Simple business object.\npublic class Person\n{\n    public Person(string fName, string lName)\n    {\n        this.firstName = fName;\n        this.lastName = lName;\n    }\n\n    public string firstName;\n    public string lastName;\n}\n\n// Collection of Person objects. This class\n// implements IEnumerable so that it can be used\n// with ForEach syntax.\npublic class People : IEnumerable\n{\n    private Person[] _people;\n    public People(Person[] pArray)\n    {\n        _people = new Person[pArray.Length];\n\n        for (int i = 0; i &lt; pArray.Length; i++)\n        {\n            _people[i] = pArray[i];\n        }\n    }\n\n// Implementation for the GetEnumerator method.\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n       return (IEnumerator) GetEnumerator();\n    }\n\n    public PeopleEnum GetEnumerator()\n    {\n        return new PeopleEnum(_people);\n    }\n}\n\n// When you implement IEnumerable, you must also implement IEnumerator.\npublic class PeopleEnum : IEnumerator\n{\n    public Person[] _people;\n\n    // Enumerators are positioned before the first element\n    // until the first MoveNext() call.\n    int position = -1;\n\n    public PeopleEnum(Person[] list)\n    {\n        _people = list;\n    }\n\n    public bool MoveNext()\n    {\n        position++;\n        return (position &lt; _people.Length);\n    }\n\n    public void Reset()\n    {\n        position = -1;\n    }\n\n    object IEnumerator.Current\n    {\n        get\n        {\n            return Current;\n        }\n    }\n\n    public Person Current\n    {\n        get\n        {\n            try\n            {\n                return _people[position];\n            }\n            catch (IndexOutOfRangeException)\n            {\n                throw new InvalidOperationException();\n            }\n        }\n    }\n}\n\nclass App\n{\n    static void Main()\n    {\n        Person[] peopleArray = new Person[3]\n        {\n            new Person(&quot;John&quot;, &quot;Smith&quot;),\n            new Person(&quot;Jim&quot;, &quot;Johnson&quot;),\n            new Person(&quot;Sue&quot;, &quot;Rabon&quot;),\n        };\n\n        People peopleList = new People(peopleArray);\n        foreach (Person p in peopleList)\n            Console.WriteLine(p.firstName + &quot; &quot; + p.lastName);\n\n    }\n}\n\n/* This code produces output similar to the following:\n *\n * John Smith\n * Jim Johnson\n * Sue Rabon\n *\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IEnumerable.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IEnumerable.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.IEnumerable\">\r\n<meta name=\"APIName\" content=\"System.Collections.IEnumerable.GetEnumerator\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e9f8f936-3268-d4a7-f0a5-d2b5ee3f97ce\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Exposes an enumerator, which supports a simple iteration over a non-generic collection.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.IEnumerable\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IEnumerable.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IEnumerable.yml","open_to_public_contributors":true,"api_name":["System.Collections.IEnumerable","System.Collections.IEnumerable.GetEnumerator"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.IEnumerable","System::Collections::IEnumerable","System.Collections.IEnumerable.GetEnumerator","System::Collections::IEnumerable::GetEnumerator"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e9f8f936-3268-d4a7-f0a5-d2b5ee3f97ce","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/IEnumerable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IEnumerable interface | Microsoft Docs","_op_ogTitle":"IEnumerable interface","description":"Exposes an enumerator, which supports a simple iteration over a non-generic collection.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.IEnumerable","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.ienumerable","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.ienumerable","fileRelativePath":"System.Collections.IEnumerable.html"},"themesRelativePathToOutputRoot":"_themes/"}