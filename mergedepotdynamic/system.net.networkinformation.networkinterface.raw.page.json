{"content":"    \r\n    <h1 id=\"System_Net_NetworkInformation_NetworkInterface\">\r\n      <span class=\"lang-csharp\">NetworkInterface</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides configuration and statistical information for a network interface.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class NetworkInterface</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">NetworkInterface</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class encapsulates data for network interfaces, also known as adapters, on the local computer. You do not create instances of this class; the <a class=\"xref\" href=\"system.net.networkinformation.networkinterface#System_Net_NetworkInformation_NetworkInterface_GetAllNetworkInterfaces_\" data-linktype=\"relative-path\">GetAllNetworkInterfaces</a> method returns an array that contains one instance of this class for each network interface on the local computer.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface__ctor\" data-linktype=\"self-bookmark\">NetworkInterface()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_Description\" data-linktype=\"self-bookmark\">Description</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the description of the interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the identifier of the network adapter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_IPv6LoopbackInterfaceIndex\" data-linktype=\"self-bookmark\">IPv6LoopbackInterfaceIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the index of the IPv6 loopback interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_IsReceiveOnly\" data-linktype=\"self-bookmark\">IsReceiveOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the network interface is set to only receive data packets.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_LoopbackInterfaceIndex\" data-linktype=\"self-bookmark\">LoopbackInterfaceIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the index of the IPv4 loopback interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the network adapter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_NetworkInterfaceType\" data-linktype=\"self-bookmark\">NetworkInterfaceType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the interface type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_OperationalStatus\" data-linktype=\"self-bookmark\">OperationalStatus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current operational state of the network connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_Speed\" data-linktype=\"self-bookmark\">Speed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the speed of the network interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_SupportsMulticast\" data-linktype=\"self-bookmark\">SupportsMulticast</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the network interface is enabled to receive multicast packets.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_GetAllNetworkInterfaces\" data-linktype=\"self-bookmark\">GetAllNetworkInterfaces()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns objects that describe the network interfaces on the local computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_GetIPProperties\" data-linktype=\"self-bookmark\">GetIPProperties()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an object that describes the configuration of this network interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_GetIPStatistics\" data-linktype=\"self-bookmark\">GetIPStatistics()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the IP statistics for this <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_GetIPv4Statistics\" data-linktype=\"self-bookmark\">GetIPv4Statistics()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the IPv4 statistics for this <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_GetIsNetworkAvailable\" data-linktype=\"self-bookmark\">GetIsNetworkAvailable()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether any network connection is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_GetPhysicalAddress\" data-linktype=\"self-bookmark\">GetPhysicalAddress()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the Media Access Control (MAC) or physical address for this adapter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_NetworkInterface_Supports_System_Net_NetworkInformation_NetworkInterfaceComponent_\" data-linktype=\"self-bookmark\">Supports(NetworkInterfaceComponent)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the interface supports the specified protocol.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface__ctor\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NetworkInterface()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected NetworkInterface ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor can be called only by classes that derive from the <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_Description\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_Description_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Description</div>        \r\n          </div>\r\n    \r\n            <p>Gets the description of the interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Description { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that describes this interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The description is human-readable text that typically describes the interface vendor, type (for example, Ethernet), brand, and model.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a summary for all interfaces on the local computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLNetInfoReport#16\">void ShowInterfaceSummary()\n{\n   array&lt;NetworkInterface^&gt;^interfaces = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum5 = interfaces-&gt;GetEnumerator();\n   while ( myEnum5-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum5-&gt;Current);\n      Console::WriteLine( &quot;Name: {0}&quot;, adapter-&gt;Name );\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      Console::WriteLine( &quot;  Interface type .......................... : {0}&quot;,\n         adapter-&gt;NetworkInterfaceType );\n      Console::WriteLine( &quot;  Operational status ...................... : {0}&quot;, adapter-&gt;OperationalStatus );\n      String^ versions = &quot;&quot;;\n\n      // Create a display string for the supported IP versions.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) )\n      {\n         versions = &quot;IPv4&quot;;\n      }\n\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv6 ) )\n      {\n         if ( versions-&gt;Length &gt; 0 )\n         {\n            versions = String::Concat( versions, &quot; &quot; );\n         }\n\n         versions = String::Concat( versions, &quot;IPv6&quot; );\n      }\n\n      Console::WriteLine( &quot;  IP version .............................. : {0}&quot;, versions );\n      Console::WriteLine();\n   }\n\n   Console::WriteLine();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLNetInfoReport#16\">        public static void ShowInterfaceSummary()\n        {\n            \n            NetworkInterface[] interfaces = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in interfaces)\n            {                \n                Console.WriteLine (&quot;Name: {0}&quot;, adapter.Name);\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType);\n                Console.WriteLine(&quot;  Operational status ...................... : {0}&quot;, \n                    adapter.OperationalStatus);\n                string versions =&quot;&quot;;\n\n                // Create a display string for the supported IP versions.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4))\n                {\n                     versions = &quot;IPv4&quot;;\n                 }\n                if (adapter.Supports(NetworkInterfaceComponent.IPv6))\n                {\n                    if (versions.Length &gt; 0)\n                    {\n                        versions += &quot; &quot;;\n                     }\n                    versions += &quot;IPv6&quot;;\n                }\n                Console.WriteLine(&quot;  IP version .............................. : {0}&quot;, versions);\n                Console.WriteLine();\n            }\n            Console.WriteLine();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_Id\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets the identifier of the network adapter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Id { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_IPv6LoopbackInterfaceIndex\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_IPv6LoopbackInterfaceIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPv6LoopbackInterfaceIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the index of the IPv6 loopback interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IPv6LoopbackInterfaceIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> The index for the IPv6 loopback interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A network interface may have different interface indexes for the IPv4 and IPv6 loopback interface. The P:System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex property only returns the IPv6 loopback interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_IsReceiveOnly\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_IsReceiveOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReceiveOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the network interface is set to only receive data packets.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsReceiveOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the interface only receives network traffic; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This property is not valid on computers running operating systems earlier than Windows XP.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a summary for all interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLNetInfo2#51\">         public static void DisplayTypeAndAddress()\n        {\n            IPGlobalProperties computerProperties = IPGlobalProperties.GetIPGlobalProperties();\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;,\n                    computerProperties.HostName, computerProperties.DomainName);\n            foreach (NetworkInterface adapter in nics)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType);\n                Console.WriteLine(&quot;  Physical Address ........................ : {0}&quot;, \n                           adapter.GetPhysicalAddress().ToString());\n                Console.WriteLine(&quot;  Is receive only.......................... : {0}&quot;, adapter.IsReceiveOnly);\n                Console.WriteLine(&quot;  Multicast................................ : {0}&quot;, adapter.SupportsMulticast);\n                Console.WriteLine();\n              }\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLNetInfo2#51\">    Public Shared Sub DisplayTypeAndAddress() \n        Dim computerProperties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;, computerProperties.HostName, computerProperties.DomainName)\n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType)\n            Console.WriteLine(&quot;  Physical Address ........................ : {0}&quot;, adapter.GetPhysicalAddress().ToString())\n            Console.WriteLine(&quot;  Is receive only.......................... : {0}&quot;, adapter.IsReceiveOnly)\n            Console.WriteLine(&quot;  Multicast................................ : {0}&quot;, adapter.SupportsMulticast)\n        Next adapter\n    \n    End Sub &#39;DisplayTypeAndAddress\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLNetInfo2#51\">void DisplayTypeAndAddress()\n{\n   IPGlobalProperties ^ computerProperties = IPGlobalProperties::GetIPGlobalProperties();\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   Console::WriteLine( &quot;Interface information for {0}.{1}     &quot;, computerProperties-&gt;HostName, computerProperties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum27 = nics-&gt;GetEnumerator();\n   while ( myEnum27-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum27-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      Console::WriteLine( &quot;  Interface type .......................... : {0}&quot;, \n         adapter-&gt;NetworkInterfaceType );\n      Console::WriteLine( &quot;  Physical Address ........................ : {0}&quot;, \n         adapter-&gt;GetPhysicalAddress() );\n      Console::WriteLine( &quot;  Is receive only.......................... : {0}&quot;, \n         adapter-&gt;IsReceiveOnly );\n      Console::WriteLine( &quot;  Multicast................................ : {0}&quot;, \n         adapter-&gt;SupportsMulticast );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_LoopbackInterfaceIndex\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_LoopbackInterfaceIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoopbackInterfaceIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the index of the IPv4 loopback interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LoopbackInterfaceIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that contains the index for the IPv4 loopback interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.networkinformationexception\" data-linktype=\"relative-path\">NetworkInformationException</a></div>\r\n                  </div>\r\n                  <p>This property is not valid on computers running only Ipv6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index of the loopback interface is usually 1, but you cannot rely on this. Use the LoopbackInterfaceIndex property to get the correct value.  </p>\n<p> A network interface may have different interface indexes for the IPv4 and IPv6 loopback interface. The LoopbackInterfaceIndex property only returns the IPv4 loopback interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_Name\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the network adapter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the adapter name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a summary for all interfaces on the local computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLNetInfoReport#16\">void ShowInterfaceSummary()\n{\n   array&lt;NetworkInterface^&gt;^interfaces = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum5 = interfaces-&gt;GetEnumerator();\n   while ( myEnum5-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum5-&gt;Current);\n      Console::WriteLine( &quot;Name: {0}&quot;, adapter-&gt;Name );\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      Console::WriteLine( &quot;  Interface type .......................... : {0}&quot;,\n         adapter-&gt;NetworkInterfaceType );\n      Console::WriteLine( &quot;  Operational status ...................... : {0}&quot;, adapter-&gt;OperationalStatus );\n      String^ versions = &quot;&quot;;\n\n      // Create a display string for the supported IP versions.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) )\n      {\n         versions = &quot;IPv4&quot;;\n      }\n\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv6 ) )\n      {\n         if ( versions-&gt;Length &gt; 0 )\n         {\n            versions = String::Concat( versions, &quot; &quot; );\n         }\n\n         versions = String::Concat( versions, &quot;IPv6&quot; );\n      }\n\n      Console::WriteLine( &quot;  IP version .............................. : {0}&quot;, versions );\n      Console::WriteLine();\n   }\n\n   Console::WriteLine();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLNetInfoReport#16\">        public static void ShowInterfaceSummary()\n        {\n            \n            NetworkInterface[] interfaces = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in interfaces)\n            {                \n                Console.WriteLine (&quot;Name: {0}&quot;, adapter.Name);\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType);\n                Console.WriteLine(&quot;  Operational status ...................... : {0}&quot;, \n                    adapter.OperationalStatus);\n                string versions =&quot;&quot;;\n\n                // Create a display string for the supported IP versions.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4))\n                {\n                     versions = &quot;IPv4&quot;;\n                 }\n                if (adapter.Supports(NetworkInterfaceComponent.IPv6))\n                {\n                    if (versions.Length &gt; 0)\n                    {\n                        versions += &quot; &quot;;\n                     }\n                    versions += &quot;IPv6&quot;;\n                }\n                Console.WriteLine(&quot;  IP version .............................. : {0}&quot;, versions);\n                Console.WriteLine();\n            }\n            Console.WriteLine();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_NetworkInterfaceType\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_NetworkInterfaceType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NetworkInterfaceType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the interface type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.NetworkInformation.NetworkInterfaceType NetworkInterfaceType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a> value that specifies the network interface type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The interface types are described in detail in the <a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a> enumeration documentation.  </p>\n<p> This property only returns a subset of the possible values defined in the <a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a> enumeration. The possible values include the following:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays type information for all interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLNetInfo2#51\">         public static void DisplayTypeAndAddress()\n        {\n            IPGlobalProperties computerProperties = IPGlobalProperties.GetIPGlobalProperties();\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;,\n                    computerProperties.HostName, computerProperties.DomainName);\n            foreach (NetworkInterface adapter in nics)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType);\n                Console.WriteLine(&quot;  Physical Address ........................ : {0}&quot;, \n                           adapter.GetPhysicalAddress().ToString());\n                Console.WriteLine(&quot;  Is receive only.......................... : {0}&quot;, adapter.IsReceiveOnly);\n                Console.WriteLine(&quot;  Multicast................................ : {0}&quot;, adapter.SupportsMulticast);\n                Console.WriteLine();\n              }\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLNetInfo2#51\">    Public Shared Sub DisplayTypeAndAddress() \n        Dim computerProperties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;, computerProperties.HostName, computerProperties.DomainName)\n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType)\n            Console.WriteLine(&quot;  Physical Address ........................ : {0}&quot;, adapter.GetPhysicalAddress().ToString())\n            Console.WriteLine(&quot;  Is receive only.......................... : {0}&quot;, adapter.IsReceiveOnly)\n            Console.WriteLine(&quot;  Multicast................................ : {0}&quot;, adapter.SupportsMulticast)\n        Next adapter\n    \n    End Sub &#39;DisplayTypeAndAddress\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLNetInfo2#51\">void DisplayTypeAndAddress()\n{\n   IPGlobalProperties ^ computerProperties = IPGlobalProperties::GetIPGlobalProperties();\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   Console::WriteLine( &quot;Interface information for {0}.{1}     &quot;, computerProperties-&gt;HostName, computerProperties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum27 = nics-&gt;GetEnumerator();\n   while ( myEnum27-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum27-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      Console::WriteLine( &quot;  Interface type .......................... : {0}&quot;, \n         adapter-&gt;NetworkInterfaceType );\n      Console::WriteLine( &quot;  Physical Address ........................ : {0}&quot;, \n         adapter-&gt;GetPhysicalAddress() );\n      Console::WriteLine( &quot;  Is receive only.......................... : {0}&quot;, \n         adapter-&gt;IsReceiveOnly );\n      Console::WriteLine( &quot;  Multicast................................ : {0}&quot;, \n         adapter-&gt;SupportsMulticast );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_OperationalStatus\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_OperationalStatus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OperationalStatus</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current operational state of the network connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.NetworkInformation.OperationalStatus OperationalStatus { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.operationalstatus\" data-linktype=\"relative-path\">OperationalStatus</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.networkinformation.operationalstatus\" data-linktype=\"relative-path\">OperationalStatus</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The operational status values are described in detail in the <a class=\"xref\" href=\"system.net.networkinformation.operationalstatus\" data-linktype=\"relative-path\">OperationalStatus</a> enumeration documentation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a summary for all interfaces on the local computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLNetInfoReport#16\">void ShowInterfaceSummary()\n{\n   array&lt;NetworkInterface^&gt;^interfaces = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum5 = interfaces-&gt;GetEnumerator();\n   while ( myEnum5-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum5-&gt;Current);\n      Console::WriteLine( &quot;Name: {0}&quot;, adapter-&gt;Name );\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      Console::WriteLine( &quot;  Interface type .......................... : {0}&quot;,\n         adapter-&gt;NetworkInterfaceType );\n      Console::WriteLine( &quot;  Operational status ...................... : {0}&quot;, adapter-&gt;OperationalStatus );\n      String^ versions = &quot;&quot;;\n\n      // Create a display string for the supported IP versions.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) )\n      {\n         versions = &quot;IPv4&quot;;\n      }\n\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv6 ) )\n      {\n         if ( versions-&gt;Length &gt; 0 )\n         {\n            versions = String::Concat( versions, &quot; &quot; );\n         }\n\n         versions = String::Concat( versions, &quot;IPv6&quot; );\n      }\n\n      Console::WriteLine( &quot;  IP version .............................. : {0}&quot;, versions );\n      Console::WriteLine();\n   }\n\n   Console::WriteLine();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLNetInfoReport#16\">        public static void ShowInterfaceSummary()\n        {\n            \n            NetworkInterface[] interfaces = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in interfaces)\n            {                \n                Console.WriteLine (&quot;Name: {0}&quot;, adapter.Name);\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType);\n                Console.WriteLine(&quot;  Operational status ...................... : {0}&quot;, \n                    adapter.OperationalStatus);\n                string versions =&quot;&quot;;\n\n                // Create a display string for the supported IP versions.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4))\n                {\n                     versions = &quot;IPv4&quot;;\n                 }\n                if (adapter.Supports(NetworkInterfaceComponent.IPv6))\n                {\n                    if (versions.Length &gt; 0)\n                    {\n                        versions += &quot; &quot;;\n                     }\n                    versions += &quot;IPv6&quot;;\n                }\n                Console.WriteLine(&quot;  IP version .............................. : {0}&quot;, versions);\n                Console.WriteLine();\n            }\n            Console.WriteLine();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_Speed\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_Speed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Speed</div>        \r\n          </div>\r\n    \r\n            <p>Gets the speed of the network interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual long Speed { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value that specifies the speed in bits per second.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property is reported by the network interface. It is not computed dynamically.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the speed of interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#13\">        public static void ShowInterfaceSpeedAndQueue()\n        {\n            NetworkInterface[] adapters = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                IPv4InterfaceStatistics stats = adapter.GetIPv4Statistics();\n                 Console.WriteLine(adapter.Description);\n                Console.WriteLine(&quot;     Speed .................................: {0}&quot;, \n                    adapter.Speed);\n                Console.WriteLine(&quot;     Output queue length....................: {0}&quot;, \n                    stats.OutputQueueLength);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#13\">    Public Shared Sub ShowInterfaceSpeedAndQueue() \n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim stats As IPv4InterfaceStatistics = adapter.GetIPv4Statistics()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(&quot;     Speed .................................: {0}&quot;, adapter.Speed)\n            Console.WriteLine(&quot;     Output queue length....................: {0}&quot;, stats.OutputQueueLength)\n        Next adapter\n    \n    End Sub &#39;ShowInterfaceSpeedAndQueue\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#13\">void ShowInterfaceSpeedAndQueue()\n{\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum9 = adapters-&gt;GetEnumerator();\n   while ( myEnum9-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum9-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      IPv4InterfaceStatistics ^ stats = adapter-&gt;GetIPv4Statistics();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( &quot;     Speed .................................: {0}&quot;, \n         adapter-&gt;Speed );\n      Console::WriteLine( &quot;     Output queue length....................: {0}&quot;, \n         stats-&gt;OutputQueueLength );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_SupportsMulticast\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_SupportsMulticast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SupportsMulticast</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the network interface is enabled to receive multicast packets.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool SupportsMulticast { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the interface receives multicast packets; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This property is not valid on computers running operating systems earlier than Windows XP.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Multicasting is the act of sending a data packet to multiple destinations simultaneously.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a summary for all interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLNetInfo2#51\">         public static void DisplayTypeAndAddress()\n        {\n            IPGlobalProperties computerProperties = IPGlobalProperties.GetIPGlobalProperties();\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;,\n                    computerProperties.HostName, computerProperties.DomainName);\n            foreach (NetworkInterface adapter in nics)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType);\n                Console.WriteLine(&quot;  Physical Address ........................ : {0}&quot;, \n                           adapter.GetPhysicalAddress().ToString());\n                Console.WriteLine(&quot;  Is receive only.......................... : {0}&quot;, adapter.IsReceiveOnly);\n                Console.WriteLine(&quot;  Multicast................................ : {0}&quot;, adapter.SupportsMulticast);\n                Console.WriteLine();\n              }\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLNetInfo2#51\">    Public Shared Sub DisplayTypeAndAddress() \n        Dim computerProperties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;, computerProperties.HostName, computerProperties.DomainName)\n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType)\n            Console.WriteLine(&quot;  Physical Address ........................ : {0}&quot;, adapter.GetPhysicalAddress().ToString())\n            Console.WriteLine(&quot;  Is receive only.......................... : {0}&quot;, adapter.IsReceiveOnly)\n            Console.WriteLine(&quot;  Multicast................................ : {0}&quot;, adapter.SupportsMulticast)\n        Next adapter\n    \n    End Sub &#39;DisplayTypeAndAddress\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLNetInfo2#51\">void DisplayTypeAndAddress()\n{\n   IPGlobalProperties ^ computerProperties = IPGlobalProperties::GetIPGlobalProperties();\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   Console::WriteLine( &quot;Interface information for {0}.{1}     &quot;, computerProperties-&gt;HostName, computerProperties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum27 = nics-&gt;GetEnumerator();\n   while ( myEnum27-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum27-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      Console::WriteLine( &quot;  Interface type .......................... : {0}&quot;, \n         adapter-&gt;NetworkInterfaceType );\n      Console::WriteLine( &quot;  Physical Address ........................ : {0}&quot;, \n         adapter-&gt;GetPhysicalAddress() );\n      Console::WriteLine( &quot;  Is receive only.......................... : {0}&quot;, \n         adapter-&gt;IsReceiveOnly );\n      Console::WriteLine( &quot;  Multicast................................ : {0}&quot;, \n         adapter-&gt;SupportsMulticast );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_GetAllNetworkInterfaces\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_GetAllNetworkInterfaces_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAllNetworkInterfaces()</div>        \r\n          </div>\r\n    \r\n            <p>Returns objects that describe the network interfaces on the local computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.NetworkInformation.NetworkInterface[] GetAllNetworkInterfaces ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a>[]</div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> array that contains objects that describe the available network interfaces, or an empty array if no interfaces are detected.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.networkinformationexception\" data-linktype=\"relative-path\">NetworkInformationException</a></div>\r\n                  </div>\r\n                  <p>A Windows system function call failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The network interfaces on a computer provide network connectivity. Network interfaces are also known as network adapters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays Domain Name Service (DNS) configuration information for the local computer&#39;s network adapters.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLNetInfo2#41\">        public static void DisplayDnsConfiguration()\n        {\n            NetworkInterface[] adapters = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(&quot;  DNS suffix .............................. : {0}&quot;,\n                    properties.DnsSuffix);\n                Console.WriteLine(&quot;  DNS enabled ............................. : {0}&quot;, \n                    properties.IsDnsEnabled);\n                Console.WriteLine(&quot;  Dynamically configured DNS .............. : {0}&quot;, \n                    properties.IsDynamicDnsEnabled);\n            }\n            Console.WriteLine();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLNetInfo2#41\">    Public Shared Sub DisplayDnsConfiguration() \n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(&quot;  DNS suffix................................. :{0}&quot;, properties.DnsSuffix)\n            Console.WriteLine(&quot;  DNS enabled ............................. : {0}&quot;, properties.IsDnsEnabled)\n            Console.WriteLine(&quot;  Dynamically configured DNS .............. : {0}&quot;, properties.IsDynamicDnsEnabled)\n        Next adapter\n    \n    End Sub &#39;DisplayDnsConfiguration\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLNetInfo2#41\">void DisplayDnsConfiguration()\n{\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum10 = adapters-&gt;GetEnumerator();\n   while ( myEnum10-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum10-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( &quot;  DNS suffix................................. :{0}&quot;, \n         properties-&gt;DnsSuffix );\n      Console::WriteLine( &quot;  DNS enabled ............................. : {0}&quot;, \n         properties-&gt;IsDnsEnabled );\n      Console::WriteLine( &quot;  Dynamically configured DNS .............. : {0}&quot;, \n         properties-&gt;IsDynamicDnsEnabled );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_GetIPProperties\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_GetIPProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIPProperties()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an object that describes the configuration of this network interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.NetworkInformation.IPInterfaceProperties GetIPProperties ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties\" data-linktype=\"relative-path\">IPInterfaceProperties</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties\" data-linktype=\"relative-path\">IPInterfaceProperties</a> object that describes this network interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that the information in the object returned by this method reflects the interfaces as of the time the array is created. This information is not updated dynamically.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays information for the local computer&#39;s network adapters that support IPv4.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_GetIPStatistics\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_GetIPStatistics_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIPStatistics()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the IP statistics for this <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.NetworkInformation.IPInterfaceStatistics GetIPStatistics ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipinterfacestatistics\" data-linktype=\"relative-path\">IPInterfaceStatistics</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.net.networkinformation.ipinterfacestatistics\" data-linktype=\"relative-path\">IPInterfaceStatistics</a>.  </p>\n<p> The IP statistics.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_GetIPv4Statistics\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_GetIPv4Statistics_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIPv4Statistics()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the IPv4 statistics for this <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.NetworkInformation.IPv4InterfaceStatistics GetIPv4Statistics ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipv4interfacestatistics\" data-linktype=\"relative-path\">IPv4InterfaceStatistics</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfacestatistics\" data-linktype=\"relative-path\">IPv4InterfaceStatistics</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_GetIsNetworkAvailable\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_GetIsNetworkAvailable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIsNetworkAvailable()</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether any network connection is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool GetIsNetworkAvailable ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a network connection is available; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A network connection is considered to be available if any network interface is marked &quot;up&quot; and is not a loopback or tunnel interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_GetPhysicalAddress\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_GetPhysicalAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPhysicalAddress()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the Media Access Control (MAC) or physical address for this adapter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.NetworkInformation.PhysicalAddress GetPhysicalAddress ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> object that contains the physical address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The object returned by this method contains an address that is appropriate to the media used to transport data at the data link layer. For example, on an Ethernet network, this method returns the Ethernet hardware address.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the physical addresses of all interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLNetInfo2#51\">         public static void DisplayTypeAndAddress()\n        {\n            IPGlobalProperties computerProperties = IPGlobalProperties.GetIPGlobalProperties();\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;,\n                    computerProperties.HostName, computerProperties.DomainName);\n            foreach (NetworkInterface adapter in nics)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType);\n                Console.WriteLine(&quot;  Physical Address ........................ : {0}&quot;, \n                           adapter.GetPhysicalAddress().ToString());\n                Console.WriteLine(&quot;  Is receive only.......................... : {0}&quot;, adapter.IsReceiveOnly);\n                Console.WriteLine(&quot;  Multicast................................ : {0}&quot;, adapter.SupportsMulticast);\n                Console.WriteLine();\n              }\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLNetInfo2#51\">    Public Shared Sub DisplayTypeAndAddress() \n        Dim computerProperties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;, computerProperties.HostName, computerProperties.DomainName)\n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType)\n            Console.WriteLine(&quot;  Physical Address ........................ : {0}&quot;, adapter.GetPhysicalAddress().ToString())\n            Console.WriteLine(&quot;  Is receive only.......................... : {0}&quot;, adapter.IsReceiveOnly)\n            Console.WriteLine(&quot;  Multicast................................ : {0}&quot;, adapter.SupportsMulticast)\n        Next adapter\n    \n    End Sub &#39;DisplayTypeAndAddress\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLNetInfo2#51\">void DisplayTypeAndAddress()\n{\n   IPGlobalProperties ^ computerProperties = IPGlobalProperties::GetIPGlobalProperties();\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   Console::WriteLine( &quot;Interface information for {0}.{1}     &quot;, computerProperties-&gt;HostName, computerProperties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum27 = nics-&gt;GetEnumerator();\n   while ( myEnum27-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum27-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      Console::WriteLine( &quot;  Interface type .......................... : {0}&quot;, \n         adapter-&gt;NetworkInterfaceType );\n      Console::WriteLine( &quot;  Physical Address ........................ : {0}&quot;, \n         adapter-&gt;GetPhysicalAddress() );\n      Console::WriteLine( &quot;  Is receive only.......................... : {0}&quot;, \n         adapter-&gt;IsReceiveOnly );\n      Console::WriteLine( &quot;  Multicast................................ : {0}&quot;, \n         adapter-&gt;SupportsMulticast );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_NetworkInterface_Supports_System_Net_NetworkInformation_NetworkInterfaceComponent_\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_NetworkInterface_Supports_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Supports(NetworkInterfaceComponent)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the interface supports the specified protocol.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Supports (System.Net.NetworkInformation.NetworkInterfaceComponent networkInterfaceComponent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>networkInterfaceComponent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.networkinterfacecomponent\" data-linktype=\"relative-path\">NetworkInterfaceComponent</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.net.networkinformation.networkinterfacecomponent\" data-linktype=\"relative-path\">NetworkInterfaceComponent</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified protocol is supported; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays statistics for IPV4 interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.NetworkInterface.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.Description\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.GetIPProperties\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.GetIPStatistics\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.GetIPv4Statistics\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.Id\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.Name\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.OperationalStatus\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.Speed\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.Supports\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.NetworkInterface.SupportsMulticast\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-10 02:17 AM\">\r\n<meta name=\"document_id\" content=\"91c71bf5-48aa-a18c-9370-b89a18fb30c6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net.NetworkInformation\\NetworkInterface.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides configuration and statistical information for a network interface.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.NetworkInformation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.NetworkInterface\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.NetworkInterface.yml","open_to_public_contributors":true,"api_name":["System.Net.NetworkInformation.NetworkInterface","System.Net.NetworkInformation.NetworkInterface..ctor","System.Net.NetworkInformation.NetworkInterface.Description","System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces","System.Net.NetworkInformation.NetworkInterface.GetIPProperties","System.Net.NetworkInformation.NetworkInterface.GetIPStatistics","System.Net.NetworkInformation.NetworkInterface.GetIPv4Statistics","System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable","System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress","System.Net.NetworkInformation.NetworkInterface.Id","System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex","System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly","System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex","System.Net.NetworkInformation.NetworkInterface.Name","System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType","System.Net.NetworkInformation.NetworkInterface.OperationalStatus","System.Net.NetworkInformation.NetworkInterface.Speed","System.Net.NetworkInformation.NetworkInterface.Supports","System.Net.NetworkInformation.NetworkInterface.SupportsMulticast"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.NetworkInterface","System::Net::NetworkInformation::NetworkInterface","System.Net.NetworkInformation.NetworkInterface.#ctor","System::Net::NetworkInformation::NetworkInterface::#ctor","System.Net.NetworkInformation.NetworkInterface.Description","System::Net::NetworkInformation::NetworkInterface::Description","System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces","System::Net::NetworkInformation::NetworkInterface::GetAllNetworkInterfaces","System.Net.NetworkInformation.NetworkInterface.GetIPProperties","System::Net::NetworkInformation::NetworkInterface::GetIPProperties","System.Net.NetworkInformation.NetworkInterface.GetIPStatistics","System::Net::NetworkInformation::NetworkInterface::GetIPStatistics","System.Net.NetworkInformation.NetworkInterface.GetIPv4Statistics","System::Net::NetworkInformation::NetworkInterface::GetIPv4Statistics","System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable","System::Net::NetworkInformation::NetworkInterface::GetIsNetworkAvailable","System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress","System::Net::NetworkInformation::NetworkInterface::GetPhysicalAddress","System.Net.NetworkInformation.NetworkInterface.Id","System::Net::NetworkInformation::NetworkInterface::Id","System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex","System::Net::NetworkInformation::NetworkInterface::IPv6LoopbackInterfaceIndex","System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly","System::Net::NetworkInformation::NetworkInterface::IsReceiveOnly","System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex","System::Net::NetworkInformation::NetworkInterface::LoopbackInterfaceIndex","System.Net.NetworkInformation.NetworkInterface.Name","System::Net::NetworkInformation::NetworkInterface::Name","System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType","System::Net::NetworkInformation::NetworkInterface::NetworkInterfaceType","System.Net.NetworkInformation.NetworkInterface.OperationalStatus","System::Net::NetworkInformation::NetworkInterface::OperationalStatus","System.Net.NetworkInformation.NetworkInterface.Speed","System::Net::NetworkInformation::NetworkInterface::Speed","System.Net.NetworkInformation.NetworkInterface.Supports","System::Net::NetworkInformation::NetworkInterface::Supports","System.Net.NetworkInformation.NetworkInterface.SupportsMulticast","System::Net::NetworkInformation::NetworkInterface::SupportsMulticast"],"dev_langs":["csharp"],"updated_at":"2017-03-10 02:17 AM","document_id":"91c71bf5-48aa-a18c-9370-b89a18fb30c6","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net.NetworkInformation\\NetworkInterface.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.NetworkInformation/NetworkInterface.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"NetworkInterface class | Microsoft Docs","_op_ogTitle":"NetworkInterface class","description":"Provides configuration and statistical information for a network interface.\n","toc_asset_id":"_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.NetworkInterface","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.networkinterface","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.networkinterface","fileRelativePath":"System.Net.NetworkInformation.NetworkInterface.html"},"themesRelativePathToOutputRoot":"_themes/"}