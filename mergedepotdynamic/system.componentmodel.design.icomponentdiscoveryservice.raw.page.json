{"content":"    \r\n    <h1 id=\"System_ComponentModel_Design_IComponentDiscoveryService\">\r\n      <span class=\"lang-csharp\">IComponentDiscoveryService</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Enables enumeration of components at design time.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IComponentDiscoveryService</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The default implementation of the IComponentDiscoveryService interface enables design-time enumeration of components in the Toolbox.  </p>\n<p> You could provide a custom implementation that enumerates across other types available at design time. For example, your implementation could enumerate the components that are present in a particular designer.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_Design_IComponentDiscoveryService_GetComponentTypes_System_ComponentModel_Design_IDesignerHost_System_Type_\" data-linktype=\"self-bookmark\">GetComponentTypes(IDesignerHost,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of available component types.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_Design_IComponentDiscoveryService_GetComponentTypes_System_ComponentModel_Design_IDesignerHost_System_Type_\">\r\n    \r\n            <a id=\"System_ComponentModel_Design_IComponentDiscoveryService_GetComponentTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetComponentTypes(IDesignerHost,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of available component types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.ICollection GetComponentTypes (System.ComponentModel.Design.IDesignerHost designerHost, Type baseType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>designerHost</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The designer host providing design-time services. Can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>baseType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base type specifying the components to retrieve. Can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>The list of available component types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetComponentTypes method retrieves the list of available component types, which are types implementing the <a class=\"xref\" href=\"system.componentmodel.icomponent\" data-linktype=\"relative-path\">IComponent</a> interface. If the <code>baseType</code> parameter is <code>null</code>, all components are retrieved; otherwise, only component types derived from <code>baseType</code> are returned.  </p>\n<p> When you pass in a value for the <code>designerHost</code> parameter, type resolution is scoped to <code>designerHost</code>. This means that if there is a <a class=\"xref\" href=\"system.drawing.design.toolboxitem\" data-linktype=\"relative-path\">ToolboxItem</a> whose type is on disk, and not in the global assembly cache, its type will fail to load through <code>designerHost</code>.  </p>\n<p> If you pass in <code>null</code> for <code>designerHost</code>, it returns all types that can be queried from the global assembly cache or the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the GetComponentTypes method to find all the types that derive from the <a class=\"xref\" href=\"system.windows.forms.scrollablecontrol\" data-linktype=\"relative-path\">ScrollableControl</a> type.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.Design.DesignerServices#13\">    &#39; This class defines the smart tags that appear on the control\n    &#39; that is being designed.\n\n    Friend Class DemoActionList\n        Inherits System.ComponentModel.Design.DesignerActionList\n        &#39; Cache a reference to the designer host.\n        Private host As IDesignerHost = Nothing\n\n        &#39; Cache a reference to the control.\n        Private relatedControl As DemoControl = Nothing\n\n        &#39; Cache a reference to the designer.\n        Private relatedDesigner As DemoControlDesigner = Nothing\n\n        &#39;The constructor associates the control \n        &#39;with the smart tag list.\n        Public Sub New(ByVal component As IComponent)\n            MyBase.New(component)\n            Me.relatedControl = component &#39;\n\n            Me.host = Me.Component.Site.GetService(GetType(IDesignerHost))\n\n            Dim dcd As IDesigner = host.GetDesigner(Me.Component)\n            Me.relatedDesigner = dcd\n\n        End Sub\n\n        &#39; This method creates and populates the \n        &#39; DesignerActionItemCollection which is used to \n        &#39; display smart tag items.\n        Public Overrides Function GetSortedActionItems() As DesignerActionItemCollection\n            Dim items As New DesignerActionItemCollection()\n\n            &#39; If the Timer component has not been created, show the\n            &#39; &quot;Create Timer&quot; DesignerAction item.\n            &#39;\n            &#39; If the Timer component exists, show the timer-related\n            &#39; options.\n            If Me.relatedDesigner.createdTimer Is Nothing Then\n                items.Add(New DesignerActionMethodItem(Me, &quot;CreateTimer&quot;, &quot;Create Timer&quot;, True))\n            Else\n                items.Add(New DesignerActionMethodItem(Me, &quot;ShowEventHandlerCode&quot;, &quot;Show Event Handler Code&quot;, True))\n\n                items.Add(New DesignerActionMethodItem(Me, &quot;RemoveTimer&quot;, &quot;Remove Timer&quot;, True))\n            End If\n\n            items.Add(New DesignerActionMethodItem(Me, &quot;GetExtenderProviders&quot;, &quot;Get Extender Providers&quot;, True))\n\n            items.Add(New DesignerActionMethodItem(Me, &quot;GetDemoControlReferences&quot;, &quot;Get DemoControl References&quot;, True))\n\n            items.Add(New DesignerActionMethodItem(Me, &quot;GetPathOfAssembly&quot;, &quot;Get Path of Executing Assembly&quot;, True))\n\n            items.Add(New DesignerActionMethodItem(Me, &quot;GetComponentTypes&quot;, &quot;Get ScrollableControl Types&quot;, True))\n\n            items.Add(New DesignerActionMethodItem(Me, &quot;GetToolboxCategories&quot;, &quot;Get Toolbox Categories&quot;, True))\n\n            items.Add(New DesignerActionMethodItem(Me, &quot;SetBackColor&quot;, &quot;Set Back Color&quot;, True))\n\n            Return items\n        End Function\n\n        &#39; This method creates a Timer component using the \n        &#39; IDesignerHost.CreateComponent method. It also \n        &#39; creates an event handler for the Timer component&#39;s\n        &#39; tick event.\n        Private Sub CreateTimer()\n            If (Me.host IsNot Nothing) Then\n                If Me.relatedDesigner.createdTimer Is Nothing Then\n                    &#39; Create and configure the Timer object.\n                    Me.relatedDesigner.createdTimer = Me.host.CreateComponent(GetType(Timer))\n\n                    Dim t As Timer = Me.relatedDesigner.createdTimer\n                    t.Interval = 1000\n                    t.Enabled = True\n\n                    Dim eventColl As EventDescriptorCollection = TypeDescriptor.GetEvents(t, New Attribute(-1) {})\n\n                    If (eventColl IsNot Nothing) Then\n                        Dim ed As EventDescriptor = eventColl(&quot;Tick&quot;)\n\n                        If (ed IsNot Nothing) Then\n                            Dim epd As PropertyDescriptor = Me.relatedDesigner.eventBindingService.GetEventProperty(ed)\n\n                            epd.SetValue(t, &quot;timer_Tick&quot;)\n                        End If\n                    End If\n\n                    Me.relatedDesigner.actionUiService.Refresh(Me.relatedControl)\n                End If\n            End If\n        End Sub\n\n        &#39; This method uses the IEventBindingService.ShowCode\n        &#39; method to start the Code Editor. It places the caret\n        &#39; in the timer_tick method created by the CreateTimer method.\n        Private Sub ShowEventHandlerCode()\n            Dim t As Timer = Me.relatedDesigner.createdTimer\n\n            If (t IsNot Nothing) Then\n                Dim eventColl As EventDescriptorCollection = TypeDescriptor.GetEvents(t, New Attribute(-1) {})\n                If (eventColl IsNot Nothing) Then\n                    Dim ed As EventDescriptor = eventColl(&quot;Tick&quot;)\n\n                    If (ed IsNot Nothing) Then\n                        Me.relatedDesigner.eventBindingService.ShowCode(t, ed)\n                    End If\n                End If\n            End If\n        End Sub\n\n        &#39; This method uses the IDesignerHost.DestroyComponent method\n        &#39; to remove the Timer component from the design environment.\n        Private Sub RemoveTimer()\n            If (Me.host IsNot Nothing) Then\n                If (Me.relatedDesigner.createdTimer IsNot Nothing) Then\n                    Me.host.DestroyComponent(Me.relatedDesigner.createdTimer)\n\n                    Me.relatedDesigner.createdTimer = Nothing\n\n                    Me.relatedDesigner.actionUiService.Refresh(Me.relatedControl)\n                End If\n            End If\n        End Sub\n\n        &#39; This method uses IExtenderListService.GetExtenderProviders\n        &#39; to enumerate all the extender providers and display them \n        &#39; in a MessageBox.\n        Private Sub GetExtenderProviders()\n            If (Me.relatedDesigner.listService IsNot Nothing) Then\n                Dim sb As New StringBuilder()\n\n                Dim providers As IExtenderProvider() = Me.relatedDesigner.listService.GetExtenderProviders()\n\n                Dim i As Integer\n                For i = 0 To providers.Length - 1\n                    Dim o As Object = providers(i)\n                    sb.Append(o.ToString())\n                    sb.Append(ControlChars.Cr + ControlChars.Lf)\n                Next i\n\n                MessageBox.Show(sb.ToString(), &quot;Extender Providers&quot;)\n            End If\n        End Sub\n\n        &#39; This method uses the IReferenceService.GetReferences method\n        &#39; to enumerate all the instances of DemoControl on the \n        &#39; design surface.\n        Private Sub GetDemoControlReferences()\n            If (Me.relatedDesigner.referenceService IsNot Nothing) Then\n                Dim sb As New StringBuilder()\n\n                Dim refs As Object() = Me.relatedDesigner.referenceService.GetReferences(GetType(DemoControl))\n\n                Dim i As Integer\n                For i = 0 To refs.Length - 1\n                    sb.Append(refs(i).ToString())\n                    sb.Append(ControlChars.Cr + ControlChars.Lf)\n                Next i\n\n                MessageBox.Show(sb.ToString(), &quot;DemoControl References&quot;)\n            End If\n        End Sub\n\n        &#39; This method uses the ITypeResolutionService.GetPathOfAssembly\n        &#39; method to display the path of the executing assembly.\n        Private Sub GetPathOfAssembly()\n            If (Me.relatedDesigner.typeResService IsNot Nothing) Then\n                Dim name As System.Reflection.AssemblyName = System.Reflection.Assembly.GetExecutingAssembly().GetName()\n\n                MessageBox.Show(Me.relatedDesigner.typeResService.GetPathOfAssembly(name), &quot;Path of executing assembly&quot;)\n            End If\n        End Sub\n\n\n        &#39; This method uses the IComponentDiscoveryService.GetComponentTypes \n        &#39; method to find all the types that derive from \n        &#39; ScrollableControl.\n        Private Sub GetComponentTypes()\n            If (Me.relatedDesigner.componentDiscoveryService IsNot Nothing) Then\n                Dim components As ICollection = Me.relatedDesigner.componentDiscoveryService.GetComponentTypes(host, GetType(ScrollableControl))\n\n                If (components IsNot Nothing) Then\n                    If components.Count &gt; 0 Then\n                        Dim sb As New StringBuilder()\n\n                        Dim e As IEnumerator = components.GetEnumerator()\n\n                        While e.MoveNext()\n                            sb.Append(e.Current.ToString())\n                            sb.Append(ControlChars.Cr + ControlChars.Lf)\n                        End While\n\n                        MessageBox.Show(sb.ToString(), &quot;Controls derived from ScrollableControl&quot;)\n                    End If\n                End If\n            End If\n        End Sub\n\n\n        &#39; This method uses the IToolboxService.CategoryNames\n        &#39; method to enumerate all the categories that appear\n        &#39; in the Toolbox.\n        Private Sub GetToolboxCategories()\n            If (Me.relatedDesigner.toolboxService IsNot Nothing) Then\n                Dim sb As New StringBuilder()\n\n                Dim names As CategoryNameCollection = Me.relatedDesigner.toolboxService.CategoryNames\n\n                Dim name As String\n                For Each name In names\n                    sb.Append(name.ToString())\n                    sb.Append(ControlChars.Cr + ControlChars.Lf)\n                Next name\n\n                MessageBox.Show(sb.ToString(), &quot;Toolbox Categories&quot;)\n            End If\n        End Sub\n\n\n        &#39; This method sets the shadowed BackColor property on the \n        &#39; designer. This is the value that is serialized by the \n        &#39; design environment.\n        Private Sub SetBackColor()\n            Dim d As New ColorDialog()\n            If d.ShowDialog() = DialogResult.OK Then\n                Me.relatedDesigner.BackColor = d.Color\n            End If\n        End Sub\n    End Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.Design.DesignerServices#13\">    // This class defines the smart tags that appear on the control\n    // that is being designed.\n    internal class DemoActionList :\n          System.ComponentModel.Design.DesignerActionList\n    {\n        // Cache a reference to the designer host.\n        private IDesignerHost host = null;\n\n        // Cache a reference to the control.\n        private DemoControl relatedControl = null;\n\n        // Cache a reference to the designer.\n        private DemoControlDesigner relatedDesigner = null;\n\n        //The constructor associates the control \n        //with the smart tag list.\n        public DemoActionList(IComponent component)\n            : base(component)\n        {\n            this.relatedControl = component as DemoControl;\n\n            this.host =\n                this.Component.Site.GetService(typeof(IDesignerHost))\n                as IDesignerHost;\n\n            IDesigner dcd = host.GetDesigner(this.Component);\n            this.relatedDesigner = dcd as DemoControlDesigner;\n        }\n\n        // This method creates and populates the \n        // DesignerActionItemCollection which is used to \n        // display smart tag items.\n        public override DesignerActionItemCollection GetSortedActionItems()\n        {\n            DesignerActionItemCollection items =\n                new DesignerActionItemCollection();\n\n            // If the Timer component has not been created, show the\n            // &quot;Create Timer&quot; DesignerAction item.\n            //\n            // If the Timer component exists, show the timer-related\n            // options.\n\n            if (this.relatedDesigner.createdTimer == null)\n            {\n                items.Add(new DesignerActionMethodItem(\n                    this,\n                    &quot;CreateTimer&quot;,\n                    &quot;Create Timer&quot;,\n                    true));\n            }\n            else\n            {   \n                items.Add(new DesignerActionMethodItem(\n                    this,\n                    &quot;ShowEventHandlerCode&quot;,\n                    &quot;Show Event Handler Code&quot;,\n                    true));\n\n                items.Add(new DesignerActionMethodItem(\n                    this,\n                    &quot;RemoveTimer&quot;,\n                    &quot;Remove Timer&quot;,\n                    true));\n            }\n\n            items.Add(new DesignerActionMethodItem(\n               this,\n               &quot;GetExtenderProviders&quot;,\n               &quot;Get Extender Providers&quot;,\n               true));\n\n            items.Add(new DesignerActionMethodItem(\n              this,\n              &quot;GetDemoControlReferences&quot;,\n              &quot;Get DemoControl References&quot;,\n              true));\n\n            items.Add(new DesignerActionMethodItem(\n              this,\n              &quot;GetPathOfAssembly&quot;,\n              &quot;Get Path of Executing Assembly&quot;,\n              true));\n\n            items.Add(new DesignerActionMethodItem(\n              this,\n              &quot;GetComponentTypes&quot;,\n              &quot;Get ScrollableControl Types&quot;,\n              true));\n\n            items.Add(new DesignerActionMethodItem(\n                this,\n                &quot;GetToolboxCategories&quot;,\n                &quot;Get Toolbox Categories&quot;,\n                true));\n\n            items.Add(new DesignerActionMethodItem(\n                this,\n                &quot;SetBackColor&quot;,\n                &quot;Set Back Color&quot;,\n                true));\n\n            return items;\n        }\n\n        // This method creates a Timer component using the \n        // IDesignerHost.CreateComponent method. It also \n        // creates an event handler for the Timer component&#39;s\n        // tick event.\n        private void CreateTimer()\n        {\n            if (this.host != null)\n            {\n                if (this.relatedDesigner.createdTimer == null)\n                {\n                    // Create and configure the Timer object.\n                    this.relatedDesigner.createdTimer =\n                        this.host.CreateComponent(typeof(Timer)) as Timer;\n                    Timer t = this.relatedDesigner.createdTimer;\n                    t.Interval = 1000;\n                    t.Enabled = true;\n\n                    EventDescriptorCollection eventColl =\n                        TypeDescriptor.GetEvents(t, new Attribute[0]);\n\n                    if (eventColl != null)\n                    {\n                        EventDescriptor ed =\n                            eventColl[&quot;Tick&quot;] as EventDescriptor;\n                        if (ed != null)\n                        {\n                            PropertyDescriptor epd =\n                                this.relatedDesigner.eventBindingService.GetEventProperty(ed);\n\n                            epd.SetValue(t, &quot;timer_Tick&quot;);\n                        }\n                    }\n\n\t\t\t\t\tthis.relatedDesigner.actionUiService.Refresh(this.relatedControl);\n                }\n            }\n        }\n\n        // This method uses the IEventBindingService.ShowCode\n        // method to start the Code Editor. It places the caret\n        // in the timer_tick method created by the CreateTimer method.\n        private void ShowEventHandlerCode()\n        {\n            Timer t = this.relatedDesigner.createdTimer;\n\n            if (t != null)\n            {\n                EventDescriptorCollection eventColl =\n                    TypeDescriptor.GetEvents(t, new Attribute[0]);\n                if (eventColl != null)\n                {\n                    EventDescriptor ed =\n                        eventColl[&quot;Tick&quot;] as EventDescriptor;\n                    if (ed != null)\n                    {\n                        this.relatedDesigner.eventBindingService.ShowCode(t, ed);\n                    }\n                }\n            }\n        }\n\n        // This method uses the IDesignerHost.DestroyComponent method\n        // to remove the Timer component from the design environment.\n        private void RemoveTimer()\n        {\n            if (this.host != null)\n            {\n                if (this.relatedDesigner.createdTimer != null)\n                {\n                    this.host.DestroyComponent(\n                        this.relatedDesigner.createdTimer);\n\n                    this.relatedDesigner.createdTimer = null;\n\n\t\t\t\t\tthis.relatedDesigner.actionUiService.Refresh(\n                        this.relatedControl);\n                }\n            }\n        }\n\n        // This method uses IExtenderListService.GetExtenderProviders\n        // to enumerate all the extender providers and display them \n        // in a MessageBox.\n        private void GetExtenderProviders()\n        {\n            if (this.relatedDesigner.listService != null)\n            {\n                StringBuilder sb = new StringBuilder();\n\n                IExtenderProvider[] providers =\n                    this.relatedDesigner.listService.GetExtenderProviders();\n\n                for (int i = 0; i &lt; providers.Length; i++)\n                {\n                    sb.Append(providers[i].ToString());\n                    sb.Append(&quot;\\r<br>&quot;);\n                }\n\n                MessageBox.Show(\n                    sb.ToString(), \n                    &quot;Extender Providers&quot;);\n            }\n        }\n\n        // This method uses the IReferenceService.GetReferences method\n        // to enumerate all the instances of DemoControl on the \n        // design surface.\n        private void GetDemoControlReferences()\n        {\n            if (this.relatedDesigner.referenceService != null)\n            {\n                StringBuilder sb = new StringBuilder();\n\n                object[] refs = this.relatedDesigner.referenceService.GetReferences(typeof(DemoControl));\n\n                for (int i = 0; i &lt; refs.Length; i++)\n                {\n                    sb.Append(refs[i].ToString());\n                    sb.Append(&quot;\\r<br>&quot;);\n                }\n\n                MessageBox.Show(\n                    sb.ToString(), \n                    &quot;DemoControl References&quot;);\n            }\n        }\n\n\n        // This method uses the ITypeResolutionService.GetPathOfAssembly\n        // method to display the path of the executing assembly.\n        private void GetPathOfAssembly()\n        {\n            if (this.relatedDesigner.typeResService != null)\n            {\n                System.Reflection.AssemblyName name =\n                    System.Reflection.Assembly.GetExecutingAssembly().GetName();\n\n                MessageBox.Show(\n                    this.relatedDesigner.typeResService.GetPathOfAssembly(name),\n                    &quot;Path of executing assembly&quot;);\n            }\n        }\n\n        // This method uses the IComponentDiscoveryService.GetComponentTypes \n        // method to find all the types that derive from \n        // ScrollableControl.\n        private void GetComponentTypes()\n        {\n            if (this.relatedDesigner.componentDiscoveryService != null)\n            {\n                ICollection components = this.relatedDesigner.componentDiscoveryService.GetComponentTypes(host, typeof(ScrollableControl));\n\n                if (components != null)\n                {\n                    if (components.Count &gt; 0)\n                    {\n                        StringBuilder sb = new StringBuilder();\n\n                        IEnumerator e = components.GetEnumerator();\n\n                        while (e.MoveNext())\n                        {\n                            sb.Append(e.Current.ToString());\n                            sb.Append(&quot;\\r<br>&quot;);\n\n                        }\n\n                        MessageBox.Show(\n                            sb.ToString(), \n                            &quot;Controls derived from ScrollableControl&quot;);\n                    }\n                }\n            }\n        }\n\n        // This method uses the IToolboxService.CategoryNames\n        // method to enumerate all the categories that appear\n        // in the Toolbox.\n        private void GetToolboxCategories()\n        {\n            if (this.relatedDesigner.toolboxService != null)\n            {\n                StringBuilder sb = new StringBuilder();\n\n                CategoryNameCollection names = this.relatedDesigner.toolboxService.CategoryNames;\n\n                foreach (string name in names)\n                {\n                    sb.Append(name.ToString());\n                    sb.Append(&quot;\\r<br>&quot;);\n                }\n\n                MessageBox.Show(sb.ToString(), &quot;Toolbox Categories&quot;);\n            }\n        }\n\n        // This method sets the shadowed BackColor property on the \n        // designer. This is the value that is serialized by the \n        // design environment.\n        private void SetBackColor()\n        {\n            ColorDialog d = new ColorDialog();\n            if (d.ShowDialog() == DialogResult.OK)\n            {\n                this.relatedDesigner.BackColor = d.Color;\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.Design.IComponentDiscoveryService.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.Design.IComponentDiscoveryService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentDiscoveryService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e971ca6d-3378-93c5-35b5-cd533427c01f\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.ComponentModel.Design\\IComponentDiscoveryService.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Enables enumeration of components at design time.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.ComponentModel.Design/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.IComponentDiscoveryService\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.Design.IComponentDiscoveryService.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.Design.IComponentDiscoveryService.yml","open_to_public_contributors":true,"api_name":["System.ComponentModel.Design.IComponentDiscoveryService","System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.IComponentDiscoveryService","System::ComponentModel::Design::IComponentDiscoveryService","System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes","System::ComponentModel::Design::IComponentDiscoveryService::GetComponentTypes"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e971ca6d-3378-93c5-35b5-cd533427c01f","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.ComponentModel.Design\\IComponentDiscoveryService.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.ComponentModel.Design/IComponentDiscoveryService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IComponentDiscoveryService interface | Microsoft Docs","_op_ogTitle":"IComponentDiscoveryService interface","description":"Enables enumeration of components at design time.\n","toc_asset_id":"_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.IComponentDiscoveryService","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.design.icomponentdiscoveryservice","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.design.icomponentdiscoveryservice","fileRelativePath":"System.ComponentModel.Design.IComponentDiscoveryService.html"},"themesRelativePathToOutputRoot":"_themes/"}